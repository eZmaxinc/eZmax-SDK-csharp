/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using eZmaxApi.Client;
using eZmaxApi.Api;
using eZmaxApi.Model;

namespace eZmaxApi.Test
{
    /// <summary>
    ///  Class for testing ObjectEzsigntemplateApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ObjectEzsigntemplateApiTests
    {
        private ObjectEzsigntemplateApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ObjectEzsigntemplateApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ObjectEzsigntemplateApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ObjectEzsigntemplateApi
            //Assert.IsInstanceOf(typeof(ObjectEzsigntemplateApi), instance);
        }

        
        /// <summary>
        /// Test EzsigntemplateCopyV1
        /// </summary>
        [Test]
        public void EzsigntemplateCopyV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiEzsigntemplateID = null;
            //EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request = null;
            //var response = instance.EzsigntemplateCopyV1(pkiEzsigntemplateID, ezsigntemplateCopyV1Request);
            //Assert.IsInstanceOf(typeof(EzsigntemplateCopyV1Response), response, "response is EzsigntemplateCopyV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateCreateObjectV1
        /// </summary>
        [Test]
        public void EzsigntemplateCreateObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request = null;
            //var response = instance.EzsigntemplateCreateObjectV1(ezsigntemplateCreateObjectV1Request);
            //Assert.IsInstanceOf(typeof(EzsigntemplateCreateObjectV1Response), response, "response is EzsigntemplateCreateObjectV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateDeleteObjectV1
        /// </summary>
        [Test]
        public void EzsigntemplateDeleteObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiEzsigntemplateID = null;
            //var response = instance.EzsigntemplateDeleteObjectV1(pkiEzsigntemplateID);
            //Assert.IsInstanceOf(typeof(EzsigntemplateDeleteObjectV1Response), response, "response is EzsigntemplateDeleteObjectV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateEditObjectV1
        /// </summary>
        [Test]
        public void EzsigntemplateEditObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiEzsigntemplateID = null;
            //EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request = null;
            //var response = instance.EzsigntemplateEditObjectV1(pkiEzsigntemplateID, ezsigntemplateEditObjectV1Request);
            //Assert.IsInstanceOf(typeof(EzsigntemplateEditObjectV1Response), response, "response is EzsigntemplateEditObjectV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateGetAutocompleteV1
        /// </summary>
        [Test]
        public void EzsigntemplateGetAutocompleteV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sSelector = null;
            //string eFilterActive = null;
            //string sQuery = null;
            //HeaderAcceptLanguage? acceptLanguage = null;
            //var response = instance.EzsigntemplateGetAutocompleteV1(sSelector, eFilterActive, sQuery, acceptLanguage);
            //Assert.IsInstanceOf(typeof(CommonGetAutocompleteV1Response), response, "response is CommonGetAutocompleteV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateGetAutocompleteV2
        /// </summary>
        [Test]
        public void EzsigntemplateGetAutocompleteV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sSelector = null;
            //string eFilterActive = null;
            //string sQuery = null;
            //HeaderAcceptLanguage? acceptLanguage = null;
            //var response = instance.EzsigntemplateGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage);
            //Assert.IsInstanceOf(typeof(EzsigntemplateGetAutocompleteV2Response), response, "response is EzsigntemplateGetAutocompleteV2Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateGetListV1
        /// </summary>
        [Test]
        public void EzsigntemplateGetListV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eOrderBy = null;
            //int? iRowMax = null;
            //int? iRowOffset = null;
            //HeaderAcceptLanguage? acceptLanguage = null;
            //string sFilter = null;
            //var response = instance.EzsigntemplateGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            //Assert.IsInstanceOf(typeof(EzsigntemplateGetListV1Response), response, "response is EzsigntemplateGetListV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateGetObjectV1
        /// </summary>
        [Test]
        public void EzsigntemplateGetObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiEzsigntemplateID = null;
            //var response = instance.EzsigntemplateGetObjectV1(pkiEzsigntemplateID);
            //Assert.IsInstanceOf(typeof(EzsigntemplateGetObjectV1Response), response, "response is EzsigntemplateGetObjectV1Response");
        }
        
        /// <summary>
        /// Test EzsigntemplateGetObjectV2
        /// </summary>
        [Test]
        public void EzsigntemplateGetObjectV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiEzsigntemplateID = null;
            //var response = instance.EzsigntemplateGetObjectV2(pkiEzsigntemplateID);
            //Assert.IsInstanceOf(typeof(EzsigntemplateGetObjectV2Response), response, "response is EzsigntemplateGetObjectV2Response");
        }
        
    }

}
