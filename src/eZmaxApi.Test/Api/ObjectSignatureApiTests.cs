/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using eZmaxApi.Client;
using eZmaxApi.Api;
// uncomment below to import models
//using eZmaxApi.Model;

namespace eZmaxApi.Test.Api
{
    /// <summary>
    ///  Class for testing ObjectSignatureApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ObjectSignatureApiTests : IDisposable
    {
        private ObjectSignatureApi instance;

        public ObjectSignatureApiTests()
        {
            instance = new ObjectSignatureApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ObjectSignatureApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ObjectSignatureApi
            //Assert.IsType<ObjectSignatureApi>(instance);
        }

        /// <summary>
        /// Test SignatureCreateObjectV1
        /// </summary>
        [Fact]
        public void SignatureCreateObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SignatureCreateObjectV1Request signatureCreateObjectV1Request = null;
            //var response = instance.SignatureCreateObjectV1(signatureCreateObjectV1Request);
            //Assert.IsType<SignatureCreateObjectV1Response>(response);
        }

        /// <summary>
        /// Test SignatureDeleteObjectV1
        /// </summary>
        [Fact]
        public void SignatureDeleteObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiSignatureID = null;
            //var response = instance.SignatureDeleteObjectV1(pkiSignatureID);
            //Assert.IsType<CommonResponse>(response);
        }

        /// <summary>
        /// Test SignatureEditObjectV1
        /// </summary>
        [Fact]
        public void SignatureEditObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiSignatureID = null;
            //SignatureEditObjectV1Request signatureEditObjectV1Request = null;
            //var response = instance.SignatureEditObjectV1(pkiSignatureID, signatureEditObjectV1Request);
            //Assert.IsType<CommonResponse>(response);
        }

        /// <summary>
        /// Test SignatureGetObjectV2
        /// </summary>
        [Fact]
        public void SignatureGetObjectV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiSignatureID = null;
            //var response = instance.SignatureGetObjectV2(pkiSignatureID);
            //Assert.IsType<SignatureGetObjectV2Response>(response);
        }

        /// <summary>
        /// Test SignatureGetObjectV3
        /// </summary>
        [Fact]
        public void SignatureGetObjectV3Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiSignatureID = null;
            //var response = instance.SignatureGetObjectV3(pkiSignatureID);
            //Assert.IsType<SignatureGetObjectV3Response>(response);
        }

        /// <summary>
        /// Test SignatureGetSVGInitialsV1
        /// </summary>
        [Fact]
        public void SignatureGetSVGInitialsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiSignatureID = null;
            //instance.SignatureGetSVGInitialsV1(pkiSignatureID);
        }

        /// <summary>
        /// Test SignatureGetSVGSignatureV1
        /// </summary>
        [Fact]
        public void SignatureGetSVGSignatureV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiSignatureID = null;
            //instance.SignatureGetSVGSignatureV1(pkiSignatureID);
        }
    }
}
