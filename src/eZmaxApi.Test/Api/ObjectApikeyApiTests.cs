/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using eZmaxApi.Client;
using eZmaxApi.Api;
using eZmaxApi.Model;

namespace eZmaxApi.Test
{
    /// <summary>
    ///  Class for testing ObjectApikeyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ObjectApikeyApiTests
    {
        private ObjectApikeyApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ObjectApikeyApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ObjectApikeyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ObjectApikeyApi
            //Assert.IsInstanceOf(typeof(ObjectApikeyApi), instance);
        }

        
        /// <summary>
        /// Test ApikeyCreateObjectV2
        /// </summary>
        [Test]
        public void ApikeyCreateObjectV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ApikeyCreateObjectV2Request apikeyCreateObjectV2Request = null;
            //var response = instance.ApikeyCreateObjectV2(apikeyCreateObjectV2Request);
            //Assert.IsInstanceOf(typeof(ApikeyCreateObjectV2Response), response, "response is ApikeyCreateObjectV2Response");
        }
        
        /// <summary>
        /// Test ApikeyEditObjectV1
        /// </summary>
        [Test]
        public void ApikeyEditObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //ApikeyEditObjectV1Request apikeyEditObjectV1Request = null;
            //var response = instance.ApikeyEditObjectV1(pkiApikeyID, apikeyEditObjectV1Request);
            //Assert.IsInstanceOf(typeof(ApikeyEditObjectV1Response), response, "response is ApikeyEditObjectV1Response");
        }
        
        /// <summary>
        /// Test ApikeyEditPermissionsV1
        /// </summary>
        [Test]
        public void ApikeyEditPermissionsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request = null;
            //var response = instance.ApikeyEditPermissionsV1(pkiApikeyID, apikeyEditPermissionsV1Request);
            //Assert.IsInstanceOf(typeof(ApikeyEditPermissionsV1Response), response, "response is ApikeyEditPermissionsV1Response");
        }
        
        /// <summary>
        /// Test ApikeyGetCorsV1
        /// </summary>
        [Test]
        public void ApikeyGetCorsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //var response = instance.ApikeyGetCorsV1(pkiApikeyID);
            //Assert.IsInstanceOf(typeof(ApikeyGetCorsV1Response), response, "response is ApikeyGetCorsV1Response");
        }
        
        /// <summary>
        /// Test ApikeyGetListV1
        /// </summary>
        [Test]
        public void ApikeyGetListV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eOrderBy = null;
            //int? iRowMax = null;
            //int? iRowOffset = null;
            //HeaderAcceptLanguage acceptLanguage = null;
            //string sFilter = null;
            //var response = instance.ApikeyGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            //Assert.IsInstanceOf(typeof(ApikeyGetListV1Response), response, "response is ApikeyGetListV1Response");
        }
        
        /// <summary>
        /// Test ApikeyGetObjectV2
        /// </summary>
        [Test]
        public void ApikeyGetObjectV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //var response = instance.ApikeyGetObjectV2(pkiApikeyID);
            //Assert.IsInstanceOf(typeof(ApikeyGetObjectV2Response), response, "response is ApikeyGetObjectV2Response");
        }
        
        /// <summary>
        /// Test ApikeyGetPermissionsV1
        /// </summary>
        [Test]
        public void ApikeyGetPermissionsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //var response = instance.ApikeyGetPermissionsV1(pkiApikeyID);
            //Assert.IsInstanceOf(typeof(ApikeyGetPermissionsV1Response), response, "response is ApikeyGetPermissionsV1Response");
        }
        
        /// <summary>
        /// Test ApikeyGetSubnetsV1
        /// </summary>
        [Test]
        public void ApikeyGetSubnetsV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //var response = instance.ApikeyGetSubnetsV1(pkiApikeyID);
            //Assert.IsInstanceOf(typeof(ApikeyGetSubnetsV1Response), response, "response is ApikeyGetSubnetsV1Response");
        }
        
        /// <summary>
        /// Test ApikeyRegenerateV1
        /// </summary>
        [Test]
        public void ApikeyRegenerateV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiApikeyID = null;
            //ApikeyRegenerateV1Request apikeyRegenerateV1Request = null;
            //var response = instance.ApikeyRegenerateV1(pkiApikeyID, apikeyRegenerateV1Request);
            //Assert.IsInstanceOf(typeof(ApikeyRegenerateV1Response), response, "response is ApikeyRegenerateV1Response");
        }
        
    }

}
