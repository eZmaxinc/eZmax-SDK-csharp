/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using eZmaxApi.Client;
using eZmaxApi.Api;
using eZmaxApi.Model;

namespace eZmaxApi.Test
{
    /// <summary>
    ///  Class for testing ObjectDepartmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ObjectDepartmentApiTests
    {
        private ObjectDepartmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ObjectDepartmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ObjectDepartmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ObjectDepartmentApi
            //Assert.IsInstanceOf(typeof(ObjectDepartmentApi), instance);
        }

        
        /// <summary>
        /// Test DepartmentGetAutocompleteV1
        /// </summary>
        [Test]
        public void DepartmentGetAutocompleteV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sSelector = null;
            //string eFilterActive = null;
            //string sQuery = null;
            //HeaderAcceptLanguage? acceptLanguage = null;
            //var response = instance.DepartmentGetAutocompleteV1(sSelector, eFilterActive, sQuery, acceptLanguage);
            //Assert.IsInstanceOf(typeof(CommonGetAutocompleteV1Response), response, "response is CommonGetAutocompleteV1Response");
        }
        
        /// <summary>
        /// Test DepartmentGetAutocompleteV2
        /// </summary>
        [Test]
        public void DepartmentGetAutocompleteV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sSelector = null;
            //string eFilterActive = null;
            //string sQuery = null;
            //HeaderAcceptLanguage? acceptLanguage = null;
            //var response = instance.DepartmentGetAutocompleteV2(sSelector, eFilterActive, sQuery, acceptLanguage);
            //Assert.IsInstanceOf(typeof(DepartmentGetAutocompleteV2Response), response, "response is DepartmentGetAutocompleteV2Response");
        }
        
        /// <summary>
        /// Test DepartmentGetMembersV1
        /// </summary>
        [Test]
        public void DepartmentGetMembersV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiDepartmentID = null;
            //var response = instance.DepartmentGetMembersV1(pkiDepartmentID);
            //Assert.IsInstanceOf(typeof(DepartmentGetMembersV1Response), response, "response is DepartmentGetMembersV1Response");
        }
        
    }

}
