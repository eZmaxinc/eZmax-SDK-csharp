/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using eZmaxApi.Client;
using eZmaxApi.Api;
// uncomment below to import models
//using eZmaxApi.Model;

namespace eZmaxApi.Test.Api
{
    /// <summary>
    ///  Class for testing ObjectWebhookApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ObjectWebhookApiTests : IDisposable
    {
        private ObjectWebhookApi instance;

        public ObjectWebhookApiTests()
        {
            instance = new ObjectWebhookApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ObjectWebhookApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ObjectWebhookApi
            //Assert.IsType<ObjectWebhookApi>(instance);
        }

        /// <summary>
        /// Test WebhookCreateObjectV1
        /// </summary>
        [Fact]
        public void WebhookCreateObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookCreateObjectV1Request webhookCreateObjectV1Request = null;
            //var response = instance.WebhookCreateObjectV1(webhookCreateObjectV1Request);
            //Assert.IsType<WebhookCreateObjectV1Response>(response);
        }

        /// <summary>
        /// Test WebhookCreateObjectV2
        /// </summary>
        [Fact]
        public void WebhookCreateObjectV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WebhookCreateObjectV2Request webhookCreateObjectV2Request = null;
            //var response = instance.WebhookCreateObjectV2(webhookCreateObjectV2Request);
            //Assert.IsType<WebhookCreateObjectV2Response>(response);
        }

        /// <summary>
        /// Test WebhookDeleteObjectV1
        /// </summary>
        [Fact]
        public void WebhookDeleteObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiWebhookID = null;
            //var response = instance.WebhookDeleteObjectV1(pkiWebhookID);
            //Assert.IsType<WebhookDeleteObjectV1Response>(response);
        }

        /// <summary>
        /// Test WebhookEditObjectV1
        /// </summary>
        [Fact]
        public void WebhookEditObjectV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiWebhookID = null;
            //WebhookEditObjectV1Request webhookEditObjectV1Request = null;
            //var response = instance.WebhookEditObjectV1(pkiWebhookID, webhookEditObjectV1Request);
            //Assert.IsType<WebhookEditObjectV1Response>(response);
        }

        /// <summary>
        /// Test WebhookGetHistoryV1
        /// </summary>
        [Fact]
        public void WebhookGetHistoryV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiWebhookID = null;
            //string eWebhookHistoryinterval = null;
            //var response = instance.WebhookGetHistoryV1(pkiWebhookID, eWebhookHistoryinterval);
            //Assert.IsType<WebhookGetHistoryV1Response>(response);
        }

        /// <summary>
        /// Test WebhookGetListV1
        /// </summary>
        [Fact]
        public void WebhookGetListV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? eOrderBy = null;
            //int? iRowMax = null;
            //int? iRowOffset = null;
            //HeaderAcceptLanguage? acceptLanguage = null;
            //string? sFilter = null;
            //var response = instance.WebhookGetListV1(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            //Assert.IsType<WebhookGetListV1Response>(response);
        }

        /// <summary>
        /// Test WebhookGetObjectV2
        /// </summary>
        [Fact]
        public void WebhookGetObjectV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiWebhookID = null;
            //var response = instance.WebhookGetObjectV2(pkiWebhookID);
            //Assert.IsType<WebhookGetObjectV2Response>(response);
        }

        /// <summary>
        /// Test WebhookRegenerateApikeyV1
        /// </summary>
        [Fact]
        public void WebhookRegenerateApikeyV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiWebhookID = null;
            //WebhookRegenerateApikeyV1Request webhookRegenerateApikeyV1Request = null;
            //var response = instance.WebhookRegenerateApikeyV1(pkiWebhookID, webhookRegenerateApikeyV1Request);
            //Assert.IsType<WebhookRegenerateApikeyV1Response>(response);
        }

        /// <summary>
        /// Test WebhookTestV1
        /// </summary>
        [Fact]
        public void WebhookTestV1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pkiWebhookID = null;
            //Object body = null;
            //var response = instance.WebhookTestV1(pkiWebhookID, body);
            //Assert.IsType<WebhookTestV1Response>(response);
        }
    }
}
