/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignfolderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfolderArchiveV1Response</returns>
        EzsignfolderArchiveV1Response EzsignfolderArchiveV1 (int pkiEzsignfolderID, Object body);

        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfolderArchiveV1Response</returns>
        ApiResponse<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1WithHttpInfo (int pkiEzsignfolderID, Object body);
        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream EzsignfolderBatchDownloadV1 (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request);

        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> EzsignfolderBatchDownloadV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request);
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <returns>EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        EzsignfolderCreateObjectV1Response EzsignfolderCreateObjectV1 (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1WithHttpInfo (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request);
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <returns>EzsignfolderCreateObjectV2Response</returns>
        EzsignfolderCreateObjectV2Response EzsignfolderCreateObjectV2 (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request);

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV2Response</returns>
        ApiResponse<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2WithHttpInfo (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request);
        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderDeleteObjectV1Response</returns>
        EzsignfolderDeleteObjectV1Response EzsignfolderDeleteObjectV1 (int pkiEzsignfolderID);

        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderDeleteObjectV1Response</returns>
        ApiResponse<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <returns>EzsignfolderDisposeEzsignfoldersV1Response</returns>
        EzsignfolderDisposeEzsignfoldersV1Response EzsignfolderDisposeEzsignfoldersV1 (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request);

        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1WithHttpInfo (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request);
        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfolderDisposeV1Response</returns>
        EzsignfolderDisposeV1Response EzsignfolderDisposeV1 (int pkiEzsignfolderID, Object body);

        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfolderDisposeV1Response</returns>
        ApiResponse<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1WithHttpInfo (int pkiEzsignfolderID, Object body);
        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <returns>EzsignfolderEditObjectV1Response</returns>
        EzsignfolderEditObjectV1Response EzsignfolderEditObjectV1 (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderEditObjectV1Response</returns>
        ApiResponse<EzsignfolderEditObjectV1Response> EzsignfolderEditObjectV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request);
        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetActionableElementsV1Response</returns>
        EzsignfolderGetActionableElementsV1Response EzsignfolderGetActionableElementsV1 (int pkiEzsignfolderID);

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetActionableElementsV1Response</returns>
        ApiResponse<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetEzsigndocumentsV1Response</returns>
        EzsignfolderGetEzsigndocumentsV1Response EzsignfolderGetEzsigndocumentsV1 (int pkiEzsignfolderID);

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetEzsigndocumentsV1Response</returns>
        ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        EzsignfolderGetEzsignfoldersignerassociationsV1Response EzsignfolderGetEzsignfoldersignerassociationsV1 (int pkiEzsignfolderID);

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetFormsDataV1Response</returns>
        EzsignfolderGetFormsDataV1Response EzsignfolderGetFormsDataV1 (int pkiEzsignfolderID);

        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetFormsDataV1Response</returns>
        ApiResponse<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>EzsignfolderGetListV1Response</returns>
        EzsignfolderGetListV1Response EzsignfolderGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));

        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of EzsignfolderGetListV1Response</returns>
        ApiResponse<EzsignfolderGetListV1Response> EzsignfolderGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        EzsignfolderGetObjectV1Response EzsignfolderGetObjectV1 (int pkiEzsignfolderID);

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetObjectV2Response</returns>
        EzsignfolderGetObjectV2Response EzsignfolderGetObjectV2 (int pkiEzsignfolderID);

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV2Response</returns>
        ApiResponse<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2WithHttpInfo (int pkiEzsignfolderID);
        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <returns>EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        EzsignfolderImportEzsignfoldersignerassociationsV1Response EzsignfolderImportEzsignfoldersignerassociationsV1 (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request);

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request);
        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <returns>EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        EzsignfolderImportEzsigntemplatepackageV1Response EzsignfolderImportEzsigntemplatepackageV1 (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request);

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request);
        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <returns>EzsignfolderReorderV1Response</returns>
        EzsignfolderReorderV1Response EzsignfolderReorderV1 (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request);

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderReorderV1Response</returns>
        ApiResponse<EzsignfolderReorderV1Response> EzsignfolderReorderV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request);
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <returns>EzsignfolderSendV1Response</returns>
        [Obsolete]
        EzsignfolderSendV1Response EzsignfolderSendV1 (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request);

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderSendV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderSendV1Response> EzsignfolderSendV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request);
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <returns>EzsignfolderSendV2Response</returns>
        [Obsolete]
        EzsignfolderSendV2Response EzsignfolderSendV2 (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request);

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <returns>ApiResponse of EzsignfolderSendV2Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderSendV2Response> EzsignfolderSendV2WithHttpInfo (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request);
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <returns>EzsignfolderSendV3Response</returns>
        EzsignfolderSendV3Response EzsignfolderSendV3 (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request);

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <returns>ApiResponse of EzsignfolderSendV3Response</returns>
        ApiResponse<EzsignfolderSendV3Response> EzsignfolderSendV3WithHttpInfo (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request);
        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfolderUnsendV1Response</returns>
        EzsignfolderUnsendV1Response EzsignfolderUnsendV1 (int pkiEzsignfolderID, Object body);

        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfolderUnsendV1Response</returns>
        ApiResponse<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1WithHttpInfo (int pkiEzsignfolderID, Object body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderArchiveV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1Async (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderArchiveV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderArchiveV1Response>> EzsignfolderArchiveV1WithHttpInfoAsync (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> EzsignfolderBatchDownloadV1Async (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> EzsignfolderBatchDownloadV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1Async (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV1Response>> EzsignfolderCreateObjectV1WithHttpInfoAsync (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderCreateObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2Async (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV2Response>> EzsignfolderCreateObjectV2WithHttpInfoAsync (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderDeleteObjectV1Response>> EzsignfolderDeleteObjectV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1Async (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeEzsignfoldersV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response>> EzsignfolderDisposeEzsignfoldersV1WithHttpInfoAsync (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderDisposeV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1Async (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderDisposeV1Response>> EzsignfolderDisposeV1WithHttpInfoAsync (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderEditObjectV1Response> EzsignfolderEditObjectV1Async (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderEditObjectV1Response>> EzsignfolderEditObjectV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetActionableElementsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetActionableElementsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetActionableElementsV1Response>> EzsignfolderGetActionableElementsV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetEzsigndocumentsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsigndocumentsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsigndocumentsV1Response>> EzsignfolderGetEzsigndocumentsV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsignfoldersignerassociationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response>> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetFormsDataV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetFormsDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetFormsDataV1Response>> EzsignfolderGetFormsDataV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetListV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetListV1Response> EzsignfolderGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetListV1Response>> EzsignfolderGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV1Response>> EzsignfolderGetObjectV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV2Response>> EzsignfolderGetObjectV2WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1Async (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsignfoldersignerassociationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response>> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1Async (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsigntemplatepackageV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response>> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderReorderV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderReorderV1Response> EzsignfolderReorderV1Async (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderReorderV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderReorderV1Response>> EzsignfolderReorderV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderSendV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderSendV1Response> EzsignfolderSendV1Async (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV1Response>> EzsignfolderSendV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderSendV2Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderSendV2Response> EzsignfolderSendV2Async (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV2Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV2Response>> EzsignfolderSendV2WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderSendV3Response</returns>
        System.Threading.Tasks.Task<EzsignfolderSendV3Response> EzsignfolderSendV3Async (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV3Response>> EzsignfolderSendV3WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderUnsendV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1Async (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderUnsendV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderUnsendV1Response>> EzsignfolderUnsendV1WithHttpInfoAsync (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignfolderApi : IObjectEzsignfolderApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignfolderApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignfolderApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignfolderApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfolderArchiveV1Response</returns>
        public EzsignfolderArchiveV1Response EzsignfolderArchiveV1 (int pkiEzsignfolderID, Object body)
        {
             ApiResponse<EzsignfolderArchiveV1Response> localVarResponse = EzsignfolderArchiveV1WithHttpInfo(pkiEzsignfolderID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfolderArchiveV1Response</returns>
        public ApiResponse<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1WithHttpInfo (int pkiEzsignfolderID, Object body)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderArchiveV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderArchiveV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderArchiveV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderArchiveV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderArchiveV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderArchiveV1Response)));
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderArchiveV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1Async (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderArchiveV1Response> localVarResponse = await EzsignfolderArchiveV1WithHttpInfoAsync(pkiEzsignfolderID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderArchiveV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderArchiveV1Response>> EzsignfolderArchiveV1WithHttpInfoAsync (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderArchiveV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderArchiveV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/archive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderArchiveV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderArchiveV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderArchiveV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderArchiveV1Response)));
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream EzsignfolderBatchDownloadV1 (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request)
        {
             ApiResponse<System.IO.Stream> localVarResponse = EzsignfolderBatchDownloadV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderBatchDownloadV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> EzsignfolderBatchDownloadV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderBatchDownloadV1");
            // verify the required parameter 'ezsignfolderBatchDownloadV1Request' is set
            if (ezsignfolderBatchDownloadV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderBatchDownloadV1Request' when calling ObjectEzsignfolderApi->EzsignfolderBatchDownloadV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderBatchDownloadV1Request != null && ezsignfolderBatchDownloadV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderBatchDownloadV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderBatchDownloadV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderBatchDownloadV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> EzsignfolderBatchDownloadV1Async (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await EzsignfolderBatchDownloadV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderBatchDownloadV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> EzsignfolderBatchDownloadV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderBatchDownloadV1");
            // verify the required parameter 'ezsignfolderBatchDownloadV1Request' is set
            if (ezsignfolderBatchDownloadV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderBatchDownloadV1Request' when calling ObjectEzsignfolderApi->EzsignfolderBatchDownloadV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/zip",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderBatchDownloadV1Request != null && ezsignfolderBatchDownloadV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderBatchDownloadV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderBatchDownloadV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderBatchDownloadV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <returns>EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        public EzsignfolderCreateObjectV1Response EzsignfolderCreateObjectV1 (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request)
        {
             ApiResponse<EzsignfolderCreateObjectV1Response> localVarResponse = EzsignfolderCreateObjectV1WithHttpInfo(ezsignfolderCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        public ApiResponse<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1WithHttpInfo (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request)
        {
            // verify the required parameter 'ezsignfolderCreateObjectV1Request' is set
            if (ezsignfolderCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV1Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV1");

            var localVarPath = "/1/object/ezsignfolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfolderCreateObjectV1Request != null && ezsignfolderCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1Async (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderCreateObjectV1Response> localVarResponse = await EzsignfolderCreateObjectV1WithHttpInfoAsync(ezsignfolderCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV1Response>> EzsignfolderCreateObjectV1WithHttpInfoAsync (List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignfolderCreateObjectV1Request' is set
            if (ezsignfolderCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV1Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV1");

            var localVarPath = "/1/object/ezsignfolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfolderCreateObjectV1Request != null && ezsignfolderCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <returns>EzsignfolderCreateObjectV2Response</returns>
        public EzsignfolderCreateObjectV2Response EzsignfolderCreateObjectV2 (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request)
        {
             ApiResponse<EzsignfolderCreateObjectV2Response> localVarResponse = EzsignfolderCreateObjectV2WithHttpInfo(ezsignfolderCreateObjectV2Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV2Response</returns>
        public ApiResponse<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2WithHttpInfo (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request)
        {
            // verify the required parameter 'ezsignfolderCreateObjectV2Request' is set
            if (ezsignfolderCreateObjectV2Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV2Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV2");

            var localVarPath = "/2/object/ezsignfolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfolderCreateObjectV2Request != null && ezsignfolderCreateObjectV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderCreateObjectV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderCreateObjectV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderCreateObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderCreateObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderCreateObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderCreateObjectV2Response)));
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderCreateObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2Async (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderCreateObjectV2Response> localVarResponse = await EzsignfolderCreateObjectV2WithHttpInfoAsync(ezsignfolderCreateObjectV2Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV2Response>> EzsignfolderCreateObjectV2WithHttpInfoAsync (EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignfolderCreateObjectV2Request' is set
            if (ezsignfolderCreateObjectV2Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV2Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV2");

            var localVarPath = "/2/object/ezsignfolder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfolderCreateObjectV2Request != null && ezsignfolderCreateObjectV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderCreateObjectV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderCreateObjectV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderCreateObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderCreateObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderCreateObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderCreateObjectV2Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderDeleteObjectV1Response</returns>
        public EzsignfolderDeleteObjectV1Response EzsignfolderDeleteObjectV1 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderDeleteObjectV1Response> localVarResponse = EzsignfolderDeleteObjectV1WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderDeleteObjectV1Response</returns>
        public ApiResponse<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderDeleteObjectV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderDeleteObjectV1Response> localVarResponse = await EzsignfolderDeleteObjectV1WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderDeleteObjectV1Response>> EzsignfolderDeleteObjectV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderDeleteObjectV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderDeleteObjectV1Response)));
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <returns>EzsignfolderDisposeEzsignfoldersV1Response</returns>
        public EzsignfolderDisposeEzsignfoldersV1Response EzsignfolderDisposeEzsignfoldersV1 (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request)
        {
             ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> localVarResponse = EzsignfolderDisposeEzsignfoldersV1WithHttpInfo(ezsignfolderDisposeEzsignfoldersV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        public ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1WithHttpInfo (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request)
        {
            // verify the required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' is set
            if (ezsignfolderDisposeEzsignfoldersV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' when calling ObjectEzsignfolderApi->EzsignfolderDisposeEzsignfoldersV1");

            var localVarPath = "/1/object/ezsignfolder/disposeEzsignfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfolderDisposeEzsignfoldersV1Request != null && ezsignfolderDisposeEzsignfoldersV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderDisposeEzsignfoldersV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderDisposeEzsignfoldersV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderDisposeEzsignfoldersV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderDisposeEzsignfoldersV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderDisposeEzsignfoldersV1Response)));
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1Async (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> localVarResponse = await EzsignfolderDisposeEzsignfoldersV1WithHttpInfoAsync(ezsignfolderDisposeEzsignfoldersV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeEzsignfoldersV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response>> EzsignfolderDisposeEzsignfoldersV1WithHttpInfoAsync (EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' is set
            if (ezsignfolderDisposeEzsignfoldersV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' when calling ObjectEzsignfolderApi->EzsignfolderDisposeEzsignfoldersV1");

            var localVarPath = "/1/object/ezsignfolder/disposeEzsignfolders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfolderDisposeEzsignfoldersV1Request != null && ezsignfolderDisposeEzsignfoldersV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderDisposeEzsignfoldersV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderDisposeEzsignfoldersV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderDisposeEzsignfoldersV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderDisposeEzsignfoldersV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderDisposeEzsignfoldersV1Response)));
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfolderDisposeV1Response</returns>
        public EzsignfolderDisposeV1Response EzsignfolderDisposeV1 (int pkiEzsignfolderID, Object body)
        {
             ApiResponse<EzsignfolderDisposeV1Response> localVarResponse = EzsignfolderDisposeV1WithHttpInfo(pkiEzsignfolderID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfolderDisposeV1Response</returns>
        public ApiResponse<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1WithHttpInfo (int pkiEzsignfolderID, Object body)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderDisposeV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderDisposeV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderDisposeV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderDisposeV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderDisposeV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderDisposeV1Response)));
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderDisposeV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1Async (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderDisposeV1Response> localVarResponse = await EzsignfolderDisposeV1WithHttpInfoAsync(pkiEzsignfolderID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderDisposeV1Response>> EzsignfolderDisposeV1WithHttpInfoAsync (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderDisposeV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderDisposeV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderDisposeV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderDisposeV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderDisposeV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderDisposeV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <returns>EzsignfolderEditObjectV1Response</returns>
        public EzsignfolderEditObjectV1Response EzsignfolderEditObjectV1 (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request)
        {
             ApiResponse<EzsignfolderEditObjectV1Response> localVarResponse = EzsignfolderEditObjectV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderEditObjectV1Response</returns>
        public ApiResponse<EzsignfolderEditObjectV1Response> EzsignfolderEditObjectV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderEditObjectV1");
            // verify the required parameter 'ezsignfolderEditObjectV1Request' is set
            if (ezsignfolderEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderEditObjectV1Request' when calling ObjectEzsignfolderApi->EzsignfolderEditObjectV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderEditObjectV1Request != null && ezsignfolderEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderEditObjectV1Response> EzsignfolderEditObjectV1Async (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderEditObjectV1Response> localVarResponse = await EzsignfolderEditObjectV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderEditObjectV1Response>> EzsignfolderEditObjectV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderEditObjectV1Request ezsignfolderEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderEditObjectV1");
            // verify the required parameter 'ezsignfolderEditObjectV1Request' is set
            if (ezsignfolderEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderEditObjectV1Request' when calling ObjectEzsignfolderApi->EzsignfolderEditObjectV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderEditObjectV1Request != null && ezsignfolderEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetActionableElementsV1Response</returns>
        public EzsignfolderGetActionableElementsV1Response EzsignfolderGetActionableElementsV1 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderGetActionableElementsV1Response> localVarResponse = EzsignfolderGetActionableElementsV1WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetActionableElementsV1Response</returns>
        public ApiResponse<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetActionableElementsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetActionableElementsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetActionableElementsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetActionableElementsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetActionableElementsV1Response)));
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetActionableElementsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetActionableElementsV1Response> localVarResponse = await EzsignfolderGetActionableElementsV1WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetActionableElementsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetActionableElementsV1Response>> EzsignfolderGetActionableElementsV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetActionableElementsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetActionableElementsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetActionableElementsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetActionableElementsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetActionableElementsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetEzsigndocumentsV1Response</returns>
        public EzsignfolderGetEzsigndocumentsV1Response EzsignfolderGetEzsigndocumentsV1 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> localVarResponse = EzsignfolderGetEzsigndocumentsV1WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetEzsigndocumentsV1Response</returns>
        public ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetEzsigndocumentsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetEzsigndocumentsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetEzsigndocumentsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetEzsigndocumentsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetEzsigndocumentsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetEzsigndocumentsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> localVarResponse = await EzsignfolderGetEzsigndocumentsV1WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsigndocumentsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsigndocumentsV1Response>> EzsignfolderGetEzsigndocumentsV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetEzsigndocumentsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetEzsigndocumentsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetEzsigndocumentsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetEzsigndocumentsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetEzsigndocumentsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        public EzsignfolderGetEzsignfoldersignerassociationsV1Response EzsignfolderGetEzsignfoldersignerassociationsV1 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> localVarResponse = EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        public ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetEzsignfoldersignerassociationsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetEzsignfoldersignerassociationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetEzsignfoldersignerassociationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetEzsignfoldersignerassociationsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> localVarResponse = await EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsignfoldersignerassociationsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response>> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetEzsignfoldersignerassociationsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetEzsignfoldersignerassociationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetEzsignfoldersignerassociationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetEzsignfoldersignerassociationsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetFormsDataV1Response</returns>
        public EzsignfolderGetFormsDataV1Response EzsignfolderGetFormsDataV1 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderGetFormsDataV1Response> localVarResponse = EzsignfolderGetFormsDataV1WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetFormsDataV1Response</returns>
        public ApiResponse<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetFormsDataV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetFormsDataV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetFormsDataV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetFormsDataV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetFormsDataV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetFormsDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetFormsDataV1Response> localVarResponse = await EzsignfolderGetFormsDataV1WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetFormsDataV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetFormsDataV1Response>> EzsignfolderGetFormsDataV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetFormsDataV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetFormsDataV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetFormsDataV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetFormsDataV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetFormsDataV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>EzsignfolderGetListV1Response</returns>
        public EzsignfolderGetListV1Response EzsignfolderGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {
             ApiResponse<EzsignfolderGetListV1Response> localVarResponse = EzsignfolderGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of EzsignfolderGetListV1Response</returns>
        public ApiResponse<EzsignfolderGetListV1Response> EzsignfolderGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {

            var localVarPath = "/1/object/ezsignfolder/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetListV1Response> EzsignfolderGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetListV1Response> localVarResponse = await EzsignfolderGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetListV1Response>> EzsignfolderGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/1/object/ezsignfolder/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        public EzsignfolderGetObjectV1Response EzsignfolderGetObjectV1 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderGetObjectV1Response> localVarResponse = EzsignfolderGetObjectV1WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        public ApiResponse<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetObjectV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetObjectV1Response> localVarResponse = await EzsignfolderGetObjectV1WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV1Response>> EzsignfolderGetObjectV1WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetObjectV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>EzsignfolderGetObjectV2Response</returns>
        public EzsignfolderGetObjectV2Response EzsignfolderGetObjectV2 (int pkiEzsignfolderID)
        {
             ApiResponse<EzsignfolderGetObjectV2Response> localVarResponse = EzsignfolderGetObjectV2WithHttpInfo(pkiEzsignfolderID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV2Response</returns>
        public ApiResponse<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2WithHttpInfo (int pkiEzsignfolderID)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetObjectV2");

            var localVarPath = "/2/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2Async (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderGetObjectV2Response> localVarResponse = await EzsignfolderGetObjectV2WithHttpInfoAsync(pkiEzsignfolderID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV2Response>> EzsignfolderGetObjectV2WithHttpInfoAsync (int pkiEzsignfolderID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderGetObjectV2");

            var localVarPath = "/2/object/ezsignfolder/{pkiEzsignfolderID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderGetObjectV2Response)));
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <returns>EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        public EzsignfolderImportEzsignfoldersignerassociationsV1Response EzsignfolderImportEzsignfoldersignerassociationsV1 (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request)
        {
             ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> localVarResponse = EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderImportEzsignfoldersignerassociationsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        public ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsignfoldersignerassociationsV1");
            // verify the required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' is set
            if (ezsignfolderImportEzsignfoldersignerassociationsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsignfoldersignerassociationsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderImportEzsignfoldersignerassociationsV1Request != null && ezsignfolderImportEzsignfoldersignerassociationsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderImportEzsignfoldersignerassociationsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderImportEzsignfoldersignerassociationsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderImportEzsignfoldersignerassociationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderImportEzsignfoldersignerassociationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderImportEzsignfoldersignerassociationsV1Response)));
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1Async (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> localVarResponse = await EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderImportEzsignfoldersignerassociationsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsignfoldersignerassociationsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response>> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsignfoldersignerassociationsV1");
            // verify the required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' is set
            if (ezsignfolderImportEzsignfoldersignerassociationsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsignfoldersignerassociationsV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderImportEzsignfoldersignerassociationsV1Request != null && ezsignfolderImportEzsignfoldersignerassociationsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderImportEzsignfoldersignerassociationsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderImportEzsignfoldersignerassociationsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderImportEzsignfoldersignerassociationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderImportEzsignfoldersignerassociationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderImportEzsignfoldersignerassociationsV1Response)));
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <returns>EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        public EzsignfolderImportEzsigntemplatepackageV1Response EzsignfolderImportEzsigntemplatepackageV1 (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request)
        {
             ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> localVarResponse = EzsignfolderImportEzsigntemplatepackageV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderImportEzsigntemplatepackageV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        public ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsigntemplatepackageV1");
            // verify the required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' is set
            if (ezsignfolderImportEzsigntemplatepackageV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsigntemplatepackageV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderImportEzsigntemplatepackageV1Request != null && ezsignfolderImportEzsigntemplatepackageV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderImportEzsigntemplatepackageV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderImportEzsigntemplatepackageV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderImportEzsigntemplatepackageV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderImportEzsigntemplatepackageV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderImportEzsigntemplatepackageV1Response)));
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1Async (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> localVarResponse = await EzsignfolderImportEzsigntemplatepackageV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderImportEzsigntemplatepackageV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsigntemplatepackageV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response>> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsigntemplatepackageV1");
            // verify the required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' is set
            if (ezsignfolderImportEzsigntemplatepackageV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsigntemplatepackageV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderImportEzsigntemplatepackageV1Request != null && ezsignfolderImportEzsigntemplatepackageV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderImportEzsigntemplatepackageV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderImportEzsigntemplatepackageV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderImportEzsigntemplatepackageV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderImportEzsigntemplatepackageV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderImportEzsigntemplatepackageV1Response)));
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <returns>EzsignfolderReorderV1Response</returns>
        public EzsignfolderReorderV1Response EzsignfolderReorderV1 (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request)
        {
             ApiResponse<EzsignfolderReorderV1Response> localVarResponse = EzsignfolderReorderV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderReorderV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderReorderV1Response</returns>
        public ApiResponse<EzsignfolderReorderV1Response> EzsignfolderReorderV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderReorderV1");
            // verify the required parameter 'ezsignfolderReorderV1Request' is set
            if (ezsignfolderReorderV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderReorderV1Request' when calling ObjectEzsignfolderApi->EzsignfolderReorderV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderReorderV1Request != null && ezsignfolderReorderV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderReorderV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderReorderV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderReorderV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderReorderV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderReorderV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderReorderV1Response)));
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderReorderV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderReorderV1Response> EzsignfolderReorderV1Async (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderReorderV1Response> localVarResponse = await EzsignfolderReorderV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderReorderV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderReorderV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderReorderV1Response>> EzsignfolderReorderV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderReorderV1");
            // verify the required parameter 'ezsignfolderReorderV1Request' is set
            if (ezsignfolderReorderV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderReorderV1Request' when calling ObjectEzsignfolderApi->EzsignfolderReorderV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderReorderV1Request != null && ezsignfolderReorderV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderReorderV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderReorderV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderReorderV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderReorderV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderReorderV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderReorderV1Response)));
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <returns>EzsignfolderSendV1Response</returns>
        [Obsolete]
        public EzsignfolderSendV1Response EzsignfolderSendV1 (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request)
        {
             ApiResponse<EzsignfolderSendV1Response> localVarResponse = EzsignfolderSendV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderSendV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <returns>ApiResponse of EzsignfolderSendV1Response</returns>
        [Obsolete]
        public ApiResponse<EzsignfolderSendV1Response> EzsignfolderSendV1WithHttpInfo (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderSendV1");
            // verify the required parameter 'ezsignfolderSendV1Request' is set
            if (ezsignfolderSendV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderSendV1Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderSendV1Request != null && ezsignfolderSendV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderSendV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderSendV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderSendV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderSendV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderSendV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderSendV1Response)));
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderSendV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderSendV1Response> EzsignfolderSendV1Async (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderSendV1Response> localVarResponse = await EzsignfolderSendV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderSendV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV1Response>> EzsignfolderSendV1WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderSendV1");
            // verify the required parameter 'ezsignfolderSendV1Request' is set
            if (ezsignfolderSendV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderSendV1Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderSendV1Request != null && ezsignfolderSendV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderSendV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderSendV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderSendV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderSendV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderSendV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderSendV1Response)));
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <returns>EzsignfolderSendV2Response</returns>
        [Obsolete]
        public EzsignfolderSendV2Response EzsignfolderSendV2 (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request)
        {
             ApiResponse<EzsignfolderSendV2Response> localVarResponse = EzsignfolderSendV2WithHttpInfo(pkiEzsignfolderID, ezsignfolderSendV2Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <returns>ApiResponse of EzsignfolderSendV2Response</returns>
        [Obsolete]
        public ApiResponse<EzsignfolderSendV2Response> EzsignfolderSendV2WithHttpInfo (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderSendV2");
            // verify the required parameter 'ezsignfolderSendV2Request' is set
            if (ezsignfolderSendV2Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderSendV2Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV2");

            var localVarPath = "/2/object/ezsignfolder/{pkiEzsignfolderID}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderSendV2Request != null && ezsignfolderSendV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderSendV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderSendV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderSendV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderSendV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderSendV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderSendV2Response)));
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderSendV2Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderSendV2Response> EzsignfolderSendV2Async (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderSendV2Response> localVarResponse = await EzsignfolderSendV2WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderSendV2Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV2Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV2Response>> EzsignfolderSendV2WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderSendV2Request ezsignfolderSendV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderSendV2");
            // verify the required parameter 'ezsignfolderSendV2Request' is set
            if (ezsignfolderSendV2Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderSendV2Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV2");

            var localVarPath = "/2/object/ezsignfolder/{pkiEzsignfolderID}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderSendV2Request != null && ezsignfolderSendV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderSendV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderSendV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderSendV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderSendV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderSendV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderSendV2Response)));
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <returns>EzsignfolderSendV3Response</returns>
        public EzsignfolderSendV3Response EzsignfolderSendV3 (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request)
        {
             ApiResponse<EzsignfolderSendV3Response> localVarResponse = EzsignfolderSendV3WithHttpInfo(pkiEzsignfolderID, ezsignfolderSendV3Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <returns>ApiResponse of EzsignfolderSendV3Response</returns>
        public ApiResponse<EzsignfolderSendV3Response> EzsignfolderSendV3WithHttpInfo (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderSendV3");
            // verify the required parameter 'ezsignfolderSendV3Request' is set
            if (ezsignfolderSendV3Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderSendV3Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV3");

            var localVarPath = "/3/object/ezsignfolder/{pkiEzsignfolderID}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderSendV3Request != null && ezsignfolderSendV3Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderSendV3Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderSendV3Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderSendV3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderSendV3Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderSendV3Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderSendV3Response)));
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderSendV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderSendV3Response> EzsignfolderSendV3Async (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderSendV3Response> localVarResponse = await EzsignfolderSendV3WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderSendV3Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV3Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV3Response>> EzsignfolderSendV3WithHttpInfoAsync (int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderSendV3");
            // verify the required parameter 'ezsignfolderSendV3Request' is set
            if (ezsignfolderSendV3Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfolderSendV3Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV3");

            var localVarPath = "/3/object/ezsignfolder/{pkiEzsignfolderID}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (ezsignfolderSendV3Request != null && ezsignfolderSendV3Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfolderSendV3Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfolderSendV3Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderSendV3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderSendV3Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderSendV3Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderSendV3Response)));
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfolderUnsendV1Response</returns>
        public EzsignfolderUnsendV1Response EzsignfolderUnsendV1 (int pkiEzsignfolderID, Object body)
        {
             ApiResponse<EzsignfolderUnsendV1Response> localVarResponse = EzsignfolderUnsendV1WithHttpInfo(pkiEzsignfolderID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfolderUnsendV1Response</returns>
        public ApiResponse<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1WithHttpInfo (int pkiEzsignfolderID, Object body)
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderUnsendV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderUnsendV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderUnsendV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderUnsendV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderUnsendV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderUnsendV1Response)));
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfolderUnsendV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1Async (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfolderUnsendV1Response> localVarResponse = await EzsignfolderUnsendV1WithHttpInfoAsync(pkiEzsignfolderID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfolderUnsendV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfolderUnsendV1Response>> EzsignfolderUnsendV1WithHttpInfoAsync (int pkiEzsignfolderID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfolderID' is set
            if (pkiEzsignfolderID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfolderID' when calling ObjectEzsignfolderApi->EzsignfolderUnsendV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderUnsendV1");

            var localVarPath = "/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfolderID != null) localVarPathParams.Add("pkiEzsignfolderID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfolderID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfolderUnsendV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfolderUnsendV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfolderUnsendV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfolderUnsendV1Response)));
        }

    }
}
