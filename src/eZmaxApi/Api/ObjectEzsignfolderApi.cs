/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignfolderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderArchiveV1Response</returns>
        EzsignfolderArchiveV1Response EzsignfolderArchiveV1(int pkiEzsignfolderID, Object body, int operationIndex = 0);

        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderArchiveV1Response</returns>
        ApiResponse<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0);
        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream EzsignfolderBatchDownloadV1(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0);

        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> EzsignfolderBatchDownloadV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        EzsignfolderCreateObjectV1Response EzsignfolderCreateObjectV1(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1WithHttpInfo(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderCreateObjectV2Response</returns>
        [Obsolete]
        EzsignfolderCreateObjectV2Response EzsignfolderCreateObjectV2(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV2Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2WithHttpInfo(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderCreateObjectV3Response</returns>
        EzsignfolderCreateObjectV3Response EzsignfolderCreateObjectV3(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV3Response</returns>
        ApiResponse<EzsignfolderCreateObjectV3Response> EzsignfolderCreateObjectV3WithHttpInfo(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0);
        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderDeleteObjectV1Response</returns>
        EzsignfolderDeleteObjectV1Response EzsignfolderDeleteObjectV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderDeleteObjectV1Response</returns>
        ApiResponse<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderDisposeEzsignfoldersV1Response</returns>
        EzsignfolderDisposeEzsignfoldersV1Response EzsignfolderDisposeEzsignfoldersV1(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0);

        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1WithHttpInfo(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0);
        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderDisposeV1Response</returns>
        EzsignfolderDisposeV1Response EzsignfolderDisposeV1(int pkiEzsignfolderID, Object body, int operationIndex = 0);

        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderDisposeV1Response</returns>
        ApiResponse<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderEditObjectV3Response</returns>
        EzsignfolderEditObjectV3Response EzsignfolderEditObjectV3(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderEditObjectV3Response</returns>
        ApiResponse<EzsignfolderEditObjectV3Response> EzsignfolderEditObjectV3WithHttpInfo(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0);
        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderEndPrematurelyV1Response</returns>
        EzsignfolderEndPrematurelyV1Response EzsignfolderEndPrematurelyV1(int pkiEzsignfolderID, Object body, int operationIndex = 0);

        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderEndPrematurelyV1Response</returns>
        ApiResponse<EzsignfolderEndPrematurelyV1Response> EzsignfolderEndPrematurelyV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0);
        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetActionableElementsV1Response</returns>
        EzsignfolderGetActionableElementsV1Response EzsignfolderGetActionableElementsV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetActionableElementsV1Response</returns>
        ApiResponse<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Attachment count
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetAttachmentCountV1Response</returns>
        EzsignfolderGetAttachmentCountV1Response EzsignfolderGetAttachmentCountV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Attachment count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetAttachmentCountV1Response</returns>
        ApiResponse<EzsignfolderGetAttachmentCountV1Response> EzsignfolderGetAttachmentCountV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetAttachmentsV1Response</returns>
        EzsignfolderGetAttachmentsV1Response EzsignfolderGetAttachmentsV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetAttachmentsV1Response</returns>
        ApiResponse<EzsignfolderGetAttachmentsV1Response> EzsignfolderGetAttachmentsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationCountV1Response</returns>
        EzsignfolderGetCommunicationCountV1Response EzsignfolderGetCommunicationCountV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationCountV1Response</returns>
        ApiResponse<EzsignfolderGetCommunicationCountV1Response> EzsignfolderGetCommunicationCountV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationListV1Response</returns>
        EzsignfolderGetCommunicationListV1Response EzsignfolderGetCommunicationListV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationListV1Response</returns>
        ApiResponse<EzsignfolderGetCommunicationListV1Response> EzsignfolderGetCommunicationListV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationrecipientsV1Response</returns>
        EzsignfolderGetCommunicationrecipientsV1Response EzsignfolderGetCommunicationrecipientsV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationrecipientsV1Response</returns>
        ApiResponse<EzsignfolderGetCommunicationrecipientsV1Response> EzsignfolderGetCommunicationrecipientsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationsendersV1Response</returns>
        EzsignfolderGetCommunicationsendersV1Response EzsignfolderGetCommunicationsendersV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationsendersV1Response</returns>
        ApiResponse<EzsignfolderGetCommunicationsendersV1Response> EzsignfolderGetCommunicationsendersV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetEzsigndocumentsV1Response</returns>
        EzsignfolderGetEzsigndocumentsV1Response EzsignfolderGetEzsigndocumentsV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetEzsigndocumentsV1Response</returns>
        ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        EzsignfolderGetEzsignfoldersignerassociationsV1Response EzsignfolderGetEzsignfoldersignerassociationsV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetEzsignsignaturesAutomaticV1Response</returns>
        EzsignfolderGetEzsignsignaturesAutomaticV1Response EzsignfolderGetEzsignsignaturesAutomaticV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetEzsignsignaturesAutomaticV1Response</returns>
        ApiResponse<EzsignfolderGetEzsignsignaturesAutomaticV1Response> EzsignfolderGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetFormsDataV1Response</returns>
        EzsignfolderGetFormsDataV1Response EzsignfolderGetFormsDataV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetFormsDataV1Response</returns>
        ApiResponse<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetListV1Response</returns>
        EzsignfolderGetListV1Response EzsignfolderGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetListV1Response</returns>
        ApiResponse<EzsignfolderGetListV1Response> EzsignfolderGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        EzsignfolderGetObjectV1Response EzsignfolderGetObjectV1(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetObjectV2Response</returns>
        [Obsolete]
        EzsignfolderGetObjectV2Response EzsignfolderGetObjectV2(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV2Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetObjectV3Response</returns>
        EzsignfolderGetObjectV3Response EzsignfolderGetObjectV3(int pkiEzsignfolderID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV3Response</returns>
        ApiResponse<EzsignfolderGetObjectV3Response> EzsignfolderGetObjectV3WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0);
        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        EzsignfolderImportEzsignfoldersignerassociationsV1Response EzsignfolderImportEzsignfoldersignerassociationsV1(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0);

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0);
        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        EzsignfolderImportEzsigntemplatepackageV1Response EzsignfolderImportEzsigntemplatepackageV1(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0);

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0);
        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderReorderV1Response</returns>
        [Obsolete]
        EzsignfolderReorderV1Response EzsignfolderReorderV1(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0);

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderReorderV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderReorderV1Response> EzsignfolderReorderV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0);
        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderReorderV2Response</returns>
        EzsignfolderReorderV2Response EzsignfolderReorderV2(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0);

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderReorderV2Response</returns>
        ApiResponse<EzsignfolderReorderV2Response> EzsignfolderReorderV2WithHttpInfo(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0);
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderSendV1Response</returns>
        [Obsolete]
        EzsignfolderSendV1Response EzsignfolderSendV1(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0);

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderSendV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfolderSendV1Response> EzsignfolderSendV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0);
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderSendV3Response</returns>
        EzsignfolderSendV3Response EzsignfolderSendV3(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0);

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderSendV3Response</returns>
        ApiResponse<EzsignfolderSendV3Response> EzsignfolderSendV3WithHttpInfo(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0);
        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderUnsendV1Response</returns>
        EzsignfolderUnsendV1Response EzsignfolderUnsendV1(int pkiEzsignfolderID, Object body, int operationIndex = 0);

        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderUnsendV1Response</returns>
        ApiResponse<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignfolderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderArchiveV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Archive the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderArchiveV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderArchiveV1Response>> EzsignfolderArchiveV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> EzsignfolderBatchDownloadV1Async(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Download multiples files from an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> EzsignfolderBatchDownloadV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1Async(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV1Response>> EzsignfolderCreateObjectV1WithHttpInfoAsync(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderCreateObjectV2Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2Async(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV2Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV2Response>> EzsignfolderCreateObjectV2WithHttpInfoAsync(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderCreateObjectV3Response</returns>
        System.Threading.Tasks.Task<EzsignfolderCreateObjectV3Response> EzsignfolderCreateObjectV3Async(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignfolder
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderCreateObjectV3Response>> EzsignfolderCreateObjectV3WithHttpInfoAsync(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderDeleteObjectV1Response>> EzsignfolderDeleteObjectV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1Async(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dispose Ezsignfolders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeEzsignfoldersV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response>> EzsignfolderDisposeEzsignfoldersV1WithHttpInfoAsync(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderDisposeV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Dispose the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderDisposeV1Response>> EzsignfolderDisposeV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderEditObjectV3Response</returns>
        System.Threading.Tasks.Task<EzsignfolderEditObjectV3Response> EzsignfolderEditObjectV3Async(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderEditObjectV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderEditObjectV3Response>> EzsignfolderEditObjectV3WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderEndPrematurelyV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderEndPrematurelyV1Response> EzsignfolderEndPrematurelyV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderEndPrematurelyV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderEndPrematurelyV1Response>> EzsignfolderEndPrematurelyV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetActionableElementsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetActionableElementsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetActionableElementsV1Response>> EzsignfolderGetActionableElementsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Attachment count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetAttachmentCountV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetAttachmentCountV1Response> EzsignfolderGetAttachmentCountV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Attachment count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetAttachmentCountV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetAttachmentCountV1Response>> EzsignfolderGetAttachmentCountV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetAttachmentsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetAttachmentsV1Response> EzsignfolderGetAttachmentsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetAttachmentsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetAttachmentsV1Response>> EzsignfolderGetAttachmentsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationCountV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetCommunicationCountV1Response> EzsignfolderGetCommunicationCountV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationCountV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetCommunicationCountV1Response>> EzsignfolderGetCommunicationCountV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationListV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetCommunicationListV1Response> EzsignfolderGetCommunicationListV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetCommunicationListV1Response>> EzsignfolderGetCommunicationListV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationrecipientsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetCommunicationrecipientsV1Response> EzsignfolderGetCommunicationrecipientsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationrecipientsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetCommunicationrecipientsV1Response>> EzsignfolderGetCommunicationrecipientsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationsendersV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetCommunicationsendersV1Response> EzsignfolderGetCommunicationsendersV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationsendersV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetCommunicationsendersV1Response>> EzsignfolderGetCommunicationsendersV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetEzsigndocumentsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsigndocumentsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsigndocumentsV1Response>> EzsignfolderGetEzsigndocumentsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsignfoldersignerassociationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response>> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetEzsignsignaturesAutomaticV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetEzsignsignaturesAutomaticV1Response> EzsignfolderGetEzsignsignaturesAutomaticV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsignsignaturesAutomaticV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetEzsignsignaturesAutomaticV1Response>> EzsignfolderGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetFormsDataV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetFormsDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetFormsDataV1Response>> EzsignfolderGetFormsDataV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetListV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetListV1Response> EzsignfolderGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsignfolder list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetListV1Response>> EzsignfolderGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV1Response>> EzsignfolderGetObjectV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetObjectV2Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV2Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV2Response>> EzsignfolderGetObjectV2WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetObjectV3Response</returns>
        System.Threading.Tasks.Task<EzsignfolderGetObjectV3Response> EzsignfolderGetObjectV3Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderGetObjectV3Response>> EzsignfolderGetObjectV3WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1Async(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsignfoldersignerassociationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response>> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1Async(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder.
        /// </summary>
        /// <remarks>
        /// This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsigntemplatepackageV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response>> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderReorderV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderReorderV1Response> EzsignfolderReorderV1Async(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderReorderV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderReorderV1Response>> EzsignfolderReorderV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderReorderV2Response</returns>
        System.Threading.Tasks.Task<EzsignfolderReorderV2Response> EzsignfolderReorderV2Async(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderReorderV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderReorderV2Response>> EzsignfolderReorderV2WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderSendV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfolderSendV1Response> EzsignfolderSendV1Async(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV1Response>> EzsignfolderSendV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderSendV3Response</returns>
        System.Threading.Tasks.Task<EzsignfolderSendV3Response> EzsignfolderSendV3Async(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderSendV3Response>> EzsignfolderSendV3WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderUnsendV1Response</returns>
        System.Threading.Tasks.Task<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unsend the Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderUnsendV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfolderUnsendV1Response>> EzsignfolderUnsendV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignfolderApi : IObjectEzsignfolderApiSync, IObjectEzsignfolderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignfolderApi : IObjectEzsignfolderApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignfolderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignfolderApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignfolderApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfolderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsignfolderApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderArchiveV1Response</returns>
        public EzsignfolderArchiveV1Response EzsignfolderArchiveV1(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderArchiveV1Response> localVarResponse = EzsignfolderArchiveV1WithHttpInfo(pkiEzsignfolderID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderArchiveV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderArchiveV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderArchiveV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderArchiveV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/archive", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderArchiveV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderArchiveV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderArchiveV1Response> EzsignfolderArchiveV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderArchiveV1Response> localVarResponse = await EzsignfolderArchiveV1WithHttpInfoAsync(pkiEzsignfolderID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Archive the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderArchiveV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderArchiveV1Response>> EzsignfolderArchiveV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderArchiveV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderArchiveV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderArchiveV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/archive", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderArchiveV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream EzsignfolderBatchDownloadV1(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<System.IO.Stream> localVarResponse = EzsignfolderBatchDownloadV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderBatchDownloadV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public eZmaxApi.Client.ApiResponse<System.IO.Stream> EzsignfolderBatchDownloadV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderBatchDownloadV1Request' is set
            if (ezsignfolderBatchDownloadV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderBatchDownloadV1Request' when calling ObjectEzsignfolderApi->EzsignfolderBatchDownloadV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip",
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderBatchDownloadV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderBatchDownloadV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<System.IO.Stream>("/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderBatchDownloadV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> EzsignfolderBatchDownloadV1Async(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<System.IO.Stream> localVarResponse = await EzsignfolderBatchDownloadV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderBatchDownloadV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download multiples files from an Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderBatchDownloadV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<System.IO.Stream>> EzsignfolderBatchDownloadV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderBatchDownloadV1Request ezsignfolderBatchDownloadV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderBatchDownloadV1Request' is set
            if (ezsignfolderBatchDownloadV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderBatchDownloadV1Request' when calling ObjectEzsignfolderApi->EzsignfolderBatchDownloadV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/zip",
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderBatchDownloadV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderBatchDownloadV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<System.IO.Stream>("/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderBatchDownloadV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        public EzsignfolderCreateObjectV1Response EzsignfolderCreateObjectV1(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV1Response> localVarResponse = EzsignfolderCreateObjectV1WithHttpInfo(ezsignfolderCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1WithHttpInfo(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderCreateObjectV1Request' is set
            if (ezsignfolderCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV1Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderCreateObjectV1Response>("/1/object/ezsignfolder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderCreateObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderCreateObjectV1Response> EzsignfolderCreateObjectV1Async(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV1Response> localVarResponse = await EzsignfolderCreateObjectV1WithHttpInfoAsync(ezsignfolderCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV1Response>> EzsignfolderCreateObjectV1WithHttpInfoAsync(List<EzsignfolderCreateObjectV1Request> ezsignfolderCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderCreateObjectV1Request' is set
            if (ezsignfolderCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV1Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderCreateObjectV1Response>("/1/object/ezsignfolder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderCreateObjectV2Response</returns>
        [Obsolete]
        public EzsignfolderCreateObjectV2Response EzsignfolderCreateObjectV2(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV2Response> localVarResponse = EzsignfolderCreateObjectV2WithHttpInfo(ezsignfolderCreateObjectV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV2Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2WithHttpInfo(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderCreateObjectV2Request' is set
            if (ezsignfolderCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV2Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderCreateObjectV2Response>("/2/object/ezsignfolder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderCreateObjectV2Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderCreateObjectV2Response> EzsignfolderCreateObjectV2Async(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV2Response> localVarResponse = await EzsignfolderCreateObjectV2WithHttpInfoAsync(ezsignfolderCreateObjectV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV2Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV2Response>> EzsignfolderCreateObjectV2WithHttpInfoAsync(EzsignfolderCreateObjectV2Request ezsignfolderCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderCreateObjectV2Request' is set
            if (ezsignfolderCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV2Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderCreateObjectV2Response>("/2/object/ezsignfolder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderCreateObjectV3Response</returns>
        public EzsignfolderCreateObjectV3Response EzsignfolderCreateObjectV3(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV3Response> localVarResponse = EzsignfolderCreateObjectV3WithHttpInfo(ezsignfolderCreateObjectV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderCreateObjectV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV3Response> EzsignfolderCreateObjectV3WithHttpInfo(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderCreateObjectV3Request' is set
            if (ezsignfolderCreateObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV3Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV3");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderCreateObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderCreateObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderCreateObjectV3Response>("/3/object/ezsignfolder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderCreateObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderCreateObjectV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderCreateObjectV3Response> EzsignfolderCreateObjectV3Async(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV3Response> localVarResponse = await EzsignfolderCreateObjectV3WithHttpInfoAsync(ezsignfolderCreateObjectV3Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfolder The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderCreateObjectV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderCreateObjectV3Response>> EzsignfolderCreateObjectV3WithHttpInfoAsync(EzsignfolderCreateObjectV3Request ezsignfolderCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderCreateObjectV3Request' is set
            if (ezsignfolderCreateObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderCreateObjectV3Request' when calling ObjectEzsignfolderApi->EzsignfolderCreateObjectV3");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderCreateObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderCreateObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderCreateObjectV3Response>("/3/object/ezsignfolder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderCreateObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderDeleteObjectV1Response</returns>
        public EzsignfolderDeleteObjectV1Response EzsignfolderDeleteObjectV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderDeleteObjectV1Response> localVarResponse = EzsignfolderDeleteObjectV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderDeleteObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EzsignfolderDeleteObjectV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderDeleteObjectV1Response> EzsignfolderDeleteObjectV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderDeleteObjectV1Response> localVarResponse = await EzsignfolderDeleteObjectV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderDeleteObjectV1Response>> EzsignfolderDeleteObjectV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EzsignfolderDeleteObjectV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderDisposeEzsignfoldersV1Response</returns>
        public EzsignfolderDisposeEzsignfoldersV1Response EzsignfolderDisposeEzsignfoldersV1(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> localVarResponse = EzsignfolderDisposeEzsignfoldersV1WithHttpInfo(ezsignfolderDisposeEzsignfoldersV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1WithHttpInfo(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' is set
            if (ezsignfolderDisposeEzsignfoldersV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' when calling ObjectEzsignfolderApi->EzsignfolderDisposeEzsignfoldersV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderDisposeEzsignfoldersV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderDisposeEzsignfoldersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderDisposeEzsignfoldersV1Response>("/1/object/ezsignfolder/disposeEzsignfolders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderDisposeEzsignfoldersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderDisposeEzsignfoldersV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderDisposeEzsignfoldersV1Response> EzsignfolderDisposeEzsignfoldersV1Async(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response> localVarResponse = await EzsignfolderDisposeEzsignfoldersV1WithHttpInfoAsync(ezsignfolderDisposeEzsignfoldersV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dispose Ezsignfolders 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfolderDisposeEzsignfoldersV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeEzsignfoldersV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderDisposeEzsignfoldersV1Response>> EzsignfolderDisposeEzsignfoldersV1WithHttpInfoAsync(EzsignfolderDisposeEzsignfoldersV1Request ezsignfolderDisposeEzsignfoldersV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' is set
            if (ezsignfolderDisposeEzsignfoldersV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderDisposeEzsignfoldersV1Request' when calling ObjectEzsignfolderApi->EzsignfolderDisposeEzsignfoldersV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignfolderDisposeEzsignfoldersV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderDisposeEzsignfoldersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderDisposeEzsignfoldersV1Response>("/1/object/ezsignfolder/disposeEzsignfolders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderDisposeEzsignfoldersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderDisposeV1Response</returns>
        public EzsignfolderDisposeV1Response EzsignfolderDisposeV1(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderDisposeV1Response> localVarResponse = EzsignfolderDisposeV1WithHttpInfo(pkiEzsignfolderID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderDisposeV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderDisposeV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderDisposeV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderDisposeV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderDisposeV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderDisposeV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderDisposeV1Response> EzsignfolderDisposeV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderDisposeV1Response> localVarResponse = await EzsignfolderDisposeV1WithHttpInfoAsync(pkiEzsignfolderID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dispose the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderDisposeV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderDisposeV1Response>> EzsignfolderDisposeV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderDisposeV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderDisposeV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderDisposeV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderDisposeV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderEditObjectV3Response</returns>
        public EzsignfolderEditObjectV3Response EzsignfolderEditObjectV3(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderEditObjectV3Response> localVarResponse = EzsignfolderEditObjectV3WithHttpInfo(pkiEzsignfolderID, ezsignfolderEditObjectV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderEditObjectV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderEditObjectV3Response> EzsignfolderEditObjectV3WithHttpInfo(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderEditObjectV3Request' is set
            if (ezsignfolderEditObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderEditObjectV3Request' when calling ObjectEzsignfolderApi->EzsignfolderEditObjectV3");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderEditObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderEditObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsignfolderEditObjectV3Response>("/3/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderEditObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderEditObjectV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderEditObjectV3Response> EzsignfolderEditObjectV3Async(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderEditObjectV3Response> localVarResponse = await EzsignfolderEditObjectV3WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderEditObjectV3Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderEditObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderEditObjectV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderEditObjectV3Response>> EzsignfolderEditObjectV3WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderEditObjectV3Request ezsignfolderEditObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderEditObjectV3Request' is set
            if (ezsignfolderEditObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderEditObjectV3Request' when calling ObjectEzsignfolderApi->EzsignfolderEditObjectV3");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderEditObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderEditObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsignfolderEditObjectV3Response>("/3/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderEditObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End prematurely End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderEndPrematurelyV1Response</returns>
        public EzsignfolderEndPrematurelyV1Response EzsignfolderEndPrematurelyV1(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderEndPrematurelyV1Response> localVarResponse = EzsignfolderEndPrematurelyV1WithHttpInfo(pkiEzsignfolderID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End prematurely End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderEndPrematurelyV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderEndPrematurelyV1Response> EzsignfolderEndPrematurelyV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderEndPrematurelyV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderEndPrematurelyV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderEndPrematurelyV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/endPrematurely", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderEndPrematurelyV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End prematurely End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderEndPrematurelyV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderEndPrematurelyV1Response> EzsignfolderEndPrematurelyV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderEndPrematurelyV1Response> localVarResponse = await EzsignfolderEndPrematurelyV1WithHttpInfoAsync(pkiEzsignfolderID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End prematurely End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderEndPrematurelyV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderEndPrematurelyV1Response>> EzsignfolderEndPrematurelyV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderEndPrematurelyV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderEndPrematurelyV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderEndPrematurelyV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/endPrematurely", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderEndPrematurelyV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetActionableElementsV1Response</returns>
        public EzsignfolderGetActionableElementsV1Response EzsignfolderGetActionableElementsV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetActionableElementsV1Response> localVarResponse = EzsignfolderGetActionableElementsV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetActionableElementsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetActionableElementsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetActionableElementsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetActionableElementsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetActionableElementsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetActionableElementsV1Response> EzsignfolderGetActionableElementsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetActionableElementsV1Response> localVarResponse = await EzsignfolderGetActionableElementsV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsignfolder Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetActionableElementsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetActionableElementsV1Response>> EzsignfolderGetActionableElementsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetActionableElementsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetActionableElementsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetActionableElementsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Attachment count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetAttachmentCountV1Response</returns>
        public EzsignfolderGetAttachmentCountV1Response EzsignfolderGetAttachmentCountV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentCountV1Response> localVarResponse = EzsignfolderGetAttachmentCountV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Attachment count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetAttachmentCountV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentCountV1Response> EzsignfolderGetAttachmentCountV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetAttachmentCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetAttachmentCountV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachmentCount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetAttachmentCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Attachment count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetAttachmentCountV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetAttachmentCountV1Response> EzsignfolderGetAttachmentCountV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentCountV1Response> localVarResponse = await EzsignfolderGetAttachmentCountV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Attachment count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetAttachmentCountV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentCountV1Response>> EzsignfolderGetAttachmentCountV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetAttachmentCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetAttachmentCountV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachmentCount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetAttachmentCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetAttachmentsV1Response</returns>
        public EzsignfolderGetAttachmentsV1Response EzsignfolderGetAttachmentsV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentsV1Response> localVarResponse = EzsignfolderGetAttachmentsV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetAttachmentsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentsV1Response> EzsignfolderGetAttachmentsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetAttachmentsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetAttachmentsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetAttachmentsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetAttachmentsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetAttachmentsV1Response> EzsignfolderGetAttachmentsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentsV1Response> localVarResponse = await EzsignfolderGetAttachmentsV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetAttachmentsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetAttachmentsV1Response>> EzsignfolderGetAttachmentsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetAttachmentsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetAttachmentsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetAttachmentsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationCountV1Response</returns>
        public EzsignfolderGetCommunicationCountV1Response EzsignfolderGetCommunicationCountV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationCountV1Response> localVarResponse = EzsignfolderGetCommunicationCountV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationCountV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationCountV1Response> EzsignfolderGetCommunicationCountV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetCommunicationCountV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationCountV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetCommunicationCountV1Response> EzsignfolderGetCommunicationCountV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationCountV1Response> localVarResponse = await EzsignfolderGetCommunicationCountV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationCountV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationCountV1Response>> EzsignfolderGetCommunicationCountV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetCommunicationCountV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationListV1Response</returns>
        public EzsignfolderGetCommunicationListV1Response EzsignfolderGetCommunicationListV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationListV1Response> localVarResponse = EzsignfolderGetCommunicationListV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationListV1Response> EzsignfolderGetCommunicationListV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetCommunicationListV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetCommunicationListV1Response> EzsignfolderGetCommunicationListV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationListV1Response> localVarResponse = await EzsignfolderGetCommunicationListV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationListV1Response>> EzsignfolderGetCommunicationListV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetCommunicationListV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationrecipientsV1Response</returns>
        public EzsignfolderGetCommunicationrecipientsV1Response EzsignfolderGetCommunicationrecipientsV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationrecipientsV1Response> localVarResponse = EzsignfolderGetCommunicationrecipientsV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationrecipientsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationrecipientsV1Response> EzsignfolderGetCommunicationrecipientsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationrecipientsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetCommunicationrecipientsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationrecipients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationrecipientsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationrecipientsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetCommunicationrecipientsV1Response> EzsignfolderGetCommunicationrecipientsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationrecipientsV1Response> localVarResponse = await EzsignfolderGetCommunicationrecipientsV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationrecipientsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationrecipientsV1Response>> EzsignfolderGetCommunicationrecipientsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationrecipientsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetCommunicationrecipientsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationrecipients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationrecipientsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetCommunicationsendersV1Response</returns>
        public EzsignfolderGetCommunicationsendersV1Response EzsignfolderGetCommunicationsendersV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationsendersV1Response> localVarResponse = EzsignfolderGetCommunicationsendersV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetCommunicationsendersV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationsendersV1Response> EzsignfolderGetCommunicationsendersV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationsendersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetCommunicationsendersV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationsenders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationsendersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetCommunicationsendersV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetCommunicationsendersV1Response> EzsignfolderGetCommunicationsendersV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationsendersV1Response> localVarResponse = await EzsignfolderGetCommunicationsendersV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetCommunicationsendersV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetCommunicationsendersV1Response>> EzsignfolderGetCommunicationsendersV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetCommunicationsendersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetCommunicationsendersV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationsenders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetCommunicationsendersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetEzsigndocumentsV1Response</returns>
        public EzsignfolderGetEzsigndocumentsV1Response EzsignfolderGetEzsigndocumentsV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> localVarResponse = EzsignfolderGetEzsigndocumentsV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetEzsigndocumentsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetEzsigndocumentsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetEzsigndocumentsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetEzsigndocumentsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetEzsigndocumentsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetEzsigndocumentsV1Response> EzsignfolderGetEzsigndocumentsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsigndocumentsV1Response> localVarResponse = await EzsignfolderGetEzsigndocumentsV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsigndocumentsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsigndocumentsV1Response>> EzsignfolderGetEzsigndocumentsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetEzsigndocumentsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetEzsigndocumentsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetEzsigndocumentsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        public EzsignfolderGetEzsignfoldersignerassociationsV1Response EzsignfolderGetEzsignfoldersignerassociationsV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> localVarResponse = EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetEzsignfoldersignerassociationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetEzsignfoldersignerassociationsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetEzsignfoldersignerassociationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetEzsignfoldersignerassociationsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetEzsignfoldersignerassociationsV1Response> EzsignfolderGetEzsignfoldersignerassociationsV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response> localVarResponse = await EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsignfoldersignerassociationsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignfoldersignerassociationsV1Response>> EzsignfolderGetEzsignfoldersignerassociationsV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetEzsignfoldersignerassociationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetEzsignfoldersignerassociationsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetEzsignfoldersignerassociationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetEzsignsignaturesAutomaticV1Response</returns>
        public EzsignfolderGetEzsignsignaturesAutomaticV1Response EzsignfolderGetEzsignsignaturesAutomaticV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignsignaturesAutomaticV1Response> localVarResponse = EzsignfolderGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetEzsignsignaturesAutomaticV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignsignaturesAutomaticV1Response> EzsignfolderGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetEzsignsignaturesAutomaticV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetEzsignsignaturesAutomaticV1Response> EzsignfolderGetEzsignsignaturesAutomaticV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignsignaturesAutomaticV1Response> localVarResponse = await EzsignfolderGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetEzsignsignaturesAutomaticV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetEzsignsignaturesAutomaticV1Response>> EzsignfolderGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetFormsDataV1Response</returns>
        public EzsignfolderGetFormsDataV1Response EzsignfolderGetFormsDataV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetFormsDataV1Response> localVarResponse = EzsignfolderGetFormsDataV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetFormsDataV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetFormsDataV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetFormsDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetFormsDataV1Response> EzsignfolderGetFormsDataV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetFormsDataV1Response> localVarResponse = await EzsignfolderGetFormsDataV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetFormsDataV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetFormsDataV1Response>> EzsignfolderGetFormsDataV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetFormsDataV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetListV1Response</returns>
        public EzsignfolderGetListV1Response EzsignfolderGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetListV1Response> localVarResponse = EzsignfolderGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetListV1Response> EzsignfolderGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetListV1Response>("/1/object/ezsignfolder/getList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetListV1Response> EzsignfolderGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetListV1Response> localVarResponse = await EzsignfolderGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignfolder list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |- --| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetListV1Response>> EzsignfolderGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetListV1Response>("/1/object/ezsignfolder/getList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        public EzsignfolderGetObjectV1Response EzsignfolderGetObjectV1(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV1Response> localVarResponse = EzsignfolderGetObjectV1WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetObjectV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderGetObjectV1Response> EzsignfolderGetObjectV1Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV1Response> localVarResponse = await EzsignfolderGetObjectV1WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV1Response>> EzsignfolderGetObjectV1WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetObjectV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetObjectV2Response</returns>
        [Obsolete]
        public EzsignfolderGetObjectV2Response EzsignfolderGetObjectV2(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV2Response> localVarResponse = EzsignfolderGetObjectV2WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV2Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetObjectV2Response>("/2/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetObjectV2Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderGetObjectV2Response> EzsignfolderGetObjectV2Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV2Response> localVarResponse = await EzsignfolderGetObjectV2WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV2Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV2Response>> EzsignfolderGetObjectV2WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetObjectV2Response>("/2/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderGetObjectV3Response</returns>
        public EzsignfolderGetObjectV3Response EzsignfolderGetObjectV3(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV3Response> localVarResponse = EzsignfolderGetObjectV3WithHttpInfo(pkiEzsignfolderID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderGetObjectV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV3Response> EzsignfolderGetObjectV3WithHttpInfo(int pkiEzsignfolderID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignfolderGetObjectV3Response>("/3/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderGetObjectV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderGetObjectV3Response> EzsignfolderGetObjectV3Async(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV3Response> localVarResponse = await EzsignfolderGetObjectV3WithHttpInfoAsync(pkiEzsignfolderID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderGetObjectV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderGetObjectV3Response>> EzsignfolderGetObjectV3WithHttpInfoAsync(int pkiEzsignfolderID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderGetObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignfolderGetObjectV3Response>("/3/object/ezsignfolder/{pkiEzsignfolderID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderGetObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        public EzsignfolderImportEzsignfoldersignerassociationsV1Response EzsignfolderImportEzsignfoldersignerassociationsV1(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> localVarResponse = EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderImportEzsignfoldersignerassociationsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' is set
            if (ezsignfolderImportEzsignfoldersignerassociationsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsignfoldersignerassociationsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderImportEzsignfoldersignerassociationsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderImportEzsignfoldersignerassociationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderImportEzsignfoldersignerassociationsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderImportEzsignfoldersignerassociationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderImportEzsignfoldersignerassociationsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderImportEzsignfoldersignerassociationsV1Response> EzsignfolderImportEzsignfoldersignerassociationsV1Async(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response> localVarResponse = await EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderImportEzsignfoldersignerassociationsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import an existing Ezsignfoldersignerassociation into this Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsignfoldersignerassociationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsignfoldersignerassociationsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsignfoldersignerassociationsV1Response>> EzsignfolderImportEzsignfoldersignerassociationsV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderImportEzsignfoldersignerassociationsV1Request ezsignfolderImportEzsignfoldersignerassociationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' is set
            if (ezsignfolderImportEzsignfoldersignerassociationsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderImportEzsignfoldersignerassociationsV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsignfoldersignerassociationsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderImportEzsignfoldersignerassociationsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderImportEzsignfoldersignerassociationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderImportEzsignfoldersignerassociationsV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderImportEzsignfoldersignerassociationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        public EzsignfolderImportEzsigntemplatepackageV1Response EzsignfolderImportEzsigntemplatepackageV1(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> localVarResponse = EzsignfolderImportEzsigntemplatepackageV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderImportEzsigntemplatepackageV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' is set
            if (ezsignfolderImportEzsigntemplatepackageV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsigntemplatepackageV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderImportEzsigntemplatepackageV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderImportEzsigntemplatepackageV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderImportEzsigntemplatepackageV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderImportEzsigntemplatepackageV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderImportEzsigntemplatepackageV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderImportEzsigntemplatepackageV1Response> EzsignfolderImportEzsigntemplatepackageV1Async(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response> localVarResponse = await EzsignfolderImportEzsigntemplatepackageV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderImportEzsigntemplatepackageV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import an Ezsigntemplatepackage in the Ezsignfolder. This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderImportEzsigntemplatepackageV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderImportEzsigntemplatepackageV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderImportEzsigntemplatepackageV1Response>> EzsignfolderImportEzsigntemplatepackageV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderImportEzsigntemplatepackageV1Request ezsignfolderImportEzsigntemplatepackageV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' is set
            if (ezsignfolderImportEzsigntemplatepackageV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderImportEzsigntemplatepackageV1Request' when calling ObjectEzsignfolderApi->EzsignfolderImportEzsigntemplatepackageV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderImportEzsigntemplatepackageV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderImportEzsigntemplatepackageV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderImportEzsigntemplatepackageV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderImportEzsigntemplatepackageV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderReorderV1Response</returns>
        [Obsolete]
        public EzsignfolderReorderV1Response EzsignfolderReorderV1(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderReorderV1Response> localVarResponse = EzsignfolderReorderV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderReorderV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderReorderV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignfolderReorderV1Response> EzsignfolderReorderV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderReorderV1Request' is set
            if (ezsignfolderReorderV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderReorderV1Request' when calling ObjectEzsignfolderApi->EzsignfolderReorderV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderReorderV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderReorderV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderReorderV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderReorderV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderReorderV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderReorderV1Response> EzsignfolderReorderV1Async(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderReorderV1Response> localVarResponse = await EzsignfolderReorderV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderReorderV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderReorderV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderReorderV1Response>> EzsignfolderReorderV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderReorderV1Request ezsignfolderReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderReorderV1Request' is set
            if (ezsignfolderReorderV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderReorderV1Request' when calling ObjectEzsignfolderApi->EzsignfolderReorderV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderReorderV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderReorderV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderReorderV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderReorderV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderReorderV2Response</returns>
        public EzsignfolderReorderV2Response EzsignfolderReorderV2(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderReorderV2Response> localVarResponse = EzsignfolderReorderV2WithHttpInfo(pkiEzsignfolderID, ezsignfolderReorderV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderReorderV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderReorderV2Response> EzsignfolderReorderV2WithHttpInfo(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderReorderV2Request' is set
            if (ezsignfolderReorderV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderReorderV2Request' when calling ObjectEzsignfolderApi->EzsignfolderReorderV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderReorderV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderReorderV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderReorderV2Response>("/2/object/ezsignfolder/{pkiEzsignfolderID}/reorder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderReorderV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderReorderV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderReorderV2Response> EzsignfolderReorderV2Async(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderReorderV2Response> localVarResponse = await EzsignfolderReorderV2WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderReorderV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsigndocuments in the Ezsignfolder 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderReorderV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderReorderV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderReorderV2Response>> EzsignfolderReorderV2WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderReorderV2Request ezsignfolderReorderV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderReorderV2Request' is set
            if (ezsignfolderReorderV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderReorderV2Request' when calling ObjectEzsignfolderApi->EzsignfolderReorderV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderReorderV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderReorderV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderReorderV2Response>("/2/object/ezsignfolder/{pkiEzsignfolderID}/reorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderReorderV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderSendV1Response</returns>
        [Obsolete]
        public EzsignfolderSendV1Response EzsignfolderSendV1(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderSendV1Response> localVarResponse = EzsignfolderSendV1WithHttpInfo(pkiEzsignfolderID, ezsignfolderSendV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderSendV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignfolderSendV1Response> EzsignfolderSendV1WithHttpInfo(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderSendV1Request' is set
            if (ezsignfolderSendV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderSendV1Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderSendV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderSendV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderSendV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderSendV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderSendV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfolderSendV1Response> EzsignfolderSendV1Async(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderSendV1Response> localVarResponse = await EzsignfolderSendV1WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderSendV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderSendV1Response>> EzsignfolderSendV1WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderSendV1Request ezsignfolderSendV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderSendV1Request' is set
            if (ezsignfolderSendV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderSendV1Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderSendV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderSendV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderSendV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderSendV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderSendV3Response</returns>
        public EzsignfolderSendV3Response EzsignfolderSendV3(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderSendV3Response> localVarResponse = EzsignfolderSendV3WithHttpInfo(pkiEzsignfolderID, ezsignfolderSendV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderSendV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderSendV3Response> EzsignfolderSendV3WithHttpInfo(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignfolderSendV3Request' is set
            if (ezsignfolderSendV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderSendV3Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV3");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderSendV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderSendV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderSendV3Response>("/3/object/ezsignfolder/{pkiEzsignfolderID}/send", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderSendV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderSendV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderSendV3Response> EzsignfolderSendV3Async(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderSendV3Response> localVarResponse = await EzsignfolderSendV3WithHttpInfoAsync(pkiEzsignfolderID, ezsignfolderSendV3Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send the Ezsignfolder to the signatories for signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="ezsignfolderSendV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderSendV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderSendV3Response>> EzsignfolderSendV3WithHttpInfoAsync(int pkiEzsignfolderID, EzsignfolderSendV3Request ezsignfolderSendV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignfolderSendV3Request' is set
            if (ezsignfolderSendV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignfolderSendV3Request' when calling ObjectEzsignfolderApi->EzsignfolderSendV3");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = ezsignfolderSendV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderSendV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderSendV3Response>("/3/object/ezsignfolder/{pkiEzsignfolderID}/send", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderSendV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignfolderUnsendV1Response</returns>
        public EzsignfolderUnsendV1Response EzsignfolderUnsendV1(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderUnsendV1Response> localVarResponse = EzsignfolderUnsendV1WithHttpInfo(pkiEzsignfolderID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignfolderUnsendV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1WithHttpInfo(int pkiEzsignfolderID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderUnsendV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderUnsendV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignfolderUnsendV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderUnsendV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignfolderUnsendV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfolderUnsendV1Response> EzsignfolderUnsendV1Async(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignfolderUnsendV1Response> localVarResponse = await EzsignfolderUnsendV1WithHttpInfoAsync(pkiEzsignfolderID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsend the Ezsignfolder Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfolderID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignfolderUnsendV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignfolderUnsendV1Response>> EzsignfolderUnsendV1WithHttpInfoAsync(int pkiEzsignfolderID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfolderApi->EzsignfolderUnsendV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignfolderID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignfolderID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsignfolderApi.EzsignfolderUnsendV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignfolderUnsendV1Response>("/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignfolderUnsendV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
