/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.8
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignformfieldgroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <returns>EzsignformfieldgroupCreateObjectV1Response</returns>
        EzsignformfieldgroupCreateObjectV1Response EzsignformfieldgroupCreateObjectV1 (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupCreateObjectV1Response</returns>
        ApiResponse<EzsignformfieldgroupCreateObjectV1Response> EzsignformfieldgroupCreateObjectV1WithHttpInfo (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>EzsignformfieldgroupDeleteObjectV1Response</returns>
        EzsignformfieldgroupDeleteObjectV1Response EzsignformfieldgroupDeleteObjectV1 (int pkiEzsignformfieldgroupID);

        /// <summary>
        /// Delete an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupDeleteObjectV1Response</returns>
        ApiResponse<EzsignformfieldgroupDeleteObjectV1Response> EzsignformfieldgroupDeleteObjectV1WithHttpInfo (int pkiEzsignformfieldgroupID);
        /// <summary>
        /// Edit an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <returns>EzsignformfieldgroupEditObjectV1Response</returns>
        EzsignformfieldgroupEditObjectV1Response EzsignformfieldgroupEditObjectV1 (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupEditObjectV1Response</returns>
        ApiResponse<EzsignformfieldgroupEditObjectV1Response> EzsignformfieldgroupEditObjectV1WithHttpInfo (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>EzsignformfieldgroupGetObjectV1Response</returns>
        EzsignformfieldgroupGetObjectV1Response EzsignformfieldgroupGetObjectV1 (int pkiEzsignformfieldgroupID);

        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupGetObjectV1Response</returns>
        ApiResponse<EzsignformfieldgroupGetObjectV1Response> EzsignformfieldgroupGetObjectV1WithHttpInfo (int pkiEzsignformfieldgroupID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignformfieldgroupCreateObjectV1Response> EzsignformfieldgroupCreateObjectV1Async (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupCreateObjectV1Response>> EzsignformfieldgroupCreateObjectV1WithHttpInfoAsync (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignformfieldgroupDeleteObjectV1Response> EzsignformfieldgroupDeleteObjectV1Async (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupDeleteObjectV1Response>> EzsignformfieldgroupDeleteObjectV1WithHttpInfoAsync (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignformfieldgroupEditObjectV1Response> EzsignformfieldgroupEditObjectV1Async (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupEditObjectV1Response>> EzsignformfieldgroupEditObjectV1WithHttpInfoAsync (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignformfieldgroupGetObjectV1Response> EzsignformfieldgroupGetObjectV1Async (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupGetObjectV1Response>> EzsignformfieldgroupGetObjectV1WithHttpInfoAsync (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignformfieldgroupApi : IObjectEzsignformfieldgroupApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignformfieldgroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignformfieldgroupApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignformfieldgroupApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignformfieldgroupApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignformfieldgroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignformfieldgroupApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsignformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <returns>EzsignformfieldgroupCreateObjectV1Response</returns>
        public EzsignformfieldgroupCreateObjectV1Response EzsignformfieldgroupCreateObjectV1 (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request)
        {
             ApiResponse<EzsignformfieldgroupCreateObjectV1Response> localVarResponse = EzsignformfieldgroupCreateObjectV1WithHttpInfo(ezsignformfieldgroupCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupCreateObjectV1Response</returns>
        public ApiResponse<EzsignformfieldgroupCreateObjectV1Response> EzsignformfieldgroupCreateObjectV1WithHttpInfo (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request)
        {
            // verify the required parameter 'ezsignformfieldgroupCreateObjectV1Request' is set
            if (ezsignformfieldgroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignformfieldgroupCreateObjectV1Request' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupCreateObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignformfieldgroupCreateObjectV1Request != null && ezsignformfieldgroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignformfieldgroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignformfieldgroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignformfieldgroupCreateObjectV1Response> EzsignformfieldgroupCreateObjectV1Async (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignformfieldgroupCreateObjectV1Response> localVarResponse = await EzsignformfieldgroupCreateObjectV1WithHttpInfoAsync(ezsignformfieldgroupCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupCreateObjectV1Response>> EzsignformfieldgroupCreateObjectV1WithHttpInfoAsync (EzsignformfieldgroupCreateObjectV1Request ezsignformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignformfieldgroupCreateObjectV1Request' is set
            if (ezsignformfieldgroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignformfieldgroupCreateObjectV1Request' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupCreateObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignformfieldgroupCreateObjectV1Request != null && ezsignformfieldgroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignformfieldgroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignformfieldgroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>EzsignformfieldgroupDeleteObjectV1Response</returns>
        public EzsignformfieldgroupDeleteObjectV1Response EzsignformfieldgroupDeleteObjectV1 (int pkiEzsignformfieldgroupID)
        {
             ApiResponse<EzsignformfieldgroupDeleteObjectV1Response> localVarResponse = EzsignformfieldgroupDeleteObjectV1WithHttpInfo(pkiEzsignformfieldgroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupDeleteObjectV1Response</returns>
        public ApiResponse<EzsignformfieldgroupDeleteObjectV1Response> EzsignformfieldgroupDeleteObjectV1WithHttpInfo (int pkiEzsignformfieldgroupID)
        {
            // verify the required parameter 'pkiEzsignformfieldgroupID' is set
            if (pkiEzsignformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignformfieldgroupID' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupDeleteObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignformfieldgroupID != null) localVarPathParams.Add("pkiEzsignformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignformfieldgroupDeleteObjectV1Response> EzsignformfieldgroupDeleteObjectV1Async (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignformfieldgroupDeleteObjectV1Response> localVarResponse = await EzsignformfieldgroupDeleteObjectV1WithHttpInfoAsync(pkiEzsignformfieldgroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupDeleteObjectV1Response>> EzsignformfieldgroupDeleteObjectV1WithHttpInfoAsync (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignformfieldgroupID' is set
            if (pkiEzsignformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignformfieldgroupID' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupDeleteObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignformfieldgroupID != null) localVarPathParams.Add("pkiEzsignformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <returns>EzsignformfieldgroupEditObjectV1Response</returns>
        public EzsignformfieldgroupEditObjectV1Response EzsignformfieldgroupEditObjectV1 (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request)
        {
             ApiResponse<EzsignformfieldgroupEditObjectV1Response> localVarResponse = EzsignformfieldgroupEditObjectV1WithHttpInfo(pkiEzsignformfieldgroupID, ezsignformfieldgroupEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupEditObjectV1Response</returns>
        public ApiResponse<EzsignformfieldgroupEditObjectV1Response> EzsignformfieldgroupEditObjectV1WithHttpInfo (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsignformfieldgroupID' is set
            if (pkiEzsignformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignformfieldgroupID' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupEditObjectV1");
            // verify the required parameter 'ezsignformfieldgroupEditObjectV1Request' is set
            if (ezsignformfieldgroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignformfieldgroupEditObjectV1Request' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupEditObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignformfieldgroupID != null) localVarPathParams.Add("pkiEzsignformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignformfieldgroupID)); // path parameter
            if (ezsignformfieldgroupEditObjectV1Request != null && ezsignformfieldgroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignformfieldgroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignformfieldgroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignformfieldgroupEditObjectV1Response> EzsignformfieldgroupEditObjectV1Async (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignformfieldgroupEditObjectV1Response> localVarResponse = await EzsignformfieldgroupEditObjectV1WithHttpInfoAsync(pkiEzsignformfieldgroupID, ezsignformfieldgroupEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="ezsignformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupEditObjectV1Response>> EzsignformfieldgroupEditObjectV1WithHttpInfoAsync (int pkiEzsignformfieldgroupID, EzsignformfieldgroupEditObjectV1Request ezsignformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignformfieldgroupID' is set
            if (pkiEzsignformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignformfieldgroupID' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupEditObjectV1");
            // verify the required parameter 'ezsignformfieldgroupEditObjectV1Request' is set
            if (ezsignformfieldgroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignformfieldgroupEditObjectV1Request' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupEditObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignformfieldgroupID != null) localVarPathParams.Add("pkiEzsignformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignformfieldgroupID)); // path parameter
            if (ezsignformfieldgroupEditObjectV1Request != null && ezsignformfieldgroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignformfieldgroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignformfieldgroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>EzsignformfieldgroupGetObjectV1Response</returns>
        public EzsignformfieldgroupGetObjectV1Response EzsignformfieldgroupGetObjectV1 (int pkiEzsignformfieldgroupID)
        {
             ApiResponse<EzsignformfieldgroupGetObjectV1Response> localVarResponse = EzsignformfieldgroupGetObjectV1WithHttpInfo(pkiEzsignformfieldgroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsignformfieldgroupGetObjectV1Response</returns>
        public ApiResponse<EzsignformfieldgroupGetObjectV1Response> EzsignformfieldgroupGetObjectV1WithHttpInfo (int pkiEzsignformfieldgroupID)
        {
            // verify the required parameter 'pkiEzsignformfieldgroupID' is set
            if (pkiEzsignformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignformfieldgroupID' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupGetObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignformfieldgroupID != null) localVarPathParams.Add("pkiEzsignformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignformfieldgroupGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignformfieldgroupGetObjectV1Response> EzsignformfieldgroupGetObjectV1Async (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignformfieldgroupGetObjectV1Response> localVarResponse = await EzsignformfieldgroupGetObjectV1WithHttpInfoAsync(pkiEzsignformfieldgroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignformfieldgroupGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignformfieldgroupGetObjectV1Response>> EzsignformfieldgroupGetObjectV1WithHttpInfoAsync (int pkiEzsignformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignformfieldgroupID' is set
            if (pkiEzsignformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignformfieldgroupID' when calling ObjectEzsignformfieldgroupApi->EzsignformfieldgroupGetObjectV1");

            var localVarPath = "/1/object/ezsignformfieldgroup/{pkiEzsignformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignformfieldgroupID != null) localVarPathParams.Add("pkiEzsignformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignformfieldgroupGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignformfieldgroupGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignformfieldgroupGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignformfieldgroupGetObjectV1Response)));
        }

    }
}
