/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigndocumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        [Obsolete]
        CommonResponse EzsigndocumentApplyEzsigntemplateV1(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0);

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        [Obsolete]
        ApiResponse<CommonResponse> EzsigndocumentApplyEzsigntemplateV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0);
        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentApplyEzsigntemplateV2Response</returns>
        EzsigndocumentApplyEzsigntemplateV2Response EzsigndocumentApplyEzsigntemplateV2(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0);

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentApplyEzsigntemplateV2Response</returns>
        ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response> EzsigndocumentApplyEzsigntemplateV2WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0);
        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentApplyEzsigntemplateglobalV1Response</returns>
        EzsigndocumentApplyEzsigntemplateglobalV1Response EzsigndocumentApplyEzsigntemplateglobalV1(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0);

        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentApplyEzsigntemplateglobalV1Response</returns>
        ApiResponse<EzsigndocumentApplyEzsigntemplateglobalV1Response> EzsigndocumentApplyEzsigntemplateglobalV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0);
        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateEzsignelementsPositionedByWordV1Response</returns>
        EzsigndocumentCreateEzsignelementsPositionedByWordV1Response EzsigndocumentCreateEzsignelementsPositionedByWordV1(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0);

        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateEzsignelementsPositionedByWordV1Response</returns>
        ApiResponse<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> EzsigndocumentCreateEzsignelementsPositionedByWordV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateObjectV1Response</returns>
        [Obsolete]
        EzsigndocumentCreateObjectV1Response EzsigndocumentCreateObjectV1(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1WithHttpInfo(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateObjectV2Response</returns>
        [Obsolete]
        EzsigndocumentCreateObjectV2Response EzsigndocumentCreateObjectV2(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV2Response</returns>
        [Obsolete]
        ApiResponse<EzsigndocumentCreateObjectV2Response> EzsigndocumentCreateObjectV2WithHttpInfo(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateObjectV3Response</returns>
        EzsigndocumentCreateObjectV3Response EzsigndocumentCreateObjectV3(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV3Response</returns>
        ApiResponse<EzsigndocumentCreateObjectV3Response> EzsigndocumentCreateObjectV3WithHttpInfo(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0);
        /// <summary>
        /// Decline to sign
        /// </summary>
        /// <remarks>
        /// Decline to sign
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentDeclineToSignV1(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0);

        /// <summary>
        /// Decline to sign
        /// </summary>
        /// <remarks>
        /// Decline to sign
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentDeclineToSignV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0);
        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentDeleteObjectV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentDeleteObjectV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Ezsignannotations
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditEzsignannotationsV1Response</returns>
        EzsigndocumentEditEzsignannotationsV1Response EzsigndocumentEditEzsignannotationsV1(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Ezsignannotations
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditEzsignannotationsV1Response</returns>
        ApiResponse<EzsigndocumentEditEzsignannotationsV1Response> EzsigndocumentEditEzsignannotationsV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditEzsignformfieldgroupsV1Response</returns>
        EzsigndocumentEditEzsignformfieldgroupsV1Response EzsigndocumentEditEzsignformfieldgroupsV1(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditEzsignformfieldgroupsV1Response</returns>
        ApiResponse<EzsigndocumentEditEzsignformfieldgroupsV1Response> EzsigndocumentEditEzsignformfieldgroupsV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditEzsignsignaturesV1Response</returns>
        EzsigndocumentEditEzsignsignaturesV1Response EzsigndocumentEditEzsignsignaturesV1(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditEzsignsignaturesV1Response</returns>
        ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response> EzsigndocumentEditEzsignsignaturesV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsigndocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditObjectV1Response</returns>
        EzsigndocumentEditObjectV1Response EzsigndocumentEditObjectV1(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditObjectV1Response</returns>
        ApiResponse<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely an Ezsigndocument when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentEndPrematurelyV1(int pkiEzsigndocumentID, Object body, int operationIndex = 0);

        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely an Ezsigndocument when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentEndPrematurelyV1WithHttpInfo(int pkiEzsigndocumentID, Object body, int operationIndex = 0);
        /// <summary>
        /// Extract text from Ezsigndocument area
        /// </summary>
        /// <remarks>
        /// Extract text from Ezsigndocument area
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentExtractTextV1Response</returns>
        EzsigndocumentExtractTextV1Response EzsigndocumentExtractTextV1(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0);

        /// <summary>
        /// Extract text from Ezsigndocument area
        /// </summary>
        /// <remarks>
        /// Extract text from Ezsigndocument area
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentExtractTextV1Response</returns>
        ApiResponse<EzsigndocumentExtractTextV1Response> EzsigndocumentExtractTextV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0);
        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentFlattenV1(int pkiEzsigndocumentID, Object body, int operationIndex = 0);

        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentFlattenV1WithHttpInfo(int pkiEzsigndocumentID, Object body, int operationIndex = 0);
        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetActionableElementsV1Response</returns>
        EzsigndocumentGetActionableElementsV1Response EzsigndocumentGetActionableElementsV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetActionableElementsV1Response</returns>
        ApiResponse<EzsigndocumentGetActionableElementsV1Response> EzsigndocumentGetActionableElementsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetAttachmentsV1Response</returns>
        EzsigndocumentGetAttachmentsV1Response EzsigndocumentGetAttachmentsV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetAttachmentsV1Response</returns>
        ApiResponse<EzsigndocumentGetAttachmentsV1Response> EzsigndocumentGetAttachmentsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetCompletedElementsV1Response</returns>
        EzsigndocumentGetCompletedElementsV1Response EzsigndocumentGetCompletedElementsV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetCompletedElementsV1Response</returns>
        ApiResponse<EzsigndocumentGetCompletedElementsV1Response> EzsigndocumentGetCompletedElementsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetDownloadUrlV1Response</returns>
        EzsigndocumentGetDownloadUrlV1Response EzsigndocumentGetDownloadUrlV1(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0);

        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetDownloadUrlV1Response</returns>
        ApiResponse<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1WithHttpInfo(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignannotationsV1Response</returns>
        EzsigndocumentGetEzsignannotationsV1Response EzsigndocumentGetEzsignannotationsV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignannotationsV1Response</returns>
        ApiResponse<EzsigndocumentGetEzsignannotationsV1Response> EzsigndocumentGetEzsignannotationsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsigndiscussionsV1Response</returns>
        EzsigndocumentGetEzsigndiscussionsV1Response EzsigndocumentGetEzsigndiscussionsV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsigndiscussionsV1Response</returns>
        ApiResponse<EzsigndocumentGetEzsigndiscussionsV1Response> EzsigndocumentGetEzsigndiscussionsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignformfieldgroupsV1Response</returns>
        EzsigndocumentGetEzsignformfieldgroupsV1Response EzsigndocumentGetEzsignformfieldgroupsV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignformfieldgroupsV1Response</returns>
        ApiResponse<EzsigndocumentGetEzsignformfieldgroupsV1Response> EzsigndocumentGetEzsignformfieldgroupsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignpagesV1Response</returns>
        EzsigndocumentGetEzsignpagesV1Response EzsigndocumentGetEzsignpagesV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignpagesV1Response</returns>
        ApiResponse<EzsigndocumentGetEzsignpagesV1Response> EzsigndocumentGetEzsignpagesV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignsignaturesAutomaticV1Response</returns>
        EzsigndocumentGetEzsignsignaturesAutomaticV1Response EzsigndocumentGetEzsignsignaturesAutomaticV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignsignaturesAutomaticV1Response</returns>
        ApiResponse<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> EzsigndocumentGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignsignaturesV1Response</returns>
        EzsigndocumentGetEzsignsignaturesV1Response EzsigndocumentGetEzsignsignaturesV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignsignaturesV1Response</returns>
        ApiResponse<EzsigndocumentGetEzsignsignaturesV1Response> EzsigndocumentGetEzsignsignaturesV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetFormDataV1Response</returns>
        EzsigndocumentGetFormDataV1Response EzsigndocumentGetFormDataV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetFormDataV1Response</returns>
        ApiResponse<EzsigndocumentGetFormDataV1Response> EzsigndocumentGetFormDataV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetObjectV1Response</returns>
        [Obsolete]
        EzsigndocumentGetObjectV1Response EzsigndocumentGetObjectV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetObjectV2Response</returns>
        EzsigndocumentGetObjectV2Response EzsigndocumentGetObjectV2(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetObjectV2Response</returns>
        ApiResponse<EzsigndocumentGetObjectV2Response> EzsigndocumentGetObjectV2WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve the temporary proof
        /// </summary>
        /// <remarks>
        /// Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetTemporaryProofV1Response</returns>
        EzsigndocumentGetTemporaryProofV1Response EzsigndocumentGetTemporaryProofV1(int pkiEzsigndocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve the temporary proof
        /// </summary>
        /// <remarks>
        /// Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetTemporaryProofV1Response</returns>
        ApiResponse<EzsigndocumentGetTemporaryProofV1Response> EzsigndocumentGetTemporaryProofV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetWordsPositionsV1Response</returns>
        EzsigndocumentGetWordsPositionsV1Response EzsigndocumentGetWordsPositionsV1(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0);

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetWordsPositionsV1Response</returns>
        ApiResponse<EzsigndocumentGetWordsPositionsV1Response> EzsigndocumentGetWordsPositionsV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0);
        /// <summary>
        /// Patch an existing Ezsigndocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentPatchObjectV1(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Patch an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentPatchObjectV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Submit the Ezsignform
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentSubmitEzsignformV1(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0);

        /// <summary>
        /// Submit the Ezsignform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentSubmitEzsignformV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0);
        /// <summary>
        /// Unsend the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        CommonResponse EzsigndocumentUnsendV1(int pkiEzsigndocumentID, Object body, int operationIndex = 0);

        /// <summary>
        /// Unsend the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        ApiResponse<CommonResponse> EzsigndocumentUnsendV1WithHttpInfo(int pkiEzsigndocumentID, Object body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigndocumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentApplyEzsigntemplateV1Async(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentApplyEzsigntemplateV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentApplyEzsigntemplateV2Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentApplyEzsigntemplateV2Response> EzsigndocumentApplyEzsigntemplateV2Async(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentApplyEzsigntemplateV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response>> EzsigndocumentApplyEzsigntemplateV2WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentApplyEzsigntemplateglobalV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentApplyEzsigntemplateglobalV1Response> EzsigndocumentApplyEzsigntemplateglobalV1Async(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentApplyEzsigntemplateglobalV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentApplyEzsigntemplateglobalV1Response>> EzsigndocumentApplyEzsigntemplateglobalV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateEzsignelementsPositionedByWordV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> EzsigndocumentCreateEzsignelementsPositionedByWordV1Async(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateEzsignelementsPositionedByWordV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response>> EzsigndocumentCreateEzsignelementsPositionedByWordV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1Async(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentCreateObjectV1Response>> EzsigndocumentCreateObjectV1WithHttpInfoAsync(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateObjectV2Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsigndocumentCreateObjectV2Response> EzsigndocumentCreateObjectV2Async(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV2Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentCreateObjectV2Response>> EzsigndocumentCreateObjectV2WithHttpInfoAsync(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateObjectV3Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentCreateObjectV3Response> EzsigndocumentCreateObjectV3Async(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentCreateObjectV3Response>> EzsigndocumentCreateObjectV3WithHttpInfoAsync(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Decline to sign
        /// </summary>
        /// <remarks>
        /// Decline to sign
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentDeclineToSignV1Async(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Decline to sign
        /// </summary>
        /// <remarks>
        /// Decline to sign
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentDeclineToSignV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentDeleteObjectV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentDeleteObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Ezsignannotations
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditEzsignannotationsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentEditEzsignannotationsV1Response> EzsigndocumentEditEzsignannotationsV1Async(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Ezsignannotations
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditEzsignannotationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentEditEzsignannotationsV1Response>> EzsigndocumentEditEzsignannotationsV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditEzsignformfieldgroupsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentEditEzsignformfieldgroupsV1Response> EzsigndocumentEditEzsignformfieldgroupsV1Async(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditEzsignformfieldgroupsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentEditEzsignformfieldgroupsV1Response>> EzsigndocumentEditEzsignformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditEzsignsignaturesV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentEditEzsignsignaturesV1Response> EzsigndocumentEditEzsignsignaturesV1Async(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditEzsignsignaturesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response>> EzsigndocumentEditEzsignsignaturesV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1Async(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentEditObjectV1Response>> EzsigndocumentEditObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely an Ezsigndocument when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentEndPrematurelyV1Async(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// End prematurely
        /// </summary>
        /// <remarks>
        /// End prematurely an Ezsigndocument when some signatures are still required
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentEndPrematurelyV1WithHttpInfoAsync(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Extract text from Ezsigndocument area
        /// </summary>
        /// <remarks>
        /// Extract text from Ezsigndocument area
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentExtractTextV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentExtractTextV1Response> EzsigndocumentExtractTextV1Async(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Extract text from Ezsigndocument area
        /// </summary>
        /// <remarks>
        /// Extract text from Ezsigndocument area
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentExtractTextV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentExtractTextV1Response>> EzsigndocumentExtractTextV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentFlattenV1Async(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentFlattenV1WithHttpInfoAsync(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetActionableElementsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetActionableElementsV1Response> EzsigndocumentGetActionableElementsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetActionableElementsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetActionableElementsV1Response>> EzsigndocumentGetActionableElementsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetAttachmentsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetAttachmentsV1Response> EzsigndocumentGetAttachmentsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetAttachmentsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetAttachmentsV1Response>> EzsigndocumentGetAttachmentsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetCompletedElementsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetCompletedElementsV1Response> EzsigndocumentGetCompletedElementsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetCompletedElementsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetCompletedElementsV1Response>> EzsigndocumentGetCompletedElementsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetDownloadUrlV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1Async(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetDownloadUrlV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetDownloadUrlV1Response>> EzsigndocumentGetDownloadUrlV1WithHttpInfoAsync(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignannotationsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetEzsignannotationsV1Response> EzsigndocumentGetEzsignannotationsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignannotationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetEzsignannotationsV1Response>> EzsigndocumentGetEzsignannotationsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsigndiscussionsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetEzsigndiscussionsV1Response> EzsigndocumentGetEzsigndiscussionsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsigndiscussionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetEzsigndiscussionsV1Response>> EzsigndocumentGetEzsigndiscussionsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignformfieldgroupsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetEzsignformfieldgroupsV1Response> EzsigndocumentGetEzsignformfieldgroupsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignformfieldgroupsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetEzsignformfieldgroupsV1Response>> EzsigndocumentGetEzsignformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignpagesV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetEzsignpagesV1Response> EzsigndocumentGetEzsignpagesV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignpagesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetEzsignpagesV1Response>> EzsigndocumentGetEzsignpagesV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignsignaturesAutomaticV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> EzsigndocumentGetEzsignsignaturesAutomaticV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignsignaturesAutomaticV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetEzsignsignaturesAutomaticV1Response>> EzsigndocumentGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignsignaturesV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetEzsignsignaturesV1Response> EzsigndocumentGetEzsignsignaturesV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignsignaturesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetEzsignsignaturesV1Response>> EzsigndocumentGetEzsignsignaturesV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetFormDataV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetFormDataV1Response> EzsigndocumentGetFormDataV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetFormDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetFormDataV1Response>> EzsigndocumentGetFormDataV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetObjectV1Response>> EzsigndocumentGetObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetObjectV2Response> EzsigndocumentGetObjectV2Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetObjectV2Response>> EzsigndocumentGetObjectV2WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the temporary proof
        /// </summary>
        /// <remarks>
        /// Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetTemporaryProofV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetTemporaryProofV1Response> EzsigndocumentGetTemporaryProofV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the temporary proof
        /// </summary>
        /// <remarks>
        /// Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetTemporaryProofV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetTemporaryProofV1Response>> EzsigndocumentGetTemporaryProofV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetWordsPositionsV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetWordsPositionsV1Response> EzsigndocumentGetWordsPositionsV1Async(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetWordsPositionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetWordsPositionsV1Response>> EzsigndocumentGetWordsPositionsV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Patch an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentPatchObjectV1Async(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Patch an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentPatchObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Submit the Ezsignform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentSubmitEzsignformV1Async(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Submit the Ezsignform
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentSubmitEzsignformV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unsend the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        System.Threading.Tasks.Task<CommonResponse> EzsigndocumentUnsendV1Async(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unsend the Ezsigndocument
        /// </summary>
        /// <remarks>
        /// Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonResponse>> EzsigndocumentUnsendV1WithHttpInfoAsync(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigndocumentApi : IObjectEzsigndocumentApiSync, IObjectEzsigndocumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigndocumentApi : IObjectEzsigndocumentApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigndocumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigndocumentApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigndocumentApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsigndocumentApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        [Obsolete]
        public CommonResponse EzsigndocumentApplyEzsigntemplateV1(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentApplyEzsigntemplateV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentApplyEzsigntemplateV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
            if (ezsigndocumentApplyEzsigntemplateV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentApplyEzsigntemplateV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentApplyEzsigntemplateV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentApplyEzsigntemplateV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentApplyEzsigntemplateV1Async(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentApplyEzsigntemplateV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentApplyEzsigntemplateV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
            if (ezsigndocumentApplyEzsigntemplateV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentApplyEzsigntemplateV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentApplyEzsigntemplateV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentApplyEzsigntemplateV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentApplyEzsigntemplateV2Response</returns>
        public EzsigndocumentApplyEzsigntemplateV2Response EzsigndocumentApplyEzsigntemplateV2(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response> localVarResponse = EzsigndocumentApplyEzsigntemplateV2WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentApplyEzsigntemplateV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response> EzsigndocumentApplyEzsigntemplateV2WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' is set
            if (ezsigndocumentApplyEzsigntemplateV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentApplyEzsigntemplateV2Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentApplyEzsigntemplateV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentApplyEzsigntemplateV2Response>("/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentApplyEzsigntemplateV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentApplyEzsigntemplateV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentApplyEzsigntemplateV2Response> EzsigndocumentApplyEzsigntemplateV2Async(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response> localVarResponse = await EzsigndocumentApplyEzsigntemplateV2WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsigntemplate to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentApplyEzsigntemplateV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateV2Response>> EzsigndocumentApplyEzsigntemplateV2WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV2Request ezsigndocumentApplyEzsigntemplateV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' is set
            if (ezsigndocumentApplyEzsigntemplateV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateV2Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentApplyEzsigntemplateV2Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentApplyEzsigntemplateV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentApplyEzsigntemplateV2Response>("/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentApplyEzsigntemplateV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentApplyEzsigntemplateglobalV1Response</returns>
        public EzsigndocumentApplyEzsigntemplateglobalV1Response EzsigndocumentApplyEzsigntemplateglobalV1(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateglobalV1Response> localVarResponse = EzsigndocumentApplyEzsigntemplateglobalV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateglobalV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentApplyEzsigntemplateglobalV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateglobalV1Response> EzsigndocumentApplyEzsigntemplateglobalV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateglobalV1Request' is set
            if (ezsigndocumentApplyEzsigntemplateglobalV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateglobalV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateglobalV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentApplyEzsigntemplateglobalV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentApplyEzsigntemplateglobalV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentApplyEzsigntemplateglobalV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplateglobal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentApplyEzsigntemplateglobalV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentApplyEzsigntemplateglobalV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentApplyEzsigntemplateglobalV1Response> EzsigndocumentApplyEzsigntemplateglobalV1Async(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateglobalV1Response> localVarResponse = await EzsigndocumentApplyEzsigntemplateglobalV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateglobalV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsigntemplateglobal to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentApplyEzsigntemplateglobalV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentApplyEzsigntemplateglobalV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentApplyEzsigntemplateglobalV1Response>> EzsigndocumentApplyEzsigntemplateglobalV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateglobalV1Request ezsigndocumentApplyEzsigntemplateglobalV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateglobalV1Request' is set
            if (ezsigndocumentApplyEzsigntemplateglobalV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateglobalV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateglobalV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentApplyEzsigntemplateglobalV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentApplyEzsigntemplateglobalV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentApplyEzsigntemplateglobalV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplateglobal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentApplyEzsigntemplateglobalV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateEzsignelementsPositionedByWordV1Response</returns>
        public EzsigndocumentCreateEzsignelementsPositionedByWordV1Response EzsigndocumentCreateEzsignelementsPositionedByWordV1(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> localVarResponse = EzsigndocumentCreateEzsignelementsPositionedByWordV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateEzsignelementsPositionedByWordV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> EzsigndocumentCreateEzsignelementsPositionedByWordV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentCreateEzsignelementsPositionedByWordV1Request' is set
            if (ezsigndocumentCreateEzsignelementsPositionedByWordV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateEzsignelementsPositionedByWordV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateEzsignelementsPositionedByWordV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentCreateEzsignelementsPositionedByWordV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateEzsignelementsPositionedByWordV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/createEzsignelementsPositionedByWord", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateEzsignelementsPositionedByWordV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateEzsignelementsPositionedByWordV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> EzsigndocumentCreateEzsignelementsPositionedByWordV1Async(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response> localVarResponse = await EzsigndocumentCreateEzsignelementsPositionedByWordV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple Ezsignsignatures/Ezsignformfieldgroups Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentCreateEzsignelementsPositionedByWordV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateEzsignelementsPositionedByWordV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response>> EzsigndocumentCreateEzsignelementsPositionedByWordV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentCreateEzsignelementsPositionedByWordV1Request ezsigndocumentCreateEzsignelementsPositionedByWordV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentCreateEzsignelementsPositionedByWordV1Request' is set
            if (ezsigndocumentCreateEzsignelementsPositionedByWordV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateEzsignelementsPositionedByWordV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateEzsignelementsPositionedByWordV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentCreateEzsignelementsPositionedByWordV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateEzsignelementsPositionedByWordV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentCreateEzsignelementsPositionedByWordV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/createEzsignelementsPositionedByWord", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateEzsignelementsPositionedByWordV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateObjectV1Response</returns>
        [Obsolete]
        public EzsigndocumentCreateObjectV1Response EzsigndocumentCreateObjectV1(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV1Response> localVarResponse = EzsigndocumentCreateObjectV1WithHttpInfo(ezsigndocumentCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1WithHttpInfo(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
            if (ezsigndocumentCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigndocumentCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentCreateObjectV1Response>("/1/object/ezsigndocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1Async(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV1Response> localVarResponse = await EzsigndocumentCreateObjectV1WithHttpInfoAsync(ezsigndocumentCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV1Response>> EzsigndocumentCreateObjectV1WithHttpInfoAsync(List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
            if (ezsigndocumentCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigndocumentCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentCreateObjectV1Response>("/1/object/ezsigndocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateObjectV2Response</returns>
        [Obsolete]
        public EzsigndocumentCreateObjectV2Response EzsigndocumentCreateObjectV2(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV2Response> localVarResponse = EzsigndocumentCreateObjectV2WithHttpInfo(ezsigndocumentCreateObjectV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV2Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV2Response> EzsigndocumentCreateObjectV2WithHttpInfo(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV2Request' is set
            if (ezsigndocumentCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV2Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigndocumentCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentCreateObjectV2Response>("/2/object/ezsigndocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateObjectV2Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsigndocumentCreateObjectV2Response> EzsigndocumentCreateObjectV2Async(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV2Response> localVarResponse = await EzsigndocumentCreateObjectV2WithHttpInfoAsync(ezsigndocumentCreateObjectV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV2Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV2Response>> EzsigndocumentCreateObjectV2WithHttpInfoAsync(EzsigndocumentCreateObjectV2Request ezsigndocumentCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV2Request' is set
            if (ezsigndocumentCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV2Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigndocumentCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentCreateObjectV2Response>("/2/object/ezsigndocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentCreateObjectV3Response</returns>
        public EzsigndocumentCreateObjectV3Response EzsigndocumentCreateObjectV3(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV3Response> localVarResponse = EzsigndocumentCreateObjectV3WithHttpInfo(ezsigndocumentCreateObjectV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV3Response> EzsigndocumentCreateObjectV3WithHttpInfo(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV3Request' is set
            if (ezsigndocumentCreateObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV3Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV3");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigndocumentCreateObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentCreateObjectV3Response>("/3/object/ezsigndocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentCreateObjectV3Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentCreateObjectV3Response> EzsigndocumentCreateObjectV3Async(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV3Response> localVarResponse = await EzsigndocumentCreateObjectV3WithHttpInfoAsync(ezsigndocumentCreateObjectV3Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentCreateObjectV3Response>> EzsigndocumentCreateObjectV3WithHttpInfoAsync(EzsigndocumentCreateObjectV3Request ezsigndocumentCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV3Request' is set
            if (ezsigndocumentCreateObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV3Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV3");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigndocumentCreateObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentCreateObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentCreateObjectV3Response>("/3/object/ezsigndocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentCreateObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decline to sign Decline to sign
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentDeclineToSignV1(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentDeclineToSignV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentDeclineToSignV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Decline to sign Decline to sign
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentDeclineToSignV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentDeclineToSignV1Request' is set
            if (ezsigndocumentDeclineToSignV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentDeclineToSignV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentDeclineToSignV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentDeclineToSignV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentDeclineToSignV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/declineToSign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentDeclineToSignV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Decline to sign Decline to sign
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentDeclineToSignV1Async(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentDeclineToSignV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentDeclineToSignV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Decline to sign Decline to sign
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentDeclineToSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentDeclineToSignV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentDeclineToSignV1Request ezsigndocumentDeclineToSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentDeclineToSignV1Request' is set
            if (ezsigndocumentDeclineToSignV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentDeclineToSignV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentDeclineToSignV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentDeclineToSignV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentDeclineToSignV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/declineToSign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentDeclineToSignV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentDeleteObjectV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentDeleteObjectV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentDeleteObjectV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentDeleteObjectV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentDeleteObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentDeleteObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignannotations Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditEzsignannotationsV1Response</returns>
        public EzsigndocumentEditEzsignannotationsV1Response EzsigndocumentEditEzsignannotationsV1(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignannotationsV1Response> localVarResponse = EzsigndocumentEditEzsignannotationsV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentEditEzsignannotationsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignannotations Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditEzsignannotationsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignannotationsV1Response> EzsigndocumentEditEzsignannotationsV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentEditEzsignannotationsV1Request' is set
            if (ezsigndocumentEditEzsignannotationsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditEzsignannotationsV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditEzsignannotationsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditEzsignannotationsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditEzsignannotationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigndocumentEditEzsignannotationsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignannotations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditEzsignannotationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignannotations Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditEzsignannotationsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentEditEzsignannotationsV1Response> EzsigndocumentEditEzsignannotationsV1Async(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignannotationsV1Response> localVarResponse = await EzsigndocumentEditEzsignannotationsV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentEditEzsignannotationsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignannotations Using this endpoint, you can edit multiple Ezsignannotations at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignannotationsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditEzsignannotationsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignannotationsV1Response>> EzsigndocumentEditEzsignannotationsV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditEzsignannotationsV1Request ezsigndocumentEditEzsignannotationsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentEditEzsignannotationsV1Request' is set
            if (ezsigndocumentEditEzsignannotationsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditEzsignannotationsV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditEzsignannotationsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditEzsignannotationsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditEzsignannotationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigndocumentEditEzsignannotationsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignannotations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditEzsignannotationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignformfieldgroups Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditEzsignformfieldgroupsV1Response</returns>
        public EzsigndocumentEditEzsignformfieldgroupsV1Response EzsigndocumentEditEzsignformfieldgroupsV1(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignformfieldgroupsV1Response> localVarResponse = EzsigndocumentEditEzsignformfieldgroupsV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentEditEzsignformfieldgroupsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignformfieldgroups Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditEzsignformfieldgroupsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignformfieldgroupsV1Response> EzsigndocumentEditEzsignformfieldgroupsV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentEditEzsignformfieldgroupsV1Request' is set
            if (ezsigndocumentEditEzsignformfieldgroupsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditEzsignformfieldgroupsV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditEzsignformfieldgroupsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditEzsignformfieldgroupsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditEzsignformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigndocumentEditEzsignformfieldgroupsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignformfieldgroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditEzsignformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignformfieldgroups Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditEzsignformfieldgroupsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentEditEzsignformfieldgroupsV1Response> EzsigndocumentEditEzsignformfieldgroupsV1Async(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignformfieldgroupsV1Response> localVarResponse = await EzsigndocumentEditEzsignformfieldgroupsV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentEditEzsignformfieldgroupsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignformfieldgroups Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditEzsignformfieldgroupsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignformfieldgroupsV1Response>> EzsigndocumentEditEzsignformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditEzsignformfieldgroupsV1Request ezsigndocumentEditEzsignformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentEditEzsignformfieldgroupsV1Request' is set
            if (ezsigndocumentEditEzsignformfieldgroupsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditEzsignformfieldgroupsV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditEzsignformfieldgroupsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditEzsignformfieldgroupsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditEzsignformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigndocumentEditEzsignformfieldgroupsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignformfieldgroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditEzsignformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignsignatures Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditEzsignsignaturesV1Response</returns>
        public EzsigndocumentEditEzsignsignaturesV1Response EzsigndocumentEditEzsignsignaturesV1(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response> localVarResponse = EzsigndocumentEditEzsignsignaturesV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentEditEzsignsignaturesV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignsignatures Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditEzsignsignaturesV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response> EzsigndocumentEditEzsignsignaturesV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentEditEzsignsignaturesV1Request' is set
            if (ezsigndocumentEditEzsignsignaturesV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditEzsignsignaturesV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditEzsignsignaturesV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditEzsignsignaturesV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditEzsignsignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigndocumentEditEzsignsignaturesV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditEzsignsignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignsignatures Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditEzsignsignaturesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentEditEzsignsignaturesV1Response> EzsigndocumentEditEzsignsignaturesV1Async(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response> localVarResponse = await EzsigndocumentEditEzsignsignaturesV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentEditEzsignsignaturesV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignsignatures Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditEzsignsignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditEzsignsignaturesV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentEditEzsignsignaturesV1Response>> EzsigndocumentEditEzsignsignaturesV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditEzsignsignaturesV1Request ezsigndocumentEditEzsignsignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentEditEzsignsignaturesV1Request' is set
            if (ezsigndocumentEditEzsignsignaturesV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditEzsignsignaturesV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditEzsignsignaturesV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditEzsignsignaturesV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditEzsignsignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigndocumentEditEzsignsignaturesV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditEzsignsignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentEditObjectV1Response</returns>
        public EzsigndocumentEditObjectV1Response EzsigndocumentEditObjectV1(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditObjectV1Response> localVarResponse = EzsigndocumentEditObjectV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentEditObjectV1Request' is set
            if (ezsigndocumentEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigndocumentEditObjectV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1Async(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentEditObjectV1Response> localVarResponse = await EzsigndocumentEditObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentEditObjectV1Response>> EzsigndocumentEditObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentEditObjectV1Request' is set
            if (ezsigndocumentEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentEditObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigndocumentEditObjectV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End prematurely End prematurely an Ezsigndocument when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentEndPrematurelyV1(int pkiEzsigndocumentID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentEndPrematurelyV1WithHttpInfo(pkiEzsigndocumentID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End prematurely End prematurely an Ezsigndocument when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentEndPrematurelyV1WithHttpInfo(int pkiEzsigndocumentID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigndocumentApi->EzsigndocumentEndPrematurelyV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEndPrematurelyV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEndPrematurelyV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End prematurely End prematurely an Ezsigndocument when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentEndPrematurelyV1Async(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentEndPrematurelyV1WithHttpInfoAsync(pkiEzsigndocumentID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End prematurely End prematurely an Ezsigndocument when some signatures are still required
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentEndPrematurelyV1WithHttpInfoAsync(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigndocumentApi->EzsigndocumentEndPrematurelyV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentEndPrematurelyV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentEndPrematurelyV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract text from Ezsigndocument area Extract text from Ezsigndocument area
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentExtractTextV1Response</returns>
        public EzsigndocumentExtractTextV1Response EzsigndocumentExtractTextV1(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentExtractTextV1Response> localVarResponse = EzsigndocumentExtractTextV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentExtractTextV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract text from Ezsigndocument area Extract text from Ezsigndocument area
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentExtractTextV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentExtractTextV1Response> EzsigndocumentExtractTextV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentExtractTextV1Request' is set
            if (ezsigndocumentExtractTextV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentExtractTextV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentExtractTextV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentExtractTextV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentExtractTextV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentExtractTextV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/extractText", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentExtractTextV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract text from Ezsigndocument area Extract text from Ezsigndocument area
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentExtractTextV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentExtractTextV1Response> EzsigndocumentExtractTextV1Async(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentExtractTextV1Response> localVarResponse = await EzsigndocumentExtractTextV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentExtractTextV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract text from Ezsigndocument area Extract text from Ezsigndocument area
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentExtractTextV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentExtractTextV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentExtractTextV1Response>> EzsigndocumentExtractTextV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentExtractTextV1Request ezsigndocumentExtractTextV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentExtractTextV1Request' is set
            if (ezsigndocumentExtractTextV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentExtractTextV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentExtractTextV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentExtractTextV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentExtractTextV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentExtractTextV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/extractText", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentExtractTextV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentFlattenV1(int pkiEzsigndocumentID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentFlattenV1WithHttpInfo(pkiEzsigndocumentID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentFlattenV1WithHttpInfo(int pkiEzsigndocumentID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigndocumentApi->EzsigndocumentFlattenV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentFlattenV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/flatten", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentFlattenV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentFlattenV1Async(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentFlattenV1WithHttpInfoAsync(pkiEzsigndocumentID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentFlattenV1WithHttpInfoAsync(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigndocumentApi->EzsigndocumentFlattenV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentFlattenV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/flatten", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentFlattenV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetActionableElementsV1Response</returns>
        public EzsigndocumentGetActionableElementsV1Response EzsigndocumentGetActionableElementsV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetActionableElementsV1Response> localVarResponse = EzsigndocumentGetActionableElementsV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetActionableElementsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetActionableElementsV1Response> EzsigndocumentGetActionableElementsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetActionableElementsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetActionableElementsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getActionableElements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetActionableElementsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetActionableElementsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetActionableElementsV1Response> EzsigndocumentGetActionableElementsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetActionableElementsV1Response> localVarResponse = await EzsigndocumentGetActionableElementsV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve actionable elements for the Ezsigndocument Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetActionableElementsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetActionableElementsV1Response>> EzsigndocumentGetActionableElementsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetActionableElementsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetActionableElementsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getActionableElements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetActionableElementsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetAttachmentsV1Response</returns>
        public EzsigndocumentGetAttachmentsV1Response EzsigndocumentGetAttachmentsV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetAttachmentsV1Response> localVarResponse = EzsigndocumentGetAttachmentsV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetAttachmentsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetAttachmentsV1Response> EzsigndocumentGetAttachmentsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetAttachmentsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetAttachmentsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getAttachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetAttachmentsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetAttachmentsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetAttachmentsV1Response> EzsigndocumentGetAttachmentsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetAttachmentsV1Response> localVarResponse = await EzsigndocumentGetAttachmentsV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigndocument&#39;s Attachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetAttachmentsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetAttachmentsV1Response>> EzsigndocumentGetAttachmentsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetAttachmentsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetAttachmentsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getAttachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetAttachmentsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetCompletedElementsV1Response</returns>
        public EzsigndocumentGetCompletedElementsV1Response EzsigndocumentGetCompletedElementsV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetCompletedElementsV1Response> localVarResponse = EzsigndocumentGetCompletedElementsV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetCompletedElementsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetCompletedElementsV1Response> EzsigndocumentGetCompletedElementsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetCompletedElementsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetCompletedElementsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getCompletedElements", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetCompletedElementsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetCompletedElementsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetCompletedElementsV1Response> EzsigndocumentGetCompletedElementsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetCompletedElementsV1Response> localVarResponse = await EzsigndocumentGetCompletedElementsV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve completed elements for the Ezsigndocument Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetCompletedElementsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetCompletedElementsV1Response>> EzsigndocumentGetCompletedElementsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetCompletedElementsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetCompletedElementsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getCompletedElements", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetCompletedElementsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetDownloadUrlV1Response</returns>
        public EzsigndocumentGetDownloadUrlV1Response EzsigndocumentGetDownloadUrlV1(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetDownloadUrlV1Response> localVarResponse = EzsigndocumentGetDownloadUrlV1WithHttpInfo(pkiEzsigndocumentID, eDocumentType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetDownloadUrlV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1WithHttpInfo(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0)
        {
            // verify the required parameter 'eDocumentType' is set
            if (eDocumentType == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'eDocumentType' when calling ObjectEzsigndocumentApi->EzsigndocumentGetDownloadUrlV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.PathParameters.Add("eDocumentType", eZmaxApi.Client.ClientUtils.ParameterToString(eDocumentType)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetDownloadUrlV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetDownloadUrlV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetDownloadUrlV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetDownloadUrlV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1Async(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetDownloadUrlV1Response> localVarResponse = await EzsigndocumentGetDownloadUrlV1WithHttpInfoAsync(pkiEzsigndocumentID, eDocumentType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetDownloadUrlV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetDownloadUrlV1Response>> EzsigndocumentGetDownloadUrlV1WithHttpInfoAsync(int pkiEzsigndocumentID, string eDocumentType, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'eDocumentType' is set
            if (eDocumentType == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'eDocumentType' when calling ObjectEzsigndocumentApi->EzsigndocumentGetDownloadUrlV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.PathParameters.Add("eDocumentType", eZmaxApi.Client.ClientUtils.ParameterToString(eDocumentType)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetDownloadUrlV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetDownloadUrlV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetDownloadUrlV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignannotationsV1Response</returns>
        public EzsigndocumentGetEzsignannotationsV1Response EzsigndocumentGetEzsignannotationsV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignannotationsV1Response> localVarResponse = EzsigndocumentGetEzsignannotationsV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignannotationsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignannotationsV1Response> EzsigndocumentGetEzsignannotationsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignannotationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetEzsignannotationsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignannotations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignannotationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignannotationsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetEzsignannotationsV1Response> EzsigndocumentGetEzsignannotationsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignannotationsV1Response> localVarResponse = await EzsigndocumentGetEzsignannotationsV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignannotations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignannotationsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignannotationsV1Response>> EzsigndocumentGetEzsignannotationsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignannotationsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetEzsignannotationsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignannotations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignannotationsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsigndiscussionsV1Response</returns>
        public EzsigndocumentGetEzsigndiscussionsV1Response EzsigndocumentGetEzsigndiscussionsV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsigndiscussionsV1Response> localVarResponse = EzsigndocumentGetEzsigndiscussionsV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsigndiscussionsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsigndiscussionsV1Response> EzsigndocumentGetEzsigndiscussionsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsigndiscussionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetEzsigndiscussionsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsigndiscussions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsigndiscussionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsigndiscussionsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetEzsigndiscussionsV1Response> EzsigndocumentGetEzsigndiscussionsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsigndiscussionsV1Response> localVarResponse = await EzsigndocumentGetEzsigndiscussionsV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsigndiscussionsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsigndiscussionsV1Response>> EzsigndocumentGetEzsigndiscussionsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsigndiscussionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetEzsigndiscussionsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsigndiscussions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsigndiscussionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignformfieldgroupsV1Response</returns>
        public EzsigndocumentGetEzsignformfieldgroupsV1Response EzsigndocumentGetEzsignformfieldgroupsV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignformfieldgroupsV1Response> localVarResponse = EzsigndocumentGetEzsignformfieldgroupsV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignformfieldgroupsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignformfieldgroupsV1Response> EzsigndocumentGetEzsignformfieldgroupsV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetEzsignformfieldgroupsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignformfieldgroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignformfieldgroupsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetEzsignformfieldgroupsV1Response> EzsigndocumentGetEzsignformfieldgroupsV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignformfieldgroupsV1Response> localVarResponse = await EzsigndocumentGetEzsignformfieldgroupsV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignformfieldgroupsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignformfieldgroupsV1Response>> EzsigndocumentGetEzsignformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetEzsignformfieldgroupsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignformfieldgroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignpagesV1Response</returns>
        public EzsigndocumentGetEzsignpagesV1Response EzsigndocumentGetEzsignpagesV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignpagesV1Response> localVarResponse = EzsigndocumentGetEzsignpagesV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignpagesV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignpagesV1Response> EzsigndocumentGetEzsignpagesV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignpagesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetEzsignpagesV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignpagesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignpagesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetEzsignpagesV1Response> EzsigndocumentGetEzsignpagesV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignpagesV1Response> localVarResponse = await EzsigndocumentGetEzsignpagesV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignpagesV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignpagesV1Response>> EzsigndocumentGetEzsignpagesV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignpagesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetEzsignpagesV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignpagesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignsignaturesAutomaticV1Response</returns>
        public EzsigndocumentGetEzsignsignaturesAutomaticV1Response EzsigndocumentGetEzsignsignaturesAutomaticV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> localVarResponse = EzsigndocumentGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignsignaturesAutomaticV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> EzsigndocumentGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignsignaturesAutomaticV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> EzsigndocumentGetEzsignsignaturesAutomaticV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesAutomaticV1Response> localVarResponse = await EzsigndocumentGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignsignaturesAutomaticV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesAutomaticV1Response>> EzsigndocumentGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetEzsignsignaturesV1Response</returns>
        public EzsigndocumentGetEzsignsignaturesV1Response EzsigndocumentGetEzsignsignaturesV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesV1Response> localVarResponse = EzsigndocumentGetEzsignsignaturesV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetEzsignsignaturesV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesV1Response> EzsigndocumentGetEzsignsignaturesV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignsignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetEzsignsignaturesV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignatures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignsignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetEzsignsignaturesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetEzsignsignaturesV1Response> EzsigndocumentGetEzsignsignaturesV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesV1Response> localVarResponse = await EzsigndocumentGetEzsignsignaturesV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetEzsignsignaturesV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetEzsignsignaturesV1Response>> EzsigndocumentGetEzsignsignaturesV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetEzsignsignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetEzsignsignaturesV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignatures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetEzsignsignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetFormDataV1Response</returns>
        public EzsigndocumentGetFormDataV1Response EzsigndocumentGetFormDataV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetFormDataV1Response> localVarResponse = EzsigndocumentGetFormDataV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetFormDataV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetFormDataV1Response> EzsigndocumentGetFormDataV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip",
                "text/csv"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetFormDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetFormDataV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetFormDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetFormDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetFormDataV1Response> EzsigndocumentGetFormDataV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetFormDataV1Response> localVarResponse = await EzsigndocumentGetFormDataV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s Form Data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetFormDataV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetFormDataV1Response>> EzsigndocumentGetFormDataV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip",
                "text/csv"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetFormDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetFormDataV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetFormDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetObjectV1Response</returns>
        [Obsolete]
        public EzsigndocumentGetObjectV1Response EzsigndocumentGetObjectV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV1Response> localVarResponse = EzsigndocumentGetObjectV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetObjectV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetObjectV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV1Response> localVarResponse = await EzsigndocumentGetObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV1Response>> EzsigndocumentGetObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetObjectV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetObjectV2Response</returns>
        public EzsigndocumentGetObjectV2Response EzsigndocumentGetObjectV2(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV2Response> localVarResponse = EzsigndocumentGetObjectV2WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV2Response> EzsigndocumentGetObjectV2WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetObjectV2Response>("/2/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetObjectV2Response> EzsigndocumentGetObjectV2Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV2Response> localVarResponse = await EzsigndocumentGetObjectV2WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetObjectV2Response>> EzsigndocumentGetObjectV2WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetObjectV2Response>("/2/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the temporary proof Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetTemporaryProofV1Response</returns>
        public EzsigndocumentGetTemporaryProofV1Response EzsigndocumentGetTemporaryProofV1(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetTemporaryProofV1Response> localVarResponse = EzsigndocumentGetTemporaryProofV1WithHttpInfo(pkiEzsigndocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the temporary proof Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetTemporaryProofV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetTemporaryProofV1Response> EzsigndocumentGetTemporaryProofV1WithHttpInfo(int pkiEzsigndocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetTemporaryProofV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigndocumentGetTemporaryProofV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetTemporaryProofV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the temporary proof Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetTemporaryProofV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetTemporaryProofV1Response> EzsigndocumentGetTemporaryProofV1Async(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetTemporaryProofV1Response> localVarResponse = await EzsigndocumentGetTemporaryProofV1WithHttpInfoAsync(pkiEzsigndocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the temporary proof Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetTemporaryProofV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetTemporaryProofV1Response>> EzsigndocumentGetTemporaryProofV1WithHttpInfoAsync(int pkiEzsigndocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetTemporaryProofV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigndocumentGetTemporaryProofV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetTemporaryProofV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigndocumentGetWordsPositionsV1Response</returns>
        public EzsigndocumentGetWordsPositionsV1Response EzsigndocumentGetWordsPositionsV1(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetWordsPositionsV1Response> localVarResponse = EzsigndocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigndocumentGetWordsPositionsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigndocumentGetWordsPositionsV1Response> EzsigndocumentGetWordsPositionsV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentGetWordsPositionsV1Request' is set
            if (ezsigndocumentGetWordsPositionsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentGetWordsPositionsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentGetWordsPositionsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetWordsPositionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigndocumentGetWordsPositionsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetWordsPositionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigndocumentGetWordsPositionsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetWordsPositionsV1Response> EzsigndocumentGetWordsPositionsV1Async(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigndocumentGetWordsPositionsV1Response> localVarResponse = await EzsigndocumentGetWordsPositionsV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentGetWordsPositionsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetWordsPositionsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigndocumentGetWordsPositionsV1Response>> EzsigndocumentGetWordsPositionsV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentGetWordsPositionsV1Request ezsigndocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentGetWordsPositionsV1Request' is set
            if (ezsigndocumentGetWordsPositionsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentGetWordsPositionsV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentGetWordsPositionsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentGetWordsPositionsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentGetWordsPositionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigndocumentGetWordsPositionsV1Response>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentGetWordsPositionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentPatchObjectV1(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentPatchObjectV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentPatchObjectV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentPatchObjectV1Request' is set
            if (ezsigndocumentPatchObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentPatchObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentPatchObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentPatchObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentPatchObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentPatchObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentPatchObjectV1Async(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentPatchObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentPatchObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentPatchObjectV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentPatchObjectV1Request ezsigndocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentPatchObjectV1Request' is set
            if (ezsigndocumentPatchObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentPatchObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentPatchObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentPatchObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentPatchObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentPatchObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the Ezsignform 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentSubmitEzsignformV1(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentSubmitEzsignformV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentSubmitEzsignformV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the Ezsignform 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentSubmitEzsignformV1WithHttpInfo(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigndocumentSubmitEzsignformV1Request' is set
            if (ezsigndocumentSubmitEzsignformV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentSubmitEzsignformV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentSubmitEzsignformV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentSubmitEzsignformV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentSubmitEzsignformV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/submitEzsignform", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentSubmitEzsignformV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the Ezsignform 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentSubmitEzsignformV1Async(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentSubmitEzsignformV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentSubmitEzsignformV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the Ezsignform 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="ezsigndocumentSubmitEzsignformV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentSubmitEzsignformV1WithHttpInfoAsync(int pkiEzsigndocumentID, EzsigndocumentSubmitEzsignformV1Request ezsigndocumentSubmitEzsignformV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentSubmitEzsignformV1Request' is set
            if (ezsigndocumentSubmitEzsignformV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigndocumentSubmitEzsignformV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentSubmitEzsignformV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigndocumentSubmitEzsignformV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentSubmitEzsignformV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/submitEzsignform", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentSubmitEzsignformV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsend the Ezsigndocument Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonResponse</returns>
        public CommonResponse EzsigndocumentUnsendV1(int pkiEzsigndocumentID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = EzsigndocumentUnsendV1WithHttpInfo(pkiEzsigndocumentID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsend the Ezsigndocument Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonResponse</returns>
        public eZmaxApi.Client.ApiResponse<CommonResponse> EzsigndocumentUnsendV1WithHttpInfo(int pkiEzsigndocumentID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigndocumentApi->EzsigndocumentUnsendV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentUnsendV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/unsend", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentUnsendV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsend the Ezsigndocument Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonResponse</returns>
        public async System.Threading.Tasks.Task<CommonResponse> EzsigndocumentUnsendV1Async(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<CommonResponse> localVarResponse = await EzsigndocumentUnsendV1WithHttpInfoAsync(pkiEzsigndocumentID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsend the Ezsigndocument Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonResponse)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<CommonResponse>> EzsigndocumentUnsendV1WithHttpInfoAsync(int pkiEzsigndocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigndocumentApi->EzsigndocumentUnsendV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigndocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigndocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigndocumentApi.EzsigndocumentUnsendV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonResponse>("/1/object/ezsigndocument/{pkiEzsigndocumentID}/unsend", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigndocumentUnsendV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
