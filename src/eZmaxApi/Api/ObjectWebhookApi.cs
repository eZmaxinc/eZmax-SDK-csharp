/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectWebhookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Webhook
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <returns>WebhookCreateObjectV1Response</returns>
        WebhookCreateObjectV1Response WebhookCreateObjectV1 (WebhookCreateObjectV1Request webhookCreateObjectV1Request);

        /// <summary>
        /// Create a new Webhook
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <returns>ApiResponse of WebhookCreateObjectV1Response</returns>
        ApiResponse<WebhookCreateObjectV1Response> WebhookCreateObjectV1WithHttpInfo (WebhookCreateObjectV1Request webhookCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>WebhookDeleteObjectV1Response</returns>
        WebhookDeleteObjectV1Response WebhookDeleteObjectV1 (int pkiWebhookID);

        /// <summary>
        /// Delete an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>ApiResponse of WebhookDeleteObjectV1Response</returns>
        ApiResponse<WebhookDeleteObjectV1Response> WebhookDeleteObjectV1WithHttpInfo (int pkiWebhookID);
        /// <summary>
        /// Edit an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <returns>WebhookEditObjectV1Response</returns>
        WebhookEditObjectV1Response WebhookEditObjectV1 (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request);

        /// <summary>
        /// Edit an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <returns>ApiResponse of WebhookEditObjectV1Response</returns>
        ApiResponse<WebhookEditObjectV1Response> WebhookEditObjectV1WithHttpInfo (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request);
        /// <summary>
        /// Retrieve the logs for recent Webhook calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <returns>WebhookGetHistoryV1Response</returns>
        WebhookGetHistoryV1Response WebhookGetHistoryV1 (int pkiWebhookID, string eWebhookHistoryinterval);

        /// <summary>
        /// Retrieve the logs for recent Webhook calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <returns>ApiResponse of WebhookGetHistoryV1Response</returns>
        ApiResponse<WebhookGetHistoryV1Response> WebhookGetHistoryV1WithHttpInfo (int pkiWebhookID, string eWebhookHistoryinterval);
        /// <summary>
        /// Retrieve Webhook list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>WebhookGetListV1Response</returns>
        WebhookGetListV1Response WebhookGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));

        /// <summary>
        /// Retrieve Webhook list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of WebhookGetListV1Response</returns>
        ApiResponse<WebhookGetListV1Response> WebhookGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>WebhookGetObjectV2Response</returns>
        WebhookGetObjectV2Response WebhookGetObjectV2 (int pkiWebhookID);

        /// <summary>
        /// Retrieve an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>ApiResponse of WebhookGetObjectV2Response</returns>
        ApiResponse<WebhookGetObjectV2Response> WebhookGetObjectV2WithHttpInfo (int pkiWebhookID);
        /// <summary>
        /// Test the Webhook by calling the Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <returns>WebhookTestV1Response</returns>
        WebhookTestV1Response WebhookTestV1 (int pkiWebhookID, Object body);

        /// <summary>
        /// Test the Webhook by calling the Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of WebhookTestV1Response</returns>
        ApiResponse<WebhookTestV1Response> WebhookTestV1WithHttpInfo (int pkiWebhookID, Object body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Webhook
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<WebhookCreateObjectV1Response> WebhookCreateObjectV1Async (WebhookCreateObjectV1Request webhookCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Webhook
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookCreateObjectV1Response>> WebhookCreateObjectV1WithHttpInfoAsync (WebhookCreateObjectV1Request webhookCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<WebhookDeleteObjectV1Response> WebhookDeleteObjectV1Async (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookDeleteObjectV1Response>> WebhookDeleteObjectV1WithHttpInfoAsync (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookEditObjectV1Response</returns>
        System.Threading.Tasks.Task<WebhookEditObjectV1Response> WebhookEditObjectV1Async (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookEditObjectV1Response>> WebhookEditObjectV1WithHttpInfoAsync (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve the logs for recent Webhook calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookGetHistoryV1Response</returns>
        System.Threading.Tasks.Task<WebhookGetHistoryV1Response> WebhookGetHistoryV1Async (int pkiWebhookID, string eWebhookHistoryinterval, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve the logs for recent Webhook calls
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookGetHistoryV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookGetHistoryV1Response>> WebhookGetHistoryV1WithHttpInfoAsync (int pkiWebhookID, string eWebhookHistoryinterval, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Webhook list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookGetListV1Response</returns>
        System.Threading.Tasks.Task<WebhookGetListV1Response> WebhookGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Webhook list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookGetListV1Response>> WebhookGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookGetObjectV2Response</returns>
        System.Threading.Tasks.Task<WebhookGetObjectV2Response> WebhookGetObjectV2Async (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookGetObjectV2Response>> WebhookGetObjectV2WithHttpInfoAsync (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Test the Webhook by calling the Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookTestV1Response</returns>
        System.Threading.Tasks.Task<WebhookTestV1Response> WebhookTestV1Async (int pkiWebhookID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Test the Webhook by calling the Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookTestV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookTestV1Response>> WebhookTestV1WithHttpInfoAsync (int pkiWebhookID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectWebhookApi : IObjectWebhookApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectWebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectWebhookApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectWebhookApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectWebhookApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectWebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectWebhookApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Webhook The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <returns>WebhookCreateObjectV1Response</returns>
        public WebhookCreateObjectV1Response WebhookCreateObjectV1 (WebhookCreateObjectV1Request webhookCreateObjectV1Request)
        {
             ApiResponse<WebhookCreateObjectV1Response> localVarResponse = WebhookCreateObjectV1WithHttpInfo(webhookCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Webhook The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <returns>ApiResponse of WebhookCreateObjectV1Response</returns>
        public ApiResponse<WebhookCreateObjectV1Response> WebhookCreateObjectV1WithHttpInfo (WebhookCreateObjectV1Request webhookCreateObjectV1Request)
        {
            // verify the required parameter 'webhookCreateObjectV1Request' is set
            if (webhookCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'webhookCreateObjectV1Request' when calling ObjectWebhookApi->WebhookCreateObjectV1");

            var localVarPath = "/1/object/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookCreateObjectV1Request != null && webhookCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Webhook The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<WebhookCreateObjectV1Response> WebhookCreateObjectV1Async (WebhookCreateObjectV1Request webhookCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookCreateObjectV1Response> localVarResponse = await WebhookCreateObjectV1WithHttpInfoAsync(webhookCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Webhook The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookCreateObjectV1Response>> WebhookCreateObjectV1WithHttpInfoAsync (WebhookCreateObjectV1Request webhookCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'webhookCreateObjectV1Request' is set
            if (webhookCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'webhookCreateObjectV1Request' when calling ObjectWebhookApi->WebhookCreateObjectV1");

            var localVarPath = "/1/object/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookCreateObjectV1Request != null && webhookCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>WebhookDeleteObjectV1Response</returns>
        public WebhookDeleteObjectV1Response WebhookDeleteObjectV1 (int pkiWebhookID)
        {
             ApiResponse<WebhookDeleteObjectV1Response> localVarResponse = WebhookDeleteObjectV1WithHttpInfo(pkiWebhookID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>ApiResponse of WebhookDeleteObjectV1Response</returns>
        public ApiResponse<WebhookDeleteObjectV1Response> WebhookDeleteObjectV1WithHttpInfo (int pkiWebhookID)
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookDeleteObjectV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<WebhookDeleteObjectV1Response> WebhookDeleteObjectV1Async (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookDeleteObjectV1Response> localVarResponse = await WebhookDeleteObjectV1WithHttpInfoAsync(pkiWebhookID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookDeleteObjectV1Response>> WebhookDeleteObjectV1WithHttpInfoAsync (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookDeleteObjectV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <returns>WebhookEditObjectV1Response</returns>
        public WebhookEditObjectV1Response WebhookEditObjectV1 (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request)
        {
             ApiResponse<WebhookEditObjectV1Response> localVarResponse = WebhookEditObjectV1WithHttpInfo(pkiWebhookID, webhookEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <returns>ApiResponse of WebhookEditObjectV1Response</returns>
        public ApiResponse<WebhookEditObjectV1Response> WebhookEditObjectV1WithHttpInfo (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request)
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookEditObjectV1");
            // verify the required parameter 'webhookEditObjectV1Request' is set
            if (webhookEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'webhookEditObjectV1Request' when calling ObjectWebhookApi->WebhookEditObjectV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter
            if (webhookEditObjectV1Request != null && webhookEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<WebhookEditObjectV1Response> WebhookEditObjectV1Async (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookEditObjectV1Response> localVarResponse = await WebhookEditObjectV1WithHttpInfoAsync(pkiWebhookID, webhookEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="webhookEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookEditObjectV1Response>> WebhookEditObjectV1WithHttpInfoAsync (int pkiWebhookID, WebhookEditObjectV1Request webhookEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookEditObjectV1");
            // verify the required parameter 'webhookEditObjectV1Request' is set
            if (webhookEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'webhookEditObjectV1Request' when calling ObjectWebhookApi->WebhookEditObjectV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter
            if (webhookEditObjectV1Request != null && webhookEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve the logs for recent Webhook calls 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <returns>WebhookGetHistoryV1Response</returns>
        public WebhookGetHistoryV1Response WebhookGetHistoryV1 (int pkiWebhookID, string eWebhookHistoryinterval)
        {
             ApiResponse<WebhookGetHistoryV1Response> localVarResponse = WebhookGetHistoryV1WithHttpInfo(pkiWebhookID, eWebhookHistoryinterval);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the logs for recent Webhook calls 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <returns>ApiResponse of WebhookGetHistoryV1Response</returns>
        public ApiResponse<WebhookGetHistoryV1Response> WebhookGetHistoryV1WithHttpInfo (int pkiWebhookID, string eWebhookHistoryinterval)
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookGetHistoryV1");
            // verify the required parameter 'eWebhookHistoryinterval' is set
            if (eWebhookHistoryinterval == null)
                throw new ApiException(400, "Missing required parameter 'eWebhookHistoryinterval' when calling ObjectWebhookApi->WebhookGetHistoryV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}/getHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter
            if (eWebhookHistoryinterval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eWebhookHistoryinterval", eWebhookHistoryinterval)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookGetHistoryV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookGetHistoryV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookGetHistoryV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookGetHistoryV1Response)));
        }

        /// <summary>
        /// Retrieve the logs for recent Webhook calls 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookGetHistoryV1Response</returns>
        public async System.Threading.Tasks.Task<WebhookGetHistoryV1Response> WebhookGetHistoryV1Async (int pkiWebhookID, string eWebhookHistoryinterval, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookGetHistoryV1Response> localVarResponse = await WebhookGetHistoryV1WithHttpInfoAsync(pkiWebhookID, eWebhookHistoryinterval, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the logs for recent Webhook calls 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="eWebhookHistoryinterval">The number of days to return</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookGetHistoryV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookGetHistoryV1Response>> WebhookGetHistoryV1WithHttpInfoAsync (int pkiWebhookID, string eWebhookHistoryinterval, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookGetHistoryV1");
            // verify the required parameter 'eWebhookHistoryinterval' is set
            if (eWebhookHistoryinterval == null)
                throw new ApiException(400, "Missing required parameter 'eWebhookHistoryinterval' when calling ObjectWebhookApi->WebhookGetHistoryV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}/getHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter
            if (eWebhookHistoryinterval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eWebhookHistoryinterval", eWebhookHistoryinterval)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookGetHistoryV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookGetHistoryV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookGetHistoryV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookGetHistoryV1Response)));
        }

        /// <summary>
        /// Retrieve Webhook list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>WebhookGetListV1Response</returns>
        public WebhookGetListV1Response WebhookGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {
             ApiResponse<WebhookGetListV1Response> localVarResponse = WebhookGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Webhook list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of WebhookGetListV1Response</returns>
        public ApiResponse<WebhookGetListV1Response> WebhookGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {

            var localVarPath = "/1/object/webhook/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Webhook list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookGetListV1Response</returns>
        public async System.Threading.Tasks.Task<WebhookGetListV1Response> WebhookGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookGetListV1Response> localVarResponse = await WebhookGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Webhook list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eWebhookModule | Ezsign<br>Management | | eWebhookEzsignevent | DocumentCompleted<br>FolderCompleted | | eWebhookManagementevent | UserCreated |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookGetListV1Response>> WebhookGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/1/object/webhook/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>WebhookGetObjectV2Response</returns>
        public WebhookGetObjectV2Response WebhookGetObjectV2 (int pkiWebhookID)
        {
             ApiResponse<WebhookGetObjectV2Response> localVarResponse = WebhookGetObjectV2WithHttpInfo(pkiWebhookID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <returns>ApiResponse of WebhookGetObjectV2Response</returns>
        public ApiResponse<WebhookGetObjectV2Response> WebhookGetObjectV2WithHttpInfo (int pkiWebhookID)
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookGetObjectV2");

            var localVarPath = "/2/object/webhook/{pkiWebhookID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<WebhookGetObjectV2Response> WebhookGetObjectV2Async (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookGetObjectV2Response> localVarResponse = await WebhookGetObjectV2WithHttpInfoAsync(pkiWebhookID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Webhook 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookGetObjectV2Response>> WebhookGetObjectV2WithHttpInfoAsync (int pkiWebhookID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookGetObjectV2");

            var localVarPath = "/2/object/webhook/{pkiWebhookID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookGetObjectV2Response)));
        }

        /// <summary>
        /// Test the Webhook by calling the Url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <returns>WebhookTestV1Response</returns>
        public WebhookTestV1Response WebhookTestV1 (int pkiWebhookID, Object body)
        {
             ApiResponse<WebhookTestV1Response> localVarResponse = WebhookTestV1WithHttpInfo(pkiWebhookID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test the Webhook by calling the Url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of WebhookTestV1Response</returns>
        public ApiResponse<WebhookTestV1Response> WebhookTestV1WithHttpInfo (int pkiWebhookID, Object body)
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookTestV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectWebhookApi->WebhookTestV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookTestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookTestV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookTestV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookTestV1Response)));
        }

        /// <summary>
        /// Test the Webhook by calling the Url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WebhookTestV1Response</returns>
        public async System.Threading.Tasks.Task<WebhookTestV1Response> WebhookTestV1Async (int pkiWebhookID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WebhookTestV1Response> localVarResponse = await WebhookTestV1WithHttpInfoAsync(pkiWebhookID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test the Webhook by calling the Url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiWebhookID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WebhookTestV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebhookTestV1Response>> WebhookTestV1WithHttpInfoAsync (int pkiWebhookID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiWebhookID' is set
            if (pkiWebhookID == null)
                throw new ApiException(400, "Missing required parameter 'pkiWebhookID' when calling ObjectWebhookApi->WebhookTestV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectWebhookApi->WebhookTestV1");

            var localVarPath = "/1/object/webhook/{pkiWebhookID}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiWebhookID != null) localVarPathParams.Add("pkiWebhookID", this.Configuration.ApiClient.ParameterToString(pkiWebhookID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WebhookTestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebhookTestV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WebhookTestV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebhookTestV1Response)));
        }

    }
}
