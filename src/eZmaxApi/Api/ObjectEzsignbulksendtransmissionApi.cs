/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendtransmissionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string EzsignbulksendtransmissionGetCsvErrorsV1(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EzsignbulksendtransmissionGetCsvErrorsV1WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response</returns>
        EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response</returns>
        ApiResponse<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response> EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendtransmissionGetFormsDataV1Response</returns>
        EzsignbulksendtransmissionGetFormsDataV1Response EzsignbulksendtransmissionGetFormsDataV1(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendtransmissionGetFormsDataV1Response</returns>
        ApiResponse<EzsignbulksendtransmissionGetFormsDataV1Response> EzsignbulksendtransmissionGetFormsDataV1WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendtransmissionGetObjectV2Response</returns>
        EzsignbulksendtransmissionGetObjectV2Response EzsignbulksendtransmissionGetObjectV2(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendtransmissionGetObjectV2Response</returns>
        ApiResponse<EzsignbulksendtransmissionGetObjectV2Response> EzsignbulksendtransmissionGetObjectV2WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendtransmissionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EzsignbulksendtransmissionGetCsvErrorsV1Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EzsignbulksendtransmissionGetCsvErrorsV1WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response> EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response>> EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendtransmissionGetFormsDataV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendtransmissionGetFormsDataV1Response> EzsignbulksendtransmissionGetFormsDataV1Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendtransmissionGetFormsDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendtransmissionGetFormsDataV1Response>> EzsignbulksendtransmissionGetFormsDataV1WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendtransmissionGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendtransmissionGetObjectV2Response> EzsignbulksendtransmissionGetObjectV2Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendtransmissionGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendtransmissionGetObjectV2Response>> EzsignbulksendtransmissionGetObjectV2WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendtransmissionApi : IObjectEzsignbulksendtransmissionApiSync, IObjectEzsignbulksendtransmissionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignbulksendtransmissionApi : IObjectEzsignbulksendtransmissionApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendtransmissionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignbulksendtransmissionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendtransmissionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignbulksendtransmissionApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendtransmissionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignbulksendtransmissionApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendtransmissionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsignbulksendtransmissionApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string EzsignbulksendtransmissionGetCsvErrorsV1(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<string> localVarResponse = EzsignbulksendtransmissionGetCsvErrorsV1WithHttpInfo(pkiEzsignbulksendtransmissionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public eZmaxApi.Client.ApiResponse<string> EzsignbulksendtransmissionGetCsvErrorsV1WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetCsvErrorsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getCsvErrors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetCsvErrorsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EzsignbulksendtransmissionGetCsvErrorsV1Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<string> localVarResponse = await EzsignbulksendtransmissionGetCsvErrorsV1WithHttpInfoAsync(pkiEzsignbulksendtransmissionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s Csv containing errors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<string>> EzsignbulksendtransmissionGetCsvErrorsV1WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetCsvErrorsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getCsvErrors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetCsvErrorsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response</returns>
        public EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response> localVarResponse = EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsignbulksendtransmissionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response> EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response> EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response> localVarResponse = await EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(pkiEzsignbulksendtransmissionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response>> EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendtransmissionGetFormsDataV1Response</returns>
        public EzsignbulksendtransmissionGetFormsDataV1Response EzsignbulksendtransmissionGetFormsDataV1(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetFormsDataV1Response> localVarResponse = EzsignbulksendtransmissionGetFormsDataV1WithHttpInfo(pkiEzsignbulksendtransmissionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendtransmissionGetFormsDataV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetFormsDataV1Response> EzsignbulksendtransmissionGetFormsDataV1WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendtransmissionGetFormsDataV1Response>("/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getFormsData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendtransmissionGetFormsDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendtransmissionGetFormsDataV1Response> EzsignbulksendtransmissionGetFormsDataV1Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetFormsDataV1Response> localVarResponse = await EzsignbulksendtransmissionGetFormsDataV1WithHttpInfoAsync(pkiEzsignbulksendtransmissionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendtransmissionGetFormsDataV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetFormsDataV1Response>> EzsignbulksendtransmissionGetFormsDataV1WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendtransmissionGetFormsDataV1Response>("/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getFormsData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendtransmissionGetObjectV2Response</returns>
        public EzsignbulksendtransmissionGetObjectV2Response EzsignbulksendtransmissionGetObjectV2(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetObjectV2Response> localVarResponse = EzsignbulksendtransmissionGetObjectV2WithHttpInfo(pkiEzsignbulksendtransmissionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendtransmissionGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetObjectV2Response> EzsignbulksendtransmissionGetObjectV2WithHttpInfo(int pkiEzsignbulksendtransmissionID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendtransmissionGetObjectV2Response>("/2/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendtransmissionGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendtransmissionGetObjectV2Response> EzsignbulksendtransmissionGetObjectV2Async(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetObjectV2Response> localVarResponse = await EzsignbulksendtransmissionGetObjectV2WithHttpInfoAsync(pkiEzsignbulksendtransmissionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksendtransmission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendtransmissionID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendtransmissionGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendtransmissionGetObjectV2Response>> EzsignbulksendtransmissionGetObjectV2WithHttpInfoAsync(int pkiEzsignbulksendtransmissionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendtransmissionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendtransmissionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendtransmissionApi.EzsignbulksendtransmissionGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendtransmissionGetObjectV2Response>("/2/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendtransmissionGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
