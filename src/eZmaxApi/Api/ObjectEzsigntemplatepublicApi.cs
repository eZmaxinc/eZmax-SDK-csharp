/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatepublicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Create an Ezsignfolder
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicCreateEzsignfolderV1Response</returns>
        EzsigntemplatepublicCreateEzsignfolderV1Response EzsigntemplatepublicCreateEzsignfolderV1(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0);

        /// <summary>
        /// Create an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Create an Ezsignfolder
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicCreateEzsignfolderV1Response</returns>
        ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response> EzsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicCreateObjectV1Response</returns>
        EzsigntemplatepublicCreateObjectV1Response EzsigntemplatepublicCreateObjectV1(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatepublicCreateObjectV1Response> EzsigntemplatepublicCreateObjectV1WithHttpInfo(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsigntemplatepublic
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicEditObjectV1Response</returns>
        EzsigntemplatepublicEditObjectV1Response EzsigntemplatepublicEditObjectV1(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatepublicEditObjectV1Response> EzsigntemplatepublicEditObjectV1WithHttpInfo(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <remarks>
        /// Retrieve the Ezsigntemplatepublic details
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response</returns>
        EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0);

        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <remarks>
        /// Retrieve the Ezsigntemplatepublic details
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response</returns>
        ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetFormsDataV1Response</returns>
        EzsigntemplatepublicGetFormsDataV1Response EzsigntemplatepublicGetFormsDataV1(int pkiEzsigntemplatepublicID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetFormsDataV1Response</returns>
        ApiResponse<EzsigntemplatepublicGetFormsDataV1Response> EzsigntemplatepublicGetFormsDataV1WithHttpInfo(int pkiEzsigntemplatepublicID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsigntemplatepublic list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetListV1Response</returns>
        EzsigntemplatepublicGetListV1Response EzsigntemplatepublicGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsigntemplatepublic list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetListV1Response</returns>
        ApiResponse<EzsigntemplatepublicGetListV1Response> EzsigntemplatepublicGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetObjectV2Response</returns>
        EzsigntemplatepublicGetObjectV2Response EzsigntemplatepublicGetObjectV2(int pkiEzsigntemplatepublicID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetObjectV2Response</returns>
        ApiResponse<EzsigntemplatepublicGetObjectV2Response> EzsigntemplatepublicGetObjectV2WithHttpInfo(int pkiEzsigntemplatepublicID, int operationIndex = 0);
        /// <summary>
        /// Reset the limit exceeded counter
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicResetLimitExceededCounterV1Response</returns>
        EzsigntemplatepublicResetLimitExceededCounterV1Response EzsigntemplatepublicResetLimitExceededCounterV1(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0);

        /// <summary>
        /// Reset the limit exceeded counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicResetLimitExceededCounterV1Response</returns>
        ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response> EzsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0);
        /// <summary>
        /// Reset the Ezsigntemplatepublic url
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicResetUrlV1Response</returns>
        EzsigntemplatepublicResetUrlV1Response EzsigntemplatepublicResetUrlV1(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0);

        /// <summary>
        /// Reset the Ezsigntemplatepublic url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicResetUrlV1Response</returns>
        ApiResponse<EzsigntemplatepublicResetUrlV1Response> EzsigntemplatepublicResetUrlV1WithHttpInfo(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatepublicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Create an Ezsignfolder
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicCreateEzsignfolderV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicCreateEzsignfolderV1Response> EzsigntemplatepublicCreateEzsignfolderV1Async(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Ezsignfolder
        /// </summary>
        /// <remarks>
        /// Create an Ezsignfolder
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicCreateEzsignfolderV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response>> EzsigntemplatepublicCreateEzsignfolderV1WithHttpInfoAsync(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicCreateObjectV1Response> EzsigntemplatepublicCreateObjectV1Async(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicCreateObjectV1Response>> EzsigntemplatepublicCreateObjectV1WithHttpInfoAsync(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicEditObjectV1Response> EzsigntemplatepublicEditObjectV1Async(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicEditObjectV1Response>> EzsigntemplatepublicEditObjectV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <remarks>
        /// Retrieve the Ezsigntemplatepublic details
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Async(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <remarks>
        /// Retrieve the Ezsigntemplatepublic details
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>> EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfoAsync(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetFormsDataV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicGetFormsDataV1Response> EzsigntemplatepublicGetFormsDataV1Async(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetFormsDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicGetFormsDataV1Response>> EzsigntemplatepublicGetFormsDataV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsigntemplatepublic list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetListV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicGetListV1Response> EzsigntemplatepublicGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsigntemplatepublic list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicGetListV1Response>> EzsigntemplatepublicGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicGetObjectV2Response> EzsigntemplatepublicGetObjectV2Async(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicGetObjectV2Response>> EzsigntemplatepublicGetObjectV2WithHttpInfoAsync(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reset the limit exceeded counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicResetLimitExceededCounterV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicResetLimitExceededCounterV1Response> EzsigntemplatepublicResetLimitExceededCounterV1Async(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reset the limit exceeded counter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicResetLimitExceededCounterV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response>> EzsigntemplatepublicResetLimitExceededCounterV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reset the Ezsigntemplatepublic url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicResetUrlV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepublicResetUrlV1Response> EzsigntemplatepublicResetUrlV1Async(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reset the Ezsigntemplatepublic url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicResetUrlV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepublicResetUrlV1Response>> EzsigntemplatepublicResetUrlV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatepublicApi : IObjectEzsigntemplatepublicApiSync, IObjectEzsigntemplatepublicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatepublicApi : IObjectEzsigntemplatepublicApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepublicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatepublicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepublicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatepublicApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepublicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatepublicApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepublicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsigntemplatepublicApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Ezsignfolder Create an Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicCreateEzsignfolderV1Response</returns>
        public EzsigntemplatepublicCreateEzsignfolderV1Response EzsigntemplatepublicCreateEzsignfolderV1(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response> localVarResponse = EzsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(ezsigntemplatepublicCreateEzsignfolderV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Ezsignfolder Create an Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicCreateEzsignfolderV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response> EzsigntemplatepublicCreateEzsignfolderV1WithHttpInfo(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is set
            if (ezsigntemplatepublicCreateEzsignfolderV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicCreateEzsignfolderV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatepublicCreateEzsignfolderV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicCreateEzsignfolderV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatepublicCreateEzsignfolderV1Response>("/1/object/ezsigntemplatepublic/createEzsignfolder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicCreateEzsignfolderV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Ezsignfolder Create an Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicCreateEzsignfolderV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicCreateEzsignfolderV1Response> EzsigntemplatepublicCreateEzsignfolderV1Async(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response> localVarResponse = await EzsigntemplatepublicCreateEzsignfolderV1WithHttpInfoAsync(ezsigntemplatepublicCreateEzsignfolderV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Ezsignfolder Create an Ezsignfolder
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateEzsignfolderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicCreateEzsignfolderV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateEzsignfolderV1Response>> EzsigntemplatepublicCreateEzsignfolderV1WithHttpInfoAsync(EzsigntemplatepublicCreateEzsignfolderV1Request ezsigntemplatepublicCreateEzsignfolderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' is set
            if (ezsigntemplatepublicCreateEzsignfolderV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicCreateEzsignfolderV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicCreateEzsignfolderV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatepublicCreateEzsignfolderV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicCreateEzsignfolderV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatepublicCreateEzsignfolderV1Response>("/1/object/ezsigntemplatepublic/createEzsignfolder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicCreateEzsignfolderV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigntemplatepublic The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicCreateObjectV1Response</returns>
        public EzsigntemplatepublicCreateObjectV1Response EzsigntemplatepublicCreateObjectV1(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateObjectV1Response> localVarResponse = EzsigntemplatepublicCreateObjectV1WithHttpInfo(ezsigntemplatepublicCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatepublic The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicCreateObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateObjectV1Response> EzsigntemplatepublicCreateObjectV1WithHttpInfo(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatepublicCreateObjectV1Request' is set
            if (ezsigntemplatepublicCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatepublicCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatepublicCreateObjectV1Response>("/1/object/ezsigntemplatepublic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigntemplatepublic The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicCreateObjectV1Response> EzsigntemplatepublicCreateObjectV1Async(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateObjectV1Response> localVarResponse = await EzsigntemplatepublicCreateObjectV1WithHttpInfoAsync(ezsigntemplatepublicCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatepublic The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicCreateObjectV1Response>> EzsigntemplatepublicCreateObjectV1WithHttpInfoAsync(EzsigntemplatepublicCreateObjectV1Request ezsigntemplatepublicCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatepublicCreateObjectV1Request' is set
            if (ezsigntemplatepublicCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicCreateObjectV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatepublicCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatepublicCreateObjectV1Response>("/1/object/ezsigntemplatepublic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicEditObjectV1Response</returns>
        public EzsigntemplatepublicEditObjectV1Response EzsigntemplatepublicEditObjectV1(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicEditObjectV1Response> localVarResponse = EzsigntemplatepublicEditObjectV1WithHttpInfo(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicEditObjectV1Response> EzsigntemplatepublicEditObjectV1WithHttpInfo(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatepublicEditObjectV1Request' is set
            if (ezsigntemplatepublicEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatepublicEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigntemplatepublicEditObjectV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicEditObjectV1Response> EzsigntemplatepublicEditObjectV1Async(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicEditObjectV1Response> localVarResponse = await EzsigntemplatepublicEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="ezsigntemplatepublicEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicEditObjectV1Response>> EzsigntemplatepublicEditObjectV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, EzsigntemplatepublicEditObjectV1Request ezsigntemplatepublicEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatepublicEditObjectV1Request' is set
            if (ezsigntemplatepublicEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicEditObjectV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatepublicEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigntemplatepublicEditObjectV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response</returns>
        public EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> localVarResponse = EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfo(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is set
            if (ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>("/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Async(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> localVarResponse = await EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfoAsync(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the Ezsigntemplatepublic details Retrieve the Ezsigntemplatepublic details
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>> EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithHttpInfoAsync(EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' is set
            if (ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>("/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetFormsDataV1Response</returns>
        public EzsigntemplatepublicGetFormsDataV1Response EzsigntemplatepublicGetFormsDataV1(int pkiEzsigntemplatepublicID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetFormsDataV1Response> localVarResponse = EzsigntemplatepublicGetFormsDataV1WithHttpInfo(pkiEzsigntemplatepublicID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetFormsDataV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetFormsDataV1Response> EzsigntemplatepublicGetFormsDataV1WithHttpInfo(int pkiEzsigntemplatepublicID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatepublicGetFormsDataV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetFormsDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicGetFormsDataV1Response> EzsigntemplatepublicGetFormsDataV1Async(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetFormsDataV1Response> localVarResponse = await EzsigntemplatepublicGetFormsDataV1WithHttpInfoAsync(pkiEzsigntemplatepublicID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetFormsDataV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetFormsDataV1Response>> EzsigntemplatepublicGetFormsDataV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatepublicGetFormsDataV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsigntemplatepublic list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetListV1Response</returns>
        public EzsigntemplatepublicGetListV1Response EzsigntemplatepublicGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetListV1Response> localVarResponse = EzsigntemplatepublicGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigntemplatepublic list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetListV1Response> EzsigntemplatepublicGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatepublicGetListV1Response>("/1/object/ezsigntemplatepublic/getList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsigntemplatepublic list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicGetListV1Response> EzsigntemplatepublicGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetListV1Response> localVarResponse = await EzsigntemplatepublicGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigntemplatepublic list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplatepublicLimittype | Hour&lt;br&gt;Day&lt;br&gt;Month&lt;br&gt;Total |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetListV1Response>> EzsigntemplatepublicGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatepublicGetListV1Response>("/1/object/ezsigntemplatepublic/getList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicGetObjectV2Response</returns>
        public EzsigntemplatepublicGetObjectV2Response EzsigntemplatepublicGetObjectV2(int pkiEzsigntemplatepublicID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetObjectV2Response> localVarResponse = EzsigntemplatepublicGetObjectV2WithHttpInfo(pkiEzsigntemplatepublicID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetObjectV2Response> EzsigntemplatepublicGetObjectV2WithHttpInfo(int pkiEzsigntemplatepublicID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatepublicGetObjectV2Response>("/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicGetObjectV2Response> EzsigntemplatepublicGetObjectV2Async(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetObjectV2Response> localVarResponse = await EzsigntemplatepublicGetObjectV2WithHttpInfoAsync(pkiEzsigntemplatepublicID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepublic 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicGetObjectV2Response>> EzsigntemplatepublicGetObjectV2WithHttpInfoAsync(int pkiEzsigntemplatepublicID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatepublicGetObjectV2Response>("/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the limit exceeded counter 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicResetLimitExceededCounterV1Response</returns>
        public EzsigntemplatepublicResetLimitExceededCounterV1Response EzsigntemplatepublicResetLimitExceededCounterV1(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response> localVarResponse = EzsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(pkiEzsigntemplatepublicID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the limit exceeded counter 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicResetLimitExceededCounterV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response> EzsigntemplatepublicResetLimitExceededCounterV1WithHttpInfo(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicResetLimitExceededCounterV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicResetLimitExceededCounterV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatepublicResetLimitExceededCounterV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicResetLimitExceededCounterV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the limit exceeded counter 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicResetLimitExceededCounterV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicResetLimitExceededCounterV1Response> EzsigntemplatepublicResetLimitExceededCounterV1Async(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response> localVarResponse = await EzsigntemplatepublicResetLimitExceededCounterV1WithHttpInfoAsync(pkiEzsigntemplatepublicID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the limit exceeded counter 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicResetLimitExceededCounterV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetLimitExceededCounterV1Response>> EzsigntemplatepublicResetLimitExceededCounterV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicResetLimitExceededCounterV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicResetLimitExceededCounterV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatepublicResetLimitExceededCounterV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicResetLimitExceededCounterV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the Ezsigntemplatepublic url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatepublicResetUrlV1Response</returns>
        public EzsigntemplatepublicResetUrlV1Response EzsigntemplatepublicResetUrlV1(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetUrlV1Response> localVarResponse = EzsigntemplatepublicResetUrlV1WithHttpInfo(pkiEzsigntemplatepublicID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the Ezsigntemplatepublic url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatepublicResetUrlV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetUrlV1Response> EzsigntemplatepublicResetUrlV1WithHttpInfo(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicResetUrlV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicResetUrlV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatepublicResetUrlV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicResetUrlV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset the Ezsigntemplatepublic url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatepublicResetUrlV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepublicResetUrlV1Response> EzsigntemplatepublicResetUrlV1Async(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetUrlV1Response> localVarResponse = await EzsigntemplatepublicResetUrlV1WithHttpInfoAsync(pkiEzsigntemplatepublicID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset the Ezsigntemplatepublic url 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepublicID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatepublicResetUrlV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatepublicResetUrlV1Response>> EzsigntemplatepublicResetUrlV1WithHttpInfoAsync(int pkiEzsigntemplatepublicID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatepublicApi->EzsigntemplatepublicResetUrlV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatepublicID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatepublicID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatepublicApi.EzsigntemplatepublicResetUrlV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatepublicResetUrlV1Response>("/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatepublicResetUrlV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
