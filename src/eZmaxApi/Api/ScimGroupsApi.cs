/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScimGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        ScimGroup GroupsCreateObjectScimV2 (ScimGroup scimGroup);

        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> GroupsCreateObjectScimV2WithHttpInfo (ScimGroup scimGroup);
        /// <summary>
        /// Delete an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns></returns>
        void GroupsDeleteObjectScimV2 (string groupId);

        /// <summary>
        /// Delete an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GroupsDeleteObjectScimV2WithHttpInfo (string groupId);
        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        ScimGroup GroupsEditObjectScimV2 (string groupId, ScimGroup scimGroup);

        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> GroupsEditObjectScimV2WithHttpInfo (string groupId, ScimGroup scimGroup);
        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <returns>ScimGroup</returns>
        ScimGroup GroupsGetListScimV2 (string? filter = default(string?));

        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> GroupsGetListScimV2WithHttpInfo (string? filter = default(string?));
        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ScimGroup</returns>
        ScimGroup GroupsGetObjectScimV2 (string groupId);

        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        ApiResponse<ScimGroup> GroupsGetObjectScimV2WithHttpInfo (string groupId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> GroupsCreateObjectScimV2Async (ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsCreateObjectScimV2WithHttpInfoAsync (ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GroupsDeleteObjectScimV2Async (string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GroupsDeleteObjectScimV2WithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> GroupsEditObjectScimV2Async (string groupId, ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsEditObjectScimV2WithHttpInfoAsync (string groupId, ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> GroupsGetListScimV2Async (string? filter = default(string?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsGetListScimV2WithHttpInfoAsync (string? filter = default(string?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        System.Threading.Tasks.Task<ScimGroup> GroupsGetObjectScimV2Async (string groupId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsGetObjectScimV2WithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScimGroupsApi : IScimGroupsApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScimGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScimGroupsApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScimGroupsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ScimGroupsApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScimGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScimGroupsApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        public ScimGroup GroupsCreateObjectScimV2 (ScimGroup scimGroup)
        {
             ApiResponse<ScimGroup> localVarResponse = GroupsCreateObjectScimV2WithHttpInfo(scimGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> GroupsCreateObjectScimV2WithHttpInfo (ScimGroup scimGroup)
        {
            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
                throw new ApiException(400, "Missing required parameter 'scimGroup' when calling ScimGroupsApi->GroupsCreateObjectScimV2");

            var localVarPath = "/2/scim/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scimGroup != null && scimGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scimGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scimGroup; // byte array
            }

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsCreateObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Create a new Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> GroupsCreateObjectScimV2Async (ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ScimGroup> localVarResponse = await GroupsCreateObjectScimV2WithHttpInfoAsync(scimGroup, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsCreateObjectScimV2WithHttpInfoAsync (ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
                throw new ApiException(400, "Missing required parameter 'scimGroup' when calling ScimGroupsApi->GroupsCreateObjectScimV2");

            var localVarPath = "/2/scim/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scimGroup != null && scimGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scimGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scimGroup; // byte array
            }

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsCreateObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Delete an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public void GroupsDeleteObjectScimV2 (string groupId)
        {
             GroupsDeleteObjectScimV2WithHttpInfo(groupId);
        }

        /// <summary>
        /// Delete an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GroupsDeleteObjectScimV2WithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ScimGroupsApi->GroupsDeleteObjectScimV2");

            var localVarPath = "/2/scim/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsDeleteObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GroupsDeleteObjectScimV2Async (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await GroupsDeleteObjectScimV2WithHttpInfoAsync(groupId, cancellationToken);

        }

        /// <summary>
        /// Delete an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GroupsDeleteObjectScimV2WithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ScimGroupsApi->GroupsDeleteObjectScimV2");

            var localVarPath = "/2/scim/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsDeleteObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <returns>ScimGroup</returns>
        public ScimGroup GroupsEditObjectScimV2 (string groupId, ScimGroup scimGroup)
        {
             ApiResponse<ScimGroup> localVarResponse = GroupsEditObjectScimV2WithHttpInfo(groupId, scimGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> GroupsEditObjectScimV2WithHttpInfo (string groupId, ScimGroup scimGroup)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ScimGroupsApi->GroupsEditObjectScimV2");
            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
                throw new ApiException(400, "Missing required parameter 'scimGroup' when calling ScimGroupsApi->GroupsEditObjectScimV2");

            var localVarPath = "/2/scim/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (scimGroup != null && scimGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scimGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scimGroup; // byte array
            }

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsEditObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> GroupsEditObjectScimV2Async (string groupId, ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ScimGroup> localVarResponse = await GroupsEditObjectScimV2WithHttpInfoAsync(groupId, scimGroup, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="scimGroup"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsEditObjectScimV2WithHttpInfoAsync (string groupId, ScimGroup scimGroup, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ScimGroupsApi->GroupsEditObjectScimV2");
            // verify the required parameter 'scimGroup' is set
            if (scimGroup == null)
                throw new ApiException(400, "Missing required parameter 'scimGroup' when calling ScimGroupsApi->GroupsEditObjectScimV2");

            var localVarPath = "/2/scim/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (scimGroup != null && scimGroup.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scimGroup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scimGroup; // byte array
            }

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsEditObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <returns>ScimGroup</returns>
        public ScimGroup GroupsGetListScimV2 (string? filter = default(string?))
        {
             ApiResponse<ScimGroup> localVarResponse = GroupsGetListScimV2WithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> GroupsGetListScimV2WithHttpInfo (string? filter = default(string?))
        {

            var localVarPath = "/2/scim/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetListScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> GroupsGetListScimV2Async (string? filter = default(string?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ScimGroup> localVarResponse = await GroupsGetListScimV2WithHttpInfoAsync(filter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter expression for searching groups (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsGetListScimV2WithHttpInfoAsync (string? filter = default(string?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/2/scim/Groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetListScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ScimGroup</returns>
        public ScimGroup GroupsGetObjectScimV2 (string groupId)
        {
             ApiResponse<ScimGroup> localVarResponse = GroupsGetObjectScimV2WithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <returns>ApiResponse of ScimGroup</returns>
        public ApiResponse<ScimGroup> GroupsGetObjectScimV2WithHttpInfo (string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ScimGroupsApi->GroupsGetObjectScimV2");

            var localVarPath = "/2/scim/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ScimGroup</returns>
        public async System.Threading.Tasks.Task<ScimGroup> GroupsGetObjectScimV2Async (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ScimGroup> localVarResponse = await GroupsGetObjectScimV2WithHttpInfoAsync(groupId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ScimGroup)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScimGroup>> GroupsGetObjectScimV2WithHttpInfoAsync (string groupId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ScimGroupsApi->GroupsGetObjectScimV2");

            var localVarPath = "/2/scim/Groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GroupsGetObjectScimV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScimGroup>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ScimGroup) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScimGroup)));
        }

    }
}
