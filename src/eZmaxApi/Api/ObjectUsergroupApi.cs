/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectUsergroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <returns>UsergroupCreateObjectV1Response</returns>
        UsergroupCreateObjectV1Response UsergroupCreateObjectV1 (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request);

        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupCreateObjectV1Response</returns>
        ApiResponse<UsergroupCreateObjectV1Response> UsergroupCreateObjectV1WithHttpInfo (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request);
        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <returns>UsergroupEditObjectV1Response</returns>
        UsergroupEditObjectV1Response UsergroupEditObjectV1 (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request);

        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditObjectV1Response</returns>
        ApiResponse<UsergroupEditObjectV1Response> UsergroupEditObjectV1WithHttpInfo (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request);
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <returns>UsergroupEditPermissionsV1Response</returns>
        UsergroupEditPermissionsV1Response UsergroupEditPermissionsV1 (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request);

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditPermissionsV1Response</returns>
        ApiResponse<UsergroupEditPermissionsV1Response> UsergroupEditPermissionsV1WithHttpInfo (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request);
        /// <summary>
        /// Edit multiple Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// Edit multiple Usergroupdelegations
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <returns>UsergroupEditUsergroupdelegationsV1Response</returns>
        UsergroupEditUsergroupdelegationsV1Response UsergroupEditUsergroupdelegationsV1 (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request);

        /// <summary>
        /// Edit multiple Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// Edit multiple Usergroupdelegations
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditUsergroupdelegationsV1Response</returns>
        ApiResponse<UsergroupEditUsergroupdelegationsV1Response> UsergroupEditUsergroupdelegationsV1WithHttpInfo (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request);
        /// <summary>
        /// Edit multiple Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <returns>UsergroupEditUsergroupmembershipsV1Response</returns>
        UsergroupEditUsergroupmembershipsV1Response UsergroupEditUsergroupmembershipsV1 (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request);

        /// <summary>
        /// Edit multiple Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditUsergroupmembershipsV1Response</returns>
        ApiResponse<UsergroupEditUsergroupmembershipsV1Response> UsergroupEditUsergroupmembershipsV1WithHttpInfo (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request);
        /// <summary>
        /// Retrieve Usergroups and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>UsergroupGetAutocompleteV2Response</returns>
        UsergroupGetAutocompleteV2Response UsergroupGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage));

        /// <summary>
        /// Retrieve Usergroups and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of UsergroupGetAutocompleteV2Response</returns>
        ApiResponse<UsergroupGetAutocompleteV2Response> UsergroupGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage));
        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>UsergroupGetListV1Response</returns>
        UsergroupGetListV1Response UsergroupGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));

        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of UsergroupGetListV1Response</returns>
        ApiResponse<UsergroupGetListV1Response> UsergroupGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetObjectV2Response</returns>
        UsergroupGetObjectV2Response UsergroupGetObjectV2 (int pkiUsergroupID);

        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetObjectV2Response</returns>
        ApiResponse<UsergroupGetObjectV2Response> UsergroupGetObjectV2WithHttpInfo (int pkiUsergroupID);
        /// <summary>
        /// Retrieve an existing Usergroup's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetPermissionsV1Response</returns>
        UsergroupGetPermissionsV1Response UsergroupGetPermissionsV1 (int pkiUsergroupID);

        /// <summary>
        /// Retrieve an existing Usergroup's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetPermissionsV1Response</returns>
        ApiResponse<UsergroupGetPermissionsV1Response> UsergroupGetPermissionsV1WithHttpInfo (int pkiUsergroupID);
        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetUsergroupdelegationsV1Response</returns>
        UsergroupGetUsergroupdelegationsV1Response UsergroupGetUsergroupdelegationsV1 (int pkiUsergroupID);

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetUsergroupdelegationsV1Response</returns>
        ApiResponse<UsergroupGetUsergroupdelegationsV1Response> UsergroupGetUsergroupdelegationsV1WithHttpInfo (int pkiUsergroupID);
        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetUsergroupmembershipsV1Response</returns>
        UsergroupGetUsergroupmembershipsV1Response UsergroupGetUsergroupmembershipsV1 (int pkiUsergroupID);

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetUsergroupmembershipsV1Response</returns>
        ApiResponse<UsergroupGetUsergroupmembershipsV1Response> UsergroupGetUsergroupmembershipsV1WithHttpInfo (int pkiUsergroupID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupCreateObjectV1Response> UsergroupCreateObjectV1Async (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Usergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupCreateObjectV1Response>> UsergroupCreateObjectV1WithHttpInfoAsync (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupEditObjectV1Response> UsergroupEditObjectV1Async (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupEditObjectV1Response>> UsergroupEditObjectV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditPermissionsV1Response</returns>
        System.Threading.Tasks.Task<UsergroupEditPermissionsV1Response> UsergroupEditPermissionsV1Async (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupEditPermissionsV1Response>> UsergroupEditPermissionsV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// Edit multiple Usergroupdelegations
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditUsergroupdelegationsV1Response</returns>
        System.Threading.Tasks.Task<UsergroupEditUsergroupdelegationsV1Response> UsergroupEditUsergroupdelegationsV1Async (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// Edit multiple Usergroupdelegations
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditUsergroupdelegationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupEditUsergroupdelegationsV1Response>> UsergroupEditUsergroupdelegationsV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditUsergroupmembershipsV1Response</returns>
        System.Threading.Tasks.Task<UsergroupEditUsergroupmembershipsV1Response> UsergroupEditUsergroupmembershipsV1Async (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditUsergroupmembershipsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupEditUsergroupmembershipsV1Response>> UsergroupEditUsergroupmembershipsV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Usergroups and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetAutocompleteV2Response</returns>
        System.Threading.Tasks.Task<UsergroupGetAutocompleteV2Response> UsergroupGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Usergroups and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetAutocompleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupGetAutocompleteV2Response>> UsergroupGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetListV1Response</returns>
        System.Threading.Tasks.Task<UsergroupGetListV1Response> UsergroupGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Usergroup list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupGetListV1Response>> UsergroupGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetObjectV2Response</returns>
        System.Threading.Tasks.Task<UsergroupGetObjectV2Response> UsergroupGetObjectV2Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupGetObjectV2Response>> UsergroupGetObjectV2WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroup's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetPermissionsV1Response</returns>
        System.Threading.Tasks.Task<UsergroupGetPermissionsV1Response> UsergroupGetPermissionsV1Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroup&#39;s Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupGetPermissionsV1Response>> UsergroupGetPermissionsV1WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetUsergroupdelegationsV1Response</returns>
        System.Threading.Tasks.Task<UsergroupGetUsergroupdelegationsV1Response> UsergroupGetUsergroupdelegationsV1Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroup&#39;s Usergroupdelegations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetUsergroupdelegationsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupGetUsergroupdelegationsV1Response>> UsergroupGetUsergroupdelegationsV1WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetUsergroupmembershipsV1Response</returns>
        System.Threading.Tasks.Task<UsergroupGetUsergroupmembershipsV1Response> UsergroupGetUsergroupmembershipsV1Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroup&#39;s Usergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetUsergroupmembershipsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupGetUsergroupmembershipsV1Response>> UsergroupGetUsergroupmembershipsV1WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectUsergroupApi : IObjectUsergroupApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectUsergroupApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectUsergroupApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectUsergroupApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Usergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <returns>UsergroupCreateObjectV1Response</returns>
        public UsergroupCreateObjectV1Response UsergroupCreateObjectV1 (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request)
        {
             ApiResponse<UsergroupCreateObjectV1Response> localVarResponse = UsergroupCreateObjectV1WithHttpInfo(usergroupCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Usergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupCreateObjectV1Response</returns>
        public ApiResponse<UsergroupCreateObjectV1Response> UsergroupCreateObjectV1WithHttpInfo (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request)
        {
            // verify the required parameter 'usergroupCreateObjectV1Request' is set
            if (usergroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupCreateObjectV1Request' when calling ObjectUsergroupApi->UsergroupCreateObjectV1");

            var localVarPath = "./1/object/usergroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usergroupCreateObjectV1Request != null && usergroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Usergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupCreateObjectV1Response> UsergroupCreateObjectV1Async (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupCreateObjectV1Response> localVarResponse = await UsergroupCreateObjectV1WithHttpInfoAsync(usergroupCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Usergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupCreateObjectV1Response>> UsergroupCreateObjectV1WithHttpInfoAsync (UsergroupCreateObjectV1Request usergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'usergroupCreateObjectV1Request' is set
            if (usergroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupCreateObjectV1Request' when calling ObjectUsergroupApi->UsergroupCreateObjectV1");

            var localVarPath = "./1/object/usergroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usergroupCreateObjectV1Request != null && usergroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <returns>UsergroupEditObjectV1Response</returns>
        public UsergroupEditObjectV1Response UsergroupEditObjectV1 (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request)
        {
             ApiResponse<UsergroupEditObjectV1Response> localVarResponse = UsergroupEditObjectV1WithHttpInfo(pkiUsergroupID, usergroupEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditObjectV1Response</returns>
        public ApiResponse<UsergroupEditObjectV1Response> UsergroupEditObjectV1WithHttpInfo (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditObjectV1");
            // verify the required parameter 'usergroupEditObjectV1Request' is set
            if (usergroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditObjectV1Request' when calling ObjectUsergroupApi->UsergroupEditObjectV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditObjectV1Request != null && usergroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupEditObjectV1Response> UsergroupEditObjectV1Async (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupEditObjectV1Response> localVarResponse = await UsergroupEditObjectV1WithHttpInfoAsync(pkiUsergroupID, usergroupEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupEditObjectV1Response>> UsergroupEditObjectV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditObjectV1Request usergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditObjectV1");
            // verify the required parameter 'usergroupEditObjectV1Request' is set
            if (usergroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditObjectV1Request' when calling ObjectUsergroupApi->UsergroupEditObjectV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditObjectV1Request != null && usergroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditObjectV1Response)));
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <returns>UsergroupEditPermissionsV1Response</returns>
        public UsergroupEditPermissionsV1Response UsergroupEditPermissionsV1 (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request)
        {
             ApiResponse<UsergroupEditPermissionsV1Response> localVarResponse = UsergroupEditPermissionsV1WithHttpInfo(pkiUsergroupID, usergroupEditPermissionsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditPermissionsV1Response</returns>
        public ApiResponse<UsergroupEditPermissionsV1Response> UsergroupEditPermissionsV1WithHttpInfo (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditPermissionsV1");
            // verify the required parameter 'usergroupEditPermissionsV1Request' is set
            if (usergroupEditPermissionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditPermissionsV1Request' when calling ObjectUsergroupApi->UsergroupEditPermissionsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/editPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditPermissionsV1Request != null && usergroupEditPermissionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditPermissionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditPermissionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditPermissionsV1Response)));
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupEditPermissionsV1Response> UsergroupEditPermissionsV1Async (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupEditPermissionsV1Response> localVarResponse = await UsergroupEditPermissionsV1WithHttpInfoAsync(pkiUsergroupID, usergroupEditPermissionsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupEditPermissionsV1Response>> UsergroupEditPermissionsV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditPermissionsV1Request usergroupEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditPermissionsV1");
            // verify the required parameter 'usergroupEditPermissionsV1Request' is set
            if (usergroupEditPermissionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditPermissionsV1Request' when calling ObjectUsergroupApi->UsergroupEditPermissionsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/editPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditPermissionsV1Request != null && usergroupEditPermissionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditPermissionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditPermissionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditPermissionsV1Response)));
        }

        /// <summary>
        /// Edit multiple Usergroupdelegations Edit multiple Usergroupdelegations
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <returns>UsergroupEditUsergroupdelegationsV1Response</returns>
        public UsergroupEditUsergroupdelegationsV1Response UsergroupEditUsergroupdelegationsV1 (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request)
        {
             ApiResponse<UsergroupEditUsergroupdelegationsV1Response> localVarResponse = UsergroupEditUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Usergroupdelegations Edit multiple Usergroupdelegations
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditUsergroupdelegationsV1Response</returns>
        public ApiResponse<UsergroupEditUsergroupdelegationsV1Response> UsergroupEditUsergroupdelegationsV1WithHttpInfo (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditUsergroupdelegationsV1");
            // verify the required parameter 'usergroupEditUsergroupdelegationsV1Request' is set
            if (usergroupEditUsergroupdelegationsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling ObjectUsergroupApi->UsergroupEditUsergroupdelegationsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditUsergroupdelegationsV1Request != null && usergroupEditUsergroupdelegationsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditUsergroupdelegationsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditUsergroupdelegationsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditUsergroupdelegationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditUsergroupdelegationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditUsergroupdelegationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditUsergroupdelegationsV1Response)));
        }

        /// <summary>
        /// Edit multiple Usergroupdelegations Edit multiple Usergroupdelegations
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditUsergroupdelegationsV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupEditUsergroupdelegationsV1Response> UsergroupEditUsergroupdelegationsV1Async (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupEditUsergroupdelegationsV1Response> localVarResponse = await UsergroupEditUsergroupdelegationsV1WithHttpInfoAsync(pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Usergroupdelegations Edit multiple Usergroupdelegations
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupdelegationsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditUsergroupdelegationsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupEditUsergroupdelegationsV1Response>> UsergroupEditUsergroupdelegationsV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditUsergroupdelegationsV1Request usergroupEditUsergroupdelegationsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditUsergroupdelegationsV1");
            // verify the required parameter 'usergroupEditUsergroupdelegationsV1Request' is set
            if (usergroupEditUsergroupdelegationsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditUsergroupdelegationsV1Request' when calling ObjectUsergroupApi->UsergroupEditUsergroupdelegationsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditUsergroupdelegationsV1Request != null && usergroupEditUsergroupdelegationsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditUsergroupdelegationsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditUsergroupdelegationsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditUsergroupdelegationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditUsergroupdelegationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditUsergroupdelegationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditUsergroupdelegationsV1Response)));
        }

        /// <summary>
        /// Edit multiple Usergroupmemberships Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <returns>UsergroupEditUsergroupmembershipsV1Response</returns>
        public UsergroupEditUsergroupmembershipsV1Response UsergroupEditUsergroupmembershipsV1 (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request)
        {
             ApiResponse<UsergroupEditUsergroupmembershipsV1Response> localVarResponse = UsergroupEditUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Usergroupmemberships Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <returns>ApiResponse of UsergroupEditUsergroupmembershipsV1Response</returns>
        public ApiResponse<UsergroupEditUsergroupmembershipsV1Response> UsergroupEditUsergroupmembershipsV1WithHttpInfo (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditUsergroupmembershipsV1");
            // verify the required parameter 'usergroupEditUsergroupmembershipsV1Request' is set
            if (usergroupEditUsergroupmembershipsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling ObjectUsergroupApi->UsergroupEditUsergroupmembershipsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditUsergroupmembershipsV1Request != null && usergroupEditUsergroupmembershipsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditUsergroupmembershipsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditUsergroupmembershipsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditUsergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditUsergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditUsergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditUsergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Edit multiple Usergroupmemberships Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupEditUsergroupmembershipsV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupEditUsergroupmembershipsV1Response> UsergroupEditUsergroupmembershipsV1Async (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupEditUsergroupmembershipsV1Response> localVarResponse = await UsergroupEditUsergroupmembershipsV1WithHttpInfoAsync(pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Usergroupmemberships Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="usergroupEditUsergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupEditUsergroupmembershipsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupEditUsergroupmembershipsV1Response>> UsergroupEditUsergroupmembershipsV1WithHttpInfoAsync (int pkiUsergroupID, UsergroupEditUsergroupmembershipsV1Request usergroupEditUsergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupEditUsergroupmembershipsV1");
            // verify the required parameter 'usergroupEditUsergroupmembershipsV1Request' is set
            if (usergroupEditUsergroupmembershipsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupEditUsergroupmembershipsV1Request' when calling ObjectUsergroupApi->UsergroupEditUsergroupmembershipsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter
            if (usergroupEditUsergroupmembershipsV1Request != null && usergroupEditUsergroupmembershipsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupEditUsergroupmembershipsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupEditUsergroupmembershipsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupEditUsergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupEditUsergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupEditUsergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupEditUsergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Retrieve Usergroups and IDs Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>UsergroupGetAutocompleteV2Response</returns>
        public UsergroupGetAutocompleteV2Response UsergroupGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage))
        {
             ApiResponse<UsergroupGetAutocompleteV2Response> localVarResponse = UsergroupGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Usergroups and IDs Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of UsergroupGetAutocompleteV2Response</returns>
        public ApiResponse<UsergroupGetAutocompleteV2Response> UsergroupGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectUsergroupApi->UsergroupGetAutocompleteV2");

            var localVarPath = "./2/object/usergroup/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Usergroups and IDs Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetAutocompleteV2Response</returns>
        public async System.Threading.Tasks.Task<UsergroupGetAutocompleteV2Response> UsergroupGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupGetAutocompleteV2Response> localVarResponse = await UsergroupGetAutocompleteV2WithHttpInfoAsync(sSelector, eFilterActive, sQuery, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Usergroups and IDs Get the list of Usergroup to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Usergroups to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetAutocompleteV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupGetAutocompleteV2Response>> UsergroupGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectUsergroupApi->UsergroupGetAutocompleteV2");

            var localVarPath = "./2/object/usergroup/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>UsergroupGetListV1Response</returns>
        public UsergroupGetListV1Response UsergroupGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {
             ApiResponse<UsergroupGetListV1Response> localVarResponse = UsergroupGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of UsergroupGetListV1Response</returns>
        public ApiResponse<UsergroupGetListV1Response> UsergroupGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {

            var localVarPath = "./1/object/usergroup/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetListV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupGetListV1Response> UsergroupGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupGetListV1Response> localVarResponse = await UsergroupGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Usergroup list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupGetListV1Response>> UsergroupGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "./1/object/usergroup/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetObjectV2Response</returns>
        public UsergroupGetObjectV2Response UsergroupGetObjectV2 (int pkiUsergroupID)
        {
             ApiResponse<UsergroupGetObjectV2Response> localVarResponse = UsergroupGetObjectV2WithHttpInfo(pkiUsergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetObjectV2Response</returns>
        public ApiResponse<UsergroupGetObjectV2Response> UsergroupGetObjectV2WithHttpInfo (int pkiUsergroupID)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetObjectV2");

            var localVarPath = "./2/object/usergroup/{pkiUsergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<UsergroupGetObjectV2Response> UsergroupGetObjectV2Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupGetObjectV2Response> localVarResponse = await UsergroupGetObjectV2WithHttpInfoAsync(pkiUsergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupGetObjectV2Response>> UsergroupGetObjectV2WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetObjectV2");

            var localVarPath = "./2/object/usergroup/{pkiUsergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetPermissionsV1Response</returns>
        public UsergroupGetPermissionsV1Response UsergroupGetPermissionsV1 (int pkiUsergroupID)
        {
             ApiResponse<UsergroupGetPermissionsV1Response> localVarResponse = UsergroupGetPermissionsV1WithHttpInfo(pkiUsergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetPermissionsV1Response</returns>
        public ApiResponse<UsergroupGetPermissionsV1Response> UsergroupGetPermissionsV1WithHttpInfo (int pkiUsergroupID)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetPermissionsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/getPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupGetPermissionsV1Response> UsergroupGetPermissionsV1Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupGetPermissionsV1Response> localVarResponse = await UsergroupGetPermissionsV1WithHttpInfoAsync(pkiUsergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroup's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupGetPermissionsV1Response>> UsergroupGetPermissionsV1WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetPermissionsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/getPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetUsergroupdelegationsV1Response</returns>
        public UsergroupGetUsergroupdelegationsV1Response UsergroupGetUsergroupdelegationsV1 (int pkiUsergroupID)
        {
             ApiResponse<UsergroupGetUsergroupdelegationsV1Response> localVarResponse = UsergroupGetUsergroupdelegationsV1WithHttpInfo(pkiUsergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetUsergroupdelegationsV1Response</returns>
        public ApiResponse<UsergroupGetUsergroupdelegationsV1Response> UsergroupGetUsergroupdelegationsV1WithHttpInfo (int pkiUsergroupID)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetUsergroupdelegationsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetUsergroupdelegationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetUsergroupdelegationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetUsergroupdelegationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetUsergroupdelegationsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetUsergroupdelegationsV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupGetUsergroupdelegationsV1Response> UsergroupGetUsergroupdelegationsV1Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupGetUsergroupdelegationsV1Response> localVarResponse = await UsergroupGetUsergroupdelegationsV1WithHttpInfoAsync(pkiUsergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupdelegations 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetUsergroupdelegationsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupGetUsergroupdelegationsV1Response>> UsergroupGetUsergroupdelegationsV1WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetUsergroupdelegationsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetUsergroupdelegationsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetUsergroupdelegationsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetUsergroupdelegationsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetUsergroupdelegationsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>UsergroupGetUsergroupmembershipsV1Response</returns>
        public UsergroupGetUsergroupmembershipsV1Response UsergroupGetUsergroupmembershipsV1 (int pkiUsergroupID)
        {
             ApiResponse<UsergroupGetUsergroupmembershipsV1Response> localVarResponse = UsergroupGetUsergroupmembershipsV1WithHttpInfo(pkiUsergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <returns>ApiResponse of UsergroupGetUsergroupmembershipsV1Response</returns>
        public ApiResponse<UsergroupGetUsergroupmembershipsV1Response> UsergroupGetUsergroupmembershipsV1WithHttpInfo (int pkiUsergroupID)
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetUsergroupmembershipsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetUsergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetUsergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetUsergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetUsergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupGetUsergroupmembershipsV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupGetUsergroupmembershipsV1Response> UsergroupGetUsergroupmembershipsV1Async (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupGetUsergroupmembershipsV1Response> localVarResponse = await UsergroupGetUsergroupmembershipsV1WithHttpInfoAsync(pkiUsergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroup's Usergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupGetUsergroupmembershipsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupGetUsergroupmembershipsV1Response>> UsergroupGetUsergroupmembershipsV1WithHttpInfoAsync (int pkiUsergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupID' is set
            if (pkiUsergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupID' when calling ObjectUsergroupApi->UsergroupGetUsergroupmembershipsV1");

            var localVarPath = "./1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupID != null) localVarPathParams.Add("pkiUsergroupID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupGetUsergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupGetUsergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupGetUsergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupGetUsergroupmembershipsV1Response)));
        }

    }
}
