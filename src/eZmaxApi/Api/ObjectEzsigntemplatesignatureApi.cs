/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatesignatureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatesignatureCreateObjectV1Response</returns>
        EzsigntemplatesignatureCreateObjectV1Response EzsigntemplatesignatureCreateObjectV1 (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignatureCreateObjectV1Response> EzsigntemplatesignatureCreateObjectV1WithHttpInfo (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>EzsigntemplatesignatureDeleteObjectV1Response</returns>
        EzsigntemplatesignatureDeleteObjectV1Response EzsigntemplatesignatureDeleteObjectV1 (int pkiEzsigntemplatesignatureID);

        /// <summary>
        /// Delete an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureDeleteObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response> EzsigntemplatesignatureDeleteObjectV1WithHttpInfo (int pkiEzsigntemplatesignatureID);
        /// <summary>
        /// Edit an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <returns>EzsigntemplatesignatureEditObjectV1Response</returns>
        EzsigntemplatesignatureEditObjectV1Response EzsigntemplatesignatureEditObjectV1 (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignatureEditObjectV1Response> EzsigntemplatesignatureEditObjectV1WithHttpInfo (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>EzsigntemplatesignatureGetObjectV1Response</returns>
        EzsigntemplatesignatureGetObjectV1Response EzsigntemplatesignatureGetObjectV1 (int pkiEzsigntemplatesignatureID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureGetObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignatureGetObjectV1Response> EzsigntemplatesignatureGetObjectV1WithHttpInfo (int pkiEzsigntemplatesignatureID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignatureCreateObjectV1Response> EzsigntemplatesignatureCreateObjectV1Async (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureCreateObjectV1Response>> EzsigntemplatesignatureCreateObjectV1WithHttpInfoAsync (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignatureDeleteObjectV1Response> EzsigntemplatesignatureDeleteObjectV1Async (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response>> EzsigntemplatesignatureDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignatureEditObjectV1Response> EzsigntemplatesignatureEditObjectV1Async (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureEditObjectV1Response>> EzsigntemplatesignatureEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignatureGetObjectV1Response> EzsigntemplatesignatureGetObjectV1Async (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureGetObjectV1Response>> EzsigntemplatesignatureGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatesignatureApi : IObjectEzsigntemplatesignatureApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatesignatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatesignatureApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatesignatureApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatesignatureApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatesignatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatesignatureApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsigntemplatesignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatesignatureCreateObjectV1Response</returns>
        public EzsigntemplatesignatureCreateObjectV1Response EzsigntemplatesignatureCreateObjectV1 (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request)
        {
             ApiResponse<EzsigntemplatesignatureCreateObjectV1Response> localVarResponse = EzsigntemplatesignatureCreateObjectV1WithHttpInfo(ezsigntemplatesignatureCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatesignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureCreateObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignatureCreateObjectV1Response> EzsigntemplatesignatureCreateObjectV1WithHttpInfo (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigntemplatesignatureCreateObjectV1Request' is set
            if (ezsigntemplatesignatureCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignatureCreateObjectV1Request' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatesignatureCreateObjectV1Request != null && ezsigntemplatesignatureCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignatureCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignatureCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplatesignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignatureCreateObjectV1Response> EzsigntemplatesignatureCreateObjectV1Async (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignatureCreateObjectV1Response> localVarResponse = await EzsigntemplatesignatureCreateObjectV1WithHttpInfoAsync(ezsigntemplatesignatureCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigntemplatesignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureCreateObjectV1Response>> EzsigntemplatesignatureCreateObjectV1WithHttpInfoAsync (EzsigntemplatesignatureCreateObjectV1Request ezsigntemplatesignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatesignatureCreateObjectV1Request' is set
            if (ezsigntemplatesignatureCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignatureCreateObjectV1Request' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatesignatureCreateObjectV1Request != null && ezsigntemplatesignatureCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignatureCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignatureCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>EzsigntemplatesignatureDeleteObjectV1Response</returns>
        public EzsigntemplatesignatureDeleteObjectV1Response EzsigntemplatesignatureDeleteObjectV1 (int pkiEzsigntemplatesignatureID)
        {
             ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response> localVarResponse = EzsigntemplatesignatureDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureDeleteObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response> EzsigntemplatesignatureDeleteObjectV1WithHttpInfo (int pkiEzsigntemplatesignatureID)
        {
            // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
            if (pkiEzsigntemplatesignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignatureID' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignatureID != null) localVarPathParams.Add("pkiEzsigntemplatesignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignatureDeleteObjectV1Response> EzsigntemplatesignatureDeleteObjectV1Async (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response> localVarResponse = await EzsigntemplatesignatureDeleteObjectV1WithHttpInfoAsync(pkiEzsigntemplatesignatureID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response>> EzsigntemplatesignatureDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
            if (pkiEzsigntemplatesignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignatureID' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignatureID != null) localVarPathParams.Add("pkiEzsigntemplatesignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <returns>EzsigntemplatesignatureEditObjectV1Response</returns>
        public EzsigntemplatesignatureEditObjectV1Response EzsigntemplatesignatureEditObjectV1 (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request)
        {
             ApiResponse<EzsigntemplatesignatureEditObjectV1Response> localVarResponse = EzsigntemplatesignatureEditObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureEditObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignatureEditObjectV1Response> EzsigntemplatesignatureEditObjectV1WithHttpInfo (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
            if (pkiEzsigntemplatesignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignatureID' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureEditObjectV1");
            // verify the required parameter 'ezsigntemplatesignatureEditObjectV1Request' is set
            if (ezsigntemplatesignatureEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignatureEditObjectV1Request' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignatureID != null) localVarPathParams.Add("pkiEzsigntemplatesignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignatureID)); // path parameter
            if (ezsigntemplatesignatureEditObjectV1Request != null && ezsigntemplatesignatureEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignatureEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignatureEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignatureEditObjectV1Response> EzsigntemplatesignatureEditObjectV1Async (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignatureEditObjectV1Response> localVarResponse = await EzsigntemplatesignatureEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="ezsigntemplatesignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureEditObjectV1Response>> EzsigntemplatesignatureEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignatureID, EzsigntemplatesignatureEditObjectV1Request ezsigntemplatesignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
            if (pkiEzsigntemplatesignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignatureID' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureEditObjectV1");
            // verify the required parameter 'ezsigntemplatesignatureEditObjectV1Request' is set
            if (ezsigntemplatesignatureEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignatureEditObjectV1Request' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignatureID != null) localVarPathParams.Add("pkiEzsigntemplatesignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignatureID)); // path parameter
            if (ezsigntemplatesignatureEditObjectV1Request != null && ezsigntemplatesignatureEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignatureEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignatureEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>EzsigntemplatesignatureGetObjectV1Response</returns>
        public EzsigntemplatesignatureGetObjectV1Response EzsigntemplatesignatureGetObjectV1 (int pkiEzsigntemplatesignatureID)
        {
             ApiResponse<EzsigntemplatesignatureGetObjectV1Response> localVarResponse = EzsigntemplatesignatureGetObjectV1WithHttpInfo(pkiEzsigntemplatesignatureID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignatureGetObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignatureGetObjectV1Response> EzsigntemplatesignatureGetObjectV1WithHttpInfo (int pkiEzsigntemplatesignatureID)
        {
            // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
            if (pkiEzsigntemplatesignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignatureID' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignatureID != null) localVarPathParams.Add("pkiEzsigntemplatesignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignatureGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignatureGetObjectV1Response> EzsigntemplatesignatureGetObjectV1Async (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignatureGetObjectV1Response> localVarResponse = await EzsigntemplatesignatureGetObjectV1WithHttpInfoAsync(pkiEzsigntemplatesignatureID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignatureID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignatureGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignatureGetObjectV1Response>> EzsigntemplatesignatureGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatesignatureID' is set
            if (pkiEzsigntemplatesignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignatureID' when calling ObjectEzsigntemplatesignatureApi->EzsigntemplatesignatureGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignatureID != null) localVarPathParams.Add("pkiEzsigntemplatesignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignatureGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignatureGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignatureGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignatureGetObjectV1Response)));
        }

    }
}
