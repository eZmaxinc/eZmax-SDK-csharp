/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentpagerecognitionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionCreateObjectV1Response</returns>
        EzsigntemplatedocumentpagerecognitionCreateObjectV1Response EzsigntemplatedocumentpagerecognitionCreateObjectV1(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> EzsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfo(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response</returns>
        EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response EzsigntemplatedocumentpagerecognitionDeleteObjectV1(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0);

        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> EzsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionEditObjectV1Response</returns>
        EzsigntemplatedocumentpagerecognitionEditObjectV1Response EzsigntemplatedocumentpagerecognitionEditObjectV1(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> EzsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionGetObjectV2Response</returns>
        EzsigntemplatedocumentpagerecognitionGetObjectV2Response EzsigntemplatedocumentpagerecognitionGetObjectV2(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionGetObjectV2Response</returns>
        ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> EzsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfo(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentpagerecognitionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> EzsigntemplatedocumentpagerecognitionCreateObjectV1Async(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response>> EzsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfoAsync(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> EzsigntemplatedocumentpagerecognitionDeleteObjectV1Async(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response>> EzsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> EzsigntemplatedocumentpagerecognitionEditObjectV1Async(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response>> EzsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> EzsigntemplatedocumentpagerecognitionGetObjectV2Async(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response>> EzsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfoAsync(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentpagerecognitionApi : IObjectEzsigntemplatedocumentpagerecognitionApiSync, IObjectEzsigntemplatedocumentpagerecognitionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatedocumentpagerecognitionApi : IObjectEzsigntemplatedocumentpagerecognitionApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentpagerecognitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentpagerecognitionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentpagerecognitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentpagerecognitionApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentpagerecognitionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentpagerecognitionApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentpagerecognitionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsigntemplatedocumentpagerecognitionApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionCreateObjectV1Response</returns>
        public EzsigntemplatedocumentpagerecognitionCreateObjectV1Response EzsigntemplatedocumentpagerecognitionCreateObjectV1(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> localVarResponse = EzsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfo(ezsigntemplatedocumentpagerecognitionCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionCreateObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> EzsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfo(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' is set
            if (ezsigntemplatedocumentpagerecognitionCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ObjectEzsigntemplatedocumentpagerecognitionApi->EzsigntemplatedocumentpagerecognitionCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatedocumentpagerecognitionCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response>("/1/object/ezsigntemplatedocumentpagerecognition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> EzsigntemplatedocumentpagerecognitionCreateObjectV1Async(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response> localVarResponse = await EzsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfoAsync(ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocumentpagerecognition The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentpagerecognitionCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response>> EzsigntemplatedocumentpagerecognitionCreateObjectV1WithHttpInfoAsync(EzsigntemplatedocumentpagerecognitionCreateObjectV1Request ezsigntemplatedocumentpagerecognitionCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' is set
            if (ezsigntemplatedocumentpagerecognitionCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentpagerecognitionCreateObjectV1Request' when calling ObjectEzsigntemplatedocumentpagerecognitionApi->EzsigntemplatedocumentpagerecognitionCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatedocumentpagerecognitionCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatedocumentpagerecognitionCreateObjectV1Response>("/1/object/ezsigntemplatedocumentpagerecognition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response</returns>
        public EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response EzsigntemplatedocumentpagerecognitionDeleteObjectV1(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> localVarResponse = EzsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfo(pkiEzsigntemplatedocumentpagerecognitionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> EzsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentpagerecognitionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentpagerecognitionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response>("/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> EzsigntemplatedocumentpagerecognitionDeleteObjectV1Async(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response> localVarResponse = await EzsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfoAsync(pkiEzsigntemplatedocumentpagerecognitionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response>> EzsigntemplatedocumentpagerecognitionDeleteObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentpagerecognitionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentpagerecognitionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EzsigntemplatedocumentpagerecognitionDeleteObjectV1Response>("/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionEditObjectV1Response</returns>
        public EzsigntemplatedocumentpagerecognitionEditObjectV1Response EzsigntemplatedocumentpagerecognitionEditObjectV1(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> localVarResponse = EzsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentpagerecognitionID, ezsigntemplatedocumentpagerecognitionEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> EzsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' is set
            if (ezsigntemplatedocumentpagerecognitionEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ObjectEzsigntemplatedocumentpagerecognitionApi->EzsigntemplatedocumentpagerecognitionEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentpagerecognitionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentpagerecognitionID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentpagerecognitionEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigntemplatedocumentpagerecognitionEditObjectV1Response>("/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> EzsigntemplatedocumentpagerecognitionEditObjectV1Async(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response> localVarResponse = await EzsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatedocumentpagerecognitionID, ezsigntemplatedocumentpagerecognitionEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="ezsigntemplatedocumentpagerecognitionEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionEditObjectV1Response>> EzsigntemplatedocumentpagerecognitionEditObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentpagerecognitionID, EzsigntemplatedocumentpagerecognitionEditObjectV1Request ezsigntemplatedocumentpagerecognitionEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' is set
            if (ezsigntemplatedocumentpagerecognitionEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentpagerecognitionEditObjectV1Request' when calling ObjectEzsigntemplatedocumentpagerecognitionApi->EzsigntemplatedocumentpagerecognitionEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentpagerecognitionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentpagerecognitionID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentpagerecognitionEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigntemplatedocumentpagerecognitionEditObjectV1Response>("/1/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentpagerecognitionGetObjectV2Response</returns>
        public EzsigntemplatedocumentpagerecognitionGetObjectV2Response EzsigntemplatedocumentpagerecognitionGetObjectV2(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> localVarResponse = EzsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfo(pkiEzsigntemplatedocumentpagerecognitionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentpagerecognitionGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> EzsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfo(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentpagerecognitionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentpagerecognitionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatedocumentpagerecognitionGetObjectV2Response>("/2/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentpagerecognitionGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> EzsigntemplatedocumentpagerecognitionGetObjectV2Async(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response> localVarResponse = await EzsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfoAsync(pkiEzsigntemplatedocumentpagerecognitionID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocumentpagerecognition 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentpagerecognitionID">The unique ID of the Ezsigntemplatedocumentpagerecognition</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentpagerecognitionGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentpagerecognitionGetObjectV2Response>> EzsigntemplatedocumentpagerecognitionGetObjectV2WithHttpInfoAsync(int pkiEzsigntemplatedocumentpagerecognitionID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentpagerecognitionID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentpagerecognitionID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentpagerecognitionApi.EzsigntemplatedocumentpagerecognitionGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatedocumentpagerecognitionGetObjectV2Response>("/2/object/ezsigntemplatedocumentpagerecognition/{pkiEzsigntemplatedocumentpagerecognitionID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentpagerecognitionGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
