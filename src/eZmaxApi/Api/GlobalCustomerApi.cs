/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalCustomerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get customer endpoint
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <returns>GlobalCustomerGetEndpointV1Response</returns>
        GlobalCustomerGetEndpointV1Response GlobalCustomerGetEndpointV1 (string pksCustomerCode, string sInfrastructureproductCode = default(string));

        /// <summary>
        /// Get customer endpoint
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <returns>ApiResponse of GlobalCustomerGetEndpointV1Response</returns>
        ApiResponse<GlobalCustomerGetEndpointV1Response> GlobalCustomerGetEndpointV1WithHttpInfo (string pksCustomerCode, string sInfrastructureproductCode = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get customer endpoint
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlobalCustomerGetEndpointV1Response</returns>
        System.Threading.Tasks.Task<GlobalCustomerGetEndpointV1Response> GlobalCustomerGetEndpointV1Async (string pksCustomerCode, string sInfrastructureproductCode = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get customer endpoint
        /// </summary>
        /// <remarks>
        /// Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlobalCustomerGetEndpointV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GlobalCustomerGetEndpointV1Response>> GlobalCustomerGetEndpointV1WithHttpInfoAsync (string pksCustomerCode, string sInfrastructureproductCode = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalCustomerApi : IGlobalCustomerApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalCustomerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalCustomerApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalCustomerApi"/> class
        /// </summary>
        /// <returns></returns>
        public GlobalCustomerApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalCustomerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalCustomerApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get customer endpoint Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <returns>GlobalCustomerGetEndpointV1Response</returns>
        public GlobalCustomerGetEndpointV1Response GlobalCustomerGetEndpointV1 (string pksCustomerCode, string sInfrastructureproductCode = default(string))
        {
             ApiResponse<GlobalCustomerGetEndpointV1Response> localVarResponse = GlobalCustomerGetEndpointV1WithHttpInfo(pksCustomerCode, sInfrastructureproductCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer endpoint Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <returns>ApiResponse of GlobalCustomerGetEndpointV1Response</returns>
        public ApiResponse<GlobalCustomerGetEndpointV1Response> GlobalCustomerGetEndpointV1WithHttpInfo (string pksCustomerCode, string sInfrastructureproductCode = default(string))
        {
            // verify the required parameter 'pksCustomerCode' is set
            if (pksCustomerCode == null)
                throw new ApiException(400, "Missing required parameter 'pksCustomerCode' when calling GlobalCustomerApi->GlobalCustomerGetEndpointV1");

            var localVarPath = "/1/customer/{pksCustomerCode}/endpoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pksCustomerCode != null) localVarPathParams.Add("pksCustomerCode", this.Configuration.ApiClient.ParameterToString(pksCustomerCode)); // path parameter
            if (sInfrastructureproductCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sInfrastructureproductCode", sInfrastructureproductCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GlobalCustomerGetEndpointV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalCustomerGetEndpointV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlobalCustomerGetEndpointV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalCustomerGetEndpointV1Response)));
        }

        /// <summary>
        /// Get customer endpoint Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GlobalCustomerGetEndpointV1Response</returns>
        public async System.Threading.Tasks.Task<GlobalCustomerGetEndpointV1Response> GlobalCustomerGetEndpointV1Async (string pksCustomerCode, string sInfrastructureproductCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GlobalCustomerGetEndpointV1Response> localVarResponse = await GlobalCustomerGetEndpointV1WithHttpInfoAsync(pksCustomerCode, sInfrastructureproductCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer endpoint Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pksCustomerCode"></param>
        /// <param name="sInfrastructureproductCode">The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GlobalCustomerGetEndpointV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GlobalCustomerGetEndpointV1Response>> GlobalCustomerGetEndpointV1WithHttpInfoAsync (string pksCustomerCode, string sInfrastructureproductCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pksCustomerCode' is set
            if (pksCustomerCode == null)
                throw new ApiException(400, "Missing required parameter 'pksCustomerCode' when calling GlobalCustomerApi->GlobalCustomerGetEndpointV1");

            var localVarPath = "/1/customer/{pksCustomerCode}/endpoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pksCustomerCode != null) localVarPathParams.Add("pksCustomerCode", this.Configuration.ApiClient.ParameterToString(pksCustomerCode)); // path parameter
            if (sInfrastructureproductCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sInfrastructureproductCode", sInfrastructureproductCode)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GlobalCustomerGetEndpointV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalCustomerGetEndpointV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GlobalCustomerGetEndpointV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalCustomerGetEndpointV1Response)));
        }

    }
}
