/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzdoctemplatedocumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentCreateObjectV1Response</returns>
        EzdoctemplatedocumentCreateObjectV1Response EzdoctemplatedocumentCreateObjectV1(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentCreateObjectV1Response</returns>
        ApiResponse<EzdoctemplatedocumentCreateObjectV1Response> EzdoctemplatedocumentCreateObjectV1WithHttpInfo(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve the content
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EzdoctemplatedocumentDownloadV1(int pkiEzdoctemplatedocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve the content
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EzdoctemplatedocumentDownloadV1WithHttpInfo(int pkiEzdoctemplatedocumentID, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezdoctemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentEditObjectV1Response</returns>
        EzdoctemplatedocumentEditObjectV1Response EzdoctemplatedocumentEditObjectV1(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentEditObjectV1Response</returns>
        ApiResponse<EzdoctemplatedocumentEditObjectV1Response> EzdoctemplatedocumentEditObjectV1WithHttpInfo(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentGetAutocompleteV2Response</returns>
        EzdoctemplatedocumentGetAutocompleteV2Response EzdoctemplatedocumentGetAutocompleteV2(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentGetAutocompleteV2Response</returns>
        ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response> EzdoctemplatedocumentGetAutocompleteV2WithHttpInfo(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezdoctemplatedocument list
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentGetListV1Response</returns>
        EzdoctemplatedocumentGetListV1Response EzdoctemplatedocumentGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezdoctemplatedocument list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentGetListV1Response</returns>
        ApiResponse<EzdoctemplatedocumentGetListV1Response> EzdoctemplatedocumentGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentGetObjectV2Response</returns>
        EzdoctemplatedocumentGetObjectV2Response EzdoctemplatedocumentGetObjectV2(int pkiEzdoctemplatedocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentGetObjectV2Response</returns>
        ApiResponse<EzdoctemplatedocumentGetObjectV2Response> EzdoctemplatedocumentGetObjectV2WithHttpInfo(int pkiEzdoctemplatedocumentID, int operationIndex = 0);
        /// <summary>
        /// Patch an existing Ezdoctemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentPatchObjectV1Response</returns>
        EzdoctemplatedocumentPatchObjectV1Response EzdoctemplatedocumentPatchObjectV1(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Patch an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentPatchObjectV1Response</returns>
        ApiResponse<EzdoctemplatedocumentPatchObjectV1Response> EzdoctemplatedocumentPatchObjectV1WithHttpInfo(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzdoctemplatedocumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzdoctemplatedocumentCreateObjectV1Response> EzdoctemplatedocumentCreateObjectV1Async(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzdoctemplatedocumentCreateObjectV1Response>> EzdoctemplatedocumentCreateObjectV1WithHttpInfoAsync(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the content
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EzdoctemplatedocumentDownloadV1Async(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the content
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EzdoctemplatedocumentDownloadV1WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzdoctemplatedocumentEditObjectV1Response> EzdoctemplatedocumentEditObjectV1Async(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzdoctemplatedocumentEditObjectV1Response>> EzdoctemplatedocumentEditObjectV1WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentGetAutocompleteV2Response</returns>
        System.Threading.Tasks.Task<EzdoctemplatedocumentGetAutocompleteV2Response> EzdoctemplatedocumentGetAutocompleteV2Async(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentGetAutocompleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response>> EzdoctemplatedocumentGetAutocompleteV2WithHttpInfoAsync(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezdoctemplatedocument list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentGetListV1Response</returns>
        System.Threading.Tasks.Task<EzdoctemplatedocumentGetListV1Response> EzdoctemplatedocumentGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezdoctemplatedocument list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzdoctemplatedocumentGetListV1Response>> EzdoctemplatedocumentGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzdoctemplatedocumentGetObjectV2Response> EzdoctemplatedocumentGetObjectV2Async(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzdoctemplatedocumentGetObjectV2Response>> EzdoctemplatedocumentGetObjectV2WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentPatchObjectV1Response</returns>
        System.Threading.Tasks.Task<EzdoctemplatedocumentPatchObjectV1Response> EzdoctemplatedocumentPatchObjectV1Async(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch an existing Ezdoctemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentPatchObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzdoctemplatedocumentPatchObjectV1Response>> EzdoctemplatedocumentPatchObjectV1WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzdoctemplatedocumentApi : IObjectEzdoctemplatedocumentApiSync, IObjectEzdoctemplatedocumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzdoctemplatedocumentApi : IObjectEzdoctemplatedocumentApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzdoctemplatedocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzdoctemplatedocumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzdoctemplatedocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzdoctemplatedocumentApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzdoctemplatedocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzdoctemplatedocumentApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzdoctemplatedocumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzdoctemplatedocumentApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Ezdoctemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentCreateObjectV1Response</returns>
        public EzdoctemplatedocumentCreateObjectV1Response EzdoctemplatedocumentCreateObjectV1(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentCreateObjectV1Response> localVarResponse = EzdoctemplatedocumentCreateObjectV1WithHttpInfo(ezdoctemplatedocumentCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezdoctemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentCreateObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentCreateObjectV1Response> EzdoctemplatedocumentCreateObjectV1WithHttpInfo(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' is set
            if (ezdoctemplatedocumentCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezdoctemplatedocumentCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzdoctemplatedocumentCreateObjectV1Response>("/1/object/ezdoctemplatedocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezdoctemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzdoctemplatedocumentCreateObjectV1Response> EzdoctemplatedocumentCreateObjectV1Async(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentCreateObjectV1Response> localVarResponse = await EzdoctemplatedocumentCreateObjectV1WithHttpInfoAsync(ezdoctemplatedocumentCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezdoctemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezdoctemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentCreateObjectV1Response>> EzdoctemplatedocumentCreateObjectV1WithHttpInfoAsync(EzdoctemplatedocumentCreateObjectV1Request ezdoctemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezdoctemplatedocumentCreateObjectV1Request' is set
            if (ezdoctemplatedocumentCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezdoctemplatedocumentCreateObjectV1Request' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezdoctemplatedocumentCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzdoctemplatedocumentCreateObjectV1Response>("/1/object/ezdoctemplatedocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the content Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EzdoctemplatedocumentDownloadV1(int pkiEzdoctemplatedocumentID, int operationIndex = 0)
        {
            EzdoctemplatedocumentDownloadV1WithHttpInfo(pkiEzdoctemplatedocumentID);
        }

        /// <summary>
        /// Retrieve the content Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public eZmaxApi.Client.ApiResponse<Object> EzdoctemplatedocumentDownloadV1WithHttpInfo(int pkiEzdoctemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentDownloadV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (Presigned) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sAuthorization")))
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sAuthorization", this.Configuration.GetApiKeyWithPrefix("sAuthorization")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentDownloadV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the content Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EzdoctemplatedocumentDownloadV1Async(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EzdoctemplatedocumentDownloadV1WithHttpInfoAsync(pkiEzdoctemplatedocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieve the content Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<Object>> EzdoctemplatedocumentDownloadV1WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentDownloadV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (Presigned) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sAuthorization")))
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sAuthorization", this.Configuration.GetApiKeyWithPrefix("sAuthorization")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentDownloadV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentEditObjectV1Response</returns>
        public EzdoctemplatedocumentEditObjectV1Response EzdoctemplatedocumentEditObjectV1(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentEditObjectV1Response> localVarResponse = EzdoctemplatedocumentEditObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentEditObjectV1Response> EzdoctemplatedocumentEditObjectV1WithHttpInfo(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezdoctemplatedocumentEditObjectV1Request' is set
            if (ezdoctemplatedocumentEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezdoctemplatedocumentEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzdoctemplatedocumentEditObjectV1Response>("/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzdoctemplatedocumentEditObjectV1Response> EzdoctemplatedocumentEditObjectV1Async(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentEditObjectV1Response> localVarResponse = await EzdoctemplatedocumentEditObjectV1WithHttpInfoAsync(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentEditObjectV1Response>> EzdoctemplatedocumentEditObjectV1WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentEditObjectV1Request ezdoctemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezdoctemplatedocumentEditObjectV1Request' is set
            if (ezdoctemplatedocumentEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezdoctemplatedocumentEditObjectV1Request' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezdoctemplatedocumentEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzdoctemplatedocumentEditObjectV1Response>("/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentGetAutocompleteV2Response</returns>
        public EzdoctemplatedocumentGetAutocompleteV2Response EzdoctemplatedocumentGetAutocompleteV2(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response> localVarResponse = EzdoctemplatedocumentGetAutocompleteV2WithHttpInfo(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentGetAutocompleteV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response> EzdoctemplatedocumentGetAutocompleteV2WithHttpInfo(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0)
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'sSelector' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentGetAutocompleteV2");
            }

            // verify the required parameter 'eType' is set
            if (eType == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'eType' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentGetAutocompleteV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sSelector", eZmaxApi.Client.ClientUtils.ParameterToString(sSelector)); // path parameter
            if (fkiEzsignfoldertypeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "fkiEzsignfoldertypeID", fkiEzsignfoldertypeID));
            }
            localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eType", eType));
            if (eFilterActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eFilterActive", eFilterActive));
            }
            if (sQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sQuery", sQuery));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentGetAutocompleteV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzdoctemplatedocumentGetAutocompleteV2Response>("/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentGetAutocompleteV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentGetAutocompleteV2Response</returns>
        public async System.Threading.Tasks.Task<EzdoctemplatedocumentGetAutocompleteV2Response> EzdoctemplatedocumentGetAutocompleteV2Async(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response> localVarResponse = await EzdoctemplatedocumentGetAutocompleteV2WithHttpInfoAsync(sSelector, eType, fkiEzsignfoldertypeID, eFilterActive, sQuery, acceptLanguage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocuments and IDs Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezdoctemplatedocuments to return</param>
        /// <param name="eType">The type of Ezdoctemplatedocument</param>
        /// <param name="fkiEzsignfoldertypeID">Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype (optional)</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentGetAutocompleteV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetAutocompleteV2Response>> EzdoctemplatedocumentGetAutocompleteV2WithHttpInfoAsync(string sSelector, string eType, string? fkiEzsignfoldertypeID = default(string?), string? eFilterActive = default(string?), string? sQuery = default(string?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'sSelector' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentGetAutocompleteV2");
            }

            // verify the required parameter 'eType' is set
            if (eType == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'eType' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentGetAutocompleteV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sSelector", eZmaxApi.Client.ClientUtils.ParameterToString(sSelector)); // path parameter
            if (fkiEzsignfoldertypeID != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "fkiEzsignfoldertypeID", fkiEzsignfoldertypeID));
            }
            localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eType", eType));
            if (eFilterActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eFilterActive", eFilterActive));
            }
            if (sQuery != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sQuery", sQuery));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentGetAutocompleteV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzdoctemplatedocumentGetAutocompleteV2Response>("/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentGetAutocompleteV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocument list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentGetListV1Response</returns>
        public EzdoctemplatedocumentGetListV1Response EzdoctemplatedocumentGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetListV1Response> localVarResponse = EzdoctemplatedocumentGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocument list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentGetListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetListV1Response> EzdoctemplatedocumentGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzdoctemplatedocumentGetListV1Response>("/1/object/ezdoctemplatedocument/getList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocument list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzdoctemplatedocumentGetListV1Response> EzdoctemplatedocumentGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetListV1Response> localVarResponse = await EzdoctemplatedocumentGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezdoctemplatedocument list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetListV1Response>> EzdoctemplatedocumentGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzdoctemplatedocumentGetListV1Response>("/1/object/ezdoctemplatedocument/getList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentGetObjectV2Response</returns>
        public EzdoctemplatedocumentGetObjectV2Response EzdoctemplatedocumentGetObjectV2(int pkiEzdoctemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetObjectV2Response> localVarResponse = EzdoctemplatedocumentGetObjectV2WithHttpInfo(pkiEzdoctemplatedocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetObjectV2Response> EzdoctemplatedocumentGetObjectV2WithHttpInfo(int pkiEzdoctemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzdoctemplatedocumentGetObjectV2Response>("/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzdoctemplatedocumentGetObjectV2Response> EzdoctemplatedocumentGetObjectV2Async(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetObjectV2Response> localVarResponse = await EzdoctemplatedocumentGetObjectV2WithHttpInfoAsync(pkiEzdoctemplatedocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentGetObjectV2Response>> EzdoctemplatedocumentGetObjectV2WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzdoctemplatedocumentGetObjectV2Response>("/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzdoctemplatedocumentPatchObjectV1Response</returns>
        public EzdoctemplatedocumentPatchObjectV1Response EzdoctemplatedocumentPatchObjectV1(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentPatchObjectV1Response> localVarResponse = EzdoctemplatedocumentPatchObjectV1WithHttpInfo(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzdoctemplatedocumentPatchObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentPatchObjectV1Response> EzdoctemplatedocumentPatchObjectV1WithHttpInfo(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' is set
            if (ezdoctemplatedocumentPatchObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentPatchObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezdoctemplatedocumentPatchObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentPatchObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<EzdoctemplatedocumentPatchObjectV1Response>("/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentPatchObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzdoctemplatedocumentPatchObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzdoctemplatedocumentPatchObjectV1Response> EzdoctemplatedocumentPatchObjectV1Async(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentPatchObjectV1Response> localVarResponse = await EzdoctemplatedocumentPatchObjectV1WithHttpInfoAsync(pkiEzdoctemplatedocumentID, ezdoctemplatedocumentPatchObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezdoctemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument</param>
        /// <param name="ezdoctemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzdoctemplatedocumentPatchObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzdoctemplatedocumentPatchObjectV1Response>> EzdoctemplatedocumentPatchObjectV1WithHttpInfoAsync(int pkiEzdoctemplatedocumentID, EzdoctemplatedocumentPatchObjectV1Request ezdoctemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezdoctemplatedocumentPatchObjectV1Request' is set
            if (ezdoctemplatedocumentPatchObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezdoctemplatedocumentPatchObjectV1Request' when calling ObjectEzdoctemplatedocumentApi->EzdoctemplatedocumentPatchObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzdoctemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzdoctemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezdoctemplatedocumentPatchObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzdoctemplatedocumentApi.EzdoctemplatedocumentPatchObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<EzdoctemplatedocumentPatchObjectV1Response>("/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzdoctemplatedocumentPatchObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
