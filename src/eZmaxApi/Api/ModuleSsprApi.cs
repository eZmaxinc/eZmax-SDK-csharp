/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.0.42
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModuleSsprApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Reset Password Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <returns></returns>
        void SsprResetPasswordRequestV1 (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request);

        /// <summary>
        /// Reset Password Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SsprResetPasswordRequestV1WithHttpInfo (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request);
        /// <summary>
        /// Reset Password
        /// </summary>
        /// <remarks>
        /// This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <returns></returns>
        void SsprResetPasswordV1 (SsprResetPasswordV1Request ssprResetPasswordV1Request);

        /// <summary>
        /// Reset Password
        /// </summary>
        /// <remarks>
        /// This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SsprResetPasswordV1WithHttpInfo (SsprResetPasswordV1Request ssprResetPasswordV1Request);
        /// <summary>
        /// Send username(s)
        /// </summary>
        /// <remarks>
        /// This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <returns></returns>
        void SsprSendUsernamesV1 (SsprSendUsernamesV1Request ssprSendUsernamesV1Request);

        /// <summary>
        /// Send username(s)
        /// </summary>
        /// <remarks>
        /// This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SsprSendUsernamesV1WithHttpInfo (SsprSendUsernamesV1Request ssprSendUsernamesV1Request);
        /// <summary>
        /// Unlock Account Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <returns></returns>
        void SsprUnlockAccountRequestV1 (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request);

        /// <summary>
        /// Unlock Account Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SsprUnlockAccountRequestV1WithHttpInfo (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request);
        /// <summary>
        /// Unlock Account
        /// </summary>
        /// <remarks>
        /// This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <returns></returns>
        void SsprUnlockAccountV1 (SsprUnlockAccountV1Request ssprUnlockAccountV1Request);

        /// <summary>
        /// Unlock Account
        /// </summary>
        /// <remarks>
        /// This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SsprUnlockAccountV1WithHttpInfo (SsprUnlockAccountV1Request ssprUnlockAccountV1Request);
        /// <summary>
        /// Validate Token
        /// </summary>
        /// <remarks>
        /// This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <returns></returns>
        void SsprValidateTokenV1 (SsprValidateTokenV1Request ssprValidateTokenV1Request);

        /// <summary>
        /// Validate Token
        /// </summary>
        /// <remarks>
        /// This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SsprValidateTokenV1WithHttpInfo (SsprValidateTokenV1Request ssprValidateTokenV1Request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Reset Password Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SsprResetPasswordRequestV1Async (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset Password Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SsprResetPasswordRequestV1WithHttpInfoAsync (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reset Password
        /// </summary>
        /// <remarks>
        /// This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SsprResetPasswordV1Async (SsprResetPasswordV1Request ssprResetPasswordV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset Password
        /// </summary>
        /// <remarks>
        /// This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SsprResetPasswordV1WithHttpInfoAsync (SsprResetPasswordV1Request ssprResetPasswordV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send username(s)
        /// </summary>
        /// <remarks>
        /// This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SsprSendUsernamesV1Async (SsprSendUsernamesV1Request ssprSendUsernamesV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send username(s)
        /// </summary>
        /// <remarks>
        /// This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SsprSendUsernamesV1WithHttpInfoAsync (SsprSendUsernamesV1Request ssprSendUsernamesV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unlock Account Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SsprUnlockAccountRequestV1Async (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unlock Account Request
        /// </summary>
        /// <remarks>
        /// This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SsprUnlockAccountRequestV1WithHttpInfoAsync (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unlock Account
        /// </summary>
        /// <remarks>
        /// This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SsprUnlockAccountV1Async (SsprUnlockAccountV1Request ssprUnlockAccountV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unlock Account
        /// </summary>
        /// <remarks>
        /// This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SsprUnlockAccountV1WithHttpInfoAsync (SsprUnlockAccountV1Request ssprUnlockAccountV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validate Token
        /// </summary>
        /// <remarks>
        /// This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SsprValidateTokenV1Async (SsprValidateTokenV1Request ssprValidateTokenV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validate Token
        /// </summary>
        /// <remarks>
        /// This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SsprValidateTokenV1WithHttpInfoAsync (SsprValidateTokenV1Request ssprValidateTokenV1Request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModuleSsprApi : IModuleSsprApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleSsprApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModuleSsprApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleSsprApi"/> class
        /// </summary>
        /// <returns></returns>
        public ModuleSsprApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleSsprApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModuleSsprApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Reset Password Request This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <returns></returns>
        public void SsprResetPasswordRequestV1 (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request)
        {
             SsprResetPasswordRequestV1WithHttpInfo(ssprResetPasswordRequestV1Request);
        }

        /// <summary>
        /// Reset Password Request This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SsprResetPasswordRequestV1WithHttpInfo (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request)
        {
            // verify the required parameter 'ssprResetPasswordRequestV1Request' is set
            if (ssprResetPasswordRequestV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprResetPasswordRequestV1Request' when calling ModuleSsprApi->SsprResetPasswordRequestV1");

            var localVarPath = "/1/module/sspr/resetPasswordRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprResetPasswordRequestV1Request != null && ssprResetPasswordRequestV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprResetPasswordRequestV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprResetPasswordRequestV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprResetPasswordRequestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset Password Request This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SsprResetPasswordRequestV1Async (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SsprResetPasswordRequestV1WithHttpInfoAsync(ssprResetPasswordRequestV1Request, cancellationToken);

        }

        /// <summary>
        /// Reset Password Request This endpoint sends an email with a link to reset the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SsprResetPasswordRequestV1WithHttpInfoAsync (SsprResetPasswordRequestV1Request ssprResetPasswordRequestV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ssprResetPasswordRequestV1Request' is set
            if (ssprResetPasswordRequestV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprResetPasswordRequestV1Request' when calling ModuleSsprApi->SsprResetPasswordRequestV1");

            var localVarPath = "/1/module/sspr/resetPasswordRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprResetPasswordRequestV1Request != null && ssprResetPasswordRequestV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprResetPasswordRequestV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprResetPasswordRequestV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprResetPasswordRequestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset Password This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <returns></returns>
        public void SsprResetPasswordV1 (SsprResetPasswordV1Request ssprResetPasswordV1Request)
        {
             SsprResetPasswordV1WithHttpInfo(ssprResetPasswordV1Request);
        }

        /// <summary>
        /// Reset Password This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SsprResetPasswordV1WithHttpInfo (SsprResetPasswordV1Request ssprResetPasswordV1Request)
        {
            // verify the required parameter 'ssprResetPasswordV1Request' is set
            if (ssprResetPasswordV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprResetPasswordV1Request' when calling ModuleSsprApi->SsprResetPasswordV1");

            var localVarPath = "/1/module/sspr/resetPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprResetPasswordV1Request != null && ssprResetPasswordV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprResetPasswordV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprResetPasswordV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprResetPasswordV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset Password This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SsprResetPasswordV1Async (SsprResetPasswordV1Request ssprResetPasswordV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SsprResetPasswordV1WithHttpInfoAsync(ssprResetPasswordV1Request, cancellationToken);

        }

        /// <summary>
        /// Reset Password This endpoint resets the user&#39;s password.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprResetPasswordV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SsprResetPasswordV1WithHttpInfoAsync (SsprResetPasswordV1Request ssprResetPasswordV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ssprResetPasswordV1Request' is set
            if (ssprResetPasswordV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprResetPasswordV1Request' when calling ModuleSsprApi->SsprResetPasswordV1");

            var localVarPath = "/1/module/sspr/resetPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprResetPasswordV1Request != null && ssprResetPasswordV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprResetPasswordV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprResetPasswordV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprResetPasswordV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send username(s) This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <returns></returns>
        public void SsprSendUsernamesV1 (SsprSendUsernamesV1Request ssprSendUsernamesV1Request)
        {
             SsprSendUsernamesV1WithHttpInfo(ssprSendUsernamesV1Request);
        }

        /// <summary>
        /// Send username(s) This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SsprSendUsernamesV1WithHttpInfo (SsprSendUsernamesV1Request ssprSendUsernamesV1Request)
        {
            // verify the required parameter 'ssprSendUsernamesV1Request' is set
            if (ssprSendUsernamesV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprSendUsernamesV1Request' when calling ModuleSsprApi->SsprSendUsernamesV1");

            var localVarPath = "/1/module/sspr/sendUsernames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprSendUsernamesV1Request != null && ssprSendUsernamesV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprSendUsernamesV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprSendUsernamesV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprSendUsernamesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send username(s) This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SsprSendUsernamesV1Async (SsprSendUsernamesV1Request ssprSendUsernamesV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SsprSendUsernamesV1WithHttpInfoAsync(ssprSendUsernamesV1Request, cancellationToken);

        }

        /// <summary>
        /// Send username(s) This endpoint returns an email with the username(s) matching the email address provided in case of forgotten username
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprSendUsernamesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SsprSendUsernamesV1WithHttpInfoAsync (SsprSendUsernamesV1Request ssprSendUsernamesV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ssprSendUsernamesV1Request' is set
            if (ssprSendUsernamesV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprSendUsernamesV1Request' when calling ModuleSsprApi->SsprSendUsernamesV1");

            var localVarPath = "/1/module/sspr/sendUsernames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprSendUsernamesV1Request != null && ssprSendUsernamesV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprSendUsernamesV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprSendUsernamesV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprSendUsernamesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlock Account Request This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <returns></returns>
        public void SsprUnlockAccountRequestV1 (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request)
        {
             SsprUnlockAccountRequestV1WithHttpInfo(ssprUnlockAccountRequestV1Request);
        }

        /// <summary>
        /// Unlock Account Request This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SsprUnlockAccountRequestV1WithHttpInfo (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request)
        {
            // verify the required parameter 'ssprUnlockAccountRequestV1Request' is set
            if (ssprUnlockAccountRequestV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprUnlockAccountRequestV1Request' when calling ModuleSsprApi->SsprUnlockAccountRequestV1");

            var localVarPath = "/1/module/sspr/unlockAccountRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprUnlockAccountRequestV1Request != null && ssprUnlockAccountRequestV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprUnlockAccountRequestV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprUnlockAccountRequestV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprUnlockAccountRequestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlock Account Request This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SsprUnlockAccountRequestV1Async (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SsprUnlockAccountRequestV1WithHttpInfoAsync(ssprUnlockAccountRequestV1Request, cancellationToken);

        }

        /// <summary>
        /// Unlock Account Request This endpoint sends an email with a link to unlock the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountRequestV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SsprUnlockAccountRequestV1WithHttpInfoAsync (SsprUnlockAccountRequestV1Request ssprUnlockAccountRequestV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ssprUnlockAccountRequestV1Request' is set
            if (ssprUnlockAccountRequestV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprUnlockAccountRequestV1Request' when calling ModuleSsprApi->SsprUnlockAccountRequestV1");

            var localVarPath = "/1/module/sspr/unlockAccountRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprUnlockAccountRequestV1Request != null && ssprUnlockAccountRequestV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprUnlockAccountRequestV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprUnlockAccountRequestV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprUnlockAccountRequestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlock Account This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <returns></returns>
        public void SsprUnlockAccountV1 (SsprUnlockAccountV1Request ssprUnlockAccountV1Request)
        {
             SsprUnlockAccountV1WithHttpInfo(ssprUnlockAccountV1Request);
        }

        /// <summary>
        /// Unlock Account This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SsprUnlockAccountV1WithHttpInfo (SsprUnlockAccountV1Request ssprUnlockAccountV1Request)
        {
            // verify the required parameter 'ssprUnlockAccountV1Request' is set
            if (ssprUnlockAccountV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprUnlockAccountV1Request' when calling ModuleSsprApi->SsprUnlockAccountV1");

            var localVarPath = "/1/module/sspr/unlockAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprUnlockAccountV1Request != null && ssprUnlockAccountV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprUnlockAccountV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprUnlockAccountV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprUnlockAccountV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unlock Account This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SsprUnlockAccountV1Async (SsprUnlockAccountV1Request ssprUnlockAccountV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SsprUnlockAccountV1WithHttpInfoAsync(ssprUnlockAccountV1Request, cancellationToken);

        }

        /// <summary>
        /// Unlock Account This endpoint unlocks the user account.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprUnlockAccountV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SsprUnlockAccountV1WithHttpInfoAsync (SsprUnlockAccountV1Request ssprUnlockAccountV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ssprUnlockAccountV1Request' is set
            if (ssprUnlockAccountV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprUnlockAccountV1Request' when calling ModuleSsprApi->SsprUnlockAccountV1");

            var localVarPath = "/1/module/sspr/unlockAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprUnlockAccountV1Request != null && ssprUnlockAccountV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprUnlockAccountV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprUnlockAccountV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprUnlockAccountV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validate Token This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <returns></returns>
        public void SsprValidateTokenV1 (SsprValidateTokenV1Request ssprValidateTokenV1Request)
        {
             SsprValidateTokenV1WithHttpInfo(ssprValidateTokenV1Request);
        }

        /// <summary>
        /// Validate Token This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SsprValidateTokenV1WithHttpInfo (SsprValidateTokenV1Request ssprValidateTokenV1Request)
        {
            // verify the required parameter 'ssprValidateTokenV1Request' is set
            if (ssprValidateTokenV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprValidateTokenV1Request' when calling ModuleSsprApi->SsprValidateTokenV1");

            var localVarPath = "/1/module/sspr/validateToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprValidateTokenV1Request != null && ssprValidateTokenV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprValidateTokenV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprValidateTokenV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprValidateTokenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validate Token This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SsprValidateTokenV1Async (SsprValidateTokenV1Request ssprValidateTokenV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             await SsprValidateTokenV1WithHttpInfoAsync(ssprValidateTokenV1Request, cancellationToken);

        }

        /// <summary>
        /// Validate Token This endpoint validates if a Token is valid and not expired.  sEmailAddress must be set if eUserTypeSSPR &#x3D; EzsignUser  sUserLoginname must be set if eUserTypeSSPR &#x3D; Native
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ssprValidateTokenV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SsprValidateTokenV1WithHttpInfoAsync (SsprValidateTokenV1Request ssprValidateTokenV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ssprValidateTokenV1Request' is set
            if (ssprValidateTokenV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ssprValidateTokenV1Request' when calling ModuleSsprApi->SsprValidateTokenV1");

            var localVarPath = "/1/module/sspr/validateToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ssprValidateTokenV1Request != null && ssprValidateTokenV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ssprValidateTokenV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ssprValidateTokenV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SsprValidateTokenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
