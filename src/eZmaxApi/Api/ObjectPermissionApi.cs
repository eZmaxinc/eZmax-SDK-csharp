/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectPermissionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Permission
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <returns>PermissionCreateObjectV1Response</returns>
        PermissionCreateObjectV1Response PermissionCreateObjectV1 (PermissionCreateObjectV1Request permissionCreateObjectV1Request);

        /// <summary>
        /// Create a new Permission
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <returns>ApiResponse of PermissionCreateObjectV1Response</returns>
        ApiResponse<PermissionCreateObjectV1Response> PermissionCreateObjectV1WithHttpInfo (PermissionCreateObjectV1Request permissionCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>PermissionDeleteObjectV1Response</returns>
        PermissionDeleteObjectV1Response PermissionDeleteObjectV1 (int pkiPermissionID);

        /// <summary>
        /// Delete an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>ApiResponse of PermissionDeleteObjectV1Response</returns>
        ApiResponse<PermissionDeleteObjectV1Response> PermissionDeleteObjectV1WithHttpInfo (int pkiPermissionID);
        /// <summary>
        /// Edit an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <returns>PermissionEditObjectV1Response</returns>
        PermissionEditObjectV1Response PermissionEditObjectV1 (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request);

        /// <summary>
        /// Edit an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <returns>ApiResponse of PermissionEditObjectV1Response</returns>
        ApiResponse<PermissionEditObjectV1Response> PermissionEditObjectV1WithHttpInfo (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>PermissionGetObjectV2Response</returns>
        PermissionGetObjectV2Response PermissionGetObjectV2 (int pkiPermissionID);

        /// <summary>
        /// Retrieve an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>ApiResponse of PermissionGetObjectV2Response</returns>
        ApiResponse<PermissionGetObjectV2Response> PermissionGetObjectV2WithHttpInfo (int pkiPermissionID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Permission
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<PermissionCreateObjectV1Response> PermissionCreateObjectV1Async (PermissionCreateObjectV1Request permissionCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Permission
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionCreateObjectV1Response>> PermissionCreateObjectV1WithHttpInfoAsync (PermissionCreateObjectV1Request permissionCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<PermissionDeleteObjectV1Response> PermissionDeleteObjectV1Async (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionDeleteObjectV1Response>> PermissionDeleteObjectV1WithHttpInfoAsync (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionEditObjectV1Response</returns>
        System.Threading.Tasks.Task<PermissionEditObjectV1Response> PermissionEditObjectV1Async (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionEditObjectV1Response>> PermissionEditObjectV1WithHttpInfoAsync (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionGetObjectV2Response</returns>
        System.Threading.Tasks.Task<PermissionGetObjectV2Response> PermissionGetObjectV2Async (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Permission
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PermissionGetObjectV2Response>> PermissionGetObjectV2WithHttpInfoAsync (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectPermissionApi : IObjectPermissionApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectPermissionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectPermissionApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectPermissionApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectPermissionApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectPermissionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectPermissionApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Permission The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <returns>PermissionCreateObjectV1Response</returns>
        public PermissionCreateObjectV1Response PermissionCreateObjectV1 (PermissionCreateObjectV1Request permissionCreateObjectV1Request)
        {
             ApiResponse<PermissionCreateObjectV1Response> localVarResponse = PermissionCreateObjectV1WithHttpInfo(permissionCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Permission The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <returns>ApiResponse of PermissionCreateObjectV1Response</returns>
        public ApiResponse<PermissionCreateObjectV1Response> PermissionCreateObjectV1WithHttpInfo (PermissionCreateObjectV1Request permissionCreateObjectV1Request)
        {
            // verify the required parameter 'permissionCreateObjectV1Request' is set
            if (permissionCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'permissionCreateObjectV1Request' when calling ObjectPermissionApi->PermissionCreateObjectV1");

            var localVarPath = "/1/object/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (permissionCreateObjectV1Request != null && permissionCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissionCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Permission The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<PermissionCreateObjectV1Response> PermissionCreateObjectV1Async (PermissionCreateObjectV1Request permissionCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionCreateObjectV1Response> localVarResponse = await PermissionCreateObjectV1WithHttpInfoAsync(permissionCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Permission The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="permissionCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionCreateObjectV1Response>> PermissionCreateObjectV1WithHttpInfoAsync (PermissionCreateObjectV1Request permissionCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'permissionCreateObjectV1Request' is set
            if (permissionCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'permissionCreateObjectV1Request' when calling ObjectPermissionApi->PermissionCreateObjectV1");

            var localVarPath = "/1/object/permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (permissionCreateObjectV1Request != null && permissionCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissionCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>PermissionDeleteObjectV1Response</returns>
        public PermissionDeleteObjectV1Response PermissionDeleteObjectV1 (int pkiPermissionID)
        {
             ApiResponse<PermissionDeleteObjectV1Response> localVarResponse = PermissionDeleteObjectV1WithHttpInfo(pkiPermissionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>ApiResponse of PermissionDeleteObjectV1Response</returns>
        public ApiResponse<PermissionDeleteObjectV1Response> PermissionDeleteObjectV1WithHttpInfo (int pkiPermissionID)
        {
            // verify the required parameter 'pkiPermissionID' is set
            if (pkiPermissionID == null)
                throw new ApiException(400, "Missing required parameter 'pkiPermissionID' when calling ObjectPermissionApi->PermissionDeleteObjectV1");

            var localVarPath = "/1/object/permission/{pkiPermissionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiPermissionID != null) localVarPathParams.Add("pkiPermissionID", this.Configuration.ApiClient.ParameterToString(pkiPermissionID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<PermissionDeleteObjectV1Response> PermissionDeleteObjectV1Async (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionDeleteObjectV1Response> localVarResponse = await PermissionDeleteObjectV1WithHttpInfoAsync(pkiPermissionID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionDeleteObjectV1Response>> PermissionDeleteObjectV1WithHttpInfoAsync (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiPermissionID' is set
            if (pkiPermissionID == null)
                throw new ApiException(400, "Missing required parameter 'pkiPermissionID' when calling ObjectPermissionApi->PermissionDeleteObjectV1");

            var localVarPath = "/1/object/permission/{pkiPermissionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiPermissionID != null) localVarPathParams.Add("pkiPermissionID", this.Configuration.ApiClient.ParameterToString(pkiPermissionID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <returns>PermissionEditObjectV1Response</returns>
        public PermissionEditObjectV1Response PermissionEditObjectV1 (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request)
        {
             ApiResponse<PermissionEditObjectV1Response> localVarResponse = PermissionEditObjectV1WithHttpInfo(pkiPermissionID, permissionEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <returns>ApiResponse of PermissionEditObjectV1Response</returns>
        public ApiResponse<PermissionEditObjectV1Response> PermissionEditObjectV1WithHttpInfo (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request)
        {
            // verify the required parameter 'pkiPermissionID' is set
            if (pkiPermissionID == null)
                throw new ApiException(400, "Missing required parameter 'pkiPermissionID' when calling ObjectPermissionApi->PermissionEditObjectV1");
            // verify the required parameter 'permissionEditObjectV1Request' is set
            if (permissionEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'permissionEditObjectV1Request' when calling ObjectPermissionApi->PermissionEditObjectV1");

            var localVarPath = "/1/object/permission/{pkiPermissionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiPermissionID != null) localVarPathParams.Add("pkiPermissionID", this.Configuration.ApiClient.ParameterToString(pkiPermissionID)); // path parameter
            if (permissionEditObjectV1Request != null && permissionEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissionEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<PermissionEditObjectV1Response> PermissionEditObjectV1Async (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionEditObjectV1Response> localVarResponse = await PermissionEditObjectV1WithHttpInfoAsync(pkiPermissionID, permissionEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="permissionEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionEditObjectV1Response>> PermissionEditObjectV1WithHttpInfoAsync (int pkiPermissionID, PermissionEditObjectV1Request permissionEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiPermissionID' is set
            if (pkiPermissionID == null)
                throw new ApiException(400, "Missing required parameter 'pkiPermissionID' when calling ObjectPermissionApi->PermissionEditObjectV1");
            // verify the required parameter 'permissionEditObjectV1Request' is set
            if (permissionEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'permissionEditObjectV1Request' when calling ObjectPermissionApi->PermissionEditObjectV1");

            var localVarPath = "/1/object/permission/{pkiPermissionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiPermissionID != null) localVarPathParams.Add("pkiPermissionID", this.Configuration.ApiClient.ParameterToString(pkiPermissionID)); // path parameter
            if (permissionEditObjectV1Request != null && permissionEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissionEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>PermissionGetObjectV2Response</returns>
        public PermissionGetObjectV2Response PermissionGetObjectV2 (int pkiPermissionID)
        {
             ApiResponse<PermissionGetObjectV2Response> localVarResponse = PermissionGetObjectV2WithHttpInfo(pkiPermissionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <returns>ApiResponse of PermissionGetObjectV2Response</returns>
        public ApiResponse<PermissionGetObjectV2Response> PermissionGetObjectV2WithHttpInfo (int pkiPermissionID)
        {
            // verify the required parameter 'pkiPermissionID' is set
            if (pkiPermissionID == null)
                throw new ApiException(400, "Missing required parameter 'pkiPermissionID' when calling ObjectPermissionApi->PermissionGetObjectV2");

            var localVarPath = "/2/object/permission/{pkiPermissionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiPermissionID != null) localVarPathParams.Add("pkiPermissionID", this.Configuration.ApiClient.ParameterToString(pkiPermissionID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PermissionGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<PermissionGetObjectV2Response> PermissionGetObjectV2Async (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PermissionGetObjectV2Response> localVarResponse = await PermissionGetObjectV2WithHttpInfoAsync(pkiPermissionID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Permission 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiPermissionID">The unique ID of the Permission</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PermissionGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PermissionGetObjectV2Response>> PermissionGetObjectV2WithHttpInfoAsync (int pkiPermissionID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiPermissionID' is set
            if (pkiPermissionID == null)
                throw new ApiException(400, "Missing required parameter 'pkiPermissionID' when calling ObjectPermissionApi->PermissionGetObjectV2");

            var localVarPath = "/2/object/permission/{pkiPermissionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiPermissionID != null) localVarPathParams.Add("pkiPermissionID", this.Configuration.ApiClient.ParameterToString(pkiPermissionID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PermissionGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PermissionGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PermissionGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PermissionGetObjectV2Response)));
        }

    }
}
