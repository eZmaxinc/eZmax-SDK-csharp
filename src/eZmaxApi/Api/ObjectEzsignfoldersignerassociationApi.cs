/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.12
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignfoldersignerassociationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <returns>EzsignfoldersignerassociationCreateObjectV1Response</returns>
        [Obsolete]
        EzsignfoldersignerassociationCreateObjectV1Response EzsignfoldersignerassociationCreateObjectV1 (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationCreateObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response> EzsignfoldersignerassociationCreateObjectV1WithHttpInfo (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request);
        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <returns>EzsignfoldersignerassociationCreateObjectV2Response</returns>
        EzsignfoldersignerassociationCreateObjectV2Response EzsignfoldersignerassociationCreateObjectV2 (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request);

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationCreateObjectV2Response</returns>
        ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response> EzsignfoldersignerassociationCreateObjectV2WithHttpInfo (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request);
        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>EzsignfoldersignerassociationDeleteObjectV1Response</returns>
        EzsignfoldersignerassociationDeleteObjectV1Response EzsignfoldersignerassociationDeleteObjectV1 (int pkiEzsignfoldersignerassociationID);

        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationDeleteObjectV1Response</returns>
        ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response> EzsignfoldersignerassociationDeleteObjectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID);
        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <returns>EzsignfoldersignerassociationEditObjectV1Response</returns>
        EzsignfoldersignerassociationEditObjectV1Response EzsignfoldersignerassociationEditObjectV1 (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationEditObjectV1Response</returns>
        ApiResponse<EzsignfoldersignerassociationEditObjectV1Response> EzsignfoldersignerassociationEditObjectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request);
        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfoldersignerassociationForceDisconnectV1Response</returns>
        EzsignfoldersignerassociationForceDisconnectV1Response EzsignfoldersignerassociationForceDisconnectV1 (int pkiEzsignfoldersignerassociationID, Object body);

        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationForceDisconnectV1Response</returns>
        ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response> EzsignfoldersignerassociationForceDisconnectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID, Object body);
        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing
        /// </summary>
        /// <remarks>
        /// This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>EzsignfoldersignerassociationGetInPersonLoginUrlV1Response</returns>
        EzsignfoldersignerassociationGetInPersonLoginUrlV1Response EzsignfoldersignerassociationGetInPersonLoginUrlV1 (int pkiEzsignfoldersignerassociationID);

        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing
        /// </summary>
        /// <remarks>
        /// This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationGetInPersonLoginUrlV1Response</returns>
        ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> EzsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfo (int pkiEzsignfoldersignerassociationID);
        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>EzsignfoldersignerassociationGetObjectV1Response</returns>
        EzsignfoldersignerassociationGetObjectV1Response EzsignfoldersignerassociationGetObjectV1 (int pkiEzsignfoldersignerassociationID);

        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationGetObjectV1Response</returns>
        ApiResponse<EzsignfoldersignerassociationGetObjectV1Response> EzsignfoldersignerassociationGetObjectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationCreateObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignfoldersignerassociationCreateObjectV1Response> EzsignfoldersignerassociationCreateObjectV1Async (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationCreateObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response>> EzsignfoldersignerassociationCreateObjectV1WithHttpInfoAsync (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationCreateObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignfoldersignerassociationCreateObjectV2Response> EzsignfoldersignerassociationCreateObjectV2Async (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationCreateObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response>> EzsignfoldersignerassociationCreateObjectV2WithHttpInfoAsync (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfoldersignerassociationDeleteObjectV1Response> EzsignfoldersignerassociationDeleteObjectV1Async (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response>> EzsignfoldersignerassociationDeleteObjectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfoldersignerassociationEditObjectV1Response> EzsignfoldersignerassociationEditObjectV1Async (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationEditObjectV1Response>> EzsignfoldersignerassociationEditObjectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationForceDisconnectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfoldersignerassociationForceDisconnectV1Response> EzsignfoldersignerassociationForceDisconnectV1Async (int pkiEzsignfoldersignerassociationID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationForceDisconnectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response>> EzsignfoldersignerassociationForceDisconnectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing
        /// </summary>
        /// <remarks>
        /// This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationGetInPersonLoginUrlV1Response</returns>
        System.Threading.Tasks.Task<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> EzsignfoldersignerassociationGetInPersonLoginUrlV1Async (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing
        /// </summary>
        /// <remarks>
        /// This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationGetInPersonLoginUrlV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response>> EzsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignfoldersignerassociationGetObjectV1Response> EzsignfoldersignerassociationGetObjectV1Async (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationGetObjectV1Response>> EzsignfoldersignerassociationGetObjectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignfoldersignerassociationApi : IObjectEzsignfoldersignerassociationApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfoldersignerassociationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignfoldersignerassociationApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfoldersignerassociationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignfoldersignerassociationApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignfoldersignerassociationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignfoldersignerassociationApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <returns>EzsignfoldersignerassociationCreateObjectV1Response</returns>
        [Obsolete]
        public EzsignfoldersignerassociationCreateObjectV1Response EzsignfoldersignerassociationCreateObjectV1 (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request)
        {
             ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response> localVarResponse = EzsignfoldersignerassociationCreateObjectV1WithHttpInfo(ezsignfoldersignerassociationCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationCreateObjectV1Response</returns>
        [Obsolete]
        public ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response> EzsignfoldersignerassociationCreateObjectV1WithHttpInfo (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request)
        {
            // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' is set
            if (ezsignfoldersignerassociationCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationCreateObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfoldersignerassociationCreateObjectV1Request != null && ezsignfoldersignerassociationCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfoldersignerassociationCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfoldersignerassociationCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationCreateObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationCreateObjectV1Response> EzsignfoldersignerassociationCreateObjectV1Async (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response> localVarResponse = await EzsignfoldersignerassociationCreateObjectV1WithHttpInfoAsync(ezsignfoldersignerassociationCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationCreateObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response>> EzsignfoldersignerassociationCreateObjectV1WithHttpInfoAsync (List<EzsignfoldersignerassociationCreateObjectV1Request> ezsignfoldersignerassociationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' is set
            if (ezsignfoldersignerassociationCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfoldersignerassociationCreateObjectV1Request' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationCreateObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfoldersignerassociationCreateObjectV1Request != null && ezsignfoldersignerassociationCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfoldersignerassociationCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfoldersignerassociationCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <returns>EzsignfoldersignerassociationCreateObjectV2Response</returns>
        public EzsignfoldersignerassociationCreateObjectV2Response EzsignfoldersignerassociationCreateObjectV2 (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request)
        {
             ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response> localVarResponse = EzsignfoldersignerassociationCreateObjectV2WithHttpInfo(ezsignfoldersignerassociationCreateObjectV2Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationCreateObjectV2Response</returns>
        public ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response> EzsignfoldersignerassociationCreateObjectV2WithHttpInfo (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request)
        {
            // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' is set
            if (ezsignfoldersignerassociationCreateObjectV2Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationCreateObjectV2");

            var localVarPath = "/2/object/ezsignfoldersignerassociation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfoldersignerassociationCreateObjectV2Request != null && ezsignfoldersignerassociationCreateObjectV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfoldersignerassociationCreateObjectV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfoldersignerassociationCreateObjectV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationCreateObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationCreateObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationCreateObjectV2Response)));
        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationCreateObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationCreateObjectV2Response> EzsignfoldersignerassociationCreateObjectV2Async (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response> localVarResponse = await EzsignfoldersignerassociationCreateObjectV2WithHttpInfoAsync(ezsignfoldersignerassociationCreateObjectV2Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignfoldersignerassociation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignfoldersignerassociationCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationCreateObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response>> EzsignfoldersignerassociationCreateObjectV2WithHttpInfoAsync (EzsignfoldersignerassociationCreateObjectV2Request ezsignfoldersignerassociationCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' is set
            if (ezsignfoldersignerassociationCreateObjectV2Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfoldersignerassociationCreateObjectV2Request' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationCreateObjectV2");

            var localVarPath = "/2/object/ezsignfoldersignerassociation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignfoldersignerassociationCreateObjectV2Request != null && ezsignfoldersignerassociationCreateObjectV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfoldersignerassociationCreateObjectV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfoldersignerassociationCreateObjectV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationCreateObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationCreateObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationCreateObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationCreateObjectV2Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>EzsignfoldersignerassociationDeleteObjectV1Response</returns>
        public EzsignfoldersignerassociationDeleteObjectV1Response EzsignfoldersignerassociationDeleteObjectV1 (int pkiEzsignfoldersignerassociationID)
        {
             ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response> localVarResponse = EzsignfoldersignerassociationDeleteObjectV1WithHttpInfo(pkiEzsignfoldersignerassociationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationDeleteObjectV1Response</returns>
        public ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response> EzsignfoldersignerassociationDeleteObjectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID)
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationDeleteObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationDeleteObjectV1Response> EzsignfoldersignerassociationDeleteObjectV1Async (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response> localVarResponse = await EzsignfoldersignerassociationDeleteObjectV1WithHttpInfoAsync(pkiEzsignfoldersignerassociationID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response>> EzsignfoldersignerassociationDeleteObjectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationDeleteObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <returns>EzsignfoldersignerassociationEditObjectV1Response</returns>
        public EzsignfoldersignerassociationEditObjectV1Response EzsignfoldersignerassociationEditObjectV1 (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request)
        {
             ApiResponse<EzsignfoldersignerassociationEditObjectV1Response> localVarResponse = EzsignfoldersignerassociationEditObjectV1WithHttpInfo(pkiEzsignfoldersignerassociationID, ezsignfoldersignerassociationEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationEditObjectV1Response</returns>
        public ApiResponse<EzsignfoldersignerassociationEditObjectV1Response> EzsignfoldersignerassociationEditObjectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationEditObjectV1");
            // verify the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' is set
            if (ezsignfoldersignerassociationEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfoldersignerassociationEditObjectV1Request' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationEditObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter
            if (ezsignfoldersignerassociationEditObjectV1Request != null && ezsignfoldersignerassociationEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfoldersignerassociationEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfoldersignerassociationEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationEditObjectV1Response> EzsignfoldersignerassociationEditObjectV1Async (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationEditObjectV1Response> localVarResponse = await EzsignfoldersignerassociationEditObjectV1WithHttpInfoAsync(pkiEzsignfoldersignerassociationID, ezsignfoldersignerassociationEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="ezsignfoldersignerassociationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationEditObjectV1Response>> EzsignfoldersignerassociationEditObjectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, EzsignfoldersignerassociationEditObjectV1Request ezsignfoldersignerassociationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationEditObjectV1");
            // verify the required parameter 'ezsignfoldersignerassociationEditObjectV1Request' is set
            if (ezsignfoldersignerassociationEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignfoldersignerassociationEditObjectV1Request' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationEditObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter
            if (ezsignfoldersignerassociationEditObjectV1Request != null && ezsignfoldersignerassociationEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignfoldersignerassociationEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignfoldersignerassociationEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationEditObjectV1Response)));
        }

        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <returns>EzsignfoldersignerassociationForceDisconnectV1Response</returns>
        public EzsignfoldersignerassociationForceDisconnectV1Response EzsignfoldersignerassociationForceDisconnectV1 (int pkiEzsignfoldersignerassociationID, Object body)
        {
             ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response> localVarResponse = EzsignfoldersignerassociationForceDisconnectV1WithHttpInfo(pkiEzsignfoldersignerassociationID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationForceDisconnectV1Response</returns>
        public ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response> EzsignfoldersignerassociationForceDisconnectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID, Object body)
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationForceDisconnectV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationForceDisconnectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationForceDisconnectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationForceDisconnectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationForceDisconnectV1Response)));
        }

        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationForceDisconnectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationForceDisconnectV1Response> EzsignfoldersignerassociationForceDisconnectV1Async (int pkiEzsignfoldersignerassociationID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response> localVarResponse = await EzsignfoldersignerassociationForceDisconnectV1WithHttpInfoAsync(pkiEzsignfoldersignerassociationID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disconnects the Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationForceDisconnectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response>> EzsignfoldersignerassociationForceDisconnectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationForceDisconnectV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationForceDisconnectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationForceDisconnectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationForceDisconnectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationForceDisconnectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationForceDisconnectV1Response)));
        }

        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>EzsignfoldersignerassociationGetInPersonLoginUrlV1Response</returns>
        public EzsignfoldersignerassociationGetInPersonLoginUrlV1Response EzsignfoldersignerassociationGetInPersonLoginUrlV1 (int pkiEzsignfoldersignerassociationID)
        {
             ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> localVarResponse = EzsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfo(pkiEzsignfoldersignerassociationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationGetInPersonLoginUrlV1Response</returns>
        public ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> EzsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfo (int pkiEzsignfoldersignerassociationID)
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationGetInPersonLoginUrlV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationGetInPersonLoginUrlV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationGetInPersonLoginUrlV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationGetInPersonLoginUrlV1Response)));
        }

        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationGetInPersonLoginUrlV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> EzsignfoldersignerassociationGetInPersonLoginUrlV1Async (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response> localVarResponse = await EzsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfoAsync(pkiEzsignfoldersignerassociationID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Login Url to allow In-Person signing This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationGetInPersonLoginUrlV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response>> EzsignfoldersignerassociationGetInPersonLoginUrlV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationGetInPersonLoginUrlV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationGetInPersonLoginUrlV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationGetInPersonLoginUrlV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationGetInPersonLoginUrlV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationGetInPersonLoginUrlV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>EzsignfoldersignerassociationGetObjectV1Response</returns>
        public EzsignfoldersignerassociationGetObjectV1Response EzsignfoldersignerassociationGetObjectV1 (int pkiEzsignfoldersignerassociationID)
        {
             ApiResponse<EzsignfoldersignerassociationGetObjectV1Response> localVarResponse = EzsignfoldersignerassociationGetObjectV1WithHttpInfo(pkiEzsignfoldersignerassociationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <returns>ApiResponse of EzsignfoldersignerassociationGetObjectV1Response</returns>
        public ApiResponse<EzsignfoldersignerassociationGetObjectV1Response> EzsignfoldersignerassociationGetObjectV1WithHttpInfo (int pkiEzsignfoldersignerassociationID)
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationGetObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignfoldersignerassociationGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignfoldersignerassociationGetObjectV1Response> EzsignfoldersignerassociationGetObjectV1Async (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignfoldersignerassociationGetObjectV1Response> localVarResponse = await EzsignfoldersignerassociationGetObjectV1WithHttpInfoAsync(pkiEzsignfoldersignerassociationID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignfoldersignerassociation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignfoldersignerassociationID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignfoldersignerassociationGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignfoldersignerassociationGetObjectV1Response>> EzsignfoldersignerassociationGetObjectV1WithHttpInfoAsync (int pkiEzsignfoldersignerassociationID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignfoldersignerassociationID' is set
            if (pkiEzsignfoldersignerassociationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignfoldersignerassociationID' when calling ObjectEzsignfoldersignerassociationApi->EzsignfoldersignerassociationGetObjectV1");

            var localVarPath = "/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignfoldersignerassociationID != null) localVarPathParams.Add("pkiEzsignfoldersignerassociationID", this.Configuration.ApiClient.ParameterToString(pkiEzsignfoldersignerassociationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignfoldersignerassociationGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignfoldersignerassociationGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignfoldersignerassociationGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignfoldersignerassociationGetObjectV1Response)));
        }

    }
}
