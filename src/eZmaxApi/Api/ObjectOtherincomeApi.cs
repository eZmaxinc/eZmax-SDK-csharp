/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectOtherincomeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationCountV1Response</returns>
        OtherincomeGetCommunicationCountV1Response OtherincomeGetCommunicationCountV1(int pkiOtherincomeID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationCountV1Response</returns>
        ApiResponse<OtherincomeGetCommunicationCountV1Response> OtherincomeGetCommunicationCountV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationListV1Response</returns>
        OtherincomeGetCommunicationListV1Response OtherincomeGetCommunicationListV1(int pkiOtherincomeID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationListV1Response</returns>
        ApiResponse<OtherincomeGetCommunicationListV1Response> OtherincomeGetCommunicationListV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationrecipientsV1Response</returns>
        OtherincomeGetCommunicationrecipientsV1Response OtherincomeGetCommunicationrecipientsV1(int pkiOtherincomeID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationrecipientsV1Response</returns>
        ApiResponse<OtherincomeGetCommunicationrecipientsV1Response> OtherincomeGetCommunicationrecipientsV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationsendersV1Response</returns>
        OtherincomeGetCommunicationsendersV1Response OtherincomeGetCommunicationsendersV1(int pkiOtherincomeID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationsendersV1Response</returns>
        ApiResponse<OtherincomeGetCommunicationsendersV1Response> OtherincomeGetCommunicationsendersV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectOtherincomeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationCountV1Response</returns>
        System.Threading.Tasks.Task<OtherincomeGetCommunicationCountV1Response> OtherincomeGetCommunicationCountV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationCountV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OtherincomeGetCommunicationCountV1Response>> OtherincomeGetCommunicationCountV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationListV1Response</returns>
        System.Threading.Tasks.Task<OtherincomeGetCommunicationListV1Response> OtherincomeGetCommunicationListV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OtherincomeGetCommunicationListV1Response>> OtherincomeGetCommunicationListV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationrecipientsV1Response</returns>
        System.Threading.Tasks.Task<OtherincomeGetCommunicationrecipientsV1Response> OtherincomeGetCommunicationrecipientsV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationrecipientsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OtherincomeGetCommunicationrecipientsV1Response>> OtherincomeGetCommunicationrecipientsV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationsendersV1Response</returns>
        System.Threading.Tasks.Task<OtherincomeGetCommunicationsendersV1Response> OtherincomeGetCommunicationsendersV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationsendersV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OtherincomeGetCommunicationsendersV1Response>> OtherincomeGetCommunicationsendersV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectOtherincomeApi : IObjectOtherincomeApiSync, IObjectOtherincomeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectOtherincomeApi : IObjectOtherincomeApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectOtherincomeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectOtherincomeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectOtherincomeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectOtherincomeApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectOtherincomeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectOtherincomeApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectOtherincomeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectOtherincomeApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationCountV1Response</returns>
        public OtherincomeGetCommunicationCountV1Response OtherincomeGetCommunicationCountV1(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationCountV1Response> localVarResponse = OtherincomeGetCommunicationCountV1WithHttpInfo(pkiOtherincomeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationCountV1Response</returns>
        public eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationCountV1Response> OtherincomeGetCommunicationCountV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OtherincomeGetCommunicationCountV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationCount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationCountV1Response</returns>
        public async System.Threading.Tasks.Task<OtherincomeGetCommunicationCountV1Response> OtherincomeGetCommunicationCountV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationCountV1Response> localVarResponse = await OtherincomeGetCommunicationCountV1WithHttpInfoAsync(pkiOtherincomeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationCountV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationCountV1Response>> OtherincomeGetCommunicationCountV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OtherincomeGetCommunicationCountV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationCount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationListV1Response</returns>
        public OtherincomeGetCommunicationListV1Response OtherincomeGetCommunicationListV1(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationListV1Response> localVarResponse = OtherincomeGetCommunicationListV1WithHttpInfo(pkiOtherincomeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationListV1Response> OtherincomeGetCommunicationListV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OtherincomeGetCommunicationListV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationListV1Response</returns>
        public async System.Threading.Tasks.Task<OtherincomeGetCommunicationListV1Response> OtherincomeGetCommunicationListV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationListV1Response> localVarResponse = await OtherincomeGetCommunicationListV1WithHttpInfoAsync(pkiOtherincomeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationListV1Response>> OtherincomeGetCommunicationListV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OtherincomeGetCommunicationListV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationrecipientsV1Response</returns>
        public OtherincomeGetCommunicationrecipientsV1Response OtherincomeGetCommunicationrecipientsV1(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationrecipientsV1Response> localVarResponse = OtherincomeGetCommunicationrecipientsV1WithHttpInfo(pkiOtherincomeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationrecipientsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationrecipientsV1Response> OtherincomeGetCommunicationrecipientsV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationrecipientsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OtherincomeGetCommunicationrecipientsV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationrecipients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationrecipientsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationrecipientsV1Response</returns>
        public async System.Threading.Tasks.Task<OtherincomeGetCommunicationrecipientsV1Response> OtherincomeGetCommunicationrecipientsV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationrecipientsV1Response> localVarResponse = await OtherincomeGetCommunicationrecipientsV1WithHttpInfoAsync(pkiOtherincomeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationrecipientsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationrecipientsV1Response>> OtherincomeGetCommunicationrecipientsV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationrecipientsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OtherincomeGetCommunicationrecipientsV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationrecipients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationrecipientsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OtherincomeGetCommunicationsendersV1Response</returns>
        public OtherincomeGetCommunicationsendersV1Response OtherincomeGetCommunicationsendersV1(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationsendersV1Response> localVarResponse = OtherincomeGetCommunicationsendersV1WithHttpInfo(pkiOtherincomeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OtherincomeGetCommunicationsendersV1Response</returns>
        public eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationsendersV1Response> OtherincomeGetCommunicationsendersV1WithHttpInfo(int pkiOtherincomeID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationsendersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OtherincomeGetCommunicationsendersV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationsenders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationsendersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OtherincomeGetCommunicationsendersV1Response</returns>
        public async System.Threading.Tasks.Task<OtherincomeGetCommunicationsendersV1Response> OtherincomeGetCommunicationsendersV1Async(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationsendersV1Response> localVarResponse = await OtherincomeGetCommunicationsendersV1WithHttpInfoAsync(pkiOtherincomeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Otherincome&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiOtherincomeID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OtherincomeGetCommunicationsendersV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<OtherincomeGetCommunicationsendersV1Response>> OtherincomeGetCommunicationsendersV1WithHttpInfoAsync(int pkiOtherincomeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiOtherincomeID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiOtherincomeID)); // path parameter

            localVarRequestOptions.Operation = "ObjectOtherincomeApi.OtherincomeGetCommunicationsendersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OtherincomeGetCommunicationsendersV1Response>("/1/object/otherincome/{pkiOtherincomeID}/getCommunicationsenders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OtherincomeGetCommunicationsendersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
