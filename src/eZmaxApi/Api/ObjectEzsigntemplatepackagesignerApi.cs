/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatepackagesignerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatepackagesignerCreateObjectV1Response</returns>
        EzsigntemplatepackagesignerCreateObjectV1Response EzsigntemplatepackagesignerCreateObjectV1 (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response> EzsigntemplatepackagesignerCreateObjectV1WithHttpInfo (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>EzsigntemplatepackagesignerDeleteObjectV1Response</returns>
        EzsigntemplatepackagesignerDeleteObjectV1Response EzsigntemplatepackagesignerDeleteObjectV1 (int pkiEzsigntemplatepackagesignerID);

        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerDeleteObjectV1Response</returns>
        ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response> EzsigntemplatepackagesignerDeleteObjectV1WithHttpInfo (int pkiEzsigntemplatepackagesignerID);
        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <returns>EzsigntemplatepackagesignerEditObjectV1Response</returns>
        EzsigntemplatepackagesignerEditObjectV1Response EzsigntemplatepackagesignerEditObjectV1 (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response> EzsigntemplatepackagesignerEditObjectV1WithHttpInfo (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>EzsigntemplatepackagesignerGetObjectV2Response</returns>
        EzsigntemplatepackagesignerGetObjectV2Response EzsigntemplatepackagesignerGetObjectV2 (int pkiEzsigntemplatepackagesignerID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerGetObjectV2Response</returns>
        ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response> EzsigntemplatepackagesignerGetObjectV2WithHttpInfo (int pkiEzsigntemplatepackagesignerID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepackagesignerCreateObjectV1Response> EzsigntemplatepackagesignerCreateObjectV1Async (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response>> EzsigntemplatepackagesignerCreateObjectV1WithHttpInfoAsync (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepackagesignerDeleteObjectV1Response> EzsigntemplatepackagesignerDeleteObjectV1Async (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response>> EzsigntemplatepackagesignerDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepackagesignerEditObjectV1Response> EzsigntemplatepackagesignerEditObjectV1Async (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response>> EzsigntemplatepackagesignerEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatepackagesignerGetObjectV2Response> EzsigntemplatepackagesignerGetObjectV2Async (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response>> EzsigntemplatepackagesignerGetObjectV2WithHttpInfoAsync (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatepackagesignerApi : IObjectEzsigntemplatepackagesignerApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepackagesignerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatepackagesignerApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepackagesignerApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatepackagesignerApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatepackagesignerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatepackagesignerApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatepackagesignerCreateObjectV1Response</returns>
        public EzsigntemplatepackagesignerCreateObjectV1Response EzsigntemplatepackagesignerCreateObjectV1 (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request)
        {
             ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response> localVarResponse = EzsigntemplatepackagesignerCreateObjectV1WithHttpInfo(ezsigntemplatepackagesignerCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerCreateObjectV1Response</returns>
        public ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response> EzsigntemplatepackagesignerCreateObjectV1WithHttpInfo (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigntemplatepackagesignerCreateObjectV1Request' is set
            if (ezsigntemplatepackagesignerCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatepackagesignerCreateObjectV1Request' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplatepackagesigner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatepackagesignerCreateObjectV1Request != null && ezsigntemplatepackagesignerCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatepackagesignerCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatepackagesignerCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepackagesignerCreateObjectV1Response> EzsigntemplatepackagesignerCreateObjectV1Async (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response> localVarResponse = await EzsigntemplatepackagesignerCreateObjectV1WithHttpInfoAsync(ezsigntemplatepackagesignerCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigntemplatepackagesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatepackagesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response>> EzsigntemplatepackagesignerCreateObjectV1WithHttpInfoAsync (EzsigntemplatepackagesignerCreateObjectV1Request ezsigntemplatepackagesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatepackagesignerCreateObjectV1Request' is set
            if (ezsigntemplatepackagesignerCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatepackagesignerCreateObjectV1Request' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplatepackagesigner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatepackagesignerCreateObjectV1Request != null && ezsigntemplatepackagesignerCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatepackagesignerCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatepackagesignerCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>EzsigntemplatepackagesignerDeleteObjectV1Response</returns>
        public EzsigntemplatepackagesignerDeleteObjectV1Response EzsigntemplatepackagesignerDeleteObjectV1 (int pkiEzsigntemplatepackagesignerID)
        {
             ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response> localVarResponse = EzsigntemplatepackagesignerDeleteObjectV1WithHttpInfo(pkiEzsigntemplatepackagesignerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerDeleteObjectV1Response</returns>
        public ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response> EzsigntemplatepackagesignerDeleteObjectV1WithHttpInfo (int pkiEzsigntemplatepackagesignerID)
        {
            // verify the required parameter 'pkiEzsigntemplatepackagesignerID' is set
            if (pkiEzsigntemplatepackagesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatepackagesignerID' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatepackagesignerID != null) localVarPathParams.Add("pkiEzsigntemplatepackagesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatepackagesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepackagesignerDeleteObjectV1Response> EzsigntemplatepackagesignerDeleteObjectV1Async (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response> localVarResponse = await EzsigntemplatepackagesignerDeleteObjectV1WithHttpInfoAsync(pkiEzsigntemplatepackagesignerID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response>> EzsigntemplatepackagesignerDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatepackagesignerID' is set
            if (pkiEzsigntemplatepackagesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatepackagesignerID' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatepackagesignerID != null) localVarPathParams.Add("pkiEzsigntemplatepackagesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatepackagesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <returns>EzsigntemplatepackagesignerEditObjectV1Response</returns>
        public EzsigntemplatepackagesignerEditObjectV1Response EzsigntemplatepackagesignerEditObjectV1 (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request)
        {
             ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response> localVarResponse = EzsigntemplatepackagesignerEditObjectV1WithHttpInfo(pkiEzsigntemplatepackagesignerID, ezsigntemplatepackagesignerEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerEditObjectV1Response</returns>
        public ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response> EzsigntemplatepackagesignerEditObjectV1WithHttpInfo (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatepackagesignerID' is set
            if (pkiEzsigntemplatepackagesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatepackagesignerID' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerEditObjectV1");
            // verify the required parameter 'ezsigntemplatepackagesignerEditObjectV1Request' is set
            if (ezsigntemplatepackagesignerEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatepackagesignerEditObjectV1Request' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatepackagesignerID != null) localVarPathParams.Add("pkiEzsigntemplatepackagesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatepackagesignerID)); // path parameter
            if (ezsigntemplatepackagesignerEditObjectV1Request != null && ezsigntemplatepackagesignerEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatepackagesignerEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatepackagesignerEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepackagesignerEditObjectV1Response> EzsigntemplatepackagesignerEditObjectV1Async (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response> localVarResponse = await EzsigntemplatepackagesignerEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatepackagesignerID, ezsigntemplatepackagesignerEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="ezsigntemplatepackagesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response>> EzsigntemplatepackagesignerEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatepackagesignerID, EzsigntemplatepackagesignerEditObjectV1Request ezsigntemplatepackagesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatepackagesignerID' is set
            if (pkiEzsigntemplatepackagesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatepackagesignerID' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerEditObjectV1");
            // verify the required parameter 'ezsigntemplatepackagesignerEditObjectV1Request' is set
            if (ezsigntemplatepackagesignerEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatepackagesignerEditObjectV1Request' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatepackagesignerID != null) localVarPathParams.Add("pkiEzsigntemplatepackagesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatepackagesignerID)); // path parameter
            if (ezsigntemplatepackagesignerEditObjectV1Request != null && ezsigntemplatepackagesignerEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatepackagesignerEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatepackagesignerEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>EzsigntemplatepackagesignerGetObjectV2Response</returns>
        public EzsigntemplatepackagesignerGetObjectV2Response EzsigntemplatepackagesignerGetObjectV2 (int pkiEzsigntemplatepackagesignerID)
        {
             ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response> localVarResponse = EzsigntemplatepackagesignerGetObjectV2WithHttpInfo(pkiEzsigntemplatepackagesignerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatepackagesignerGetObjectV2Response</returns>
        public ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response> EzsigntemplatepackagesignerGetObjectV2WithHttpInfo (int pkiEzsigntemplatepackagesignerID)
        {
            // verify the required parameter 'pkiEzsigntemplatepackagesignerID' is set
            if (pkiEzsigntemplatepackagesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatepackagesignerID' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerGetObjectV2");

            var localVarPath = "/2/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatepackagesignerID != null) localVarPathParams.Add("pkiEzsigntemplatepackagesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatepackagesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatepackagesignerGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatepackagesignerGetObjectV2Response> EzsigntemplatepackagesignerGetObjectV2Async (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response> localVarResponse = await EzsigntemplatepackagesignerGetObjectV2WithHttpInfoAsync(pkiEzsigntemplatepackagesignerID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatepackagesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatepackagesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatepackagesignerGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response>> EzsigntemplatepackagesignerGetObjectV2WithHttpInfoAsync (int pkiEzsigntemplatepackagesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatepackagesignerID' is set
            if (pkiEzsigntemplatepackagesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatepackagesignerID' when calling ObjectEzsigntemplatepackagesignerApi->EzsigntemplatepackagesignerGetObjectV2");

            var localVarPath = "/2/object/ezsigntemplatepackagesigner/{pkiEzsigntemplatepackagesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatepackagesignerID != null) localVarPathParams.Add("pkiEzsigntemplatepackagesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatepackagesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatepackagesignerGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatepackagesignerGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatepackagesignerGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatepackagesignerGetObjectV2Response)));
        }

    }
}
