/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectApikeyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyCreateObjectV2Response</returns>
        ApikeyCreateObjectV2Response ApikeyCreateObjectV2(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyCreateObjectV2Response</returns>
        ApiResponse<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2WithHttpInfo(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyEditObjectV1Response</returns>
        ApikeyEditObjectV1Response ApikeyEditObjectV1(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyEditObjectV1Response</returns>
        ApiResponse<ApikeyEditObjectV1Response> ApikeyEditObjectV1WithHttpInfo(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyEditPermissionsV1Response</returns>
        ApikeyEditPermissionsV1Response ApikeyEditPermissionsV1(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyEditPermissionsV1Response</returns>
        ApiResponse<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1WithHttpInfo(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetCorsV1Response</returns>
        ApikeyGetCorsV1Response ApikeyGetCorsV1(int pkiApikeyID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetCorsV1Response</returns>
        ApiResponse<ApikeyGetCorsV1Response> ApikeyGetCorsV1WithHttpInfo(int pkiApikeyID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetListV1Response</returns>
        ApikeyGetListV1Response ApikeyGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetListV1Response</returns>
        ApiResponse<ApikeyGetListV1Response> ApikeyGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetObjectV2Response</returns>
        ApikeyGetObjectV2Response ApikeyGetObjectV2(int pkiApikeyID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetObjectV2Response</returns>
        ApiResponse<ApikeyGetObjectV2Response> ApikeyGetObjectV2WithHttpInfo(int pkiApikeyID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetPermissionsV1Response</returns>
        ApikeyGetPermissionsV1Response ApikeyGetPermissionsV1(int pkiApikeyID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetPermissionsV1Response</returns>
        ApiResponse<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1WithHttpInfo(int pkiApikeyID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetSubnetsV1Response</returns>
        ApikeyGetSubnetsV1Response ApikeyGetSubnetsV1(int pkiApikeyID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetSubnetsV1Response</returns>
        ApiResponse<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1WithHttpInfo(int pkiApikeyID, int operationIndex = 0);
        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyRegenerateV1Response</returns>
        ApikeyRegenerateV1Response ApikeyRegenerateV1(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0);

        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyRegenerateV1Response</returns>
        ApiResponse<ApikeyRegenerateV1Response> ApikeyRegenerateV1WithHttpInfo(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectApikeyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyCreateObjectV2Response</returns>
        System.Threading.Tasks.Task<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2Async(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyCreateObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyCreateObjectV2Response>> ApikeyCreateObjectV2WithHttpInfoAsync(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyEditObjectV1Response</returns>
        System.Threading.Tasks.Task<ApikeyEditObjectV1Response> ApikeyEditObjectV1Async(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyEditObjectV1Response>> ApikeyEditObjectV1WithHttpInfoAsync(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyEditPermissionsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1Async(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyEditPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyEditPermissionsV1Response>> ApikeyEditPermissionsV1WithHttpInfoAsync(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetCorsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetCorsV1Response> ApikeyGetCorsV1Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetCorsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetCorsV1Response>> ApikeyGetCorsV1WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetListV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetListV1Response> ApikeyGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetListV1Response>> ApikeyGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetObjectV2Response</returns>
        System.Threading.Tasks.Task<ApikeyGetObjectV2Response> ApikeyGetObjectV2Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetObjectV2Response>> ApikeyGetObjectV2WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetPermissionsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetPermissionsV1Response>> ApikeyGetPermissionsV1WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetSubnetsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetSubnetsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetSubnetsV1Response>> ApikeyGetSubnetsV1WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyRegenerateV1Response</returns>
        System.Threading.Tasks.Task<ApikeyRegenerateV1Response> ApikeyRegenerateV1Async(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyRegenerateV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyRegenerateV1Response>> ApikeyRegenerateV1WithHttpInfoAsync(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectApikeyApi : IObjectApikeyApiSync, IObjectApikeyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectApikeyApi : IObjectApikeyApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectApikeyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectApikeyApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectApikeyApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectApikeyApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyCreateObjectV2Response</returns>
        public ApikeyCreateObjectV2Response ApikeyCreateObjectV2(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyCreateObjectV2Response> localVarResponse = ApikeyCreateObjectV2WithHttpInfo(apikeyCreateObjectV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyCreateObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2WithHttpInfo(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'apikeyCreateObjectV2Request' is set
            if (apikeyCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyCreateObjectV2Request' when calling ObjectApikeyApi->ApikeyCreateObjectV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apikeyCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApikeyCreateObjectV2Response>("/2/object/apikey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyCreateObjectV2Response</returns>
        public async System.Threading.Tasks.Task<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2Async(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyCreateObjectV2Response> localVarResponse = await ApikeyCreateObjectV2WithHttpInfoAsync(apikeyCreateObjectV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyCreateObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyCreateObjectV2Response>> ApikeyCreateObjectV2WithHttpInfoAsync(ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikeyCreateObjectV2Request' is set
            if (apikeyCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyCreateObjectV2Request' when calling ObjectApikeyApi->ApikeyCreateObjectV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apikeyCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApikeyCreateObjectV2Response>("/2/object/apikey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyEditObjectV1Response</returns>
        public ApikeyEditObjectV1Response ApikeyEditObjectV1(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyEditObjectV1Response> localVarResponse = ApikeyEditObjectV1WithHttpInfo(pkiApikeyID, apikeyEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyEditObjectV1Response> ApikeyEditObjectV1WithHttpInfo(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'apikeyEditObjectV1Request' is set
            if (apikeyEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyEditObjectV1Request' when calling ObjectApikeyApi->ApikeyEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter
            localVarRequestOptions.Data = apikeyEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApikeyEditObjectV1Response>("/1/object/apikey/{pkiApikeyID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyEditObjectV1Response> ApikeyEditObjectV1Async(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyEditObjectV1Response> localVarResponse = await ApikeyEditObjectV1WithHttpInfoAsync(pkiApikeyID, apikeyEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyEditObjectV1Response>> ApikeyEditObjectV1WithHttpInfoAsync(int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikeyEditObjectV1Request' is set
            if (apikeyEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyEditObjectV1Request' when calling ObjectApikeyApi->ApikeyEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter
            localVarRequestOptions.Data = apikeyEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApikeyEditObjectV1Response>("/1/object/apikey/{pkiApikeyID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyEditPermissionsV1Response</returns>
        public ApikeyEditPermissionsV1Response ApikeyEditPermissionsV1(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyEditPermissionsV1Response> localVarResponse = ApikeyEditPermissionsV1WithHttpInfo(pkiApikeyID, apikeyEditPermissionsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyEditPermissionsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1WithHttpInfo(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'apikeyEditPermissionsV1Request' is set
            if (apikeyEditPermissionsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyEditPermissionsV1Request' when calling ObjectApikeyApi->ApikeyEditPermissionsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter
            localVarRequestOptions.Data = apikeyEditPermissionsV1Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyEditPermissionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApikeyEditPermissionsV1Response>("/1/object/apikey/{pkiApikeyID}/editPermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyEditPermissionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyEditPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1Async(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyEditPermissionsV1Response> localVarResponse = await ApikeyEditPermissionsV1WithHttpInfoAsync(pkiApikeyID, apikeyEditPermissionsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyEditPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyEditPermissionsV1Response>> ApikeyEditPermissionsV1WithHttpInfoAsync(int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikeyEditPermissionsV1Request' is set
            if (apikeyEditPermissionsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyEditPermissionsV1Request' when calling ObjectApikeyApi->ApikeyEditPermissionsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter
            localVarRequestOptions.Data = apikeyEditPermissionsV1Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyEditPermissionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ApikeyEditPermissionsV1Response>("/1/object/apikey/{pkiApikeyID}/editPermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyEditPermissionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetCorsV1Response</returns>
        public ApikeyGetCorsV1Response ApikeyGetCorsV1(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetCorsV1Response> localVarResponse = ApikeyGetCorsV1WithHttpInfo(pkiApikeyID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetCorsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyGetCorsV1Response> ApikeyGetCorsV1WithHttpInfo(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetCorsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApikeyGetCorsV1Response>("/1/object/apikey/{pkiApikeyID}/getCors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetCorsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetCorsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetCorsV1Response> ApikeyGetCorsV1Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetCorsV1Response> localVarResponse = await ApikeyGetCorsV1WithHttpInfoAsync(pkiApikeyID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetCorsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyGetCorsV1Response>> ApikeyGetCorsV1WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetCorsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApikeyGetCorsV1Response>("/1/object/apikey/{pkiApikeyID}/getCors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetCorsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetListV1Response</returns>
        public ApikeyGetListV1Response ApikeyGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetListV1Response> localVarResponse = ApikeyGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyGetListV1Response> ApikeyGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApikeyGetListV1Response>("/1/object/apikey/getList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetListV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetListV1Response> ApikeyGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetListV1Response> localVarResponse = await ApikeyGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyGetListV1Response>> ApikeyGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApikeyGetListV1Response>("/1/object/apikey/getList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetObjectV2Response</returns>
        public ApikeyGetObjectV2Response ApikeyGetObjectV2(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetObjectV2Response> localVarResponse = ApikeyGetObjectV2WithHttpInfo(pkiApikeyID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyGetObjectV2Response> ApikeyGetObjectV2WithHttpInfo(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApikeyGetObjectV2Response>("/2/object/apikey/{pkiApikeyID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetObjectV2Response> ApikeyGetObjectV2Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetObjectV2Response> localVarResponse = await ApikeyGetObjectV2WithHttpInfoAsync(pkiApikeyID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyGetObjectV2Response>> ApikeyGetObjectV2WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApikeyGetObjectV2Response>("/2/object/apikey/{pkiApikeyID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetPermissionsV1Response</returns>
        public ApikeyGetPermissionsV1Response ApikeyGetPermissionsV1(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetPermissionsV1Response> localVarResponse = ApikeyGetPermissionsV1WithHttpInfo(pkiApikeyID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetPermissionsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1WithHttpInfo(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetPermissionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApikeyGetPermissionsV1Response>("/1/object/apikey/{pkiApikeyID}/getPermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetPermissionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetPermissionsV1Response> localVarResponse = await ApikeyGetPermissionsV1WithHttpInfoAsync(pkiApikeyID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyGetPermissionsV1Response>> ApikeyGetPermissionsV1WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetPermissionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApikeyGetPermissionsV1Response>("/1/object/apikey/{pkiApikeyID}/getPermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetPermissionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyGetSubnetsV1Response</returns>
        public ApikeyGetSubnetsV1Response ApikeyGetSubnetsV1(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetSubnetsV1Response> localVarResponse = ApikeyGetSubnetsV1WithHttpInfo(pkiApikeyID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyGetSubnetsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1WithHttpInfo(int pkiApikeyID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetSubnetsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApikeyGetSubnetsV1Response>("/1/object/apikey/{pkiApikeyID}/getSubnets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetSubnetsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyGetSubnetsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1Async(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyGetSubnetsV1Response> localVarResponse = await ApikeyGetSubnetsV1WithHttpInfoAsync(pkiApikeyID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyGetSubnetsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyGetSubnetsV1Response>> ApikeyGetSubnetsV1WithHttpInfoAsync(int pkiApikeyID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyGetSubnetsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApikeyGetSubnetsV1Response>("/1/object/apikey/{pkiApikeyID}/getSubnets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyGetSubnetsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApikeyRegenerateV1Response</returns>
        public ApikeyRegenerateV1Response ApikeyRegenerateV1(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<ApikeyRegenerateV1Response> localVarResponse = ApikeyRegenerateV1WithHttpInfo(pkiApikeyID, apikeyRegenerateV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApikeyRegenerateV1Response</returns>
        public eZmaxApi.Client.ApiResponse<ApikeyRegenerateV1Response> ApikeyRegenerateV1WithHttpInfo(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'apikeyRegenerateV1Request' is set
            if (apikeyRegenerateV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyRegenerateV1Request' when calling ObjectApikeyApi->ApikeyRegenerateV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter
            localVarRequestOptions.Data = apikeyRegenerateV1Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyRegenerateV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApikeyRegenerateV1Response>("/1/object/apikey/{pkiApikeyID}/regenerate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyRegenerateV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApikeyRegenerateV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyRegenerateV1Response> ApikeyRegenerateV1Async(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<ApikeyRegenerateV1Response> localVarResponse = await ApikeyRegenerateV1WithHttpInfoAsync(pkiApikeyID, apikeyRegenerateV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApikeyRegenerateV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<ApikeyRegenerateV1Response>> ApikeyRegenerateV1WithHttpInfoAsync(int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apikeyRegenerateV1Request' is set
            if (apikeyRegenerateV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'apikeyRegenerateV1Request' when calling ObjectApikeyApi->ApikeyRegenerateV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiApikeyID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiApikeyID)); // path parameter
            localVarRequestOptions.Data = apikeyRegenerateV1Request;

            localVarRequestOptions.Operation = "ObjectApikeyApi.ApikeyRegenerateV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ApikeyRegenerateV1Response>("/1/object/apikey/{pkiApikeyID}/regenerate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApikeyRegenerateV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
