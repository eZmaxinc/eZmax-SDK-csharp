/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectApikeyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <returns>ApikeyCreateObjectV2Response</returns>
        ApikeyCreateObjectV2Response ApikeyCreateObjectV2 (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request);

        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <returns>ApiResponse of ApikeyCreateObjectV2Response</returns>
        ApiResponse<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2WithHttpInfo (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request);
        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <returns>ApikeyEditObjectV1Response</returns>
        ApikeyEditObjectV1Response ApikeyEditObjectV1 (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request);

        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <returns>ApiResponse of ApikeyEditObjectV1Response</returns>
        ApiResponse<ApikeyEditObjectV1Response> ApikeyEditObjectV1WithHttpInfo (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request);
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <returns>ApikeyEditPermissionsV1Response</returns>
        ApikeyEditPermissionsV1Response ApikeyEditPermissionsV1 (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request);

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <returns>ApiResponse of ApikeyEditPermissionsV1Response</returns>
        ApiResponse<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1WithHttpInfo (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request);
        /// <summary>
        /// Retrieve an existing Apikey's cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApikeyGetCorsV1Response</returns>
        ApikeyGetCorsV1Response ApikeyGetCorsV1 (int pkiApikeyID);

        /// <summary>
        /// Retrieve an existing Apikey's cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApiResponse of ApikeyGetCorsV1Response</returns>
        ApiResponse<ApikeyGetCorsV1Response> ApikeyGetCorsV1WithHttpInfo (int pkiApikeyID);
        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApikeyGetListV1Response</returns>
        ApikeyGetListV1Response ApikeyGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));

        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of ApikeyGetListV1Response</returns>
        ApiResponse<ApikeyGetListV1Response> ApikeyGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <returns>ApikeyGetObjectV2Response</returns>
        ApikeyGetObjectV2Response ApikeyGetObjectV2 (int pkiApikeyID);

        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <returns>ApiResponse of ApikeyGetObjectV2Response</returns>
        ApiResponse<ApikeyGetObjectV2Response> ApikeyGetObjectV2WithHttpInfo (int pkiApikeyID);
        /// <summary>
        /// Retrieve an existing Apikey's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApikeyGetPermissionsV1Response</returns>
        ApikeyGetPermissionsV1Response ApikeyGetPermissionsV1 (int pkiApikeyID);

        /// <summary>
        /// Retrieve an existing Apikey's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApiResponse of ApikeyGetPermissionsV1Response</returns>
        ApiResponse<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1WithHttpInfo (int pkiApikeyID);
        /// <summary>
        /// Retrieve an existing Apikey's subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApikeyGetSubnetsV1Response</returns>
        ApikeyGetSubnetsV1Response ApikeyGetSubnetsV1 (int pkiApikeyID);

        /// <summary>
        /// Retrieve an existing Apikey's subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApiResponse of ApikeyGetSubnetsV1Response</returns>
        ApiResponse<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1WithHttpInfo (int pkiApikeyID);
        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <returns>ApikeyRegenerateV1Response</returns>
        ApikeyRegenerateV1Response ApikeyRegenerateV1 (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request);

        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <returns>ApiResponse of ApikeyRegenerateV1Response</returns>
        ApiResponse<ApikeyRegenerateV1Response> ApikeyRegenerateV1WithHttpInfo (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyCreateObjectV2Response</returns>
        System.Threading.Tasks.Task<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2Async (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Apikey
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyCreateObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyCreateObjectV2Response>> ApikeyCreateObjectV2WithHttpInfoAsync (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyEditObjectV1Response</returns>
        System.Threading.Tasks.Task<ApikeyEditObjectV1Response> ApikeyEditObjectV1Async (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyEditObjectV1Response>> ApikeyEditObjectV1WithHttpInfoAsync (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyEditPermissionsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1Async (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyEditPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyEditPermissionsV1Response>> ApikeyEditPermissionsV1WithHttpInfoAsync (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey's cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetCorsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetCorsV1Response> ApikeyGetCorsV1Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey&#39;s cors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetCorsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetCorsV1Response>> ApikeyGetCorsV1WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetListV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetListV1Response> ApikeyGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Apikey list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetListV1Response>> ApikeyGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetObjectV2Response</returns>
        System.Threading.Tasks.Task<ApikeyGetObjectV2Response> ApikeyGetObjectV2Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetObjectV2Response>> ApikeyGetObjectV2WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetPermissionsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey&#39;s Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetPermissionsV1Response>> ApikeyGetPermissionsV1WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Apikey's subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetSubnetsV1Response</returns>
        System.Threading.Tasks.Task<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Apikey&#39;s subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetSubnetsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyGetSubnetsV1Response>> ApikeyGetSubnetsV1WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyRegenerateV1Response</returns>
        System.Threading.Tasks.Task<ApikeyRegenerateV1Response> ApikeyRegenerateV1Async (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Regenerate the Apikey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyRegenerateV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApikeyRegenerateV1Response>> ApikeyRegenerateV1WithHttpInfoAsync (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectApikeyApi : IObjectApikeyApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectApikeyApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectApikeyApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectApikeyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectApikeyApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <returns>ApikeyCreateObjectV2Response</returns>
        public ApikeyCreateObjectV2Response ApikeyCreateObjectV2 (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request)
        {
             ApiResponse<ApikeyCreateObjectV2Response> localVarResponse = ApikeyCreateObjectV2WithHttpInfo(apikeyCreateObjectV2Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <returns>ApiResponse of ApikeyCreateObjectV2Response</returns>
        public ApiResponse<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2WithHttpInfo (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request)
        {
            // verify the required parameter 'apikeyCreateObjectV2Request' is set
            if (apikeyCreateObjectV2Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyCreateObjectV2Request' when calling ObjectApikeyApi->ApikeyCreateObjectV2");

            var localVarPath = "./2/object/apikey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikeyCreateObjectV2Request != null && apikeyCreateObjectV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyCreateObjectV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyCreateObjectV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyCreateObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyCreateObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyCreateObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyCreateObjectV2Response)));
        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyCreateObjectV2Response</returns>
        public async System.Threading.Tasks.Task<ApikeyCreateObjectV2Response> ApikeyCreateObjectV2Async (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyCreateObjectV2Response> localVarResponse = await ApikeyCreateObjectV2WithHttpInfoAsync(apikeyCreateObjectV2Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Apikey The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apikeyCreateObjectV2Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyCreateObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyCreateObjectV2Response>> ApikeyCreateObjectV2WithHttpInfoAsync (ApikeyCreateObjectV2Request apikeyCreateObjectV2Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apikeyCreateObjectV2Request' is set
            if (apikeyCreateObjectV2Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyCreateObjectV2Request' when calling ObjectApikeyApi->ApikeyCreateObjectV2");

            var localVarPath = "./2/object/apikey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apikeyCreateObjectV2Request != null && apikeyCreateObjectV2Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyCreateObjectV2Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyCreateObjectV2Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyCreateObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyCreateObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyCreateObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyCreateObjectV2Response)));
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <returns>ApikeyEditObjectV1Response</returns>
        public ApikeyEditObjectV1Response ApikeyEditObjectV1 (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request)
        {
             ApiResponse<ApikeyEditObjectV1Response> localVarResponse = ApikeyEditObjectV1WithHttpInfo(pkiApikeyID, apikeyEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <returns>ApiResponse of ApikeyEditObjectV1Response</returns>
        public ApiResponse<ApikeyEditObjectV1Response> ApikeyEditObjectV1WithHttpInfo (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyEditObjectV1");
            // verify the required parameter 'apikeyEditObjectV1Request' is set
            if (apikeyEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyEditObjectV1Request' when calling ObjectApikeyApi->ApikeyEditObjectV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter
            if (apikeyEditObjectV1Request != null && apikeyEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyEditObjectV1Response> ApikeyEditObjectV1Async (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyEditObjectV1Response> localVarResponse = await ApikeyEditObjectV1WithHttpInfoAsync(pkiApikeyID, apikeyEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="apikeyEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyEditObjectV1Response>> ApikeyEditObjectV1WithHttpInfoAsync (int pkiApikeyID, ApikeyEditObjectV1Request apikeyEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyEditObjectV1");
            // verify the required parameter 'apikeyEditObjectV1Request' is set
            if (apikeyEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyEditObjectV1Request' when calling ObjectApikeyApi->ApikeyEditObjectV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter
            if (apikeyEditObjectV1Request != null && apikeyEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyEditObjectV1Response)));
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <returns>ApikeyEditPermissionsV1Response</returns>
        public ApikeyEditPermissionsV1Response ApikeyEditPermissionsV1 (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request)
        {
             ApiResponse<ApikeyEditPermissionsV1Response> localVarResponse = ApikeyEditPermissionsV1WithHttpInfo(pkiApikeyID, apikeyEditPermissionsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <returns>ApiResponse of ApikeyEditPermissionsV1Response</returns>
        public ApiResponse<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1WithHttpInfo (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyEditPermissionsV1");
            // verify the required parameter 'apikeyEditPermissionsV1Request' is set
            if (apikeyEditPermissionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyEditPermissionsV1Request' when calling ObjectApikeyApi->ApikeyEditPermissionsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/editPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter
            if (apikeyEditPermissionsV1Request != null && apikeyEditPermissionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyEditPermissionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyEditPermissionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyEditPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyEditPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyEditPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyEditPermissionsV1Response)));
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyEditPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyEditPermissionsV1Response> ApikeyEditPermissionsV1Async (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyEditPermissionsV1Response> localVarResponse = await ApikeyEditPermissionsV1WithHttpInfoAsync(pkiApikeyID, apikeyEditPermissionsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyEditPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyEditPermissionsV1Response>> ApikeyEditPermissionsV1WithHttpInfoAsync (int pkiApikeyID, ApikeyEditPermissionsV1Request apikeyEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyEditPermissionsV1");
            // verify the required parameter 'apikeyEditPermissionsV1Request' is set
            if (apikeyEditPermissionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyEditPermissionsV1Request' when calling ObjectApikeyApi->ApikeyEditPermissionsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/editPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter
            if (apikeyEditPermissionsV1Request != null && apikeyEditPermissionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyEditPermissionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyEditPermissionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyEditPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyEditPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyEditPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyEditPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey's cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApikeyGetCorsV1Response</returns>
        public ApikeyGetCorsV1Response ApikeyGetCorsV1 (int pkiApikeyID)
        {
             ApiResponse<ApikeyGetCorsV1Response> localVarResponse = ApikeyGetCorsV1WithHttpInfo(pkiApikeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey's cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApiResponse of ApikeyGetCorsV1Response</returns>
        public ApiResponse<ApikeyGetCorsV1Response> ApikeyGetCorsV1WithHttpInfo (int pkiApikeyID)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetCorsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/getCors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetCorsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetCorsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetCorsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetCorsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey's cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetCorsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetCorsV1Response> ApikeyGetCorsV1Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyGetCorsV1Response> localVarResponse = await ApikeyGetCorsV1WithHttpInfoAsync(pkiApikeyID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Apikey's cors 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetCorsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyGetCorsV1Response>> ApikeyGetCorsV1WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetCorsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/getCors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetCorsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetCorsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetCorsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetCorsV1Response)));
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApikeyGetListV1Response</returns>
        public ApikeyGetListV1Response ApikeyGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {
             ApiResponse<ApikeyGetListV1Response> localVarResponse = ApikeyGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of ApikeyGetListV1Response</returns>
        public ApiResponse<ApikeyGetListV1Response> ApikeyGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {

            var localVarPath = "./1/object/apikey/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetListV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetListV1Response> ApikeyGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyGetListV1Response> localVarResponse = await ApikeyGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Apikey list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --|
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyGetListV1Response>> ApikeyGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "./1/object/apikey/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <returns>ApikeyGetObjectV2Response</returns>
        public ApikeyGetObjectV2Response ApikeyGetObjectV2 (int pkiApikeyID)
        {
             ApiResponse<ApikeyGetObjectV2Response> localVarResponse = ApikeyGetObjectV2WithHttpInfo(pkiApikeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <returns>ApiResponse of ApikeyGetObjectV2Response</returns>
        public ApiResponse<ApikeyGetObjectV2Response> ApikeyGetObjectV2WithHttpInfo (int pkiApikeyID)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetObjectV2");

            var localVarPath = "./2/object/apikey/{pkiApikeyID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetObjectV2Response> ApikeyGetObjectV2Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyGetObjectV2Response> localVarResponse = await ApikeyGetObjectV2WithHttpInfoAsync(pkiApikeyID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID">The unique ID of the Apikey</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyGetObjectV2Response>> ApikeyGetObjectV2WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetObjectV2");

            var localVarPath = "./2/object/apikey/{pkiApikeyID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApikeyGetPermissionsV1Response</returns>
        public ApikeyGetPermissionsV1Response ApikeyGetPermissionsV1 (int pkiApikeyID)
        {
             ApiResponse<ApikeyGetPermissionsV1Response> localVarResponse = ApikeyGetPermissionsV1WithHttpInfo(pkiApikeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApiResponse of ApikeyGetPermissionsV1Response</returns>
        public ApiResponse<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1WithHttpInfo (int pkiApikeyID)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetPermissionsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/getPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetPermissionsV1Response> ApikeyGetPermissionsV1Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyGetPermissionsV1Response> localVarResponse = await ApikeyGetPermissionsV1WithHttpInfoAsync(pkiApikeyID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Apikey's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyGetPermissionsV1Response>> ApikeyGetPermissionsV1WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetPermissionsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/getPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey's subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApikeyGetSubnetsV1Response</returns>
        public ApikeyGetSubnetsV1Response ApikeyGetSubnetsV1 (int pkiApikeyID)
        {
             ApiResponse<ApikeyGetSubnetsV1Response> localVarResponse = ApikeyGetSubnetsV1WithHttpInfo(pkiApikeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Apikey's subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <returns>ApiResponse of ApikeyGetSubnetsV1Response</returns>
        public ApiResponse<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1WithHttpInfo (int pkiApikeyID)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetSubnetsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/getSubnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetSubnetsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetSubnetsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetSubnetsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetSubnetsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Apikey's subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyGetSubnetsV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyGetSubnetsV1Response> ApikeyGetSubnetsV1Async (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyGetSubnetsV1Response> localVarResponse = await ApikeyGetSubnetsV1WithHttpInfoAsync(pkiApikeyID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Apikey's subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyGetSubnetsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyGetSubnetsV1Response>> ApikeyGetSubnetsV1WithHttpInfoAsync (int pkiApikeyID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyGetSubnetsV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/getSubnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyGetSubnetsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyGetSubnetsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyGetSubnetsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyGetSubnetsV1Response)));
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <returns>ApikeyRegenerateV1Response</returns>
        public ApikeyRegenerateV1Response ApikeyRegenerateV1 (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request)
        {
             ApiResponse<ApikeyRegenerateV1Response> localVarResponse = ApikeyRegenerateV1WithHttpInfo(pkiApikeyID, apikeyRegenerateV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <returns>ApiResponse of ApikeyRegenerateV1Response</returns>
        public ApiResponse<ApikeyRegenerateV1Response> ApikeyRegenerateV1WithHttpInfo (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request)
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyRegenerateV1");
            // verify the required parameter 'apikeyRegenerateV1Request' is set
            if (apikeyRegenerateV1Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyRegenerateV1Request' when calling ObjectApikeyApi->ApikeyRegenerateV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/regenerate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter
            if (apikeyRegenerateV1Request != null && apikeyRegenerateV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyRegenerateV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyRegenerateV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyRegenerateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyRegenerateV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyRegenerateV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyRegenerateV1Response)));
        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApikeyRegenerateV1Response</returns>
        public async System.Threading.Tasks.Task<ApikeyRegenerateV1Response> ApikeyRegenerateV1Async (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ApikeyRegenerateV1Response> localVarResponse = await ApikeyRegenerateV1WithHttpInfoAsync(pkiApikeyID, apikeyRegenerateV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate the Apikey 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiApikeyID"></param>
        /// <param name="apikeyRegenerateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ApikeyRegenerateV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApikeyRegenerateV1Response>> ApikeyRegenerateV1WithHttpInfoAsync (int pkiApikeyID, ApikeyRegenerateV1Request apikeyRegenerateV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiApikeyID' is set
            if (pkiApikeyID == null)
                throw new ApiException(400, "Missing required parameter 'pkiApikeyID' when calling ObjectApikeyApi->ApikeyRegenerateV1");
            // verify the required parameter 'apikeyRegenerateV1Request' is set
            if (apikeyRegenerateV1Request == null)
                throw new ApiException(400, "Missing required parameter 'apikeyRegenerateV1Request' when calling ObjectApikeyApi->ApikeyRegenerateV1");

            var localVarPath = "./1/object/apikey/{pkiApikeyID}/regenerate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiApikeyID != null) localVarPathParams.Add("pkiApikeyID", this.Configuration.ApiClient.ParameterToString(pkiApikeyID)); // path parameter
            if (apikeyRegenerateV1Request != null && apikeyRegenerateV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(apikeyRegenerateV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = apikeyRegenerateV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApikeyRegenerateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApikeyRegenerateV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ApikeyRegenerateV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApikeyRegenerateV1Response)));
        }

    }
}
