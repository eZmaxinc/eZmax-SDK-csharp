/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignergroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <returns>EzsignsignergroupCreateObjectV1Response</returns>
        EzsignsignergroupCreateObjectV1Response EzsignsignergroupCreateObjectV1 (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignergroupCreateObjectV1Response</returns>
        ApiResponse<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1WithHttpInfo (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>EzsignsignergroupDeleteObjectV1Response</returns>
        EzsignsignergroupDeleteObjectV1Response EzsignsignergroupDeleteObjectV1 (int pkiEzsignsignergroupID);

        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>ApiResponse of EzsignsignergroupDeleteObjectV1Response</returns>
        ApiResponse<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1WithHttpInfo (int pkiEzsignsignergroupID);
        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <returns>EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        EzsignsignergroupEditEzsignsignergroupmembershipsV1Response EzsignsignergroupEditEzsignsignergroupmembershipsV1 (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request);

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <returns>ApiResponse of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request);
        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <returns>EzsignsignergroupEditObjectV1Response</returns>
        EzsignsignergroupEditObjectV1Response EzsignsignergroupEditObjectV1 (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignergroupEditObjectV1Response</returns>
        ApiResponse<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1WithHttpInfo (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <returns>EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        EzsignsignergroupGetEzsignsignergroupmembershipsV1Response EzsignsignergroupGetEzsignsignergroupmembershipsV1 (int pkiEzsignsignergroupID);

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <returns>ApiResponse of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo (int pkiEzsignsignergroupID);
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>EzsignsignergroupGetObjectV2Response</returns>
        EzsignsignergroupGetObjectV2Response EzsignsignergroupGetObjectV2 (int pkiEzsignsignergroupID);

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>ApiResponse of EzsignsignergroupGetObjectV2Response</returns>
        ApiResponse<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2WithHttpInfo (int pkiEzsignsignergroupID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1Async (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupCreateObjectV1Response>> EzsignsignergroupCreateObjectV1WithHttpInfoAsync (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1Async (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupDeleteObjectV1Response>> EzsignsignergroupDeleteObjectV1WithHttpInfoAsync (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1Async (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditEzsignsignergroupmembershipsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfoAsync (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1Async (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupEditObjectV1Response>> EzsignsignergroupEditObjectV1WithHttpInfoAsync (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1Async (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetEzsignsignergroupmembershipsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfoAsync (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2Async (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupGetObjectV2Response>> EzsignsignergroupGetObjectV2WithHttpInfoAsync (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignsignergroupApi : IObjectEzsignsignergroupApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignergroupApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignergroupApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignsignergroupApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <returns>EzsignsignergroupCreateObjectV1Response</returns>
        public EzsignsignergroupCreateObjectV1Response EzsignsignergroupCreateObjectV1 (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request)
        {
             ApiResponse<EzsignsignergroupCreateObjectV1Response> localVarResponse = EzsignsignergroupCreateObjectV1WithHttpInfo(ezsignsignergroupCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignergroupCreateObjectV1Response</returns>
        public ApiResponse<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1WithHttpInfo (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request)
        {
            // verify the required parameter 'ezsignsignergroupCreateObjectV1Request' is set
            if (ezsignsignergroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignergroupCreateObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupCreateObjectV1");

            var localVarPath = "/1/object/ezsignsignergroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignsignergroupCreateObjectV1Request != null && ezsignsignergroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignergroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignergroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1Async (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignergroupCreateObjectV1Response> localVarResponse = await EzsignsignergroupCreateObjectV1WithHttpInfoAsync(ezsignsignergroupCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupCreateObjectV1Response>> EzsignsignergroupCreateObjectV1WithHttpInfoAsync (EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignsignergroupCreateObjectV1Request' is set
            if (ezsignsignergroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignergroupCreateObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupCreateObjectV1");

            var localVarPath = "/1/object/ezsignsignergroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignsignergroupCreateObjectV1Request != null && ezsignsignergroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignergroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignergroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>EzsignsignergroupDeleteObjectV1Response</returns>
        public EzsignsignergroupDeleteObjectV1Response EzsignsignergroupDeleteObjectV1 (int pkiEzsignsignergroupID)
        {
             ApiResponse<EzsignsignergroupDeleteObjectV1Response> localVarResponse = EzsignsignergroupDeleteObjectV1WithHttpInfo(pkiEzsignsignergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>ApiResponse of EzsignsignergroupDeleteObjectV1Response</returns>
        public ApiResponse<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1WithHttpInfo (int pkiEzsignsignergroupID)
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupDeleteObjectV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1Async (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignergroupDeleteObjectV1Response> localVarResponse = await EzsignsignergroupDeleteObjectV1WithHttpInfoAsync(pkiEzsignsignergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupDeleteObjectV1Response>> EzsignsignergroupDeleteObjectV1WithHttpInfoAsync (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupDeleteObjectV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <returns>EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        public EzsignsignergroupEditEzsignsignergroupmembershipsV1Response EzsignsignergroupEditEzsignsignergroupmembershipsV1 (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request)
        {
             ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> localVarResponse = EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <returns>ApiResponse of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        public ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request)
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditEzsignsignergroupmembershipsV1");
            // verify the required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' is set
            if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditEzsignsignergroupmembershipsV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request != null && ezsignsignergroupEditEzsignsignergroupmembershipsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignergroupEditEzsignsignergroupmembershipsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignergroupEditEzsignsignergroupmembershipsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupEditEzsignsignergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupEditEzsignsignergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupEditEzsignsignergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1Async (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> localVarResponse = await EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfoAsync(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditEzsignsignergroupmembershipsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfoAsync (int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditEzsignsignergroupmembershipsV1");
            // verify the required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' is set
            if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditEzsignsignergroupmembershipsV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request != null && ezsignsignergroupEditEzsignsignergroupmembershipsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignergroupEditEzsignsignergroupmembershipsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignergroupEditEzsignsignergroupmembershipsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupEditEzsignsignergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupEditEzsignsignergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupEditEzsignsignergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <returns>EzsignsignergroupEditObjectV1Response</returns>
        public EzsignsignergroupEditObjectV1Response EzsignsignergroupEditObjectV1 (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request)
        {
             ApiResponse<EzsignsignergroupEditObjectV1Response> localVarResponse = EzsignsignergroupEditObjectV1WithHttpInfo(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignergroupEditObjectV1Response</returns>
        public ApiResponse<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1WithHttpInfo (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditObjectV1");
            // verify the required parameter 'ezsignsignergroupEditObjectV1Request' is set
            if (ezsignsignergroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignergroupEditObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditObjectV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            if (ezsignsignergroupEditObjectV1Request != null && ezsignsignergroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignergroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignergroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1Async (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignergroupEditObjectV1Response> localVarResponse = await EzsignsignergroupEditObjectV1WithHttpInfoAsync(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupEditObjectV1Response>> EzsignsignergroupEditObjectV1WithHttpInfoAsync (int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditObjectV1");
            // verify the required parameter 'ezsignsignergroupEditObjectV1Request' is set
            if (ezsignsignergroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignergroupEditObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditObjectV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            if (ezsignsignergroupEditObjectV1Request != null && ezsignsignergroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignergroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignergroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <returns>EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        public EzsignsignergroupGetEzsignsignergroupmembershipsV1Response EzsignsignergroupGetEzsignsignergroupmembershipsV1 (int pkiEzsignsignergroupID)
        {
             ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> localVarResponse = EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <returns>ApiResponse of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        public ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo (int pkiEzsignsignergroupID)
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupGetEzsignsignergroupmembershipsV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupGetEzsignsignergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupGetEzsignsignergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupGetEzsignsignergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1Async (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> localVarResponse = await EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfoAsync(pkiEzsignsignergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetEzsignsignergroupmembershipsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfoAsync (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupGetEzsignsignergroupmembershipsV1");

            var localVarPath = "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupGetEzsignsignergroupmembershipsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupGetEzsignsignergroupmembershipsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupGetEzsignsignergroupmembershipsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>EzsignsignergroupGetObjectV2Response</returns>
        public EzsignsignergroupGetObjectV2Response EzsignsignergroupGetObjectV2 (int pkiEzsignsignergroupID)
        {
             ApiResponse<EzsignsignergroupGetObjectV2Response> localVarResponse = EzsignsignergroupGetObjectV2WithHttpInfo(pkiEzsignsignergroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <returns>ApiResponse of EzsignsignergroupGetObjectV2Response</returns>
        public ApiResponse<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2WithHttpInfo (int pkiEzsignsignergroupID)
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupGetObjectV2");

            var localVarPath = "/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignergroupGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2Async (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignergroupGetObjectV2Response> localVarResponse = await EzsignsignergroupGetObjectV2WithHttpInfoAsync(pkiEzsignsignergroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupGetObjectV2Response>> EzsignsignergroupGetObjectV2WithHttpInfoAsync (int pkiEzsignsignergroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignergroupID' is set
            if (pkiEzsignsignergroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignergroupID' when calling ObjectEzsignsignergroupApi->EzsignsignergroupGetObjectV2");

            var localVarPath = "/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignergroupID != null) localVarPathParams.Add("pkiEzsignsignergroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignergroupGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignergroupGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignergroupGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignergroupGetObjectV2Response)));
        }

    }
}
