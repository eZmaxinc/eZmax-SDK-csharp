/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignergroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupCreateObjectV1Response</returns>
        EzsignsignergroupCreateObjectV1Response EzsignsignergroupCreateObjectV1(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupCreateObjectV1Response</returns>
        ApiResponse<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1WithHttpInfo(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupDeleteObjectV1Response</returns>
        EzsignsignergroupDeleteObjectV1Response EzsignsignergroupDeleteObjectV1(int pkiEzsignsignergroupID, int operationIndex = 0);

        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupDeleteObjectV1Response</returns>
        ApiResponse<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1WithHttpInfo(int pkiEzsignsignergroupID, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        EzsignsignergroupEditEzsignsignergroupmembershipsV1Response EzsignsignergroupEditEzsignsignergroupmembershipsV1(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupEditObjectV1Response</returns>
        EzsignsignergroupEditObjectV1Response EzsignsignergroupEditObjectV1(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupEditObjectV1Response</returns>
        ApiResponse<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1WithHttpInfo(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        EzsignsignergroupGetEzsignsignergroupmembershipsV1Response EzsignsignergroupGetEzsignsignergroupmembershipsV1(int pkiEzsignsignergroupID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(int pkiEzsignsignergroupID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupGetObjectV2Response</returns>
        EzsignsignergroupGetObjectV2Response EzsignsignergroupGetObjectV2(int pkiEzsignsignergroupID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupGetObjectV2Response</returns>
        ApiResponse<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2WithHttpInfo(int pkiEzsignsignergroupID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignergroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1Async(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupCreateObjectV1Response>> EzsignsignergroupCreateObjectV1WithHttpInfoAsync(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1Async(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupDeleteObjectV1Response>> EzsignsignergroupDeleteObjectV1WithHttpInfoAsync(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1Async(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditEzsignsignergroupmembershipsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfoAsync(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1Async(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupEditObjectV1Response>> EzsignsignergroupEditObjectV1WithHttpInfoAsync(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1Async(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetEzsignsignergroupmembershipsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfoAsync(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2Async(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignergroupGetObjectV2Response>> EzsignsignergroupGetObjectV2WithHttpInfoAsync(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignergroupApi : IObjectEzsignsignergroupApiSync, IObjectEzsignsignergroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignsignergroupApi : IObjectEzsignsignergroupApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignergroupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignergroupApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignsignergroupApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignergroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsignsignergroupApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupCreateObjectV1Response</returns>
        public EzsignsignergroupCreateObjectV1Response EzsignsignergroupCreateObjectV1(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupCreateObjectV1Response> localVarResponse = EzsignsignergroupCreateObjectV1WithHttpInfo(ezsignsignergroupCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupCreateObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1WithHttpInfo(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignergroupCreateObjectV1Request' is set
            if (ezsignsignergroupCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignergroupCreateObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignergroupCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignsignergroupCreateObjectV1Response>("/1/object/ezsignsignergroup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupCreateObjectV1Response> EzsignsignergroupCreateObjectV1Async(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupCreateObjectV1Response> localVarResponse = await EzsignsignergroupCreateObjectV1WithHttpInfoAsync(ezsignsignergroupCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignergroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignergroupCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignergroupCreateObjectV1Response>> EzsignsignergroupCreateObjectV1WithHttpInfoAsync(EzsignsignergroupCreateObjectV1Request ezsignsignergroupCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignergroupCreateObjectV1Request' is set
            if (ezsignsignergroupCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignergroupCreateObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignergroupCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignsignergroupCreateObjectV1Response>("/1/object/ezsignsignergroup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupDeleteObjectV1Response</returns>
        public EzsignsignergroupDeleteObjectV1Response EzsignsignergroupDeleteObjectV1(int pkiEzsignsignergroupID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupDeleteObjectV1Response> localVarResponse = EzsignsignergroupDeleteObjectV1WithHttpInfo(pkiEzsignsignergroupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupDeleteObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1WithHttpInfo(int pkiEzsignsignergroupID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EzsignsignergroupDeleteObjectV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupDeleteObjectV1Response> EzsignsignergroupDeleteObjectV1Async(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupDeleteObjectV1Response> localVarResponse = await EzsignsignergroupDeleteObjectV1WithHttpInfoAsync(pkiEzsignsignergroupID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignergroupDeleteObjectV1Response>> EzsignsignergroupDeleteObjectV1WithHttpInfoAsync(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EzsignsignergroupDeleteObjectV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        public EzsignsignergroupEditEzsignsignergroupmembershipsV1Response EzsignsignergroupEditEzsignsignergroupmembershipsV1(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> localVarResponse = EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfo(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' is set
            if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditEzsignsignergroupmembershipsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            localVarRequestOptions.Data = ezsignsignergroupEditEzsignsignergroupmembershipsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupEditEzsignsignergroupmembershipsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupEditEzsignsignergroupmembershipsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupEditEzsignsignergroupmembershipsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> EzsignsignergroupEditEzsignsignergroupmembershipsV1Async(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response> localVarResponse = await EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfoAsync(pkiEzsignsignergroupID, ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsignsignergroupmemberships Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="ezsignsignergroupEditEzsignsignergroupmembershipsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditEzsignsignergroupmembershipsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>> EzsignsignergroupEditEzsignsignergroupmembershipsV1WithHttpInfoAsync(int pkiEzsignsignergroupID, EzsignsignergroupEditEzsignsignergroupmembershipsV1Request ezsignsignergroupEditEzsignsignergroupmembershipsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' is set
            if (ezsignsignergroupEditEzsignsignergroupmembershipsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignergroupEditEzsignsignergroupmembershipsV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditEzsignsignergroupmembershipsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            localVarRequestOptions.Data = ezsignsignergroupEditEzsignsignergroupmembershipsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupEditEzsignsignergroupmembershipsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsignsignergroupEditEzsignsignergroupmembershipsV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupEditEzsignsignergroupmembershipsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupEditObjectV1Response</returns>
        public EzsignsignergroupEditObjectV1Response EzsignsignergroupEditObjectV1(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupEditObjectV1Response> localVarResponse = EzsignsignergroupEditObjectV1WithHttpInfo(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1WithHttpInfo(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignergroupEditObjectV1Request' is set
            if (ezsignsignergroupEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignergroupEditObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            localVarRequestOptions.Data = ezsignsignergroupEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsignsignergroupEditObjectV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupEditObjectV1Response> EzsignsignergroupEditObjectV1Async(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupEditObjectV1Response> localVarResponse = await EzsignsignergroupEditObjectV1WithHttpInfoAsync(pkiEzsignsignergroupID, ezsignsignergroupEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="ezsignsignergroupEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignergroupEditObjectV1Response>> EzsignsignergroupEditObjectV1WithHttpInfoAsync(int pkiEzsignsignergroupID, EzsignsignergroupEditObjectV1Request ezsignsignergroupEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignergroupEditObjectV1Request' is set
            if (ezsignsignergroupEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignergroupEditObjectV1Request' when calling ObjectEzsignsignergroupApi->EzsignsignergroupEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter
            localVarRequestOptions.Data = ezsignsignergroupEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsignsignergroupEditObjectV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        public EzsignsignergroupGetEzsignsignergroupmembershipsV1Response EzsignsignergroupGetEzsignsignergroupmembershipsV1(int pkiEzsignsignergroupID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> localVarResponse = EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(pkiEzsignsignergroupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfo(int pkiEzsignsignergroupID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupGetEzsignsignergroupmembershipsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupGetEzsignsignergroupmembershipsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupGetEzsignsignergroupmembershipsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> EzsignsignergroupGetEzsignsignergroupmembershipsV1Async(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response> localVarResponse = await EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfoAsync(pkiEzsignsignergroupID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup&#39;s Ezsignsignergroupmemberships 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetEzsignsignergroupmembershipsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>> EzsignsignergroupGetEzsignsignergroupmembershipsV1WithHttpInfoAsync(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupGetEzsignsignergroupmembershipsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignsignergroupGetEzsignsignergroupmembershipsV1Response>("/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupGetEzsignsignergroupmembershipsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignergroupGetObjectV2Response</returns>
        public EzsignsignergroupGetObjectV2Response EzsignsignergroupGetObjectV2(int pkiEzsignsignergroupID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupGetObjectV2Response> localVarResponse = EzsignsignergroupGetObjectV2WithHttpInfo(pkiEzsignsignergroupID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignergroupGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2WithHttpInfo(int pkiEzsignsignergroupID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignsignergroupGetObjectV2Response>("/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignergroupGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignergroupGetObjectV2Response> EzsignsignergroupGetObjectV2Async(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignergroupGetObjectV2Response> localVarResponse = await EzsignsignergroupGetObjectV2WithHttpInfoAsync(pkiEzsignsignergroupID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignergroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignergroupGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignergroupGetObjectV2Response>> EzsignsignergroupGetObjectV2WithHttpInfoAsync(int pkiEzsignsignergroupID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignergroupID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignergroupID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignergroupApi.EzsignsignergroupGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignsignergroupGetObjectV2Response>("/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignergroupGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
