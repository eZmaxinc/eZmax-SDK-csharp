/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.12
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatesignerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatesignerCreateObjectV1Response</returns>
        EzsigntemplatesignerCreateObjectV1Response EzsigntemplatesignerCreateObjectV1 (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignerCreateObjectV1Response> EzsigntemplatesignerCreateObjectV1WithHttpInfo (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>EzsigntemplatesignerDeleteObjectV1Response</returns>
        EzsigntemplatesignerDeleteObjectV1Response EzsigntemplatesignerDeleteObjectV1 (int pkiEzsigntemplatesignerID);

        /// <summary>
        /// Delete an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerDeleteObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignerDeleteObjectV1Response> EzsigntemplatesignerDeleteObjectV1WithHttpInfo (int pkiEzsigntemplatesignerID);
        /// <summary>
        /// Edit an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <returns>EzsigntemplatesignerEditObjectV1Response</returns>
        EzsigntemplatesignerEditObjectV1Response EzsigntemplatesignerEditObjectV1 (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignerEditObjectV1Response> EzsigntemplatesignerEditObjectV1WithHttpInfo (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>EzsigntemplatesignerGetObjectV1Response</returns>
        EzsigntemplatesignerGetObjectV1Response EzsigntemplatesignerGetObjectV1 (int pkiEzsigntemplatesignerID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerGetObjectV1Response</returns>
        ApiResponse<EzsigntemplatesignerGetObjectV1Response> EzsigntemplatesignerGetObjectV1WithHttpInfo (int pkiEzsigntemplatesignerID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignerCreateObjectV1Response> EzsigntemplatesignerCreateObjectV1Async (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerCreateObjectV1Response>> EzsigntemplatesignerCreateObjectV1WithHttpInfoAsync (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignerDeleteObjectV1Response> EzsigntemplatesignerDeleteObjectV1Async (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerDeleteObjectV1Response>> EzsigntemplatesignerDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignerEditObjectV1Response> EzsigntemplatesignerEditObjectV1Async (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerEditObjectV1Response>> EzsigntemplatesignerEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatesignerGetObjectV1Response> EzsigntemplatesignerGetObjectV1Async (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerGetObjectV1Response>> EzsigntemplatesignerGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatesignerApi : IObjectEzsigntemplatesignerApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatesignerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatesignerApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatesignerApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatesignerApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatesignerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatesignerApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsigntemplatesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatesignerCreateObjectV1Response</returns>
        public EzsigntemplatesignerCreateObjectV1Response EzsigntemplatesignerCreateObjectV1 (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request)
        {
             ApiResponse<EzsigntemplatesignerCreateObjectV1Response> localVarResponse = EzsigntemplatesignerCreateObjectV1WithHttpInfo(ezsigntemplatesignerCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerCreateObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignerCreateObjectV1Response> EzsigntemplatesignerCreateObjectV1WithHttpInfo (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigntemplatesignerCreateObjectV1Request' is set
            if (ezsigntemplatesignerCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignerCreateObjectV1Request' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatesignerCreateObjectV1Request != null && ezsigntemplatesignerCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignerCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignerCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplatesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignerCreateObjectV1Response> EzsigntemplatesignerCreateObjectV1Async (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignerCreateObjectV1Response> localVarResponse = await EzsigntemplatesignerCreateObjectV1WithHttpInfoAsync(ezsigntemplatesignerCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigntemplatesigner The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatesignerCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerCreateObjectV1Response>> EzsigntemplatesignerCreateObjectV1WithHttpInfoAsync (EzsigntemplatesignerCreateObjectV1Request ezsigntemplatesignerCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatesignerCreateObjectV1Request' is set
            if (ezsigntemplatesignerCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignerCreateObjectV1Request' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatesignerCreateObjectV1Request != null && ezsigntemplatesignerCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignerCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignerCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>EzsigntemplatesignerDeleteObjectV1Response</returns>
        public EzsigntemplatesignerDeleteObjectV1Response EzsigntemplatesignerDeleteObjectV1 (int pkiEzsigntemplatesignerID)
        {
             ApiResponse<EzsigntemplatesignerDeleteObjectV1Response> localVarResponse = EzsigntemplatesignerDeleteObjectV1WithHttpInfo(pkiEzsigntemplatesignerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerDeleteObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignerDeleteObjectV1Response> EzsigntemplatesignerDeleteObjectV1WithHttpInfo (int pkiEzsigntemplatesignerID)
        {
            // verify the required parameter 'pkiEzsigntemplatesignerID' is set
            if (pkiEzsigntemplatesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignerID' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignerID != null) localVarPathParams.Add("pkiEzsigntemplatesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignerDeleteObjectV1Response> EzsigntemplatesignerDeleteObjectV1Async (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignerDeleteObjectV1Response> localVarResponse = await EzsigntemplatesignerDeleteObjectV1WithHttpInfoAsync(pkiEzsigntemplatesignerID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerDeleteObjectV1Response>> EzsigntemplatesignerDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatesignerID' is set
            if (pkiEzsigntemplatesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignerID' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignerID != null) localVarPathParams.Add("pkiEzsigntemplatesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <returns>EzsigntemplatesignerEditObjectV1Response</returns>
        public EzsigntemplatesignerEditObjectV1Response EzsigntemplatesignerEditObjectV1 (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request)
        {
             ApiResponse<EzsigntemplatesignerEditObjectV1Response> localVarResponse = EzsigntemplatesignerEditObjectV1WithHttpInfo(pkiEzsigntemplatesignerID, ezsigntemplatesignerEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerEditObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignerEditObjectV1Response> EzsigntemplatesignerEditObjectV1WithHttpInfo (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatesignerID' is set
            if (pkiEzsigntemplatesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignerID' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerEditObjectV1");
            // verify the required parameter 'ezsigntemplatesignerEditObjectV1Request' is set
            if (ezsigntemplatesignerEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignerEditObjectV1Request' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignerID != null) localVarPathParams.Add("pkiEzsigntemplatesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignerID)); // path parameter
            if (ezsigntemplatesignerEditObjectV1Request != null && ezsigntemplatesignerEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignerEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignerEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignerEditObjectV1Response> EzsigntemplatesignerEditObjectV1Async (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignerEditObjectV1Response> localVarResponse = await EzsigntemplatesignerEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatesignerID, ezsigntemplatesignerEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="ezsigntemplatesignerEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerEditObjectV1Response>> EzsigntemplatesignerEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignerID, EzsigntemplatesignerEditObjectV1Request ezsigntemplatesignerEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatesignerID' is set
            if (pkiEzsigntemplatesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignerID' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerEditObjectV1");
            // verify the required parameter 'ezsigntemplatesignerEditObjectV1Request' is set
            if (ezsigntemplatesignerEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatesignerEditObjectV1Request' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignerID != null) localVarPathParams.Add("pkiEzsigntemplatesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignerID)); // path parameter
            if (ezsigntemplatesignerEditObjectV1Request != null && ezsigntemplatesignerEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatesignerEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatesignerEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>EzsigntemplatesignerGetObjectV1Response</returns>
        public EzsigntemplatesignerGetObjectV1Response EzsigntemplatesignerGetObjectV1 (int pkiEzsigntemplatesignerID)
        {
             ApiResponse<EzsigntemplatesignerGetObjectV1Response> localVarResponse = EzsigntemplatesignerGetObjectV1WithHttpInfo(pkiEzsigntemplatesignerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <returns>ApiResponse of EzsigntemplatesignerGetObjectV1Response</returns>
        public ApiResponse<EzsigntemplatesignerGetObjectV1Response> EzsigntemplatesignerGetObjectV1WithHttpInfo (int pkiEzsigntemplatesignerID)
        {
            // verify the required parameter 'pkiEzsigntemplatesignerID' is set
            if (pkiEzsigntemplatesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignerID' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignerID != null) localVarPathParams.Add("pkiEzsigntemplatesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatesignerGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatesignerGetObjectV1Response> EzsigntemplatesignerGetObjectV1Async (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatesignerGetObjectV1Response> localVarResponse = await EzsigntemplatesignerGetObjectV1WithHttpInfoAsync(pkiEzsigntemplatesignerID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatesigner 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatesignerID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatesignerGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatesignerGetObjectV1Response>> EzsigntemplatesignerGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplatesignerID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatesignerID' is set
            if (pkiEzsigntemplatesignerID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatesignerID' when calling ObjectEzsigntemplatesignerApi->EzsigntemplatesignerGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatesignerID != null) localVarPathParams.Add("pkiEzsigntemplatesignerID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatesignerID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatesignerGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatesignerGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplatesignerGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatesignerGetObjectV1Response)));
        }

    }
}
