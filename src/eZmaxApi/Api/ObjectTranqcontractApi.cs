/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectTranqcontractApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationCountV1Response</returns>
        TranqcontractGetCommunicationCountV1Response TranqcontractGetCommunicationCountV1(int pkiTranqcontractID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationCountV1Response</returns>
        ApiResponse<TranqcontractGetCommunicationCountV1Response> TranqcontractGetCommunicationCountV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationListV1Response</returns>
        TranqcontractGetCommunicationListV1Response TranqcontractGetCommunicationListV1(int pkiTranqcontractID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationListV1Response</returns>
        ApiResponse<TranqcontractGetCommunicationListV1Response> TranqcontractGetCommunicationListV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationrecipientsV1Response</returns>
        TranqcontractGetCommunicationrecipientsV1Response TranqcontractGetCommunicationrecipientsV1(int pkiTranqcontractID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationrecipientsV1Response</returns>
        ApiResponse<TranqcontractGetCommunicationrecipientsV1Response> TranqcontractGetCommunicationrecipientsV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationsendersV1Response</returns>
        TranqcontractGetCommunicationsendersV1Response TranqcontractGetCommunicationsendersV1(int pkiTranqcontractID, int operationIndex = 0);

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationsendersV1Response</returns>
        ApiResponse<TranqcontractGetCommunicationsendersV1Response> TranqcontractGetCommunicationsendersV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectTranqcontractApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationCountV1Response</returns>
        System.Threading.Tasks.Task<TranqcontractGetCommunicationCountV1Response> TranqcontractGetCommunicationCountV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Communication count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationCountV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranqcontractGetCommunicationCountV1Response>> TranqcontractGetCommunicationCountV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationListV1Response</returns>
        System.Threading.Tasks.Task<TranqcontractGetCommunicationListV1Response> TranqcontractGetCommunicationListV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Communication list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranqcontractGetCommunicationListV1Response>> TranqcontractGetCommunicationListV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationrecipientsV1Response</returns>
        System.Threading.Tasks.Task<TranqcontractGetCommunicationrecipientsV1Response> TranqcontractGetCommunicationrecipientsV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationrecipientsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranqcontractGetCommunicationrecipientsV1Response>> TranqcontractGetCommunicationrecipientsV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationsendersV1Response</returns>
        System.Threading.Tasks.Task<TranqcontractGetCommunicationsendersV1Response> TranqcontractGetCommunicationsendersV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationsendersV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranqcontractGetCommunicationsendersV1Response>> TranqcontractGetCommunicationsendersV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectTranqcontractApi : IObjectTranqcontractApiSync, IObjectTranqcontractApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectTranqcontractApi : IObjectTranqcontractApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTranqcontractApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectTranqcontractApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTranqcontractApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectTranqcontractApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTranqcontractApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectTranqcontractApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTranqcontractApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectTranqcontractApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationCountV1Response</returns>
        public TranqcontractGetCommunicationCountV1Response TranqcontractGetCommunicationCountV1(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationCountV1Response> localVarResponse = TranqcontractGetCommunicationCountV1WithHttpInfo(pkiTranqcontractID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationCountV1Response</returns>
        public eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationCountV1Response> TranqcontractGetCommunicationCountV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TranqcontractGetCommunicationCountV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationCount", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationCountV1Response</returns>
        public async System.Threading.Tasks.Task<TranqcontractGetCommunicationCountV1Response> TranqcontractGetCommunicationCountV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationCountV1Response> localVarResponse = await TranqcontractGetCommunicationCountV1WithHttpInfoAsync(pkiTranqcontractID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication count 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationCountV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationCountV1Response>> TranqcontractGetCommunicationCountV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationCountV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranqcontractGetCommunicationCountV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationCount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationCountV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationListV1Response</returns>
        public TranqcontractGetCommunicationListV1Response TranqcontractGetCommunicationListV1(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationListV1Response> localVarResponse = TranqcontractGetCommunicationListV1WithHttpInfo(pkiTranqcontractID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationListV1Response> TranqcontractGetCommunicationListV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TranqcontractGetCommunicationListV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationListV1Response</returns>
        public async System.Threading.Tasks.Task<TranqcontractGetCommunicationListV1Response> TranqcontractGetCommunicationListV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationListV1Response> localVarResponse = await TranqcontractGetCommunicationListV1WithHttpInfoAsync(pkiTranqcontractID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Communication list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationListV1Response>> TranqcontractGetCommunicationListV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranqcontractGetCommunicationListV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationrecipientsV1Response</returns>
        public TranqcontractGetCommunicationrecipientsV1Response TranqcontractGetCommunicationrecipientsV1(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationrecipientsV1Response> localVarResponse = TranqcontractGetCommunicationrecipientsV1WithHttpInfo(pkiTranqcontractID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationrecipientsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationrecipientsV1Response> TranqcontractGetCommunicationrecipientsV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationrecipientsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TranqcontractGetCommunicationrecipientsV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationrecipients", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationrecipientsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationrecipientsV1Response</returns>
        public async System.Threading.Tasks.Task<TranqcontractGetCommunicationrecipientsV1Response> TranqcontractGetCommunicationrecipientsV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationrecipientsV1Response> localVarResponse = await TranqcontractGetCommunicationrecipientsV1WithHttpInfoAsync(pkiTranqcontractID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationrecipient 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationrecipientsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationrecipientsV1Response>> TranqcontractGetCommunicationrecipientsV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationrecipientsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranqcontractGetCommunicationrecipientsV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationrecipients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationrecipientsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranqcontractGetCommunicationsendersV1Response</returns>
        public TranqcontractGetCommunicationsendersV1Response TranqcontractGetCommunicationsendersV1(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationsendersV1Response> localVarResponse = TranqcontractGetCommunicationsendersV1WithHttpInfo(pkiTranqcontractID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranqcontractGetCommunicationsendersV1Response</returns>
        public eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationsendersV1Response> TranqcontractGetCommunicationsendersV1WithHttpInfo(int pkiTranqcontractID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationsendersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TranqcontractGetCommunicationsendersV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationsenders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationsendersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranqcontractGetCommunicationsendersV1Response</returns>
        public async System.Threading.Tasks.Task<TranqcontractGetCommunicationsendersV1Response> TranqcontractGetCommunicationsendersV1Async(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationsendersV1Response> localVarResponse = await TranqcontractGetCommunicationsendersV1WithHttpInfoAsync(pkiTranqcontractID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Tranqcontract&#39;s Communicationsender 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiTranqcontractID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranqcontractGetCommunicationsendersV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<TranqcontractGetCommunicationsendersV1Response>> TranqcontractGetCommunicationsendersV1WithHttpInfoAsync(int pkiTranqcontractID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiTranqcontractID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiTranqcontractID)); // path parameter

            localVarRequestOptions.Operation = "ObjectTranqcontractApi.TranqcontractGetCommunicationsendersV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranqcontractGetCommunicationsendersV1Response>("/1/object/tranqcontract/{pkiTranqcontractID}/getCommunicationsenders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranqcontractGetCommunicationsendersV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
