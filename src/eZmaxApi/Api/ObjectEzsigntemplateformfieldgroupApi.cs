/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplateformfieldgroupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <returns>EzsigntemplateformfieldgroupCreateObjectV1Response</returns>
        EzsigntemplateformfieldgroupCreateObjectV1Response EzsigntemplateformfieldgroupCreateObjectV1 (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response> EzsigntemplateformfieldgroupCreateObjectV1WithHttpInfo (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>EzsigntemplateformfieldgroupDeleteObjectV1Response</returns>
        EzsigntemplateformfieldgroupDeleteObjectV1Response EzsigntemplateformfieldgroupDeleteObjectV1 (int pkiEzsigntemplateformfieldgroupID);

        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupDeleteObjectV1Response</returns>
        ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response> EzsigntemplateformfieldgroupDeleteObjectV1WithHttpInfo (int pkiEzsigntemplateformfieldgroupID);
        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <returns>EzsigntemplateformfieldgroupEditObjectV1Response</returns>
        EzsigntemplateformfieldgroupEditObjectV1Response EzsigntemplateformfieldgroupEditObjectV1 (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupEditObjectV1Response</returns>
        ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response> EzsigntemplateformfieldgroupEditObjectV1WithHttpInfo (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>EzsigntemplateformfieldgroupGetObjectV1Response</returns>
        EzsigntemplateformfieldgroupGetObjectV1Response EzsigntemplateformfieldgroupGetObjectV1 (int pkiEzsigntemplateformfieldgroupID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupGetObjectV1Response</returns>
        ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response> EzsigntemplateformfieldgroupGetObjectV1WithHttpInfo (int pkiEzsigntemplateformfieldgroupID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateformfieldgroupCreateObjectV1Response> EzsigntemplateformfieldgroupCreateObjectV1Async (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response>> EzsigntemplateformfieldgroupCreateObjectV1WithHttpInfoAsync (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateformfieldgroupDeleteObjectV1Response> EzsigntemplateformfieldgroupDeleteObjectV1Async (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response>> EzsigntemplateformfieldgroupDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateformfieldgroupEditObjectV1Response> EzsigntemplateformfieldgroupEditObjectV1Async (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response>> EzsigntemplateformfieldgroupEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateformfieldgroupGetObjectV1Response> EzsigntemplateformfieldgroupGetObjectV1Async (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response>> EzsigntemplateformfieldgroupGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplateformfieldgroupApi : IObjectEzsigntemplateformfieldgroupApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplateformfieldgroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplateformfieldgroupApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplateformfieldgroupApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplateformfieldgroupApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplateformfieldgroupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplateformfieldgroupApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <returns>EzsigntemplateformfieldgroupCreateObjectV1Response</returns>
        public EzsigntemplateformfieldgroupCreateObjectV1Response EzsigntemplateformfieldgroupCreateObjectV1 (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request)
        {
             ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response> localVarResponse = EzsigntemplateformfieldgroupCreateObjectV1WithHttpInfo(ezsigntemplateformfieldgroupCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupCreateObjectV1Response</returns>
        public ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response> EzsigntemplateformfieldgroupCreateObjectV1WithHttpInfo (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigntemplateformfieldgroupCreateObjectV1Request' is set
            if (ezsigntemplateformfieldgroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateformfieldgroupCreateObjectV1Request' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplateformfieldgroupCreateObjectV1Request != null && ezsigntemplateformfieldgroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateformfieldgroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateformfieldgroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateformfieldgroupCreateObjectV1Response> EzsigntemplateformfieldgroupCreateObjectV1Async (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response> localVarResponse = await EzsigntemplateformfieldgroupCreateObjectV1WithHttpInfoAsync(ezsigntemplateformfieldgroupCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigntemplateformfieldgroup The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateformfieldgroupCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response>> EzsigntemplateformfieldgroupCreateObjectV1WithHttpInfoAsync (EzsigntemplateformfieldgroupCreateObjectV1Request ezsigntemplateformfieldgroupCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigntemplateformfieldgroupCreateObjectV1Request' is set
            if (ezsigntemplateformfieldgroupCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateformfieldgroupCreateObjectV1Request' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplateformfieldgroupCreateObjectV1Request != null && ezsigntemplateformfieldgroupCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateformfieldgroupCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateformfieldgroupCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>EzsigntemplateformfieldgroupDeleteObjectV1Response</returns>
        public EzsigntemplateformfieldgroupDeleteObjectV1Response EzsigntemplateformfieldgroupDeleteObjectV1 (int pkiEzsigntemplateformfieldgroupID)
        {
             ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response> localVarResponse = EzsigntemplateformfieldgroupDeleteObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupDeleteObjectV1Response</returns>
        public ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response> EzsigntemplateformfieldgroupDeleteObjectV1WithHttpInfo (int pkiEzsigntemplateformfieldgroupID)
        {
            // verify the required parameter 'pkiEzsigntemplateformfieldgroupID' is set
            if (pkiEzsigntemplateformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateformfieldgroupID' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateformfieldgroupID != null) localVarPathParams.Add("pkiEzsigntemplateformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateformfieldgroupDeleteObjectV1Response> EzsigntemplateformfieldgroupDeleteObjectV1Async (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response> localVarResponse = await EzsigntemplateformfieldgroupDeleteObjectV1WithHttpInfoAsync(pkiEzsigntemplateformfieldgroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response>> EzsigntemplateformfieldgroupDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateformfieldgroupID' is set
            if (pkiEzsigntemplateformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateformfieldgroupID' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateformfieldgroupID != null) localVarPathParams.Add("pkiEzsigntemplateformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <returns>EzsigntemplateformfieldgroupEditObjectV1Response</returns>
        public EzsigntemplateformfieldgroupEditObjectV1Response EzsigntemplateformfieldgroupEditObjectV1 (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request)
        {
             ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response> localVarResponse = EzsigntemplateformfieldgroupEditObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID, ezsigntemplateformfieldgroupEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupEditObjectV1Response</returns>
        public ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response> EzsigntemplateformfieldgroupEditObjectV1WithHttpInfo (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplateformfieldgroupID' is set
            if (pkiEzsigntemplateformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateformfieldgroupID' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupEditObjectV1");
            // verify the required parameter 'ezsigntemplateformfieldgroupEditObjectV1Request' is set
            if (ezsigntemplateformfieldgroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateformfieldgroupEditObjectV1Request' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateformfieldgroupID != null) localVarPathParams.Add("pkiEzsigntemplateformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateformfieldgroupID)); // path parameter
            if (ezsigntemplateformfieldgroupEditObjectV1Request != null && ezsigntemplateformfieldgroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateformfieldgroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateformfieldgroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateformfieldgroupEditObjectV1Response> EzsigntemplateformfieldgroupEditObjectV1Async (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response> localVarResponse = await EzsigntemplateformfieldgroupEditObjectV1WithHttpInfoAsync(pkiEzsigntemplateformfieldgroupID, ezsigntemplateformfieldgroupEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="ezsigntemplateformfieldgroupEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response>> EzsigntemplateformfieldgroupEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplateformfieldgroupID, EzsigntemplateformfieldgroupEditObjectV1Request ezsigntemplateformfieldgroupEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateformfieldgroupID' is set
            if (pkiEzsigntemplateformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateformfieldgroupID' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupEditObjectV1");
            // verify the required parameter 'ezsigntemplateformfieldgroupEditObjectV1Request' is set
            if (ezsigntemplateformfieldgroupEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateformfieldgroupEditObjectV1Request' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateformfieldgroupID != null) localVarPathParams.Add("pkiEzsigntemplateformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateformfieldgroupID)); // path parameter
            if (ezsigntemplateformfieldgroupEditObjectV1Request != null && ezsigntemplateformfieldgroupEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateformfieldgroupEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateformfieldgroupEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>EzsigntemplateformfieldgroupGetObjectV1Response</returns>
        public EzsigntemplateformfieldgroupGetObjectV1Response EzsigntemplateformfieldgroupGetObjectV1 (int pkiEzsigntemplateformfieldgroupID)
        {
             ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response> localVarResponse = EzsigntemplateformfieldgroupGetObjectV1WithHttpInfo(pkiEzsigntemplateformfieldgroupID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <returns>ApiResponse of EzsigntemplateformfieldgroupGetObjectV1Response</returns>
        public ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response> EzsigntemplateformfieldgroupGetObjectV1WithHttpInfo (int pkiEzsigntemplateformfieldgroupID)
        {
            // verify the required parameter 'pkiEzsigntemplateformfieldgroupID' is set
            if (pkiEzsigntemplateformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateformfieldgroupID' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateformfieldgroupID != null) localVarPathParams.Add("pkiEzsigntemplateformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateformfieldgroupGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateformfieldgroupGetObjectV1Response> EzsigntemplateformfieldgroupGetObjectV1Async (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response> localVarResponse = await EzsigntemplateformfieldgroupGetObjectV1WithHttpInfoAsync(pkiEzsigntemplateformfieldgroupID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplateformfieldgroup 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateformfieldgroupID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateformfieldgroupGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response>> EzsigntemplateformfieldgroupGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplateformfieldgroupID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateformfieldgroupID' is set
            if (pkiEzsigntemplateformfieldgroupID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateformfieldgroupID' when calling ObjectEzsigntemplateformfieldgroupApi->EzsigntemplateformfieldgroupGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplateformfieldgroup/{pkiEzsigntemplateformfieldgroupID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateformfieldgroupID != null) localVarPathParams.Add("pkiEzsigntemplateformfieldgroupID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateformfieldgroupID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateformfieldgroupGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateformfieldgroupGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateformfieldgroupGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateformfieldgroupGetObjectV1Response)));
        }

    }
}
