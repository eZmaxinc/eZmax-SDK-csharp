/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectSignatureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Signature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <returns>SignatureCreateObjectV1Response</returns>
        SignatureCreateObjectV1Response SignatureCreateObjectV1 (SignatureCreateObjectV1Request signatureCreateObjectV1Request);

        /// <summary>
        /// Create a new Signature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <returns>ApiResponse of SignatureCreateObjectV1Response</returns>
        ApiResponse<SignatureCreateObjectV1Response> SignatureCreateObjectV1WithHttpInfo (SignatureCreateObjectV1Request signatureCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>SignatureDeleteObjectV1Response</returns>
        SignatureDeleteObjectV1Response SignatureDeleteObjectV1 (int pkiSignatureID);

        /// <summary>
        /// Delete an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>ApiResponse of SignatureDeleteObjectV1Response</returns>
        ApiResponse<SignatureDeleteObjectV1Response> SignatureDeleteObjectV1WithHttpInfo (int pkiSignatureID);
        /// <summary>
        /// Edit an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <returns>SignatureEditObjectV1Response</returns>
        SignatureEditObjectV1Response SignatureEditObjectV1 (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request);

        /// <summary>
        /// Edit an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <returns>ApiResponse of SignatureEditObjectV1Response</returns>
        ApiResponse<SignatureEditObjectV1Response> SignatureEditObjectV1WithHttpInfo (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>SignatureGetObjectV2Response</returns>
        SignatureGetObjectV2Response SignatureGetObjectV2 (int pkiSignatureID);

        /// <summary>
        /// Retrieve an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>ApiResponse of SignatureGetObjectV2Response</returns>
        ApiResponse<SignatureGetObjectV2Response> SignatureGetObjectV2WithHttpInfo (int pkiSignatureID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Signature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<SignatureCreateObjectV1Response> SignatureCreateObjectV1Async (SignatureCreateObjectV1Request signatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Signature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureCreateObjectV1Response>> SignatureCreateObjectV1WithHttpInfoAsync (SignatureCreateObjectV1Request signatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<SignatureDeleteObjectV1Response> SignatureDeleteObjectV1Async (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureDeleteObjectV1Response>> SignatureDeleteObjectV1WithHttpInfoAsync (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureEditObjectV1Response</returns>
        System.Threading.Tasks.Task<SignatureEditObjectV1Response> SignatureEditObjectV1Async (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureEditObjectV1Response>> SignatureEditObjectV1WithHttpInfoAsync (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureGetObjectV2Response</returns>
        System.Threading.Tasks.Task<SignatureGetObjectV2Response> SignatureGetObjectV2Async (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Signature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignatureGetObjectV2Response>> SignatureGetObjectV2WithHttpInfoAsync (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectSignatureApi : IObjectSignatureApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectSignatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectSignatureApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectSignatureApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectSignatureApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectSignatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectSignatureApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Signature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <returns>SignatureCreateObjectV1Response</returns>
        public SignatureCreateObjectV1Response SignatureCreateObjectV1 (SignatureCreateObjectV1Request signatureCreateObjectV1Request)
        {
             ApiResponse<SignatureCreateObjectV1Response> localVarResponse = SignatureCreateObjectV1WithHttpInfo(signatureCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Signature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <returns>ApiResponse of SignatureCreateObjectV1Response</returns>
        public ApiResponse<SignatureCreateObjectV1Response> SignatureCreateObjectV1WithHttpInfo (SignatureCreateObjectV1Request signatureCreateObjectV1Request)
        {
            // verify the required parameter 'signatureCreateObjectV1Request' is set
            if (signatureCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'signatureCreateObjectV1Request' when calling ObjectSignatureApi->SignatureCreateObjectV1");

            var localVarPath = "./1/object/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signatureCreateObjectV1Request != null && signatureCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signatureCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signatureCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Signature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<SignatureCreateObjectV1Response> SignatureCreateObjectV1Async (SignatureCreateObjectV1Request signatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SignatureCreateObjectV1Response> localVarResponse = await SignatureCreateObjectV1WithHttpInfoAsync(signatureCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Signature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureCreateObjectV1Response>> SignatureCreateObjectV1WithHttpInfoAsync (SignatureCreateObjectV1Request signatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signatureCreateObjectV1Request' is set
            if (signatureCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'signatureCreateObjectV1Request' when calling ObjectSignatureApi->SignatureCreateObjectV1");

            var localVarPath = "./1/object/signature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signatureCreateObjectV1Request != null && signatureCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signatureCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signatureCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>SignatureDeleteObjectV1Response</returns>
        public SignatureDeleteObjectV1Response SignatureDeleteObjectV1 (int pkiSignatureID)
        {
             ApiResponse<SignatureDeleteObjectV1Response> localVarResponse = SignatureDeleteObjectV1WithHttpInfo(pkiSignatureID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>ApiResponse of SignatureDeleteObjectV1Response</returns>
        public ApiResponse<SignatureDeleteObjectV1Response> SignatureDeleteObjectV1WithHttpInfo (int pkiSignatureID)
        {
            // verify the required parameter 'pkiSignatureID' is set
            if (pkiSignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiSignatureID' when calling ObjectSignatureApi->SignatureDeleteObjectV1");

            var localVarPath = "./1/object/signature/{pkiSignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiSignatureID != null) localVarPathParams.Add("pkiSignatureID", this.Configuration.ApiClient.ParameterToString(pkiSignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<SignatureDeleteObjectV1Response> SignatureDeleteObjectV1Async (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SignatureDeleteObjectV1Response> localVarResponse = await SignatureDeleteObjectV1WithHttpInfoAsync(pkiSignatureID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureDeleteObjectV1Response>> SignatureDeleteObjectV1WithHttpInfoAsync (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiSignatureID' is set
            if (pkiSignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiSignatureID' when calling ObjectSignatureApi->SignatureDeleteObjectV1");

            var localVarPath = "./1/object/signature/{pkiSignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiSignatureID != null) localVarPathParams.Add("pkiSignatureID", this.Configuration.ApiClient.ParameterToString(pkiSignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <returns>SignatureEditObjectV1Response</returns>
        public SignatureEditObjectV1Response SignatureEditObjectV1 (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request)
        {
             ApiResponse<SignatureEditObjectV1Response> localVarResponse = SignatureEditObjectV1WithHttpInfo(pkiSignatureID, signatureEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <returns>ApiResponse of SignatureEditObjectV1Response</returns>
        public ApiResponse<SignatureEditObjectV1Response> SignatureEditObjectV1WithHttpInfo (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request)
        {
            // verify the required parameter 'pkiSignatureID' is set
            if (pkiSignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiSignatureID' when calling ObjectSignatureApi->SignatureEditObjectV1");
            // verify the required parameter 'signatureEditObjectV1Request' is set
            if (signatureEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'signatureEditObjectV1Request' when calling ObjectSignatureApi->SignatureEditObjectV1");

            var localVarPath = "./1/object/signature/{pkiSignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiSignatureID != null) localVarPathParams.Add("pkiSignatureID", this.Configuration.ApiClient.ParameterToString(pkiSignatureID)); // path parameter
            if (signatureEditObjectV1Request != null && signatureEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signatureEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signatureEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<SignatureEditObjectV1Response> SignatureEditObjectV1Async (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SignatureEditObjectV1Response> localVarResponse = await SignatureEditObjectV1WithHttpInfoAsync(pkiSignatureID, signatureEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="signatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureEditObjectV1Response>> SignatureEditObjectV1WithHttpInfoAsync (int pkiSignatureID, SignatureEditObjectV1Request signatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiSignatureID' is set
            if (pkiSignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiSignatureID' when calling ObjectSignatureApi->SignatureEditObjectV1");
            // verify the required parameter 'signatureEditObjectV1Request' is set
            if (signatureEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'signatureEditObjectV1Request' when calling ObjectSignatureApi->SignatureEditObjectV1");

            var localVarPath = "./1/object/signature/{pkiSignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiSignatureID != null) localVarPathParams.Add("pkiSignatureID", this.Configuration.ApiClient.ParameterToString(pkiSignatureID)); // path parameter
            if (signatureEditObjectV1Request != null && signatureEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signatureEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signatureEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>SignatureGetObjectV2Response</returns>
        public SignatureGetObjectV2Response SignatureGetObjectV2 (int pkiSignatureID)
        {
             ApiResponse<SignatureGetObjectV2Response> localVarResponse = SignatureGetObjectV2WithHttpInfo(pkiSignatureID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <returns>ApiResponse of SignatureGetObjectV2Response</returns>
        public ApiResponse<SignatureGetObjectV2Response> SignatureGetObjectV2WithHttpInfo (int pkiSignatureID)
        {
            // verify the required parameter 'pkiSignatureID' is set
            if (pkiSignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiSignatureID' when calling ObjectSignatureApi->SignatureGetObjectV2");

            var localVarPath = "./2/object/signature/{pkiSignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiSignatureID != null) localVarPathParams.Add("pkiSignatureID", this.Configuration.ApiClient.ParameterToString(pkiSignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignatureGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<SignatureGetObjectV2Response> SignatureGetObjectV2Async (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SignatureGetObjectV2Response> localVarResponse = await SignatureGetObjectV2WithHttpInfoAsync(pkiSignatureID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Signature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiSignatureID">The unique ID of the Signature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignatureGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignatureGetObjectV2Response>> SignatureGetObjectV2WithHttpInfoAsync (int pkiSignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiSignatureID' is set
            if (pkiSignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiSignatureID' when calling ObjectSignatureApi->SignatureGetObjectV2");

            var localVarPath = "./2/object/signature/{pkiSignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiSignatureID != null) localVarPathParams.Add("pkiSignatureID", this.Configuration.ApiClient.ParameterToString(pkiSignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignatureGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignatureGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SignatureGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignatureGetObjectV2Response)));
        }

    }
}
