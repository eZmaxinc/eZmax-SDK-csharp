/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectUserstagedApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a User from a Userstaged and then map it
        /// </summary>
        /// <remarks>
        /// Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <returns>UserstagedCreateUserV1Response</returns>
        UserstagedCreateUserV1Response UserstagedCreateUserV1 (int pkiUserstagedID, Object body);

        /// <summary>
        /// Create a User from a Userstaged and then map it
        /// </summary>
        /// <remarks>
        /// Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserstagedCreateUserV1Response</returns>
        ApiResponse<UserstagedCreateUserV1Response> UserstagedCreateUserV1WithHttpInfo (int pkiUserstagedID, Object body);
        /// <summary>
        /// Delete an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>UserstagedDeleteObjectV1Response</returns>
        UserstagedDeleteObjectV1Response UserstagedDeleteObjectV1 (int pkiUserstagedID);

        /// <summary>
        /// Delete an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>ApiResponse of UserstagedDeleteObjectV1Response</returns>
        ApiResponse<UserstagedDeleteObjectV1Response> UserstagedDeleteObjectV1WithHttpInfo (int pkiUserstagedID);
        /// <summary>
        /// Retrieve Userstaged list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>UserstagedGetListV1Response</returns>
        UserstagedGetListV1Response UserstagedGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));

        /// <summary>
        /// Retrieve Userstaged list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of UserstagedGetListV1Response</returns>
        ApiResponse<UserstagedGetListV1Response> UserstagedGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>UserstagedGetObjectV2Response</returns>
        UserstagedGetObjectV2Response UserstagedGetObjectV2 (int pkiUserstagedID);

        /// <summary>
        /// Retrieve an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>ApiResponse of UserstagedGetObjectV2Response</returns>
        ApiResponse<UserstagedGetObjectV2Response> UserstagedGetObjectV2WithHttpInfo (int pkiUserstagedID);
        /// <summary>
        /// Map the Userstaged to an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <returns>UserstagedMapV1Response</returns>
        UserstagedMapV1Response UserstagedMapV1 (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request);

        /// <summary>
        /// Map the Userstaged to an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <returns>ApiResponse of UserstagedMapV1Response</returns>
        ApiResponse<UserstagedMapV1Response> UserstagedMapV1WithHttpInfo (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a User from a Userstaged and then map it
        /// </summary>
        /// <remarks>
        /// Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedCreateUserV1Response</returns>
        System.Threading.Tasks.Task<UserstagedCreateUserV1Response> UserstagedCreateUserV1Async (int pkiUserstagedID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a User from a Userstaged and then map it
        /// </summary>
        /// <remarks>
        /// Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedCreateUserV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserstagedCreateUserV1Response>> UserstagedCreateUserV1WithHttpInfoAsync (int pkiUserstagedID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<UserstagedDeleteObjectV1Response> UserstagedDeleteObjectV1Async (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserstagedDeleteObjectV1Response>> UserstagedDeleteObjectV1WithHttpInfoAsync (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Userstaged list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedGetListV1Response</returns>
        System.Threading.Tasks.Task<UserstagedGetListV1Response> UserstagedGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Userstaged list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserstagedGetListV1Response>> UserstagedGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedGetObjectV2Response</returns>
        System.Threading.Tasks.Task<UserstagedGetObjectV2Response> UserstagedGetObjectV2Async (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Userstaged
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserstagedGetObjectV2Response>> UserstagedGetObjectV2WithHttpInfoAsync (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Map the Userstaged to an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedMapV1Response</returns>
        System.Threading.Tasks.Task<UserstagedMapV1Response> UserstagedMapV1Async (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Map the Userstaged to an existing user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedMapV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserstagedMapV1Response>> UserstagedMapV1WithHttpInfoAsync (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectUserstagedApi : IObjectUserstagedApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUserstagedApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectUserstagedApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUserstagedApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectUserstagedApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUserstagedApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectUserstagedApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a User from a Userstaged and then map it Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <returns>UserstagedCreateUserV1Response</returns>
        public UserstagedCreateUserV1Response UserstagedCreateUserV1 (int pkiUserstagedID, Object body)
        {
             ApiResponse<UserstagedCreateUserV1Response> localVarResponse = UserstagedCreateUserV1WithHttpInfo(pkiUserstagedID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User from a Userstaged and then map it Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserstagedCreateUserV1Response</returns>
        public ApiResponse<UserstagedCreateUserV1Response> UserstagedCreateUserV1WithHttpInfo (int pkiUserstagedID, Object body)
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedCreateUserV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectUserstagedApi->UserstagedCreateUserV1");

            var localVarPath = "./1/object/userstaged/{pkiUserstagedID}/createUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedCreateUserV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedCreateUserV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedCreateUserV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedCreateUserV1Response)));
        }

        /// <summary>
        /// Create a User from a Userstaged and then map it Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedCreateUserV1Response</returns>
        public async System.Threading.Tasks.Task<UserstagedCreateUserV1Response> UserstagedCreateUserV1Async (int pkiUserstagedID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserstagedCreateUserV1Response> localVarResponse = await UserstagedCreateUserV1WithHttpInfoAsync(pkiUserstagedID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a User from a Userstaged and then map it Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedCreateUserV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserstagedCreateUserV1Response>> UserstagedCreateUserV1WithHttpInfoAsync (int pkiUserstagedID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedCreateUserV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectUserstagedApi->UserstagedCreateUserV1");

            var localVarPath = "./1/object/userstaged/{pkiUserstagedID}/createUser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedCreateUserV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedCreateUserV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedCreateUserV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedCreateUserV1Response)));
        }

        /// <summary>
        /// Delete an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>UserstagedDeleteObjectV1Response</returns>
        public UserstagedDeleteObjectV1Response UserstagedDeleteObjectV1 (int pkiUserstagedID)
        {
             ApiResponse<UserstagedDeleteObjectV1Response> localVarResponse = UserstagedDeleteObjectV1WithHttpInfo(pkiUserstagedID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>ApiResponse of UserstagedDeleteObjectV1Response</returns>
        public ApiResponse<UserstagedDeleteObjectV1Response> UserstagedDeleteObjectV1WithHttpInfo (int pkiUserstagedID)
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedDeleteObjectV1");

            var localVarPath = "./1/object/userstaged/{pkiUserstagedID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UserstagedDeleteObjectV1Response> UserstagedDeleteObjectV1Async (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserstagedDeleteObjectV1Response> localVarResponse = await UserstagedDeleteObjectV1WithHttpInfoAsync(pkiUserstagedID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserstagedDeleteObjectV1Response>> UserstagedDeleteObjectV1WithHttpInfoAsync (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedDeleteObjectV1");

            var localVarPath = "./1/object/userstaged/{pkiUserstagedID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedDeleteObjectV1Response)));
        }

        /// <summary>
        /// Retrieve Userstaged list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>UserstagedGetListV1Response</returns>
        public UserstagedGetListV1Response UserstagedGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {
             ApiResponse<UserstagedGetListV1Response> localVarResponse = UserstagedGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Userstaged list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of UserstagedGetListV1Response</returns>
        public ApiResponse<UserstagedGetListV1Response> UserstagedGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {

            var localVarPath = "./1/object/userstaged/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Userstaged list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedGetListV1Response</returns>
        public async System.Threading.Tasks.Task<UserstagedGetListV1Response> UserstagedGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserstagedGetListV1Response> localVarResponse = await UserstagedGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Userstaged list 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserstagedGetListV1Response>> UserstagedGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "./1/object/userstaged/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>UserstagedGetObjectV2Response</returns>
        public UserstagedGetObjectV2Response UserstagedGetObjectV2 (int pkiUserstagedID)
        {
             ApiResponse<UserstagedGetObjectV2Response> localVarResponse = UserstagedGetObjectV2WithHttpInfo(pkiUserstagedID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <returns>ApiResponse of UserstagedGetObjectV2Response</returns>
        public ApiResponse<UserstagedGetObjectV2Response> UserstagedGetObjectV2WithHttpInfo (int pkiUserstagedID)
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedGetObjectV2");

            var localVarPath = "./2/object/userstaged/{pkiUserstagedID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<UserstagedGetObjectV2Response> UserstagedGetObjectV2Async (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserstagedGetObjectV2Response> localVarResponse = await UserstagedGetObjectV2WithHttpInfoAsync(pkiUserstagedID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Userstaged 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserstagedGetObjectV2Response>> UserstagedGetObjectV2WithHttpInfoAsync (int pkiUserstagedID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedGetObjectV2");

            var localVarPath = "./2/object/userstaged/{pkiUserstagedID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedGetObjectV2Response)));
        }

        /// <summary>
        /// Map the Userstaged to an existing user 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <returns>UserstagedMapV1Response</returns>
        public UserstagedMapV1Response UserstagedMapV1 (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request)
        {
             ApiResponse<UserstagedMapV1Response> localVarResponse = UserstagedMapV1WithHttpInfo(pkiUserstagedID, userstagedMapV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Map the Userstaged to an existing user 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <returns>ApiResponse of UserstagedMapV1Response</returns>
        public ApiResponse<UserstagedMapV1Response> UserstagedMapV1WithHttpInfo (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request)
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedMapV1");
            // verify the required parameter 'userstagedMapV1Request' is set
            if (userstagedMapV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userstagedMapV1Request' when calling ObjectUserstagedApi->UserstagedMapV1");

            var localVarPath = "./1/object/userstaged/{pkiUserstagedID}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter
            if (userstagedMapV1Request != null && userstagedMapV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userstagedMapV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userstagedMapV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedMapV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedMapV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedMapV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedMapV1Response)));
        }

        /// <summary>
        /// Map the Userstaged to an existing user 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserstagedMapV1Response</returns>
        public async System.Threading.Tasks.Task<UserstagedMapV1Response> UserstagedMapV1Async (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserstagedMapV1Response> localVarResponse = await UserstagedMapV1WithHttpInfoAsync(pkiUserstagedID, userstagedMapV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Map the Userstaged to an existing user 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserstagedID"></param>
        /// <param name="userstagedMapV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserstagedMapV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserstagedMapV1Response>> UserstagedMapV1WithHttpInfoAsync (int pkiUserstagedID, UserstagedMapV1Request userstagedMapV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserstagedID' is set
            if (pkiUserstagedID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserstagedID' when calling ObjectUserstagedApi->UserstagedMapV1");
            // verify the required parameter 'userstagedMapV1Request' is set
            if (userstagedMapV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userstagedMapV1Request' when calling ObjectUserstagedApi->UserstagedMapV1");

            var localVarPath = "./1/object/userstaged/{pkiUserstagedID}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserstagedID != null) localVarPathParams.Add("pkiUserstagedID", this.Configuration.ApiClient.ParameterToString(pkiUserstagedID)); // path parameter
            if (userstagedMapV1Request != null && userstagedMapV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userstagedMapV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userstagedMapV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserstagedMapV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserstagedMapV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserstagedMapV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserstagedMapV1Response)));
        }

    }
}
