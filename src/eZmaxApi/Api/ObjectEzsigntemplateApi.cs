/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copy the Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <returns>EzsigntemplateCopyV1Response</returns>
        EzsigntemplateCopyV1Response EzsigntemplateCopyV1 (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request);

        /// <summary>
        /// Copy the Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateCopyV1Response</returns>
        ApiResponse<EzsigntemplateCopyV1Response> EzsigntemplateCopyV1WithHttpInfo (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request);
        /// <summary>
        /// Create a new Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <returns>EzsigntemplateCreateObjectV1Response</returns>
        EzsigntemplateCreateObjectV1Response EzsigntemplateCreateObjectV1 (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplateCreateObjectV1Response> EzsigntemplateCreateObjectV1WithHttpInfo (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>EzsigntemplateDeleteObjectV1Response</returns>
        EzsigntemplateDeleteObjectV1Response EzsigntemplateDeleteObjectV1 (int pkiEzsigntemplateID);

        /// <summary>
        /// Delete an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>ApiResponse of EzsigntemplateDeleteObjectV1Response</returns>
        ApiResponse<EzsigntemplateDeleteObjectV1Response> EzsigntemplateDeleteObjectV1WithHttpInfo (int pkiEzsigntemplateID);
        /// <summary>
        /// Edit an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <returns>EzsigntemplateEditObjectV1Response</returns>
        EzsigntemplateEditObjectV1Response EzsigntemplateEditObjectV1 (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateEditObjectV1Response</returns>
        ApiResponse<EzsigntemplateEditObjectV1Response> EzsigntemplateEditObjectV1WithHttpInfo (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request);
        /// <summary>
        /// Retrieve Ezsigntemplate and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>CommonGetAutocompleteV1Response</returns>
        [Obsolete]
        CommonGetAutocompleteV1Response EzsigntemplateGetAutocompleteV1 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?));

        /// <summary>
        /// Retrieve Ezsigntemplate and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of CommonGetAutocompleteV1Response</returns>
        [Obsolete]
        ApiResponse<CommonGetAutocompleteV1Response> EzsigntemplateGetAutocompleteV1WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?));
        /// <summary>
        /// Retrieve Ezsigntemplates and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>EzsigntemplateGetAutocompleteV2Response</returns>
        EzsigntemplateGetAutocompleteV2Response EzsigntemplateGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?));

        /// <summary>
        /// Retrieve Ezsigntemplates and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of EzsigntemplateGetAutocompleteV2Response</returns>
        ApiResponse<EzsigntemplateGetAutocompleteV2Response> EzsigntemplateGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?));
        /// <summary>
        /// Retrieve Ezsigntemplate list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>EzsigntemplateGetListV1Response</returns>
        EzsigntemplateGetListV1Response EzsigntemplateGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));

        /// <summary>
        /// Retrieve Ezsigntemplate list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of EzsigntemplateGetListV1Response</returns>
        ApiResponse<EzsigntemplateGetListV1Response> EzsigntemplateGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>EzsigntemplateGetObjectV1Response</returns>
        [Obsolete]
        EzsigntemplateGetObjectV1Response EzsigntemplateGetObjectV1 (int pkiEzsigntemplateID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>ApiResponse of EzsigntemplateGetObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsigntemplateGetObjectV1Response> EzsigntemplateGetObjectV1WithHttpInfo (int pkiEzsigntemplateID);
        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>EzsigntemplateGetObjectV2Response</returns>
        EzsigntemplateGetObjectV2Response EzsigntemplateGetObjectV2 (int pkiEzsigntemplateID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>ApiResponse of EzsigntemplateGetObjectV2Response</returns>
        ApiResponse<EzsigntemplateGetObjectV2Response> EzsigntemplateGetObjectV2WithHttpInfo (int pkiEzsigntemplateID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Copy the Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateCopyV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateCopyV1Response> EzsigntemplateCopyV1Async (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Copy the Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateCopyV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateCopyV1Response>> EzsigntemplateCopyV1WithHttpInfoAsync (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateCreateObjectV1Response> EzsigntemplateCreateObjectV1Async (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateCreateObjectV1Response>> EzsigntemplateCreateObjectV1WithHttpInfoAsync (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateDeleteObjectV1Response> EzsigntemplateDeleteObjectV1Async (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateDeleteObjectV1Response>> EzsigntemplateDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateEditObjectV1Response> EzsigntemplateEditObjectV1Async (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateEditObjectV1Response>> EzsigntemplateEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Ezsigntemplate and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CommonGetAutocompleteV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<CommonGetAutocompleteV1Response> EzsigntemplateGetAutocompleteV1Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Ezsigntemplate and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CommonGetAutocompleteV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<CommonGetAutocompleteV1Response>> EzsigntemplateGetAutocompleteV1WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Ezsigntemplates and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetAutocompleteV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateGetAutocompleteV2Response> EzsigntemplateGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Ezsigntemplates and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetAutocompleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetAutocompleteV2Response>> EzsigntemplateGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Ezsigntemplate list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetListV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateGetListV1Response> EzsigntemplateGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Ezsigntemplate list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetListV1Response>> EzsigntemplateGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsigntemplateGetObjectV1Response> EzsigntemplateGetObjectV1Async (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetObjectV1Response>> EzsigntemplateGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplateGetObjectV2Response> EzsigntemplateGetObjectV2Async (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplate
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetObjectV2Response>> EzsigntemplateGetObjectV2WithHttpInfoAsync (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplateApi : IObjectEzsigntemplateApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplateApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplateApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplateApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplateApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Copy the Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <returns>EzsigntemplateCopyV1Response</returns>
        public EzsigntemplateCopyV1Response EzsigntemplateCopyV1 (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request)
        {
             ApiResponse<EzsigntemplateCopyV1Response> localVarResponse = EzsigntemplateCopyV1WithHttpInfo(pkiEzsigntemplateID, ezsigntemplateCopyV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy the Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateCopyV1Response</returns>
        public ApiResponse<EzsigntemplateCopyV1Response> EzsigntemplateCopyV1WithHttpInfo (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateCopyV1");
            // verify the required parameter 'ezsigntemplateCopyV1Request' is set
            if (ezsigntemplateCopyV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateCopyV1Request' when calling ObjectEzsigntemplateApi->EzsigntemplateCopyV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter
            if (ezsigntemplateCopyV1Request != null && ezsigntemplateCopyV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateCopyV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateCopyV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateCopyV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateCopyV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateCopyV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateCopyV1Response)));
        }

        /// <summary>
        /// Copy the Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateCopyV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateCopyV1Response> EzsigntemplateCopyV1Async (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateCopyV1Response> localVarResponse = await EzsigntemplateCopyV1WithHttpInfoAsync(pkiEzsigntemplateID, ezsigntemplateCopyV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy the Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateCopyV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateCopyV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateCopyV1Response>> EzsigntemplateCopyV1WithHttpInfoAsync (int pkiEzsigntemplateID, EzsigntemplateCopyV1Request ezsigntemplateCopyV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateCopyV1");
            // verify the required parameter 'ezsigntemplateCopyV1Request' is set
            if (ezsigntemplateCopyV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateCopyV1Request' when calling ObjectEzsigntemplateApi->EzsigntemplateCopyV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter
            if (ezsigntemplateCopyV1Request != null && ezsigntemplateCopyV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateCopyV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateCopyV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateCopyV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateCopyV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateCopyV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateCopyV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplate The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <returns>EzsigntemplateCreateObjectV1Response</returns>
        public EzsigntemplateCreateObjectV1Response EzsigntemplateCreateObjectV1 (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request)
        {
             ApiResponse<EzsigntemplateCreateObjectV1Response> localVarResponse = EzsigntemplateCreateObjectV1WithHttpInfo(ezsigntemplateCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplate The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateCreateObjectV1Response</returns>
        public ApiResponse<EzsigntemplateCreateObjectV1Response> EzsigntemplateCreateObjectV1WithHttpInfo (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigntemplateCreateObjectV1Request' is set
            if (ezsigntemplateCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateCreateObjectV1Request' when calling ObjectEzsigntemplateApi->EzsigntemplateCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplateCreateObjectV1Request != null && ezsigntemplateCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplate The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateCreateObjectV1Response> EzsigntemplateCreateObjectV1Async (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateCreateObjectV1Response> localVarResponse = await EzsigntemplateCreateObjectV1WithHttpInfoAsync(ezsigntemplateCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigntemplate The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplateCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateCreateObjectV1Response>> EzsigntemplateCreateObjectV1WithHttpInfoAsync (EzsigntemplateCreateObjectV1Request ezsigntemplateCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigntemplateCreateObjectV1Request' is set
            if (ezsigntemplateCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateCreateObjectV1Request' when calling ObjectEzsigntemplateApi->EzsigntemplateCreateObjectV1");

            var localVarPath = "/1/object/ezsigntemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplateCreateObjectV1Request != null && ezsigntemplateCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>EzsigntemplateDeleteObjectV1Response</returns>
        public EzsigntemplateDeleteObjectV1Response EzsigntemplateDeleteObjectV1 (int pkiEzsigntemplateID)
        {
             ApiResponse<EzsigntemplateDeleteObjectV1Response> localVarResponse = EzsigntemplateDeleteObjectV1WithHttpInfo(pkiEzsigntemplateID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>ApiResponse of EzsigntemplateDeleteObjectV1Response</returns>
        public ApiResponse<EzsigntemplateDeleteObjectV1Response> EzsigntemplateDeleteObjectV1WithHttpInfo (int pkiEzsigntemplateID)
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateDeleteObjectV1Response> EzsigntemplateDeleteObjectV1Async (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateDeleteObjectV1Response> localVarResponse = await EzsigntemplateDeleteObjectV1WithHttpInfoAsync(pkiEzsigntemplateID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateDeleteObjectV1Response>> EzsigntemplateDeleteObjectV1WithHttpInfoAsync (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateDeleteObjectV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <returns>EzsigntemplateEditObjectV1Response</returns>
        public EzsigntemplateEditObjectV1Response EzsigntemplateEditObjectV1 (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request)
        {
             ApiResponse<EzsigntemplateEditObjectV1Response> localVarResponse = EzsigntemplateEditObjectV1WithHttpInfo(pkiEzsigntemplateID, ezsigntemplateEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplateEditObjectV1Response</returns>
        public ApiResponse<EzsigntemplateEditObjectV1Response> EzsigntemplateEditObjectV1WithHttpInfo (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateEditObjectV1");
            // verify the required parameter 'ezsigntemplateEditObjectV1Request' is set
            if (ezsigntemplateEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateEditObjectV1Request' when calling ObjectEzsigntemplateApi->EzsigntemplateEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter
            if (ezsigntemplateEditObjectV1Request != null && ezsigntemplateEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateEditObjectV1Response> EzsigntemplateEditObjectV1Async (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateEditObjectV1Response> localVarResponse = await EzsigntemplateEditObjectV1WithHttpInfoAsync(pkiEzsigntemplateID, ezsigntemplateEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="ezsigntemplateEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateEditObjectV1Response>> EzsigntemplateEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplateID, EzsigntemplateEditObjectV1Request ezsigntemplateEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateEditObjectV1");
            // verify the required parameter 'ezsigntemplateEditObjectV1Request' is set
            if (ezsigntemplateEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplateEditObjectV1Request' when calling ObjectEzsigntemplateApi->EzsigntemplateEditObjectV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter
            if (ezsigntemplateEditObjectV1Request != null && ezsigntemplateEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplateEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplateEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsigntemplate and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>CommonGetAutocompleteV1Response</returns>
        [Obsolete]
        public CommonGetAutocompleteV1Response EzsigntemplateGetAutocompleteV1 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?))
        {
             ApiResponse<CommonGetAutocompleteV1Response> localVarResponse = EzsigntemplateGetAutocompleteV1WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigntemplate and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of CommonGetAutocompleteV1Response</returns>
        [Obsolete]
        public ApiResponse<CommonGetAutocompleteV1Response> EzsigntemplateGetAutocompleteV1WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectEzsigntemplateApi->EzsigntemplateGetAutocompleteV1");

            var localVarPath = "/1/object/ezsigntemplate/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetAutocompleteV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommonGetAutocompleteV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommonGetAutocompleteV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommonGetAutocompleteV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsigntemplate and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CommonGetAutocompleteV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<CommonGetAutocompleteV1Response> EzsigntemplateGetAutocompleteV1Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CommonGetAutocompleteV1Response> localVarResponse = await EzsigntemplateGetAutocompleteV1WithHttpInfoAsync(sSelector, eFilterActive, sQuery, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Ezsigntemplate and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplate to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CommonGetAutocompleteV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<CommonGetAutocompleteV1Response>> EzsigntemplateGetAutocompleteV1WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectEzsigntemplateApi->EzsigntemplateGetAutocompleteV1");

            var localVarPath = "/1/object/ezsigntemplate/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetAutocompleteV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommonGetAutocompleteV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CommonGetAutocompleteV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommonGetAutocompleteV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsigntemplates and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>EzsigntemplateGetAutocompleteV2Response</returns>
        public EzsigntemplateGetAutocompleteV2Response EzsigntemplateGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?))
        {
             ApiResponse<EzsigntemplateGetAutocompleteV2Response> localVarResponse = EzsigntemplateGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigntemplates and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of EzsigntemplateGetAutocompleteV2Response</returns>
        public ApiResponse<EzsigntemplateGetAutocompleteV2Response> EzsigntemplateGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectEzsigntemplateApi->EzsigntemplateGetAutocompleteV2");

            var localVarPath = "/2/object/ezsigntemplate/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Ezsigntemplates and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetAutocompleteV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateGetAutocompleteV2Response> EzsigntemplateGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateGetAutocompleteV2Response> localVarResponse = await EzsigntemplateGetAutocompleteV2WithHttpInfoAsync(sSelector, eFilterActive, sQuery, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Ezsigntemplates and IDs Get the list of Ezsigntemplate to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Ezsigntemplates to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetAutocompleteV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetAutocompleteV2Response>> EzsigntemplateGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectEzsigntemplateApi->EzsigntemplateGetAutocompleteV2");

            var localVarPath = "/2/object/ezsigntemplate/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Ezsigntemplate list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>EzsigntemplateGetListV1Response</returns>
        public EzsigntemplateGetListV1Response EzsigntemplateGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {
             ApiResponse<EzsigntemplateGetListV1Response> localVarResponse = EzsigntemplateGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsigntemplate list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of EzsigntemplateGetListV1Response</returns>
        public ApiResponse<EzsigntemplateGetListV1Response> EzsigntemplateGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {

            var localVarPath = "/1/object/ezsigntemplate/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsigntemplate list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateGetListV1Response> EzsigntemplateGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateGetListV1Response> localVarResponse = await EzsigntemplateGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Ezsigntemplate list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsigntemplateType | Company<br>Team<br>User<br>Usergroup | 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetListV1Response>> EzsigntemplateGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/1/object/ezsigntemplate/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>EzsigntemplateGetObjectV1Response</returns>
        [Obsolete]
        public EzsigntemplateGetObjectV1Response EzsigntemplateGetObjectV1 (int pkiEzsigntemplateID)
        {
             ApiResponse<EzsigntemplateGetObjectV1Response> localVarResponse = EzsigntemplateGetObjectV1WithHttpInfo(pkiEzsigntemplateID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>ApiResponse of EzsigntemplateGetObjectV1Response</returns>
        [Obsolete]
        public ApiResponse<EzsigntemplateGetObjectV1Response> EzsigntemplateGetObjectV1WithHttpInfo (int pkiEzsigntemplateID)
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsigntemplateGetObjectV1Response> EzsigntemplateGetObjectV1Async (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateGetObjectV1Response> localVarResponse = await EzsigntemplateGetObjectV1WithHttpInfoAsync(pkiEzsigntemplateID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetObjectV1Response>> EzsigntemplateGetObjectV1WithHttpInfoAsync (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateGetObjectV1");

            var localVarPath = "/1/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>EzsigntemplateGetObjectV2Response</returns>
        public EzsigntemplateGetObjectV2Response EzsigntemplateGetObjectV2 (int pkiEzsigntemplateID)
        {
             ApiResponse<EzsigntemplateGetObjectV2Response> localVarResponse = EzsigntemplateGetObjectV2WithHttpInfo(pkiEzsigntemplateID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <returns>ApiResponse of EzsigntemplateGetObjectV2Response</returns>
        public ApiResponse<EzsigntemplateGetObjectV2Response> EzsigntemplateGetObjectV2WithHttpInfo (int pkiEzsigntemplateID)
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateGetObjectV2");

            var localVarPath = "/2/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplateGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplateGetObjectV2Response> EzsigntemplateGetObjectV2Async (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplateGetObjectV2Response> localVarResponse = await EzsigntemplateGetObjectV2WithHttpInfoAsync(pkiEzsigntemplateID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplate 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplateID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplateGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplateGetObjectV2Response>> EzsigntemplateGetObjectV2WithHttpInfoAsync (int pkiEzsigntemplateID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplateID' is set
            if (pkiEzsigntemplateID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplateID' when calling ObjectEzsigntemplateApi->EzsigntemplateGetObjectV2");

            var localVarPath = "/2/object/ezsigntemplate/{pkiEzsigntemplateID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplateID != null) localVarPathParams.Add("pkiEzsigntemplateID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplateID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplateGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplateGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigntemplateGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplateGetObjectV2Response)));
        }

    }
}
