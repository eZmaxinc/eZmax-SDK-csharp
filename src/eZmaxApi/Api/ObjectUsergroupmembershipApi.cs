/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectUsergroupmembershipApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Usergroupmembership
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <returns>UsergroupmembershipCreateObjectV1Response</returns>
        UsergroupmembershipCreateObjectV1Response UsergroupmembershipCreateObjectV1 (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request);

        /// <summary>
        /// Create a new Usergroupmembership
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupmembershipCreateObjectV1Response</returns>
        ApiResponse<UsergroupmembershipCreateObjectV1Response> UsergroupmembershipCreateObjectV1WithHttpInfo (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>UsergroupmembershipDeleteObjectV1Response</returns>
        UsergroupmembershipDeleteObjectV1Response UsergroupmembershipDeleteObjectV1 (int pkiUsergroupmembershipID);

        /// <summary>
        /// Delete an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>ApiResponse of UsergroupmembershipDeleteObjectV1Response</returns>
        ApiResponse<UsergroupmembershipDeleteObjectV1Response> UsergroupmembershipDeleteObjectV1WithHttpInfo (int pkiUsergroupmembershipID);
        /// <summary>
        /// Edit an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <returns>UsergroupmembershipEditObjectV1Response</returns>
        UsergroupmembershipEditObjectV1Response UsergroupmembershipEditObjectV1 (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request);

        /// <summary>
        /// Edit an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupmembershipEditObjectV1Response</returns>
        ApiResponse<UsergroupmembershipEditObjectV1Response> UsergroupmembershipEditObjectV1WithHttpInfo (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>UsergroupmembershipGetObjectV2Response</returns>
        UsergroupmembershipGetObjectV2Response UsergroupmembershipGetObjectV2 (int pkiUsergroupmembershipID);

        /// <summary>
        /// Retrieve an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>ApiResponse of UsergroupmembershipGetObjectV2Response</returns>
        ApiResponse<UsergroupmembershipGetObjectV2Response> UsergroupmembershipGetObjectV2WithHttpInfo (int pkiUsergroupmembershipID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Usergroupmembership
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupmembershipCreateObjectV1Response> UsergroupmembershipCreateObjectV1Async (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Usergroupmembership
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipCreateObjectV1Response>> UsergroupmembershipCreateObjectV1WithHttpInfoAsync (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupmembershipDeleteObjectV1Response> UsergroupmembershipDeleteObjectV1Async (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipDeleteObjectV1Response>> UsergroupmembershipDeleteObjectV1WithHttpInfoAsync (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipEditObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupmembershipEditObjectV1Response> UsergroupmembershipEditObjectV1Async (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipEditObjectV1Response>> UsergroupmembershipEditObjectV1WithHttpInfoAsync (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipGetObjectV2Response</returns>
        System.Threading.Tasks.Task<UsergroupmembershipGetObjectV2Response> UsergroupmembershipGetObjectV2Async (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroupmembership
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipGetObjectV2Response>> UsergroupmembershipGetObjectV2WithHttpInfoAsync (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectUsergroupmembershipApi : IObjectUsergroupmembershipApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupmembershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectUsergroupmembershipApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupmembershipApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectUsergroupmembershipApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupmembershipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectUsergroupmembershipApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Usergroupmembership The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <returns>UsergroupmembershipCreateObjectV1Response</returns>
        public UsergroupmembershipCreateObjectV1Response UsergroupmembershipCreateObjectV1 (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request)
        {
             ApiResponse<UsergroupmembershipCreateObjectV1Response> localVarResponse = UsergroupmembershipCreateObjectV1WithHttpInfo(usergroupmembershipCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Usergroupmembership The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupmembershipCreateObjectV1Response</returns>
        public ApiResponse<UsergroupmembershipCreateObjectV1Response> UsergroupmembershipCreateObjectV1WithHttpInfo (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request)
        {
            // verify the required parameter 'usergroupmembershipCreateObjectV1Request' is set
            if (usergroupmembershipCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupmembershipCreateObjectV1Request' when calling ObjectUsergroupmembershipApi->UsergroupmembershipCreateObjectV1");

            var localVarPath = "./1/object/usergroupmembership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usergroupmembershipCreateObjectV1Request != null && usergroupmembershipCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupmembershipCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupmembershipCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Usergroupmembership The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupmembershipCreateObjectV1Response> UsergroupmembershipCreateObjectV1Async (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupmembershipCreateObjectV1Response> localVarResponse = await UsergroupmembershipCreateObjectV1WithHttpInfoAsync(usergroupmembershipCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Usergroupmembership The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupmembershipCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipCreateObjectV1Response>> UsergroupmembershipCreateObjectV1WithHttpInfoAsync (UsergroupmembershipCreateObjectV1Request usergroupmembershipCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'usergroupmembershipCreateObjectV1Request' is set
            if (usergroupmembershipCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupmembershipCreateObjectV1Request' when calling ObjectUsergroupmembershipApi->UsergroupmembershipCreateObjectV1");

            var localVarPath = "./1/object/usergroupmembership";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usergroupmembershipCreateObjectV1Request != null && usergroupmembershipCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupmembershipCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupmembershipCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>UsergroupmembershipDeleteObjectV1Response</returns>
        public UsergroupmembershipDeleteObjectV1Response UsergroupmembershipDeleteObjectV1 (int pkiUsergroupmembershipID)
        {
             ApiResponse<UsergroupmembershipDeleteObjectV1Response> localVarResponse = UsergroupmembershipDeleteObjectV1WithHttpInfo(pkiUsergroupmembershipID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>ApiResponse of UsergroupmembershipDeleteObjectV1Response</returns>
        public ApiResponse<UsergroupmembershipDeleteObjectV1Response> UsergroupmembershipDeleteObjectV1WithHttpInfo (int pkiUsergroupmembershipID)
        {
            // verify the required parameter 'pkiUsergroupmembershipID' is set
            if (pkiUsergroupmembershipID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupmembershipID' when calling ObjectUsergroupmembershipApi->UsergroupmembershipDeleteObjectV1");

            var localVarPath = "./1/object/usergroupmembership/{pkiUsergroupmembershipID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupmembershipID != null) localVarPathParams.Add("pkiUsergroupmembershipID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupmembershipID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupmembershipDeleteObjectV1Response> UsergroupmembershipDeleteObjectV1Async (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupmembershipDeleteObjectV1Response> localVarResponse = await UsergroupmembershipDeleteObjectV1WithHttpInfoAsync(pkiUsergroupmembershipID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipDeleteObjectV1Response>> UsergroupmembershipDeleteObjectV1WithHttpInfoAsync (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupmembershipID' is set
            if (pkiUsergroupmembershipID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupmembershipID' when calling ObjectUsergroupmembershipApi->UsergroupmembershipDeleteObjectV1");

            var localVarPath = "./1/object/usergroupmembership/{pkiUsergroupmembershipID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupmembershipID != null) localVarPathParams.Add("pkiUsergroupmembershipID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupmembershipID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <returns>UsergroupmembershipEditObjectV1Response</returns>
        public UsergroupmembershipEditObjectV1Response UsergroupmembershipEditObjectV1 (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request)
        {
             ApiResponse<UsergroupmembershipEditObjectV1Response> localVarResponse = UsergroupmembershipEditObjectV1WithHttpInfo(pkiUsergroupmembershipID, usergroupmembershipEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupmembershipEditObjectV1Response</returns>
        public ApiResponse<UsergroupmembershipEditObjectV1Response> UsergroupmembershipEditObjectV1WithHttpInfo (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request)
        {
            // verify the required parameter 'pkiUsergroupmembershipID' is set
            if (pkiUsergroupmembershipID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupmembershipID' when calling ObjectUsergroupmembershipApi->UsergroupmembershipEditObjectV1");
            // verify the required parameter 'usergroupmembershipEditObjectV1Request' is set
            if (usergroupmembershipEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupmembershipEditObjectV1Request' when calling ObjectUsergroupmembershipApi->UsergroupmembershipEditObjectV1");

            var localVarPath = "./1/object/usergroupmembership/{pkiUsergroupmembershipID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupmembershipID != null) localVarPathParams.Add("pkiUsergroupmembershipID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupmembershipID)); // path parameter
            if (usergroupmembershipEditObjectV1Request != null && usergroupmembershipEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupmembershipEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupmembershipEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupmembershipEditObjectV1Response> UsergroupmembershipEditObjectV1Async (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupmembershipEditObjectV1Response> localVarResponse = await UsergroupmembershipEditObjectV1WithHttpInfoAsync(pkiUsergroupmembershipID, usergroupmembershipEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="usergroupmembershipEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipEditObjectV1Response>> UsergroupmembershipEditObjectV1WithHttpInfoAsync (int pkiUsergroupmembershipID, UsergroupmembershipEditObjectV1Request usergroupmembershipEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupmembershipID' is set
            if (pkiUsergroupmembershipID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupmembershipID' when calling ObjectUsergroupmembershipApi->UsergroupmembershipEditObjectV1");
            // verify the required parameter 'usergroupmembershipEditObjectV1Request' is set
            if (usergroupmembershipEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupmembershipEditObjectV1Request' when calling ObjectUsergroupmembershipApi->UsergroupmembershipEditObjectV1");

            var localVarPath = "./1/object/usergroupmembership/{pkiUsergroupmembershipID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupmembershipID != null) localVarPathParams.Add("pkiUsergroupmembershipID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupmembershipID)); // path parameter
            if (usergroupmembershipEditObjectV1Request != null && usergroupmembershipEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupmembershipEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupmembershipEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>UsergroupmembershipGetObjectV2Response</returns>
        public UsergroupmembershipGetObjectV2Response UsergroupmembershipGetObjectV2 (int pkiUsergroupmembershipID)
        {
             ApiResponse<UsergroupmembershipGetObjectV2Response> localVarResponse = UsergroupmembershipGetObjectV2WithHttpInfo(pkiUsergroupmembershipID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <returns>ApiResponse of UsergroupmembershipGetObjectV2Response</returns>
        public ApiResponse<UsergroupmembershipGetObjectV2Response> UsergroupmembershipGetObjectV2WithHttpInfo (int pkiUsergroupmembershipID)
        {
            // verify the required parameter 'pkiUsergroupmembershipID' is set
            if (pkiUsergroupmembershipID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupmembershipID' when calling ObjectUsergroupmembershipApi->UsergroupmembershipGetObjectV2");

            var localVarPath = "./2/object/usergroupmembership/{pkiUsergroupmembershipID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupmembershipID != null) localVarPathParams.Add("pkiUsergroupmembershipID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupmembershipID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupmembershipGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<UsergroupmembershipGetObjectV2Response> UsergroupmembershipGetObjectV2Async (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupmembershipGetObjectV2Response> localVarResponse = await UsergroupmembershipGetObjectV2WithHttpInfoAsync(pkiUsergroupmembershipID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroupmembership 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupmembershipID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupmembershipGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupmembershipGetObjectV2Response>> UsergroupmembershipGetObjectV2WithHttpInfoAsync (int pkiUsergroupmembershipID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupmembershipID' is set
            if (pkiUsergroupmembershipID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupmembershipID' when calling ObjectUsergroupmembershipApi->UsergroupmembershipGetObjectV2");

            var localVarPath = "./2/object/usergroupmembership/{pkiUsergroupmembershipID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupmembershipID != null) localVarPathParams.Add("pkiUsergroupmembershipID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupmembershipID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupmembershipGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupmembershipGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupmembershipGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupmembershipGetObjectV2Response)));
        }

    }
}
