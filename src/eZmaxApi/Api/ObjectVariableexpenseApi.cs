/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectVariableexpenseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Variableexpense
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <returns>VariableexpenseCreateObjectV1Response</returns>
        VariableexpenseCreateObjectV1Response VariableexpenseCreateObjectV1 (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request);

        /// <summary>
        /// Create a new Variableexpense
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <returns>ApiResponse of VariableexpenseCreateObjectV1Response</returns>
        ApiResponse<VariableexpenseCreateObjectV1Response> VariableexpenseCreateObjectV1WithHttpInfo (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>VariableexpenseDeleteObjectV1Response</returns>
        VariableexpenseDeleteObjectV1Response VariableexpenseDeleteObjectV1 (int pkiVariableexpenseID);

        /// <summary>
        /// Delete an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>ApiResponse of VariableexpenseDeleteObjectV1Response</returns>
        ApiResponse<VariableexpenseDeleteObjectV1Response> VariableexpenseDeleteObjectV1WithHttpInfo (int pkiVariableexpenseID);
        /// <summary>
        /// Edit an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <returns>VariableexpenseEditObjectV1Response</returns>
        VariableexpenseEditObjectV1Response VariableexpenseEditObjectV1 (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request);

        /// <summary>
        /// Edit an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <returns>ApiResponse of VariableexpenseEditObjectV1Response</returns>
        ApiResponse<VariableexpenseEditObjectV1Response> VariableexpenseEditObjectV1WithHttpInfo (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request);
        /// <summary>
        /// Retrieve Variableexpenses and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>VariableexpenseGetAutocompleteV2Response</returns>
        VariableexpenseGetAutocompleteV2Response VariableexpenseGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?));

        /// <summary>
        /// Retrieve Variableexpenses and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of VariableexpenseGetAutocompleteV2Response</returns>
        ApiResponse<VariableexpenseGetAutocompleteV2Response> VariableexpenseGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?));
        /// <summary>
        /// Retrieve Variableexpense list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>VariableexpenseGetListV1Response</returns>
        VariableexpenseGetListV1Response VariableexpenseGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));

        /// <summary>
        /// Retrieve Variableexpense list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of VariableexpenseGetListV1Response</returns>
        ApiResponse<VariableexpenseGetListV1Response> VariableexpenseGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>VariableexpenseGetObjectV2Response</returns>
        VariableexpenseGetObjectV2Response VariableexpenseGetObjectV2 (int pkiVariableexpenseID);

        /// <summary>
        /// Retrieve an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>ApiResponse of VariableexpenseGetObjectV2Response</returns>
        ApiResponse<VariableexpenseGetObjectV2Response> VariableexpenseGetObjectV2WithHttpInfo (int pkiVariableexpenseID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Variableexpense
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<VariableexpenseCreateObjectV1Response> VariableexpenseCreateObjectV1Async (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Variableexpense
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableexpenseCreateObjectV1Response>> VariableexpenseCreateObjectV1WithHttpInfoAsync (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<VariableexpenseDeleteObjectV1Response> VariableexpenseDeleteObjectV1Async (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableexpenseDeleteObjectV1Response>> VariableexpenseDeleteObjectV1WithHttpInfoAsync (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseEditObjectV1Response</returns>
        System.Threading.Tasks.Task<VariableexpenseEditObjectV1Response> VariableexpenseEditObjectV1Async (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableexpenseEditObjectV1Response>> VariableexpenseEditObjectV1WithHttpInfoAsync (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Variableexpenses and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseGetAutocompleteV2Response</returns>
        System.Threading.Tasks.Task<VariableexpenseGetAutocompleteV2Response> VariableexpenseGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Variableexpenses and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseGetAutocompleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableexpenseGetAutocompleteV2Response>> VariableexpenseGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Variableexpense list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseGetListV1Response</returns>
        System.Threading.Tasks.Task<VariableexpenseGetListV1Response> VariableexpenseGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Variableexpense list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableexpenseGetListV1Response>> VariableexpenseGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseGetObjectV2Response</returns>
        System.Threading.Tasks.Task<VariableexpenseGetObjectV2Response> VariableexpenseGetObjectV2Async (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Variableexpense
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableexpenseGetObjectV2Response>> VariableexpenseGetObjectV2WithHttpInfoAsync (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectVariableexpenseApi : IObjectVariableexpenseApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectVariableexpenseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectVariableexpenseApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectVariableexpenseApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectVariableexpenseApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectVariableexpenseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectVariableexpenseApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Variableexpense The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <returns>VariableexpenseCreateObjectV1Response</returns>
        public VariableexpenseCreateObjectV1Response VariableexpenseCreateObjectV1 (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request)
        {
             ApiResponse<VariableexpenseCreateObjectV1Response> localVarResponse = VariableexpenseCreateObjectV1WithHttpInfo(variableexpenseCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Variableexpense The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <returns>ApiResponse of VariableexpenseCreateObjectV1Response</returns>
        public ApiResponse<VariableexpenseCreateObjectV1Response> VariableexpenseCreateObjectV1WithHttpInfo (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request)
        {
            // verify the required parameter 'variableexpenseCreateObjectV1Request' is set
            if (variableexpenseCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'variableexpenseCreateObjectV1Request' when calling ObjectVariableexpenseApi->VariableexpenseCreateObjectV1");

            var localVarPath = "/1/object/variableexpense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableexpenseCreateObjectV1Request != null && variableexpenseCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableexpenseCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableexpenseCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Variableexpense The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<VariableexpenseCreateObjectV1Response> VariableexpenseCreateObjectV1Async (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VariableexpenseCreateObjectV1Response> localVarResponse = await VariableexpenseCreateObjectV1WithHttpInfoAsync(variableexpenseCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Variableexpense The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableexpenseCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableexpenseCreateObjectV1Response>> VariableexpenseCreateObjectV1WithHttpInfoAsync (VariableexpenseCreateObjectV1Request variableexpenseCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'variableexpenseCreateObjectV1Request' is set
            if (variableexpenseCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'variableexpenseCreateObjectV1Request' when calling ObjectVariableexpenseApi->VariableexpenseCreateObjectV1");

            var localVarPath = "/1/object/variableexpense";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (variableexpenseCreateObjectV1Request != null && variableexpenseCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableexpenseCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableexpenseCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>VariableexpenseDeleteObjectV1Response</returns>
        public VariableexpenseDeleteObjectV1Response VariableexpenseDeleteObjectV1 (int pkiVariableexpenseID)
        {
             ApiResponse<VariableexpenseDeleteObjectV1Response> localVarResponse = VariableexpenseDeleteObjectV1WithHttpInfo(pkiVariableexpenseID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>ApiResponse of VariableexpenseDeleteObjectV1Response</returns>
        public ApiResponse<VariableexpenseDeleteObjectV1Response> VariableexpenseDeleteObjectV1WithHttpInfo (int pkiVariableexpenseID)
        {
            // verify the required parameter 'pkiVariableexpenseID' is set
            if (pkiVariableexpenseID == null)
                throw new ApiException(400, "Missing required parameter 'pkiVariableexpenseID' when calling ObjectVariableexpenseApi->VariableexpenseDeleteObjectV1");

            var localVarPath = "/1/object/variableexpense/{pkiVariableexpenseID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiVariableexpenseID != null) localVarPathParams.Add("pkiVariableexpenseID", this.Configuration.ApiClient.ParameterToString(pkiVariableexpenseID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<VariableexpenseDeleteObjectV1Response> VariableexpenseDeleteObjectV1Async (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VariableexpenseDeleteObjectV1Response> localVarResponse = await VariableexpenseDeleteObjectV1WithHttpInfoAsync(pkiVariableexpenseID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableexpenseDeleteObjectV1Response>> VariableexpenseDeleteObjectV1WithHttpInfoAsync (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiVariableexpenseID' is set
            if (pkiVariableexpenseID == null)
                throw new ApiException(400, "Missing required parameter 'pkiVariableexpenseID' when calling ObjectVariableexpenseApi->VariableexpenseDeleteObjectV1");

            var localVarPath = "/1/object/variableexpense/{pkiVariableexpenseID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiVariableexpenseID != null) localVarPathParams.Add("pkiVariableexpenseID", this.Configuration.ApiClient.ParameterToString(pkiVariableexpenseID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <returns>VariableexpenseEditObjectV1Response</returns>
        public VariableexpenseEditObjectV1Response VariableexpenseEditObjectV1 (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request)
        {
             ApiResponse<VariableexpenseEditObjectV1Response> localVarResponse = VariableexpenseEditObjectV1WithHttpInfo(pkiVariableexpenseID, variableexpenseEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <returns>ApiResponse of VariableexpenseEditObjectV1Response</returns>
        public ApiResponse<VariableexpenseEditObjectV1Response> VariableexpenseEditObjectV1WithHttpInfo (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request)
        {
            // verify the required parameter 'pkiVariableexpenseID' is set
            if (pkiVariableexpenseID == null)
                throw new ApiException(400, "Missing required parameter 'pkiVariableexpenseID' when calling ObjectVariableexpenseApi->VariableexpenseEditObjectV1");
            // verify the required parameter 'variableexpenseEditObjectV1Request' is set
            if (variableexpenseEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'variableexpenseEditObjectV1Request' when calling ObjectVariableexpenseApi->VariableexpenseEditObjectV1");

            var localVarPath = "/1/object/variableexpense/{pkiVariableexpenseID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiVariableexpenseID != null) localVarPathParams.Add("pkiVariableexpenseID", this.Configuration.ApiClient.ParameterToString(pkiVariableexpenseID)); // path parameter
            if (variableexpenseEditObjectV1Request != null && variableexpenseEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableexpenseEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableexpenseEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<VariableexpenseEditObjectV1Response> VariableexpenseEditObjectV1Async (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VariableexpenseEditObjectV1Response> localVarResponse = await VariableexpenseEditObjectV1WithHttpInfoAsync(pkiVariableexpenseID, variableexpenseEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="variableexpenseEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableexpenseEditObjectV1Response>> VariableexpenseEditObjectV1WithHttpInfoAsync (int pkiVariableexpenseID, VariableexpenseEditObjectV1Request variableexpenseEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiVariableexpenseID' is set
            if (pkiVariableexpenseID == null)
                throw new ApiException(400, "Missing required parameter 'pkiVariableexpenseID' when calling ObjectVariableexpenseApi->VariableexpenseEditObjectV1");
            // verify the required parameter 'variableexpenseEditObjectV1Request' is set
            if (variableexpenseEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'variableexpenseEditObjectV1Request' when calling ObjectVariableexpenseApi->VariableexpenseEditObjectV1");

            var localVarPath = "/1/object/variableexpense/{pkiVariableexpenseID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiVariableexpenseID != null) localVarPathParams.Add("pkiVariableexpenseID", this.Configuration.ApiClient.ParameterToString(pkiVariableexpenseID)); // path parameter
            if (variableexpenseEditObjectV1Request != null && variableexpenseEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableexpenseEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableexpenseEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve Variableexpenses and IDs Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>VariableexpenseGetAutocompleteV2Response</returns>
        public VariableexpenseGetAutocompleteV2Response VariableexpenseGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?))
        {
             ApiResponse<VariableexpenseGetAutocompleteV2Response> localVarResponse = VariableexpenseGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Variableexpenses and IDs Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of VariableexpenseGetAutocompleteV2Response</returns>
        public ApiResponse<VariableexpenseGetAutocompleteV2Response> VariableexpenseGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectVariableexpenseApi->VariableexpenseGetAutocompleteV2");

            var localVarPath = "/2/object/variableexpense/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Variableexpenses and IDs Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseGetAutocompleteV2Response</returns>
        public async System.Threading.Tasks.Task<VariableexpenseGetAutocompleteV2Response> VariableexpenseGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VariableexpenseGetAutocompleteV2Response> localVarResponse = await VariableexpenseGetAutocompleteV2WithHttpInfoAsync(sSelector, eFilterActive, sQuery, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Variableexpenses and IDs Get the list of Variableexpense to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Variableexpenses to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseGetAutocompleteV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableexpenseGetAutocompleteV2Response>> VariableexpenseGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectVariableexpenseApi->VariableexpenseGetAutocompleteV2");

            var localVarPath = "/2/object/variableexpense/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Variableexpense list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>VariableexpenseGetListV1Response</returns>
        public VariableexpenseGetListV1Response VariableexpenseGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {
             ApiResponse<VariableexpenseGetListV1Response> localVarResponse = VariableexpenseGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Variableexpense list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of VariableexpenseGetListV1Response</returns>
        public ApiResponse<VariableexpenseGetListV1Response> VariableexpenseGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {

            var localVarPath = "/1/object/variableexpense/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Variableexpense list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseGetListV1Response</returns>
        public async System.Threading.Tasks.Task<VariableexpenseGetListV1Response> VariableexpenseGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VariableexpenseGetListV1Response> localVarResponse = await VariableexpenseGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Variableexpense list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eVariableexpenseTaxable | Yes<br>No<br>Included |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableexpenseGetListV1Response>> VariableexpenseGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/1/object/variableexpense/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>VariableexpenseGetObjectV2Response</returns>
        public VariableexpenseGetObjectV2Response VariableexpenseGetObjectV2 (int pkiVariableexpenseID)
        {
             ApiResponse<VariableexpenseGetObjectV2Response> localVarResponse = VariableexpenseGetObjectV2WithHttpInfo(pkiVariableexpenseID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <returns>ApiResponse of VariableexpenseGetObjectV2Response</returns>
        public ApiResponse<VariableexpenseGetObjectV2Response> VariableexpenseGetObjectV2WithHttpInfo (int pkiVariableexpenseID)
        {
            // verify the required parameter 'pkiVariableexpenseID' is set
            if (pkiVariableexpenseID == null)
                throw new ApiException(400, "Missing required parameter 'pkiVariableexpenseID' when calling ObjectVariableexpenseApi->VariableexpenseGetObjectV2");

            var localVarPath = "/2/object/variableexpense/{pkiVariableexpenseID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiVariableexpenseID != null) localVarPathParams.Add("pkiVariableexpenseID", this.Configuration.ApiClient.ParameterToString(pkiVariableexpenseID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VariableexpenseGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<VariableexpenseGetObjectV2Response> VariableexpenseGetObjectV2Async (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VariableexpenseGetObjectV2Response> localVarResponse = await VariableexpenseGetObjectV2WithHttpInfoAsync(pkiVariableexpenseID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Variableexpense 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VariableexpenseGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableexpenseGetObjectV2Response>> VariableexpenseGetObjectV2WithHttpInfoAsync (int pkiVariableexpenseID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiVariableexpenseID' is set
            if (pkiVariableexpenseID == null)
                throw new ApiException(400, "Missing required parameter 'pkiVariableexpenseID' when calling ObjectVariableexpenseApi->VariableexpenseGetObjectV2");

            var localVarPath = "/2/object/variableexpense/{pkiVariableexpenseID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiVariableexpenseID != null) localVarPathParams.Add("pkiVariableexpenseID", this.Configuration.ApiClient.ParameterToString(pkiVariableexpenseID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableexpenseGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableexpenseGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VariableexpenseGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableexpenseGetObjectV2Response)));
        }

    }
}
