/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatedocumentCreateObjectV1Response</returns>
        EzsigntemplatedocumentCreateObjectV1Response EzsigntemplatedocumentCreateObjectV1 (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1WithHttpInfo (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request);
        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request);

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request);
        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response EzsigntemplatedocumentEditEzsigntemplatesignaturesV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request);

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request);
        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <returns>EzsigntemplatedocumentEditObjectV1Response</returns>
        EzsigntemplatedocumentEditObjectV1Response EzsigntemplatedocumentEditObjectV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request);
        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <returns>EzsigntemplatedocumentFlattenV1Response</returns>
        EzsigntemplatedocumentFlattenV1Response EzsigntemplatedocumentFlattenV1 (int pkiEzsigntemplatedocumentID, Object body);

        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentFlattenV1Response</returns>
        ApiResponse<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1WithHttpInfo (int pkiEzsigntemplatedocumentID, Object body);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1 (int pkiEzsigntemplatedocumentID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo (int pkiEzsigntemplatedocumentID);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1 (int pkiEzsigntemplatedocumentID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo (int pkiEzsigntemplatedocumentID);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response EzsigntemplatedocumentGetEzsigntemplatesignaturesV1 (int pkiEzsigntemplatedocumentID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo (int pkiEzsigntemplatedocumentID);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetObjectV2Response</returns>
        EzsigntemplatedocumentGetObjectV2Response EzsigntemplatedocumentGetObjectV2 (int pkiEzsigntemplatedocumentID);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetObjectV2Response</returns>
        ApiResponse<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2WithHttpInfo (int pkiEzsigntemplatedocumentID);
        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <returns>EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        EzsigntemplatedocumentGetWordsPositionsV1Response EzsigntemplatedocumentGetWordsPositionsV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request);

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request);
        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <returns>EzsigntemplatedocumentPatchObjectV1Response</returns>
        EzsigntemplatedocumentPatchObjectV1Response EzsigntemplatedocumentPatchObjectV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request);

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentPatchObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1Async (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentCreateObjectV1Response>> EzsigntemplatedocumentCreateObjectV1WithHttpInfoAsync (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditObjectV1Response>> EzsigntemplatedocumentEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentFlattenV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1Async (int pkiEzsigntemplatedocumentID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentFlattenV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentFlattenV1Response>> EzsigntemplatedocumentFlattenV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetObjectV2Response>> EzsigntemplatedocumentGetObjectV2WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetWordsPositionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response>> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentPatchObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentPatchObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentPatchObjectV1Response>> EzsigntemplatedocumentPatchObjectV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatedocumentApi : IObjectEzsigntemplatedocumentApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <returns>EzsigntemplatedocumentCreateObjectV1Response</returns>
        public EzsigntemplatedocumentCreateObjectV1Response EzsigntemplatedocumentCreateObjectV1 (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request)
        {
             ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> localVarResponse = EzsigntemplatedocumentCreateObjectV1WithHttpInfo(ezsigntemplatedocumentCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentCreateObjectV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1WithHttpInfo (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
            if (ezsigntemplatedocumentCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentCreateObjectV1");

            var localVarPath = "./1/object/ezsigntemplatedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatedocumentCreateObjectV1Request != null && ezsigntemplatedocumentCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1Async (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> localVarResponse = await EzsigntemplatedocumentCreateObjectV1WithHttpInfoAsync(ezsigntemplatedocumentCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentCreateObjectV1Response>> EzsigntemplatedocumentCreateObjectV1WithHttpInfoAsync (EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
            if (ezsigntemplatedocumentCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentCreateObjectV1");

            var localVarPath = "./1/object/ezsigntemplatedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigntemplatedocumentCreateObjectV1Request != null && ezsigntemplatedocumentCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentCreateObjectV1Response)));
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        public EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request)
        {
             ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> localVarResponse = EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1");
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request != null && ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response)));
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> localVarResponse = await EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1");
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request != null && ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response)));
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        public EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response EzsigntemplatedocumentEditEzsigntemplatesignaturesV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request)
        {
             ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> localVarResponse = EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplatesignaturesV1");
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplatesignaturesV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request != null && ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplatesignaturesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response)));
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> localVarResponse = await EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplatesignaturesV1");
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplatesignaturesV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request != null && ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplatesignaturesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <returns>EzsigntemplatedocumentEditObjectV1Response</returns>
        public EzsigntemplatedocumentEditObjectV1Response EzsigntemplatedocumentEditObjectV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request)
        {
             ApiResponse<EzsigntemplatedocumentEditObjectV1Response> localVarResponse = EzsigntemplatedocumentEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditObjectV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditObjectV1");
            // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
            if (ezsigntemplatedocumentEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditObjectV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentEditObjectV1Request != null && ezsigntemplatedocumentEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentEditObjectV1Response> localVarResponse = await EzsigntemplatedocumentEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditObjectV1Response>> EzsigntemplatedocumentEditObjectV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditObjectV1");
            // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
            if (ezsigntemplatedocumentEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditObjectV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentEditObjectV1Request != null && ezsigntemplatedocumentEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentEditObjectV1Response)));
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <returns>EzsigntemplatedocumentFlattenV1Response</returns>
        public EzsigntemplatedocumentFlattenV1Response EzsigntemplatedocumentFlattenV1 (int pkiEzsigntemplatedocumentID, Object body)
        {
             ApiResponse<EzsigntemplatedocumentFlattenV1Response> localVarResponse = EzsigntemplatedocumentFlattenV1WithHttpInfo(pkiEzsigntemplatedocumentID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentFlattenV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1WithHttpInfo (int pkiEzsigntemplatedocumentID, Object body)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentFlattenV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentFlattenV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentFlattenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentFlattenV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentFlattenV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentFlattenV1Response)));
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentFlattenV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1Async (int pkiEzsigntemplatedocumentID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentFlattenV1Response> localVarResponse = await EzsigntemplatedocumentFlattenV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentFlattenV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentFlattenV1Response>> EzsigntemplatedocumentFlattenV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentFlattenV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentFlattenV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentFlattenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentFlattenV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentFlattenV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentFlattenV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        public EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1 (int pkiEzsigntemplatedocumentID)
        {
             ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> localVarResponse = EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(pkiEzsigntemplatedocumentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo (int pkiEzsigntemplatedocumentID)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> localVarResponse = await EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        public EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1 (int pkiEzsigntemplatedocumentID)
        {
             ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> localVarResponse = EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo (int pkiEzsigntemplatedocumentID)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> localVarResponse = await EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        public EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response EzsigntemplatedocumentGetEzsigntemplatesignaturesV1 (int pkiEzsigntemplatedocumentID)
        {
             ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> localVarResponse = EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo (int pkiEzsigntemplatedocumentID)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetEzsigntemplatesignaturesV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatesignaturesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> localVarResponse = await EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetEzsigntemplatesignaturesV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatesignaturesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>EzsigntemplatedocumentGetObjectV2Response</returns>
        public EzsigntemplatedocumentGetObjectV2Response EzsigntemplatedocumentGetObjectV2 (int pkiEzsigntemplatedocumentID)
        {
             ApiResponse<EzsigntemplatedocumentGetObjectV2Response> localVarResponse = EzsigntemplatedocumentGetObjectV2WithHttpInfo(pkiEzsigntemplatedocumentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetObjectV2Response</returns>
        public ApiResponse<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2WithHttpInfo (int pkiEzsigntemplatedocumentID)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetObjectV2");

            var localVarPath = "./2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2Async (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentGetObjectV2Response> localVarResponse = await EzsigntemplatedocumentGetObjectV2WithHttpInfoAsync(pkiEzsigntemplatedocumentID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetObjectV2Response>> EzsigntemplatedocumentGetObjectV2WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetObjectV2");

            var localVarPath = "./2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <returns>EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        public EzsigntemplatedocumentGetWordsPositionsV1Response EzsigntemplatedocumentGetWordsPositionsV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request)
        {
             ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> localVarResponse = EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetWordsPositionsV1");
            // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
            if (ezsigntemplatedocumentGetWordsPositionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetWordsPositionsV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentGetWordsPositionsV1Request != null && ezsigntemplatedocumentGetWordsPositionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentGetWordsPositionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentGetWordsPositionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetWordsPositionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetWordsPositionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetWordsPositionsV1Response)));
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> localVarResponse = await EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetWordsPositionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response>> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetWordsPositionsV1");
            // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
            if (ezsigntemplatedocumentGetWordsPositionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetWordsPositionsV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentGetWordsPositionsV1Request != null && ezsigntemplatedocumentGetWordsPositionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentGetWordsPositionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentGetWordsPositionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentGetWordsPositionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentGetWordsPositionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentGetWordsPositionsV1Response)));
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <returns>EzsigntemplatedocumentPatchObjectV1Response</returns>
        public EzsigntemplatedocumentPatchObjectV1Response EzsigntemplatedocumentPatchObjectV1 (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request)
        {
             ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> localVarResponse = EzsigntemplatedocumentPatchObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigntemplatedocumentPatchObjectV1Response</returns>
        public ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1WithHttpInfo (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentPatchObjectV1");
            // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
            if (ezsigntemplatedocumentPatchObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentPatchObjectV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentPatchObjectV1Request != null && ezsigntemplatedocumentPatchObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentPatchObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentPatchObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentPatchObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentPatchObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentPatchObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentPatchObjectV1Response)));
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigntemplatedocumentPatchObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1Async (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> localVarResponse = await EzsigntemplatedocumentPatchObjectV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentPatchObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentPatchObjectV1Response>> EzsigntemplatedocumentPatchObjectV1WithHttpInfoAsync (int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigntemplatedocumentID' is set
            if (pkiEzsigntemplatedocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigntemplatedocumentID' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentPatchObjectV1");
            // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
            if (ezsigntemplatedocumentPatchObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentPatchObjectV1");

            var localVarPath = "./1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigntemplatedocumentID != null) localVarPathParams.Add("pkiEzsigntemplatedocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            if (ezsigntemplatedocumentPatchObjectV1Request != null && ezsigntemplatedocumentPatchObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigntemplatedocumentPatchObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigntemplatedocumentPatchObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigntemplatedocumentPatchObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigntemplatedocumentPatchObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EzsigntemplatedocumentPatchObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigntemplatedocumentPatchObjectV1Response)));
        }

    }
}
