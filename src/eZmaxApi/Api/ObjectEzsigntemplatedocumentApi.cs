/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentCreateObjectV1Response</returns>
        EzsigntemplatedocumentCreateObjectV1Response EzsigntemplatedocumentCreateObjectV1(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentCreateObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1WithHttpInfo(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response EzsigntemplatedocumentEditEzsigntemplatesignaturesV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentEditObjectV1Response</returns>
        EzsigntemplatedocumentEditObjectV1Response EzsigntemplatedocumentEditObjectV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentFlattenV1Response</returns>
        EzsigntemplatedocumentFlattenV1Response EzsigntemplatedocumentFlattenV1(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0);

        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentFlattenV1Response</returns>
        ApiResponse<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1WithHttpInfo(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(int pkiEzsigntemplatedocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(int pkiEzsigntemplatedocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response EzsigntemplatedocumentGetEzsigntemplatesignaturesV1(int pkiEzsigntemplatedocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetObjectV2Response</returns>
        EzsigntemplatedocumentGetObjectV2Response EzsigntemplatedocumentGetObjectV2(int pkiEzsigntemplatedocumentID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetObjectV2Response</returns>
        ApiResponse<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0);
        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        EzsigntemplatedocumentGetWordsPositionsV1Response EzsigntemplatedocumentGetWordsPositionsV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0);

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0);
        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentPatchObjectV1Response</returns>
        EzsigntemplatedocumentPatchObjectV1Response EzsigntemplatedocumentPatchObjectV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentPatchObjectV1Response</returns>
        ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1Async(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentCreateObjectV1Response>> EzsigntemplatedocumentCreateObjectV1WithHttpInfoAsync(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentEditObjectV1Response>> EzsigntemplatedocumentEditObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentFlattenV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1Async(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Flatten
        /// </summary>
        /// <remarks>
        /// Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentFlattenV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentFlattenV1Response>> EzsigntemplatedocumentFlattenV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetObjectV2Response>> EzsigntemplatedocumentGetObjectV2WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetWordsPositionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response>> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentPatchObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentPatchObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigntemplatedocumentPatchObjectV1Response>> EzsigntemplatedocumentPatchObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigntemplatedocumentApi : IObjectEzsigntemplatedocumentApiSync, IObjectEzsigntemplatedocumentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigntemplatedocumentApi : IObjectEzsigntemplatedocumentApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigntemplatedocumentApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigntemplatedocumentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsigntemplatedocumentApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentCreateObjectV1Response</returns>
        public EzsigntemplatedocumentCreateObjectV1Response EzsigntemplatedocumentCreateObjectV1(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> localVarResponse = EzsigntemplatedocumentCreateObjectV1WithHttpInfo(ezsigntemplatedocumentCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentCreateObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1WithHttpInfo(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
            if (ezsigntemplatedocumentCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatedocumentCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatedocumentCreateObjectV1Response>("/1/object/ezsigntemplatedocument", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentCreateObjectV1Response> EzsigntemplatedocumentCreateObjectV1Async(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentCreateObjectV1Response> localVarResponse = await EzsigntemplatedocumentCreateObjectV1WithHttpInfoAsync(ezsigntemplatedocumentCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigntemplatedocument The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigntemplatedocumentCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentCreateObjectV1Response>> EzsigntemplatedocumentCreateObjectV1WithHttpInfoAsync(EzsigntemplatedocumentCreateObjectV1Request ezsigntemplatedocumentCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentCreateObjectV1Request' is set
            if (ezsigntemplatedocumentCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentCreateObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsigntemplatedocumentCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatedocumentCreateObjectV1Response>("/1/object/ezsigntemplatedocument", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        public EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> localVarResponse = EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response> localVarResponse = await EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplateformfieldgroups Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        public EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response EzsigntemplatedocumentEditEzsigntemplatesignaturesV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> localVarResponse = EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplatesignaturesV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentEditEzsigntemplatesignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplatesignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response> localVarResponse = await EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Ezsigntemplatesignatures Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' is set
            if (ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditEzsigntemplatesignaturesV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentEditEzsigntemplatesignaturesV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentEditEzsigntemplatesignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentEditEzsigntemplatesignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentEditObjectV1Response</returns>
        public EzsigntemplatedocumentEditObjectV1Response EzsigntemplatedocumentEditObjectV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditObjectV1Response> localVarResponse = EzsigntemplatedocumentEditObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
            if (ezsigntemplatedocumentEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsigntemplatedocumentEditObjectV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentEditObjectV1Response> EzsigntemplatedocumentEditObjectV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditObjectV1Response> localVarResponse = await EzsigntemplatedocumentEditObjectV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentEditObjectV1Response>> EzsigntemplatedocumentEditObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentEditObjectV1Request ezsigntemplatedocumentEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentEditObjectV1Request' is set
            if (ezsigntemplatedocumentEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentEditObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsigntemplatedocumentEditObjectV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentFlattenV1Response</returns>
        public EzsigntemplatedocumentFlattenV1Response EzsigntemplatedocumentFlattenV1(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentFlattenV1Response> localVarResponse = EzsigntemplatedocumentFlattenV1WithHttpInfo(pkiEzsigntemplatedocumentID, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentFlattenV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1WithHttpInfo(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentFlattenV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentFlattenV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatedocumentFlattenV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentFlattenV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentFlattenV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentFlattenV1Response> EzsigntemplatedocumentFlattenV1Async(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentFlattenV1Response> localVarResponse = await EzsigntemplatedocumentFlattenV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flatten Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentFlattenV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentFlattenV1Response>> EzsigntemplatedocumentFlattenV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'body' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentFlattenV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentFlattenV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatedocumentFlattenV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentFlattenV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        public EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> localVarResponse = EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(pkiEzsigntemplatedocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response> localVarResponse = await EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        public EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> localVarResponse = EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(pkiEzsigntemplatedocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response> localVarResponse = await EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        public EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response EzsigntemplatedocumentGetEzsigntemplatesignaturesV1(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> localVarResponse = EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(pkiEzsigntemplatedocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetEzsigntemplatesignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatesignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response> localVarResponse = await EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetEzsigntemplatesignaturesV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetEzsigntemplatesignaturesV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetObjectV2Response</returns>
        public EzsigntemplatedocumentGetObjectV2Response EzsigntemplatedocumentGetObjectV2(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetObjectV2Response> localVarResponse = EzsigntemplatedocumentGetObjectV2WithHttpInfo(pkiEzsigntemplatedocumentID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2WithHttpInfo(int pkiEzsigntemplatedocumentID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsigntemplatedocumentGetObjectV2Response>("/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetObjectV2Response> EzsigntemplatedocumentGetObjectV2Async(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetObjectV2Response> localVarResponse = await EzsigntemplatedocumentGetObjectV2WithHttpInfoAsync(pkiEzsigntemplatedocumentID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetObjectV2Response>> EzsigntemplatedocumentGetObjectV2WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsigntemplatedocumentGetObjectV2Response>("/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        public EzsigntemplatedocumentGetWordsPositionsV1Response EzsigntemplatedocumentGetWordsPositionsV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> localVarResponse = EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
            if (ezsigntemplatedocumentGetWordsPositionsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetWordsPositionsV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentGetWordsPositionsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetWordsPositionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsigntemplatedocumentGetWordsPositionsV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetWordsPositionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentGetWordsPositionsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentGetWordsPositionsV1Response> EzsigntemplatedocumentGetWordsPositionsV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response> localVarResponse = await EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentGetWordsPositionsV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve positions X,Y of given words from a Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentGetWordsPositionsV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentGetWordsPositionsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentGetWordsPositionsV1Response>> EzsigntemplatedocumentGetWordsPositionsV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentGetWordsPositionsV1Request ezsigntemplatedocumentGetWordsPositionsV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' is set
            if (ezsigntemplatedocumentGetWordsPositionsV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentGetWordsPositionsV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentGetWordsPositionsV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentGetWordsPositionsV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentGetWordsPositionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsigntemplatedocumentGetWordsPositionsV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentGetWordsPositionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsigntemplatedocumentPatchObjectV1Response</returns>
        public EzsigntemplatedocumentPatchObjectV1Response EzsigntemplatedocumentPatchObjectV1(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> localVarResponse = EzsigntemplatedocumentPatchObjectV1WithHttpInfo(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsigntemplatedocumentPatchObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1WithHttpInfo(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
            if (ezsigntemplatedocumentPatchObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentPatchObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentPatchObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentPatchObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<EzsigntemplatedocumentPatchObjectV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentPatchObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsigntemplatedocumentPatchObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigntemplatedocumentPatchObjectV1Response> EzsigntemplatedocumentPatchObjectV1Async(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentPatchObjectV1Response> localVarResponse = await EzsigntemplatedocumentPatchObjectV1WithHttpInfoAsync(pkiEzsigntemplatedocumentID, ezsigntemplatedocumentPatchObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch an existing Ezsigntemplatedocument 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigntemplatedocumentID"></param>
        /// <param name="ezsigntemplatedocumentPatchObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsigntemplatedocumentPatchObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsigntemplatedocumentPatchObjectV1Response>> EzsigntemplatedocumentPatchObjectV1WithHttpInfoAsync(int pkiEzsigntemplatedocumentID, EzsigntemplatedocumentPatchObjectV1Request ezsigntemplatedocumentPatchObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsigntemplatedocumentPatchObjectV1Request' is set
            if (ezsigntemplatedocumentPatchObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsigntemplatedocumentPatchObjectV1Request' when calling ObjectEzsigntemplatedocumentApi->EzsigntemplatedocumentPatchObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsigntemplatedocumentID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsigntemplatedocumentID)); // path parameter
            localVarRequestOptions.Data = ezsigntemplatedocumentPatchObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsigntemplatedocumentApi.EzsigntemplatedocumentPatchObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<EzsigntemplatedocumentPatchObjectV1Response>("/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsigntemplatedocumentPatchObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
