/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <returns>UserCreateObjectV1Response</returns>
        UserCreateObjectV1Response UserCreateObjectV1 (UserCreateObjectV1Request userCreateObjectV1Request);

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UserCreateObjectV1Response</returns>
        ApiResponse<UserCreateObjectV1Response> UserCreateObjectV1WithHttpInfo (UserCreateObjectV1Request userCreateObjectV1Request);
        /// <summary>
        /// Edit an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <returns>UserEditObjectV1Response</returns>
        UserEditObjectV1Response UserEditObjectV1 (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request);

        /// <summary>
        /// Edit an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <returns>ApiResponse of UserEditObjectV1Response</returns>
        ApiResponse<UserEditObjectV1Response> UserEditObjectV1WithHttpInfo (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request);
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <returns>UserEditPermissionsV1Response</returns>
        UserEditPermissionsV1Response UserEditPermissionsV1 (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request);

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <returns>ApiResponse of UserEditPermissionsV1Response</returns>
        ApiResponse<UserEditPermissionsV1Response> UserEditPermissionsV1WithHttpInfo (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request);
        /// <summary>
        /// Retrieve an existing User's Apikeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetApikeysV1Response</returns>
        UserGetApikeysV1Response UserGetApikeysV1 (int pkiUserID);

        /// <summary>
        /// Retrieve an existing User's Apikeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetApikeysV1Response</returns>
        ApiResponse<UserGetApikeysV1Response> UserGetApikeysV1WithHttpInfo (int pkiUserID);
        /// <summary>
        /// Retrieve Users and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of User to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>UserGetAutocompleteV2Response</returns>
        UserGetAutocompleteV2Response UserGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage));

        /// <summary>
        /// Retrieve Users and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of User to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of UserGetAutocompleteV2Response</returns>
        ApiResponse<UserGetAutocompleteV2Response> UserGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage));
        /// <summary>
        /// Retrieve an existing User's Effective Permissions
        /// </summary>
        /// <remarks>
        /// Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetEffectivePermissionsV1Response</returns>
        UserGetEffectivePermissionsV1Response UserGetEffectivePermissionsV1 (int pkiUserID);

        /// <summary>
        /// Retrieve an existing User's Effective Permissions
        /// </summary>
        /// <remarks>
        /// Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetEffectivePermissionsV1Response</returns>
        ApiResponse<UserGetEffectivePermissionsV1Response> UserGetEffectivePermissionsV1WithHttpInfo (int pkiUserID);
        /// <summary>
        /// Retrieve User list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>UserGetListV1Response</returns>
        UserGetListV1Response UserGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));

        /// <summary>
        /// Retrieve User list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of UserGetListV1Response</returns>
        ApiResponse<UserGetListV1Response> UserGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <returns>UserGetObjectV2Response</returns>
        UserGetObjectV2Response UserGetObjectV2 (int pkiUserID);

        /// <summary>
        /// Retrieve an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <returns>ApiResponse of UserGetObjectV2Response</returns>
        ApiResponse<UserGetObjectV2Response> UserGetObjectV2WithHttpInfo (int pkiUserID);
        /// <summary>
        /// Retrieve an existing User's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetPermissionsV1Response</returns>
        UserGetPermissionsV1Response UserGetPermissionsV1 (int pkiUserID);

        /// <summary>
        /// Retrieve an existing User's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetPermissionsV1Response</returns>
        ApiResponse<UserGetPermissionsV1Response> UserGetPermissionsV1WithHttpInfo (int pkiUserID);
        /// <summary>
        /// Retrieve an existing User's Subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetSubnetsV1Response</returns>
        UserGetSubnetsV1Response UserGetSubnetsV1 (int pkiUserID);

        /// <summary>
        /// Retrieve an existing User's Subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetSubnetsV1Response</returns>
        ApiResponse<UserGetSubnetsV1Response> UserGetSubnetsV1WithHttpInfo (int pkiUserID);
        /// <summary>
        /// Send password reset
        /// </summary>
        /// <remarks>
        /// Send the password reset email
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <returns>UserSendPasswordResetV1Response</returns>
        UserSendPasswordResetV1Response UserSendPasswordResetV1 (int pkiUserID, Object body);

        /// <summary>
        /// Send password reset
        /// </summary>
        /// <remarks>
        /// Send the password reset email
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserSendPasswordResetV1Response</returns>
        ApiResponse<UserSendPasswordResetV1Response> UserSendPasswordResetV1WithHttpInfo (int pkiUserID, Object body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<UserCreateObjectV1Response> UserCreateObjectV1Async (UserCreateObjectV1Request userCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCreateObjectV1Response>> UserCreateObjectV1WithHttpInfoAsync (UserCreateObjectV1Request userCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserEditObjectV1Response</returns>
        System.Threading.Tasks.Task<UserEditObjectV1Response> UserEditObjectV1Async (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEditObjectV1Response>> UserEditObjectV1WithHttpInfoAsync (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserEditPermissionsV1Response</returns>
        System.Threading.Tasks.Task<UserEditPermissionsV1Response> UserEditPermissionsV1Async (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit multiple Permissions
        /// </summary>
        /// <remarks>
        /// Using this endpoint, you can edit multiple Permissions at the same time.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserEditPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserEditPermissionsV1Response>> UserEditPermissionsV1WithHttpInfoAsync (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing User's Apikeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetApikeysV1Response</returns>
        System.Threading.Tasks.Task<UserGetApikeysV1Response> UserGetApikeysV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing User&#39;s Apikeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetApikeysV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetApikeysV1Response>> UserGetApikeysV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Users and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of User to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetAutocompleteV2Response</returns>
        System.Threading.Tasks.Task<UserGetAutocompleteV2Response> UserGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Users and IDs
        /// </summary>
        /// <remarks>
        /// Get the list of User to be used in a dropdown or autocomplete control.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetAutocompleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetAutocompleteV2Response>> UserGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing User's Effective Permissions
        /// </summary>
        /// <remarks>
        /// Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetEffectivePermissionsV1Response</returns>
        System.Threading.Tasks.Task<UserGetEffectivePermissionsV1Response> UserGetEffectivePermissionsV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing User&#39;s Effective Permissions
        /// </summary>
        /// <remarks>
        /// Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetEffectivePermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetEffectivePermissionsV1Response>> UserGetEffectivePermissionsV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve User list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetListV1Response</returns>
        System.Threading.Tasks.Task<UserGetListV1Response> UserGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve User list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetListV1Response>> UserGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetObjectV2Response</returns>
        System.Threading.Tasks.Task<UserGetObjectV2Response> UserGetObjectV2Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetObjectV2Response>> UserGetObjectV2WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing User's Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetPermissionsV1Response</returns>
        System.Threading.Tasks.Task<UserGetPermissionsV1Response> UserGetPermissionsV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing User&#39;s Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetPermissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetPermissionsV1Response>> UserGetPermissionsV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing User's Subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetSubnetsV1Response</returns>
        System.Threading.Tasks.Task<UserGetSubnetsV1Response> UserGetSubnetsV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing User&#39;s Subnets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetSubnetsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGetSubnetsV1Response>> UserGetSubnetsV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send password reset
        /// </summary>
        /// <remarks>
        /// Send the password reset email
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserSendPasswordResetV1Response</returns>
        System.Threading.Tasks.Task<UserSendPasswordResetV1Response> UserSendPasswordResetV1Async (int pkiUserID, Object body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send password reset
        /// </summary>
        /// <remarks>
        /// Send the password reset email
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserSendPasswordResetV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSendPasswordResetV1Response>> UserSendPasswordResetV1WithHttpInfoAsync (int pkiUserID, Object body, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectUserApi : IObjectUserApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectUserApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUserApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectUserApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectUserApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new User The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <returns>UserCreateObjectV1Response</returns>
        public UserCreateObjectV1Response UserCreateObjectV1 (UserCreateObjectV1Request userCreateObjectV1Request)
        {
             ApiResponse<UserCreateObjectV1Response> localVarResponse = UserCreateObjectV1WithHttpInfo(userCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new User The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UserCreateObjectV1Response</returns>
        public ApiResponse<UserCreateObjectV1Response> UserCreateObjectV1WithHttpInfo (UserCreateObjectV1Request userCreateObjectV1Request)
        {
            // verify the required parameter 'userCreateObjectV1Request' is set
            if (userCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userCreateObjectV1Request' when calling ObjectUserApi->UserCreateObjectV1");

            var localVarPath = "./1/object/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userCreateObjectV1Request != null && userCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new User The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UserCreateObjectV1Response> UserCreateObjectV1Async (UserCreateObjectV1Request userCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserCreateObjectV1Response> localVarResponse = await UserCreateObjectV1WithHttpInfoAsync(userCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new User The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCreateObjectV1Response>> UserCreateObjectV1WithHttpInfoAsync (UserCreateObjectV1Request userCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'userCreateObjectV1Request' is set
            if (userCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userCreateObjectV1Request' when calling ObjectUserApi->UserCreateObjectV1");

            var localVarPath = "./1/object/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userCreateObjectV1Request != null && userCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCreateObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <returns>UserEditObjectV1Response</returns>
        public UserEditObjectV1Response UserEditObjectV1 (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request)
        {
             ApiResponse<UserEditObjectV1Response> localVarResponse = UserEditObjectV1WithHttpInfo(pkiUserID, userEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <returns>ApiResponse of UserEditObjectV1Response</returns>
        public ApiResponse<UserEditObjectV1Response> UserEditObjectV1WithHttpInfo (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserEditObjectV1");
            // verify the required parameter 'userEditObjectV1Request' is set
            if (userEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userEditObjectV1Request' when calling ObjectUserApi->UserEditObjectV1");

            var localVarPath = "./1/object/user/{pkiUserID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter
            if (userEditObjectV1Request != null && userEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UserEditObjectV1Response> UserEditObjectV1Async (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserEditObjectV1Response> localVarResponse = await UserEditObjectV1WithHttpInfoAsync(pkiUserID, userEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="userEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserEditObjectV1Response>> UserEditObjectV1WithHttpInfoAsync (int pkiUserID, UserEditObjectV1Request userEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserEditObjectV1");
            // verify the required parameter 'userEditObjectV1Request' is set
            if (userEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userEditObjectV1Request' when calling ObjectUserApi->UserEditObjectV1");

            var localVarPath = "./1/object/user/{pkiUserID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter
            if (userEditObjectV1Request != null && userEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserEditObjectV1Response)));
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <returns>UserEditPermissionsV1Response</returns>
        public UserEditPermissionsV1Response UserEditPermissionsV1 (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request)
        {
             ApiResponse<UserEditPermissionsV1Response> localVarResponse = UserEditPermissionsV1WithHttpInfo(pkiUserID, userEditPermissionsV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <returns>ApiResponse of UserEditPermissionsV1Response</returns>
        public ApiResponse<UserEditPermissionsV1Response> UserEditPermissionsV1WithHttpInfo (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserEditPermissionsV1");
            // verify the required parameter 'userEditPermissionsV1Request' is set
            if (userEditPermissionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userEditPermissionsV1Request' when calling ObjectUserApi->UserEditPermissionsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/editPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter
            if (userEditPermissionsV1Request != null && userEditPermissionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEditPermissionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEditPermissionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserEditPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserEditPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserEditPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserEditPermissionsV1Response)));
        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserEditPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<UserEditPermissionsV1Response> UserEditPermissionsV1Async (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserEditPermissionsV1Response> localVarResponse = await UserEditPermissionsV1WithHttpInfoAsync(pkiUserID, userEditPermissionsV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit multiple Permissions Using this endpoint, you can edit multiple Permissions at the same time.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="userEditPermissionsV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserEditPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserEditPermissionsV1Response>> UserEditPermissionsV1WithHttpInfoAsync (int pkiUserID, UserEditPermissionsV1Request userEditPermissionsV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserEditPermissionsV1");
            // verify the required parameter 'userEditPermissionsV1Request' is set
            if (userEditPermissionsV1Request == null)
                throw new ApiException(400, "Missing required parameter 'userEditPermissionsV1Request' when calling ObjectUserApi->UserEditPermissionsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/editPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter
            if (userEditPermissionsV1Request != null && userEditPermissionsV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(userEditPermissionsV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEditPermissionsV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserEditPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserEditPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserEditPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserEditPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Apikeys 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetApikeysV1Response</returns>
        public UserGetApikeysV1Response UserGetApikeysV1 (int pkiUserID)
        {
             ApiResponse<UserGetApikeysV1Response> localVarResponse = UserGetApikeysV1WithHttpInfo(pkiUserID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing User's Apikeys 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetApikeysV1Response</returns>
        public ApiResponse<UserGetApikeysV1Response> UserGetApikeysV1WithHttpInfo (int pkiUserID)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetApikeysV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getApikeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetApikeysV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetApikeysV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetApikeysV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetApikeysV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Apikeys 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetApikeysV1Response</returns>
        public async System.Threading.Tasks.Task<UserGetApikeysV1Response> UserGetApikeysV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetApikeysV1Response> localVarResponse = await UserGetApikeysV1WithHttpInfoAsync(pkiUserID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing User's Apikeys 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetApikeysV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetApikeysV1Response>> UserGetApikeysV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetApikeysV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getApikeys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetApikeysV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetApikeysV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetApikeysV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetApikeysV1Response)));
        }

        /// <summary>
        /// Retrieve Users and IDs Get the list of User to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>UserGetAutocompleteV2Response</returns>
        public UserGetAutocompleteV2Response UserGetAutocompleteV2 (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage))
        {
             ApiResponse<UserGetAutocompleteV2Response> localVarResponse = UserGetAutocompleteV2WithHttpInfo(sSelector, eFilterActive, sQuery, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Users and IDs Get the list of User to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of UserGetAutocompleteV2Response</returns>
        public ApiResponse<UserGetAutocompleteV2Response> UserGetAutocompleteV2WithHttpInfo (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectUserApi->UserGetAutocompleteV2");

            var localVarPath = "./2/object/user/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve Users and IDs Get the list of User to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetAutocompleteV2Response</returns>
        public async System.Threading.Tasks.Task<UserGetAutocompleteV2Response> UserGetAutocompleteV2Async (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetAutocompleteV2Response> localVarResponse = await UserGetAutocompleteV2WithHttpInfoAsync(sSelector, eFilterActive, sQuery, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Users and IDs Get the list of User to be used in a dropdown or autocomplete control.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sSelector">The type of Users to return</param>
        /// <param name="eFilterActive">Specify which results we want to display. (optional, default to Active)</param>
        /// <param name="sQuery">Allow to filter the returned results (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetAutocompleteV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetAutocompleteV2Response>> UserGetAutocompleteV2WithHttpInfoAsync (string sSelector, string eFilterActive = default(string), string sQuery = default(string), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'sSelector' is set
            if (sSelector == null)
                throw new ApiException(400, "Missing required parameter 'sSelector' when calling ObjectUserApi->UserGetAutocompleteV2");

            var localVarPath = "./2/object/user/getAutocomplete/{sSelector}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sSelector != null) localVarPathParams.Add("sSelector", this.Configuration.ApiClient.ParameterToString(sSelector)); // path parameter
            if (eFilterActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eFilterActive", eFilterActive)); // query parameter
            if (sQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sQuery", sQuery)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetAutocompleteV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetAutocompleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetAutocompleteV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetAutocompleteV2Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Effective Permissions Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetEffectivePermissionsV1Response</returns>
        public UserGetEffectivePermissionsV1Response UserGetEffectivePermissionsV1 (int pkiUserID)
        {
             ApiResponse<UserGetEffectivePermissionsV1Response> localVarResponse = UserGetEffectivePermissionsV1WithHttpInfo(pkiUserID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing User's Effective Permissions Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetEffectivePermissionsV1Response</returns>
        public ApiResponse<UserGetEffectivePermissionsV1Response> UserGetEffectivePermissionsV1WithHttpInfo (int pkiUserID)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetEffectivePermissionsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getEffectivePermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetEffectivePermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetEffectivePermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetEffectivePermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetEffectivePermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Effective Permissions Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetEffectivePermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<UserGetEffectivePermissionsV1Response> UserGetEffectivePermissionsV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetEffectivePermissionsV1Response> localVarResponse = await UserGetEffectivePermissionsV1WithHttpInfoAsync(pkiUserID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing User's Effective Permissions Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetEffectivePermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetEffectivePermissionsV1Response>> UserGetEffectivePermissionsV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetEffectivePermissionsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getEffectivePermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetEffectivePermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetEffectivePermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetEffectivePermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetEffectivePermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve User list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>UserGetListV1Response</returns>
        public UserGetListV1Response UserGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {
             ApiResponse<UserGetListV1Response> localVarResponse = UserGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of UserGetListV1Response</returns>
        public ApiResponse<UserGetListV1Response> UserGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string))
        {

            var localVarPath = "./1/object/user/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetListV1Response)));
        }

        /// <summary>
        /// Retrieve User list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetListV1Response</returns>
        public async System.Threading.Tasks.Task<UserGetListV1Response> UserGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetListV1Response> localVarResponse = await UserGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve User list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetListV1Response>> UserGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage acceptLanguage = default(HeaderAcceptLanguage), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "./1/object/user/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <returns>UserGetObjectV2Response</returns>
        public UserGetObjectV2Response UserGetObjectV2 (int pkiUserID)
        {
             ApiResponse<UserGetObjectV2Response> localVarResponse = UserGetObjectV2WithHttpInfo(pkiUserID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <returns>ApiResponse of UserGetObjectV2Response</returns>
        public ApiResponse<UserGetObjectV2Response> UserGetObjectV2WithHttpInfo (int pkiUserID)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetObjectV2");

            var localVarPath = "./2/object/user/{pkiUserID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<UserGetObjectV2Response> UserGetObjectV2Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetObjectV2Response> localVarResponse = await UserGetObjectV2WithHttpInfoAsync(pkiUserID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing User 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID">The unique ID of the User</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetObjectV2Response>> UserGetObjectV2WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetObjectV2");

            var localVarPath = "./2/object/user/{pkiUserID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetPermissionsV1Response</returns>
        public UserGetPermissionsV1Response UserGetPermissionsV1 (int pkiUserID)
        {
             ApiResponse<UserGetPermissionsV1Response> localVarResponse = UserGetPermissionsV1WithHttpInfo(pkiUserID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing User's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetPermissionsV1Response</returns>
        public ApiResponse<UserGetPermissionsV1Response> UserGetPermissionsV1WithHttpInfo (int pkiUserID)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetPermissionsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetPermissionsV1Response</returns>
        public async System.Threading.Tasks.Task<UserGetPermissionsV1Response> UserGetPermissionsV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetPermissionsV1Response> localVarResponse = await UserGetPermissionsV1WithHttpInfoAsync(pkiUserID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing User's Permissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetPermissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetPermissionsV1Response>> UserGetPermissionsV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetPermissionsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getPermissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetPermissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetPermissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetPermissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetPermissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>UserGetSubnetsV1Response</returns>
        public UserGetSubnetsV1Response UserGetSubnetsV1 (int pkiUserID)
        {
             ApiResponse<UserGetSubnetsV1Response> localVarResponse = UserGetSubnetsV1WithHttpInfo(pkiUserID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing User's Subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <returns>ApiResponse of UserGetSubnetsV1Response</returns>
        public ApiResponse<UserGetSubnetsV1Response> UserGetSubnetsV1WithHttpInfo (int pkiUserID)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetSubnetsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getSubnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetSubnetsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetSubnetsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetSubnetsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetSubnetsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing User's Subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserGetSubnetsV1Response</returns>
        public async System.Threading.Tasks.Task<UserGetSubnetsV1Response> UserGetSubnetsV1Async (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserGetSubnetsV1Response> localVarResponse = await UserGetSubnetsV1WithHttpInfoAsync(pkiUserID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing User's Subnets 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserGetSubnetsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserGetSubnetsV1Response>> UserGetSubnetsV1WithHttpInfoAsync (int pkiUserID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserGetSubnetsV1");

            var localVarPath = "./1/object/user/{pkiUserID}/getSubnets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserGetSubnetsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserGetSubnetsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserGetSubnetsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserGetSubnetsV1Response)));
        }

        /// <summary>
        /// Send password reset Send the password reset email
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <returns>UserSendPasswordResetV1Response</returns>
        public UserSendPasswordResetV1Response UserSendPasswordResetV1 (int pkiUserID, Object body)
        {
             ApiResponse<UserSendPasswordResetV1Response> localVarResponse = UserSendPasswordResetV1WithHttpInfo(pkiUserID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send password reset Send the password reset email
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserSendPasswordResetV1Response</returns>
        public ApiResponse<UserSendPasswordResetV1Response> UserSendPasswordResetV1WithHttpInfo (int pkiUserID, Object body)
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserSendPasswordResetV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectUserApi->UserSendPasswordResetV1");

            var localVarPath = "./1/object/user/{pkiUserID}/sendPasswordReset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSendPasswordResetV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSendPasswordResetV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSendPasswordResetV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSendPasswordResetV1Response)));
        }

        /// <summary>
        /// Send password reset Send the password reset email
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UserSendPasswordResetV1Response</returns>
        public async System.Threading.Tasks.Task<UserSendPasswordResetV1Response> UserSendPasswordResetV1Async (int pkiUserID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UserSendPasswordResetV1Response> localVarResponse = await UserSendPasswordResetV1WithHttpInfoAsync(pkiUserID, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send password reset Send the password reset email
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUserID"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UserSendPasswordResetV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSendPasswordResetV1Response>> UserSendPasswordResetV1WithHttpInfoAsync (int pkiUserID, Object body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUserID' is set
            if (pkiUserID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUserID' when calling ObjectUserApi->UserSendPasswordResetV1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ObjectUserApi->UserSendPasswordResetV1");

            var localVarPath = "./1/object/user/{pkiUserID}/sendPasswordReset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUserID != null) localVarPathParams.Add("pkiUserID", this.Configuration.ApiClient.ParameterToString(pkiUserID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserSendPasswordResetV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSendPasswordResetV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UserSendPasswordResetV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSendPasswordResetV1Response)));
        }

    }
}
