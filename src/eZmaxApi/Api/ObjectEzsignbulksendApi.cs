/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <returns>EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        EzsignbulksendCreateEzsignbulksendtransmissionV1Response EzsignbulksendCreateEzsignbulksendtransmissionV1 (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request);

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request);
        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <returns>EzsignbulksendCreateObjectV1Response</returns>
        EzsignbulksendCreateObjectV1Response EzsignbulksendCreateObjectV1 (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendCreateObjectV1Response</returns>
        ApiResponse<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1WithHttpInfo (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendDeleteObjectV1Response</returns>
        EzsignbulksendDeleteObjectV1Response EzsignbulksendDeleteObjectV1 (int pkiEzsignbulksendID);

        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendDeleteObjectV1Response</returns>
        ApiResponse<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1WithHttpInfo (int pkiEzsignbulksendID);
        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <returns>EzsignbulksendEditObjectV1Response</returns>
        EzsignbulksendEditObjectV1Response EzsignbulksendEditObjectV1 (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request);

        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendEditObjectV1Response</returns>
        ApiResponse<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1WithHttpInfo (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <returns>string</returns>
        string EzsignbulksendGetCsvTemplateV1 (int pkiEzsignbulksendID, string eCsvSeparator);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EzsignbulksendGetCsvTemplateV1WithHttpInfo (int pkiEzsignbulksendID, string eCsvSeparator);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        EzsignbulksendGetEzsignbulksendtransmissionsV1Response EzsignbulksendGetEzsignbulksendtransmissionsV1 (int pkiEzsignbulksendID);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo (int pkiEzsignbulksendID);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendGetFormsDataV1Response</returns>
        EzsignbulksendGetFormsDataV1Response EzsignbulksendGetFormsDataV1 (int pkiEzsignbulksendID);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendGetFormsDataV1Response</returns>
        ApiResponse<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1WithHttpInfo (int pkiEzsignbulksendID);
        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>EzsignbulksendGetListV1Response</returns>
        EzsignbulksendGetListV1Response EzsignbulksendGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));

        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of EzsignbulksendGetListV1Response</returns>
        ApiResponse<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendGetObjectV1Response</returns>
        EzsignbulksendGetObjectV1Response EzsignbulksendGetObjectV1 (int pkiEzsignbulksendID);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendGetObjectV1Response</returns>
        ApiResponse<EzsignbulksendGetObjectV1Response> EzsignbulksendGetObjectV1WithHttpInfo (int pkiEzsignbulksendID);
        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <returns>EzsignbulksendReorderV1Response</returns>
        EzsignbulksendReorderV1Response EzsignbulksendReorderV1 (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request);

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendReorderV1Response</returns>
        ApiResponse<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1WithHttpInfo (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1Async (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateEzsignbulksendtransmissionV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfoAsync (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1Async (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendCreateObjectV1Response>> EzsignbulksendCreateObjectV1WithHttpInfoAsync (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendDeleteObjectV1Response>> EzsignbulksendDeleteObjectV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1Async (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendEditObjectV1Response>> EzsignbulksendEditObjectV1WithHttpInfoAsync (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EzsignbulksendGetCsvTemplateV1Async (int pkiEzsignbulksendID, string eCsvSeparator, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EzsignbulksendGetCsvTemplateV1WithHttpInfoAsync (int pkiEzsignbulksendID, string eCsvSeparator, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetEzsignbulksendtransmissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetFormsDataV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetFormsDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetFormsDataV1Response>> EzsignbulksendGetFormsDataV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetListV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetListV1Response>> EzsignbulksendGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetObjectV1Response> EzsignbulksendGetObjectV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetObjectV1Response>> EzsignbulksendGetObjectV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendReorderV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1Async (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendReorderV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendReorderV1Response>> EzsignbulksendReorderV1WithHttpInfoAsync (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignbulksendApi : IObjectEzsignbulksendApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignbulksendApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignbulksendApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignbulksendApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <returns>EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        public EzsignbulksendCreateEzsignbulksendtransmissionV1Response EzsignbulksendCreateEzsignbulksendtransmissionV1 (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request)
        {
             ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> localVarResponse = EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        public ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateEzsignbulksendtransmissionV1");
            // verify the required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' is set
            if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateEzsignbulksendtransmissionV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request != null && ezsignbulksendCreateEzsignbulksendtransmissionV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendCreateEzsignbulksendtransmissionV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendCreateEzsignbulksendtransmissionV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendCreateEzsignbulksendtransmissionV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendCreateEzsignbulksendtransmissionV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendCreateEzsignbulksendtransmissionV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1Async (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> localVarResponse = await EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfoAsync(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateEzsignbulksendtransmissionV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfoAsync (int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateEzsignbulksendtransmissionV1");
            // verify the required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' is set
            if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateEzsignbulksendtransmissionV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request != null && ezsignbulksendCreateEzsignbulksendtransmissionV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendCreateEzsignbulksendtransmissionV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendCreateEzsignbulksendtransmissionV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendCreateEzsignbulksendtransmissionV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendCreateEzsignbulksendtransmissionV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendCreateEzsignbulksendtransmissionV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <returns>EzsignbulksendCreateObjectV1Response</returns>
        public EzsignbulksendCreateObjectV1Response EzsignbulksendCreateObjectV1 (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request)
        {
             ApiResponse<EzsignbulksendCreateObjectV1Response> localVarResponse = EzsignbulksendCreateObjectV1WithHttpInfo(ezsignbulksendCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendCreateObjectV1Response</returns>
        public ApiResponse<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1WithHttpInfo (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request)
        {
            // verify the required parameter 'ezsignbulksendCreateObjectV1Request' is set
            if (ezsignbulksendCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendCreateObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateObjectV1");

            var localVarPath = "/1/object/ezsignbulksend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignbulksendCreateObjectV1Request != null && ezsignbulksendCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1Async (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendCreateObjectV1Response> localVarResponse = await EzsignbulksendCreateObjectV1WithHttpInfoAsync(ezsignbulksendCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendCreateObjectV1Response>> EzsignbulksendCreateObjectV1WithHttpInfoAsync (EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignbulksendCreateObjectV1Request' is set
            if (ezsignbulksendCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendCreateObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateObjectV1");

            var localVarPath = "/1/object/ezsignbulksend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignbulksendCreateObjectV1Request != null && ezsignbulksendCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendDeleteObjectV1Response</returns>
        public EzsignbulksendDeleteObjectV1Response EzsignbulksendDeleteObjectV1 (int pkiEzsignbulksendID)
        {
             ApiResponse<EzsignbulksendDeleteObjectV1Response> localVarResponse = EzsignbulksendDeleteObjectV1WithHttpInfo(pkiEzsignbulksendID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendDeleteObjectV1Response</returns>
        public ApiResponse<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1WithHttpInfo (int pkiEzsignbulksendID)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendDeleteObjectV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendDeleteObjectV1Response> localVarResponse = await EzsignbulksendDeleteObjectV1WithHttpInfoAsync(pkiEzsignbulksendID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendDeleteObjectV1Response>> EzsignbulksendDeleteObjectV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendDeleteObjectV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <returns>EzsignbulksendEditObjectV1Response</returns>
        public EzsignbulksendEditObjectV1Response EzsignbulksendEditObjectV1 (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request)
        {
             ApiResponse<EzsignbulksendEditObjectV1Response> localVarResponse = EzsignbulksendEditObjectV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendEditObjectV1Response</returns>
        public ApiResponse<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1WithHttpInfo (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendEditObjectV1");
            // verify the required parameter 'ezsignbulksendEditObjectV1Request' is set
            if (ezsignbulksendEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendEditObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendEditObjectV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (ezsignbulksendEditObjectV1Request != null && ezsignbulksendEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1Async (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendEditObjectV1Response> localVarResponse = await EzsignbulksendEditObjectV1WithHttpInfoAsync(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendEditObjectV1Response>> EzsignbulksendEditObjectV1WithHttpInfoAsync (int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendEditObjectV1");
            // verify the required parameter 'ezsignbulksendEditObjectV1Request' is set
            if (ezsignbulksendEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendEditObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendEditObjectV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (ezsignbulksendEditObjectV1Request != null && ezsignbulksendEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <returns>string</returns>
        public string EzsignbulksendGetCsvTemplateV1 (int pkiEzsignbulksendID, string eCsvSeparator)
        {
             ApiResponse<string> localVarResponse = EzsignbulksendGetCsvTemplateV1WithHttpInfo(pkiEzsignbulksendID, eCsvSeparator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> EzsignbulksendGetCsvTemplateV1WithHttpInfo (int pkiEzsignbulksendID, string eCsvSeparator)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetCsvTemplateV1");
            // verify the required parameter 'eCsvSeparator' is set
            if (eCsvSeparator == null)
                throw new ApiException(400, "Missing required parameter 'eCsvSeparator' when calling ObjectEzsignbulksendApi->EzsignbulksendGetCsvTemplateV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (eCsvSeparator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eCsvSeparator", eCsvSeparator)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetCsvTemplateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EzsignbulksendGetCsvTemplateV1Async (int pkiEzsignbulksendID, string eCsvSeparator, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<string> localVarResponse = await EzsignbulksendGetCsvTemplateV1WithHttpInfoAsync(pkiEzsignbulksendID, eCsvSeparator, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> EzsignbulksendGetCsvTemplateV1WithHttpInfoAsync (int pkiEzsignbulksendID, string eCsvSeparator, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetCsvTemplateV1");
            // verify the required parameter 'eCsvSeparator' is set
            if (eCsvSeparator == null)
                throw new ApiException(400, "Missing required parameter 'eCsvSeparator' when calling ObjectEzsignbulksendApi->EzsignbulksendGetCsvTemplateV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (eCsvSeparator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eCsvSeparator", eCsvSeparator)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetCsvTemplateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        public EzsignbulksendGetEzsignbulksendtransmissionsV1Response EzsignbulksendGetEzsignbulksendtransmissionsV1 (int pkiEzsignbulksendID)
        {
             ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> localVarResponse = EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(pkiEzsignbulksendID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        public ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo (int pkiEzsignbulksendID)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetEzsignbulksendtransmissionsV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetEzsignbulksendtransmissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetEzsignbulksendtransmissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetEzsignbulksendtransmissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> localVarResponse = await EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfoAsync(pkiEzsignbulksendID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetEzsignbulksendtransmissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetEzsignbulksendtransmissionsV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetEzsignbulksendtransmissionsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetEzsignbulksendtransmissionsV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetEzsignbulksendtransmissionsV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendGetFormsDataV1Response</returns>
        public EzsignbulksendGetFormsDataV1Response EzsignbulksendGetFormsDataV1 (int pkiEzsignbulksendID)
        {
             ApiResponse<EzsignbulksendGetFormsDataV1Response> localVarResponse = EzsignbulksendGetFormsDataV1WithHttpInfo(pkiEzsignbulksendID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendGetFormsDataV1Response</returns>
        public ApiResponse<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1WithHttpInfo (int pkiEzsignbulksendID)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetFormsDataV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetFormsDataV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetFormsDataV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetFormsDataV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetFormsDataV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetFormsDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendGetFormsDataV1Response> localVarResponse = await EzsignbulksendGetFormsDataV1WithHttpInfoAsync(pkiEzsignbulksendID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend's forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetFormsDataV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetFormsDataV1Response>> EzsignbulksendGetFormsDataV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetFormsDataV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/zip"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetFormsDataV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetFormsDataV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetFormsDataV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetFormsDataV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>EzsignbulksendGetListV1Response</returns>
        public EzsignbulksendGetListV1Response EzsignbulksendGetListV1 (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {
             ApiResponse<EzsignbulksendGetListV1Response> localVarResponse = EzsignbulksendGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <returns>ApiResponse of EzsignbulksendGetListV1Response</returns>
        public ApiResponse<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1WithHttpInfo (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string))
        {

            var localVarPath = "/1/object/ezsignbulksend/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetListV1Response)));
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1Async (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendGetListV1Response> localVarResponse = await EzsignbulksendGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional)</param>
        /// <param name="iRowOffset"> (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetListV1Response>> EzsignbulksendGetListV1WithHttpInfoAsync (string eOrderBy = default(string), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string sFilter = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/1/object/ezsignbulksend/getList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eOrderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eOrderBy", eOrderBy)); // query parameter
            if (iRowMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowMax", iRowMax)); // query parameter
            if (iRowOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "iRowOffset", iRowOffset)); // query parameter
            if (sFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sFilter", sFilter)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetListV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetListV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetListV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetListV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>EzsignbulksendGetObjectV1Response</returns>
        public EzsignbulksendGetObjectV1Response EzsignbulksendGetObjectV1 (int pkiEzsignbulksendID)
        {
             ApiResponse<EzsignbulksendGetObjectV1Response> localVarResponse = EzsignbulksendGetObjectV1WithHttpInfo(pkiEzsignbulksendID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <returns>ApiResponse of EzsignbulksendGetObjectV1Response</returns>
        public ApiResponse<EzsignbulksendGetObjectV1Response> EzsignbulksendGetObjectV1WithHttpInfo (int pkiEzsignbulksendID)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetObjectV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetObjectV1Response> EzsignbulksendGetObjectV1Async (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendGetObjectV1Response> localVarResponse = await EzsignbulksendGetObjectV1WithHttpInfoAsync(pkiEzsignbulksendID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetObjectV1Response>> EzsignbulksendGetObjectV1WithHttpInfoAsync (int pkiEzsignbulksendID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendGetObjectV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendGetObjectV1Response)));
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <returns>EzsignbulksendReorderV1Response</returns>
        public EzsignbulksendReorderV1Response EzsignbulksendReorderV1 (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request)
        {
             ApiResponse<EzsignbulksendReorderV1Response> localVarResponse = EzsignbulksendReorderV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendReorderV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <returns>ApiResponse of EzsignbulksendReorderV1Response</returns>
        public ApiResponse<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1WithHttpInfo (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request)
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendReorderV1");
            // verify the required parameter 'ezsignbulksendReorderV1Request' is set
            if (ezsignbulksendReorderV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendReorderV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendReorderV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (ezsignbulksendReorderV1Request != null && ezsignbulksendReorderV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendReorderV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendReorderV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendReorderV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendReorderV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendReorderV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendReorderV1Response)));
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignbulksendReorderV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1Async (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignbulksendReorderV1Response> localVarResponse = await EzsignbulksendReorderV1WithHttpInfoAsync(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignbulksendReorderV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignbulksendReorderV1Response>> EzsignbulksendReorderV1WithHttpInfoAsync (int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignbulksendID' is set
            if (pkiEzsignbulksendID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignbulksendID' when calling ObjectEzsignbulksendApi->EzsignbulksendReorderV1");
            // verify the required parameter 'ezsignbulksendReorderV1Request' is set
            if (ezsignbulksendReorderV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignbulksendReorderV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendReorderV1");

            var localVarPath = "/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignbulksendID != null) localVarPathParams.Add("pkiEzsignbulksendID", this.Configuration.ApiClient.ParameterToString(pkiEzsignbulksendID)); // path parameter
            if (ezsignbulksendReorderV1Request != null && ezsignbulksendReorderV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignbulksendReorderV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignbulksendReorderV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignbulksendReorderV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignbulksendReorderV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignbulksendReorderV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignbulksendReorderV1Response)));
        }

    }
}
