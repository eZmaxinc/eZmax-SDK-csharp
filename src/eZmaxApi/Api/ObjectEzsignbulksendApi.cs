/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        EzsignbulksendCreateEzsignbulksendtransmissionV1Response EzsignbulksendCreateEzsignbulksendtransmissionV1(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendCreateObjectV1Response</returns>
        EzsignbulksendCreateObjectV1Response EzsignbulksendCreateObjectV1(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendCreateObjectV1Response</returns>
        ApiResponse<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1WithHttpInfo(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendDeleteObjectV1Response</returns>
        EzsignbulksendDeleteObjectV1Response EzsignbulksendDeleteObjectV1(int pkiEzsignbulksendID, int operationIndex = 0);

        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendDeleteObjectV1Response</returns>
        ApiResponse<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendEditObjectV1Response</returns>
        EzsignbulksendEditObjectV1Response EzsignbulksendEditObjectV1(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendEditObjectV1Response</returns>
        ApiResponse<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1WithHttpInfo(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string EzsignbulksendGetCsvTemplateV1(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> EzsignbulksendGetCsvTemplateV1WithHttpInfo(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        EzsignbulksendGetEzsignbulksendtransmissionsV1Response EzsignbulksendGetEzsignbulksendtransmissionsV1(int pkiEzsignbulksendID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetEzsignsignaturesAutomaticV1Response</returns>
        EzsignbulksendGetEzsignsignaturesAutomaticV1Response EzsignbulksendGetEzsignsignaturesAutomaticV1(int pkiEzsignbulksendID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetEzsignsignaturesAutomaticV1Response</returns>
        ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> EzsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetFormsDataV1Response</returns>
        EzsignbulksendGetFormsDataV1Response EzsignbulksendGetFormsDataV1(int pkiEzsignbulksendID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetFormsDataV1Response</returns>
        ApiResponse<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0);
        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetListV1Response</returns>
        EzsignbulksendGetListV1Response EzsignbulksendGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetListV1Response</returns>
        ApiResponse<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetObjectV2Response</returns>
        EzsignbulksendGetObjectV2Response EzsignbulksendGetObjectV2(int pkiEzsignbulksendID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetObjectV2Response</returns>
        ApiResponse<EzsignbulksendGetObjectV2Response> EzsignbulksendGetObjectV2WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0);
        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendReorderV1Response</returns>
        EzsignbulksendReorderV1Response EzsignbulksendReorderV1(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0);

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendReorderV1Response</returns>
        ApiResponse<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1WithHttpInfo(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1Async(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateEzsignbulksendtransmissionV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfoAsync(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1Async(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendCreateObjectV1Response>> EzsignbulksendCreateObjectV1WithHttpInfoAsync(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendDeleteObjectV1Response>> EzsignbulksendDeleteObjectV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1Async(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendEditObjectV1Response>> EzsignbulksendEditObjectV1WithHttpInfoAsync(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> EzsignbulksendGetCsvTemplateV1Async(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> EzsignbulksendGetCsvTemplateV1WithHttpInfoAsync(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetEzsignbulksendtransmissionsV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetEzsignsignaturesAutomaticV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> EzsignbulksendGetEzsignsignaturesAutomaticV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetEzsignsignaturesAutomaticV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>> EzsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetFormsDataV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetFormsDataV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetFormsDataV1Response>> EzsignbulksendGetFormsDataV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetListV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Ezsignbulksend list
        /// </summary>
        /// <remarks>
        /// Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetListV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetListV1Response>> EzsignbulksendGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendGetObjectV2Response> EzsignbulksendGetObjectV2Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendGetObjectV2Response>> EzsignbulksendGetObjectV2WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendReorderV1Response</returns>
        System.Threading.Tasks.Task<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1Async(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendReorderV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignbulksendReorderV1Response>> EzsignbulksendReorderV1WithHttpInfoAsync(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignbulksendApi : IObjectEzsignbulksendApiSync, IObjectEzsignbulksendApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignbulksendApi : IObjectEzsignbulksendApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignbulksendApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignbulksendApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignbulksendApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignbulksendApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsignbulksendApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        public EzsignbulksendCreateEzsignbulksendtransmissionV1Response EzsignbulksendCreateEzsignbulksendtransmissionV1(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> localVarResponse = EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfo(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' is set
            if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateEzsignbulksendtransmissionV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.Data = ezsignbulksendCreateEzsignbulksendtransmissionV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendCreateEzsignbulksendtransmissionV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendCreateEzsignbulksendtransmissionV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendCreateEzsignbulksendtransmissionV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> EzsignbulksendCreateEzsignbulksendtransmissionV1Async(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response> localVarResponse = await EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfoAsync(pkiEzsignbulksendID, ezsignbulksendCreateEzsignbulksendtransmissionV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignbulksendtransmission in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendCreateEzsignbulksendtransmissionV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateEzsignbulksendtransmissionV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>> EzsignbulksendCreateEzsignbulksendtransmissionV1WithHttpInfoAsync(int pkiEzsignbulksendID, EzsignbulksendCreateEzsignbulksendtransmissionV1Request ezsignbulksendCreateEzsignbulksendtransmissionV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' is set
            if (ezsignbulksendCreateEzsignbulksendtransmissionV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendCreateEzsignbulksendtransmissionV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateEzsignbulksendtransmissionV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.Data = ezsignbulksendCreateEzsignbulksendtransmissionV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendCreateEzsignbulksendtransmissionV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignbulksendCreateEzsignbulksendtransmissionV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendCreateEzsignbulksendtransmissionV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendCreateObjectV1Response</returns>
        public EzsignbulksendCreateObjectV1Response EzsignbulksendCreateObjectV1(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendCreateObjectV1Response> localVarResponse = EzsignbulksendCreateObjectV1WithHttpInfo(ezsignbulksendCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendCreateObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1WithHttpInfo(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignbulksendCreateObjectV1Request' is set
            if (ezsignbulksendCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendCreateObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignbulksendCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignbulksendCreateObjectV1Response>("/1/object/ezsignbulksend", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendCreateObjectV1Response> EzsignbulksendCreateObjectV1Async(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendCreateObjectV1Response> localVarResponse = await EzsignbulksendCreateObjectV1WithHttpInfoAsync(ezsignbulksendCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignbulksend The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignbulksendCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendCreateObjectV1Response>> EzsignbulksendCreateObjectV1WithHttpInfoAsync(EzsignbulksendCreateObjectV1Request ezsignbulksendCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignbulksendCreateObjectV1Request' is set
            if (ezsignbulksendCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendCreateObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignbulksendCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignbulksendCreateObjectV1Response>("/1/object/ezsignbulksend", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendDeleteObjectV1Response</returns>
        public EzsignbulksendDeleteObjectV1Response EzsignbulksendDeleteObjectV1(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendDeleteObjectV1Response> localVarResponse = EzsignbulksendDeleteObjectV1WithHttpInfo(pkiEzsignbulksendID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendDeleteObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EzsignbulksendDeleteObjectV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendDeleteObjectV1Response> EzsignbulksendDeleteObjectV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendDeleteObjectV1Response> localVarResponse = await EzsignbulksendDeleteObjectV1WithHttpInfoAsync(pkiEzsignbulksendID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendDeleteObjectV1Response>> EzsignbulksendDeleteObjectV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EzsignbulksendDeleteObjectV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendEditObjectV1Response</returns>
        public EzsignbulksendEditObjectV1Response EzsignbulksendEditObjectV1(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendEditObjectV1Response> localVarResponse = EzsignbulksendEditObjectV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendEditObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1WithHttpInfo(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignbulksendEditObjectV1Request' is set
            if (ezsignbulksendEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendEditObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendEditObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.Data = ezsignbulksendEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsignbulksendEditObjectV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendEditObjectV1Response> EzsignbulksendEditObjectV1Async(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendEditObjectV1Response> localVarResponse = await EzsignbulksendEditObjectV1WithHttpInfoAsync(pkiEzsignbulksendID, ezsignbulksendEditObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendEditObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendEditObjectV1Response>> EzsignbulksendEditObjectV1WithHttpInfoAsync(int pkiEzsignbulksendID, EzsignbulksendEditObjectV1Request ezsignbulksendEditObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignbulksendEditObjectV1Request' is set
            if (ezsignbulksendEditObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendEditObjectV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendEditObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.Data = ezsignbulksendEditObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendEditObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsignbulksendEditObjectV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendEditObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string EzsignbulksendGetCsvTemplateV1(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<string> localVarResponse = EzsignbulksendGetCsvTemplateV1WithHttpInfo(pkiEzsignbulksendID, eCsvSeparator);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public eZmaxApi.Client.ApiResponse<string> EzsignbulksendGetCsvTemplateV1WithHttpInfo(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0)
        {
            // verify the required parameter 'eCsvSeparator' is set
            if (eCsvSeparator == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'eCsvSeparator' when calling ObjectEzsignbulksendApi->EzsignbulksendGetCsvTemplateV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eCsvSeparator", eCsvSeparator));

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetCsvTemplateV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetCsvTemplateV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> EzsignbulksendGetCsvTemplateV1Async(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<string> localVarResponse = await EzsignbulksendGetCsvTemplateV1WithHttpInfoAsync(pkiEzsignbulksendID, eCsvSeparator, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s empty Csv template 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="eCsvSeparator">Separator that will be used to separate fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<string>> EzsignbulksendGetCsvTemplateV1WithHttpInfoAsync(int pkiEzsignbulksendID, string eCsvSeparator, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eCsvSeparator' is set
            if (eCsvSeparator == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'eCsvSeparator' when calling ObjectEzsignbulksendApi->EzsignbulksendGetCsvTemplateV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eCsvSeparator", eCsvSeparator));

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetCsvTemplateV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetCsvTemplateV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        public EzsignbulksendGetEzsignbulksendtransmissionsV1Response EzsignbulksendGetEzsignbulksendtransmissionsV1(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> localVarResponse = EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(pkiEzsignbulksendID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetEzsignbulksendtransmissionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetEzsignbulksendtransmissionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetEzsignbulksendtransmissionsV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> EzsignbulksendGetEzsignbulksendtransmissionsV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response> localVarResponse = await EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfoAsync(pkiEzsignbulksendID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetEzsignbulksendtransmissionsV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>> EzsignbulksendGetEzsignbulksendtransmissionsV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetEzsignbulksendtransmissionsV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendGetEzsignbulksendtransmissionsV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetEzsignbulksendtransmissionsV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetEzsignsignaturesAutomaticV1Response</returns>
        public EzsignbulksendGetEzsignsignaturesAutomaticV1Response EzsignbulksendGetEzsignsignaturesAutomaticV1(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> localVarResponse = EzsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(pkiEzsignbulksendID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetEzsignsignaturesAutomaticV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> EzsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetEzsignsignaturesAutomaticV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> EzsignbulksendGetEzsignsignaturesAutomaticV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response> localVarResponse = await EzsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(pkiEzsignbulksendID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures Return the Ezsignsignatures that can be signed by the current user at the current step in the process
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetEzsignsignaturesAutomaticV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>> EzsignbulksendGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetFormsDataV1Response</returns>
        public EzsignbulksendGetFormsDataV1Response EzsignbulksendGetFormsDataV1(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetFormsDataV1Response> localVarResponse = EzsignbulksendGetFormsDataV1WithHttpInfo(pkiEzsignbulksendID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetFormsDataV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendGetFormsDataV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetFormsDataV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetFormsDataV1Response> EzsignbulksendGetFormsDataV1Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetFormsDataV1Response> localVarResponse = await EzsignbulksendGetFormsDataV1WithHttpInfoAsync(pkiEzsignbulksendID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend&#39;s forms data 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetFormsDataV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendGetFormsDataV1Response>> EzsignbulksendGetFormsDataV1WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/zip"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetFormsDataV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendGetFormsDataV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetFormsDataV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetListV1Response</returns>
        public EzsignbulksendGetListV1Response EzsignbulksendGetListV1(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetListV1Response> localVarResponse = EzsignbulksendGetListV1WithHttpInfo(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetListV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1WithHttpInfo(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendGetListV1Response>("/1/object/ezsignbulksend/getList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetListV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetListV1Response> EzsignbulksendGetListV1Async(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetListV1Response> localVarResponse = await EzsignbulksendGetListV1WithHttpInfoAsync(eOrderBy, iRowMax, iRowOffset, acceptLanguage, sFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Ezsignbulksend list Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |- --|- --| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eOrderBy">Specify how you want the results to be sorted (optional)</param>
        /// <param name="iRowMax"> (optional, default to 10000)</param>
        /// <param name="iRowOffset"> (optional, default to 0)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <param name="sFilter"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetListV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendGetListV1Response>> EzsignbulksendGetListV1WithHttpInfoAsync(string? eOrderBy = default(string?), int? iRowMax = default(int?), int? iRowOffset = default(int?), HeaderAcceptLanguage? acceptLanguage = default(HeaderAcceptLanguage?), string? sFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (eOrderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "eOrderBy", eOrderBy));
            }
            if (iRowMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowMax", iRowMax));
            }
            if (iRowOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "iRowOffset", iRowOffset));
            }
            if (sFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(eZmaxApi.Client.ClientUtils.ParameterToMultiMap("", "sFilter", sFilter));
            }
            if (acceptLanguage != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept-Language", eZmaxApi.Client.ClientUtils.ParameterToString(acceptLanguage)); // header parameter
            }

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetListV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendGetListV1Response>("/1/object/ezsignbulksend/getList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetListV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendGetObjectV2Response</returns>
        public EzsignbulksendGetObjectV2Response EzsignbulksendGetObjectV2(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetObjectV2Response> localVarResponse = EzsignbulksendGetObjectV2WithHttpInfo(pkiEzsignbulksendID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendGetObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendGetObjectV2Response> EzsignbulksendGetObjectV2WithHttpInfo(int pkiEzsignbulksendID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignbulksendGetObjectV2Response>("/2/object/ezsignbulksend/{pkiEzsignbulksendID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendGetObjectV2Response> EzsignbulksendGetObjectV2Async(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendGetObjectV2Response> localVarResponse = await EzsignbulksendGetObjectV2WithHttpInfoAsync(pkiEzsignbulksendID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendGetObjectV2Response>> EzsignbulksendGetObjectV2WithHttpInfoAsync(int pkiEzsignbulksendID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendGetObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignbulksendGetObjectV2Response>("/2/object/ezsignbulksend/{pkiEzsignbulksendID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendGetObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignbulksendReorderV1Response</returns>
        public EzsignbulksendReorderV1Response EzsignbulksendReorderV1(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendReorderV1Response> localVarResponse = EzsignbulksendReorderV1WithHttpInfo(pkiEzsignbulksendID, ezsignbulksendReorderV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignbulksendReorderV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1WithHttpInfo(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignbulksendReorderV1Request' is set
            if (ezsignbulksendReorderV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendReorderV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendReorderV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.Data = ezsignbulksendReorderV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendReorderV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignbulksendReorderV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendReorderV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignbulksendReorderV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignbulksendReorderV1Response> EzsignbulksendReorderV1Async(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignbulksendReorderV1Response> localVarResponse = await EzsignbulksendReorderV1WithHttpInfoAsync(pkiEzsignbulksendID, ezsignbulksendReorderV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignbulksendID"></param>
        /// <param name="ezsignbulksendReorderV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignbulksendReorderV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignbulksendReorderV1Response>> EzsignbulksendReorderV1WithHttpInfoAsync(int pkiEzsignbulksendID, EzsignbulksendReorderV1Request ezsignbulksendReorderV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignbulksendReorderV1Request' is set
            if (ezsignbulksendReorderV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignbulksendReorderV1Request' when calling ObjectEzsignbulksendApi->EzsignbulksendReorderV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignbulksendID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignbulksendID)); // path parameter
            localVarRequestOptions.Data = ezsignbulksendReorderV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignbulksendApi.EzsignbulksendReorderV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignbulksendReorderV1Response>("/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignbulksendReorderV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
