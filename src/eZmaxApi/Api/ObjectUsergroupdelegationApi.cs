/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp.Portable;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectUsergroupdelegationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <returns>UsergroupdelegationCreateObjectV1Response</returns>
        UsergroupdelegationCreateObjectV1Response UsergroupdelegationCreateObjectV1 (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request);

        /// <summary>
        /// Create a new Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupdelegationCreateObjectV1Response</returns>
        ApiResponse<UsergroupdelegationCreateObjectV1Response> UsergroupdelegationCreateObjectV1WithHttpInfo (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>UsergroupdelegationDeleteObjectV1Response</returns>
        UsergroupdelegationDeleteObjectV1Response UsergroupdelegationDeleteObjectV1 (int pkiUsergroupdelegationID);

        /// <summary>
        /// Delete an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>ApiResponse of UsergroupdelegationDeleteObjectV1Response</returns>
        ApiResponse<UsergroupdelegationDeleteObjectV1Response> UsergroupdelegationDeleteObjectV1WithHttpInfo (int pkiUsergroupdelegationID);
        /// <summary>
        /// Edit an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <returns>UsergroupdelegationEditObjectV1Response</returns>
        UsergroupdelegationEditObjectV1Response UsergroupdelegationEditObjectV1 (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request);

        /// <summary>
        /// Edit an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupdelegationEditObjectV1Response</returns>
        ApiResponse<UsergroupdelegationEditObjectV1Response> UsergroupdelegationEditObjectV1WithHttpInfo (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>UsergroupdelegationGetObjectV2Response</returns>
        UsergroupdelegationGetObjectV2Response UsergroupdelegationGetObjectV2 (int pkiUsergroupdelegationID);

        /// <summary>
        /// Retrieve an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>ApiResponse of UsergroupdelegationGetObjectV2Response</returns>
        ApiResponse<UsergroupdelegationGetObjectV2Response> UsergroupdelegationGetObjectV2WithHttpInfo (int pkiUsergroupdelegationID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupdelegationCreateObjectV1Response> UsergroupdelegationCreateObjectV1Async (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationCreateObjectV1Response>> UsergroupdelegationCreateObjectV1WithHttpInfoAsync (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupdelegationDeleteObjectV1Response> UsergroupdelegationDeleteObjectV1Async (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationDeleteObjectV1Response>> UsergroupdelegationDeleteObjectV1WithHttpInfoAsync (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationEditObjectV1Response</returns>
        System.Threading.Tasks.Task<UsergroupdelegationEditObjectV1Response> UsergroupdelegationEditObjectV1Async (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationEditObjectV1Response>> UsergroupdelegationEditObjectV1WithHttpInfoAsync (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationGetObjectV2Response</returns>
        System.Threading.Tasks.Task<UsergroupdelegationGetObjectV2Response> UsergroupdelegationGetObjectV2Async (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Usergroupdelegation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationGetObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationGetObjectV2Response>> UsergroupdelegationGetObjectV2WithHttpInfoAsync (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectUsergroupdelegationApi : IObjectUsergroupdelegationApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupdelegationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectUsergroupdelegationApi(String basePath)
        {
            this.Configuration = new eZmaxApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupdelegationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectUsergroupdelegationApi()
        {
            this.Configuration = eZmaxApi.Client.Configuration.Default;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectUsergroupdelegationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectUsergroupdelegationApi(eZmaxApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Usergroupdelegation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <returns>UsergroupdelegationCreateObjectV1Response</returns>
        public UsergroupdelegationCreateObjectV1Response UsergroupdelegationCreateObjectV1 (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request)
        {
             ApiResponse<UsergroupdelegationCreateObjectV1Response> localVarResponse = UsergroupdelegationCreateObjectV1WithHttpInfo(usergroupdelegationCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Usergroupdelegation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupdelegationCreateObjectV1Response</returns>
        public ApiResponse<UsergroupdelegationCreateObjectV1Response> UsergroupdelegationCreateObjectV1WithHttpInfo (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request)
        {
            // verify the required parameter 'usergroupdelegationCreateObjectV1Request' is set
            if (usergroupdelegationCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupdelegationCreateObjectV1Request' when calling ObjectUsergroupdelegationApi->UsergroupdelegationCreateObjectV1");

            var localVarPath = "./1/object/usergroupdelegation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usergroupdelegationCreateObjectV1Request != null && usergroupdelegationCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupdelegationCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupdelegationCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Usergroupdelegation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupdelegationCreateObjectV1Response> UsergroupdelegationCreateObjectV1Async (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupdelegationCreateObjectV1Response> localVarResponse = await UsergroupdelegationCreateObjectV1WithHttpInfoAsync(usergroupdelegationCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Usergroupdelegation The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usergroupdelegationCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationCreateObjectV1Response>> UsergroupdelegationCreateObjectV1WithHttpInfoAsync (UsergroupdelegationCreateObjectV1Request usergroupdelegationCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'usergroupdelegationCreateObjectV1Request' is set
            if (usergroupdelegationCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupdelegationCreateObjectV1Request' when calling ObjectUsergroupdelegationApi->UsergroupdelegationCreateObjectV1");

            var localVarPath = "./1/object/usergroupdelegation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usergroupdelegationCreateObjectV1Request != null && usergroupdelegationCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupdelegationCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupdelegationCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>UsergroupdelegationDeleteObjectV1Response</returns>
        public UsergroupdelegationDeleteObjectV1Response UsergroupdelegationDeleteObjectV1 (int pkiUsergroupdelegationID)
        {
             ApiResponse<UsergroupdelegationDeleteObjectV1Response> localVarResponse = UsergroupdelegationDeleteObjectV1WithHttpInfo(pkiUsergroupdelegationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>ApiResponse of UsergroupdelegationDeleteObjectV1Response</returns>
        public ApiResponse<UsergroupdelegationDeleteObjectV1Response> UsergroupdelegationDeleteObjectV1WithHttpInfo (int pkiUsergroupdelegationID)
        {
            // verify the required parameter 'pkiUsergroupdelegationID' is set
            if (pkiUsergroupdelegationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupdelegationID' when calling ObjectUsergroupdelegationApi->UsergroupdelegationDeleteObjectV1");

            var localVarPath = "./1/object/usergroupdelegation/{pkiUsergroupdelegationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupdelegationID != null) localVarPathParams.Add("pkiUsergroupdelegationID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupdelegationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupdelegationDeleteObjectV1Response> UsergroupdelegationDeleteObjectV1Async (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupdelegationDeleteObjectV1Response> localVarResponse = await UsergroupdelegationDeleteObjectV1WithHttpInfoAsync(pkiUsergroupdelegationID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationDeleteObjectV1Response>> UsergroupdelegationDeleteObjectV1WithHttpInfoAsync (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupdelegationID' is set
            if (pkiUsergroupdelegationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupdelegationID' when calling ObjectUsergroupdelegationApi->UsergroupdelegationDeleteObjectV1");

            var localVarPath = "./1/object/usergroupdelegation/{pkiUsergroupdelegationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupdelegationID != null) localVarPathParams.Add("pkiUsergroupdelegationID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupdelegationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationDeleteObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <returns>UsergroupdelegationEditObjectV1Response</returns>
        public UsergroupdelegationEditObjectV1Response UsergroupdelegationEditObjectV1 (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request)
        {
             ApiResponse<UsergroupdelegationEditObjectV1Response> localVarResponse = UsergroupdelegationEditObjectV1WithHttpInfo(pkiUsergroupdelegationID, usergroupdelegationEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <returns>ApiResponse of UsergroupdelegationEditObjectV1Response</returns>
        public ApiResponse<UsergroupdelegationEditObjectV1Response> UsergroupdelegationEditObjectV1WithHttpInfo (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request)
        {
            // verify the required parameter 'pkiUsergroupdelegationID' is set
            if (pkiUsergroupdelegationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupdelegationID' when calling ObjectUsergroupdelegationApi->UsergroupdelegationEditObjectV1");
            // verify the required parameter 'usergroupdelegationEditObjectV1Request' is set
            if (usergroupdelegationEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupdelegationEditObjectV1Request' when calling ObjectUsergroupdelegationApi->UsergroupdelegationEditObjectV1");

            var localVarPath = "./1/object/usergroupdelegation/{pkiUsergroupdelegationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupdelegationID != null) localVarPathParams.Add("pkiUsergroupdelegationID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupdelegationID)); // path parameter
            if (usergroupdelegationEditObjectV1Request != null && usergroupdelegationEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupdelegationEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupdelegationEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationEditObjectV1Response)));
        }

        /// <summary>
        /// Edit an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<UsergroupdelegationEditObjectV1Response> UsergroupdelegationEditObjectV1Async (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupdelegationEditObjectV1Response> localVarResponse = await UsergroupdelegationEditObjectV1WithHttpInfoAsync(pkiUsergroupdelegationID, usergroupdelegationEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="usergroupdelegationEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationEditObjectV1Response>> UsergroupdelegationEditObjectV1WithHttpInfoAsync (int pkiUsergroupdelegationID, UsergroupdelegationEditObjectV1Request usergroupdelegationEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupdelegationID' is set
            if (pkiUsergroupdelegationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupdelegationID' when calling ObjectUsergroupdelegationApi->UsergroupdelegationEditObjectV1");
            // verify the required parameter 'usergroupdelegationEditObjectV1Request' is set
            if (usergroupdelegationEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'usergroupdelegationEditObjectV1Request' when calling ObjectUsergroupdelegationApi->UsergroupdelegationEditObjectV1");

            var localVarPath = "./1/object/usergroupdelegation/{pkiUsergroupdelegationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupdelegationID != null) localVarPathParams.Add("pkiUsergroupdelegationID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupdelegationID)); // path parameter
            if (usergroupdelegationEditObjectV1Request != null && usergroupdelegationEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(usergroupdelegationEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = usergroupdelegationEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>UsergroupdelegationGetObjectV2Response</returns>
        public UsergroupdelegationGetObjectV2Response UsergroupdelegationGetObjectV2 (int pkiUsergroupdelegationID)
        {
             ApiResponse<UsergroupdelegationGetObjectV2Response> localVarResponse = UsergroupdelegationGetObjectV2WithHttpInfo(pkiUsergroupdelegationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <returns>ApiResponse of UsergroupdelegationGetObjectV2Response</returns>
        public ApiResponse<UsergroupdelegationGetObjectV2Response> UsergroupdelegationGetObjectV2WithHttpInfo (int pkiUsergroupdelegationID)
        {
            // verify the required parameter 'pkiUsergroupdelegationID' is set
            if (pkiUsergroupdelegationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupdelegationID' when calling ObjectUsergroupdelegationApi->UsergroupdelegationGetObjectV2");

            var localVarPath = "./2/object/usergroupdelegation/{pkiUsergroupdelegationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupdelegationID != null) localVarPathParams.Add("pkiUsergroupdelegationID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupdelegationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationGetObjectV2Response)));
        }

        /// <summary>
        /// Retrieve an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UsergroupdelegationGetObjectV2Response</returns>
        public async System.Threading.Tasks.Task<UsergroupdelegationGetObjectV2Response> UsergroupdelegationGetObjectV2Async (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UsergroupdelegationGetObjectV2Response> localVarResponse = await UsergroupdelegationGetObjectV2WithHttpInfoAsync(pkiUsergroupdelegationID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Usergroupdelegation 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UsergroupdelegationGetObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsergroupdelegationGetObjectV2Response>> UsergroupdelegationGetObjectV2WithHttpInfoAsync (int pkiUsergroupdelegationID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiUsergroupdelegationID' is set
            if (pkiUsergroupdelegationID == null)
                throw new ApiException(400, "Missing required parameter 'pkiUsergroupdelegationID' when calling ObjectUsergroupdelegationApi->UsergroupdelegationGetObjectV2");

            var localVarPath = "./2/object/usergroupdelegation/{pkiUsergroupdelegationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiUsergroupdelegationID != null) localVarPathParams.Add("pkiUsergroupdelegationID", this.Configuration.ApiClient.ParameterToString(pkiUsergroupdelegationID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsergroupdelegationGetObjectV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsergroupdelegationGetObjectV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsergroupdelegationGetObjectV2Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsergroupdelegationGetObjectV2Response)));
        }

    }
}
