/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using eZmaxApi.Client;
using eZmaxApi.Model;

namespace eZmaxApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignatureApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureCreateObjectV1Response</returns>
        [Obsolete]
        EzsignsignatureCreateObjectV1Response EzsignsignatureCreateObjectV1(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV1Response</returns>
        [Obsolete]
        ApiResponse<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1WithHttpInfo(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureCreateObjectV2Response</returns>
        [Obsolete]
        EzsignsignatureCreateObjectV2Response EzsignsignatureCreateObjectV2(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV2Response</returns>
        [Obsolete]
        ApiResponse<EzsignsignatureCreateObjectV2Response> EzsignsignatureCreateObjectV2WithHttpInfo(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0);
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureCreateObjectV3Response</returns>
        EzsignsignatureCreateObjectV3Response EzsignsignatureCreateObjectV3(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0);

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV3Response</returns>
        ApiResponse<EzsignsignatureCreateObjectV3Response> EzsignsignatureCreateObjectV3WithHttpInfo(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0);
        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureDeleteObjectV1Response</returns>
        EzsignsignatureDeleteObjectV1Response EzsignsignatureDeleteObjectV1(int pkiEzsignsignatureID, int operationIndex = 0);

        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureDeleteObjectV1Response</returns>
        ApiResponse<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1WithHttpInfo(int pkiEzsignsignatureID, int operationIndex = 0);
        /// <summary>
        /// Edit an existing Ezsignsignature
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureEditObjectV2Response</returns>
        EzsignsignatureEditObjectV2Response EzsignsignatureEditObjectV2(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0);

        /// <summary>
        /// Edit an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureEditObjectV2Response</returns>
        ApiResponse<EzsignsignatureEditObjectV2Response> EzsignsignatureEditObjectV2WithHttpInfo(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureGetEzsignsignatureattachmentV1Response</returns>
        EzsignsignatureGetEzsignsignatureattachmentV1Response EzsignsignatureGetEzsignsignatureattachmentV1(int pkiEzsignsignatureID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureGetEzsignsignatureattachmentV1Response</returns>
        ApiResponse<EzsignsignatureGetEzsignsignatureattachmentV1Response> EzsignsignatureGetEzsignsignatureattachmentV1WithHttpInfo(int pkiEzsignsignatureID, int operationIndex = 0);
        /// <summary>
        /// Retrieve all automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return all the Ezsignsignatures that can be signed by the current user
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureGetEzsignsignaturesAutomaticV1Response</returns>
        EzsignsignatureGetEzsignsignaturesAutomaticV1Response EzsignsignatureGetEzsignsignaturesAutomaticV1(int operationIndex = 0);

        /// <summary>
        /// Retrieve all automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return all the Ezsignsignatures that can be signed by the current user
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureGetEzsignsignaturesAutomaticV1Response</returns>
        ApiResponse<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> EzsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureGetObjectV3Response</returns>
        EzsignsignatureGetObjectV3Response EzsignsignatureGetObjectV3(int pkiEzsignsignatureID, int operationIndex = 0);

        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureGetObjectV3Response</returns>
        ApiResponse<EzsignsignatureGetObjectV3Response> EzsignsignatureGetObjectV3WithHttpInfo(int pkiEzsignsignatureID, int operationIndex = 0);
        /// <summary>
        /// Sign the Ezsignsignature
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureSignV1Response</returns>
        EzsignsignatureSignV1Response EzsignsignatureSignV1(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0);

        /// <summary>
        /// Sign the Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureSignV1Response</returns>
        ApiResponse<EzsignsignatureSignV1Response> EzsignsignatureSignV1WithHttpInfo(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignatureApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureCreateObjectV1Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1Async(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV1Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureCreateObjectV1Response>> EzsignsignatureCreateObjectV1WithHttpInfoAsync(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureCreateObjectV2Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<EzsignsignatureCreateObjectV2Response> EzsignsignatureCreateObjectV2Async(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV2Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureCreateObjectV2Response>> EzsignsignatureCreateObjectV2WithHttpInfoAsync(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureCreateObjectV3Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureCreateObjectV3Response> EzsignsignatureCreateObjectV3Async(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureCreateObjectV3Response>> EzsignsignatureCreateObjectV3WithHttpInfoAsync(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1Async(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureDeleteObjectV1Response>> EzsignsignatureDeleteObjectV1WithHttpInfoAsync(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Edit an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureEditObjectV2Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureEditObjectV2Response> EzsignsignatureEditObjectV2Async(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Edit an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureEditObjectV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureEditObjectV2Response>> EzsignsignatureEditObjectV2WithHttpInfoAsync(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureGetEzsignsignatureattachmentV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureGetEzsignsignatureattachmentV1Response> EzsignsignatureGetEzsignsignatureattachmentV1Async(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetEzsignsignatureattachmentV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureGetEzsignsignatureattachmentV1Response>> EzsignsignatureGetEzsignsignatureattachmentV1WithHttpInfoAsync(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve all automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return all the Ezsignsignatures that can be signed by the current user
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureGetEzsignsignaturesAutomaticV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> EzsignsignatureGetEzsignsignaturesAutomaticV1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all automatic Ezsignsignatures
        /// </summary>
        /// <remarks>
        /// Return all the Ezsignsignatures that can be signed by the current user
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetEzsignsignaturesAutomaticV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureGetEzsignsignaturesAutomaticV1Response>> EzsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureGetObjectV3Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureGetObjectV3Response> EzsignsignatureGetObjectV3Async(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetObjectV3Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureGetObjectV3Response>> EzsignsignatureGetObjectV3WithHttpInfoAsync(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Sign the Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureSignV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureSignV1Response> EzsignsignatureSignV1Async(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Sign the Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureSignV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureSignV1Response>> EzsignsignatureSignV1WithHttpInfoAsync(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignatureApi : IObjectEzsignsignatureApiSync, IObjectEzsignsignatureApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignsignatureApi : IObjectEzsignsignatureApi
    {
        private eZmaxApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignatureApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignatureApi(string basePath)
        {
            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                new eZmaxApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignsignatureApi(eZmaxApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = eZmaxApi.Client.Configuration.MergeConfigurations(
                eZmaxApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new eZmaxApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ObjectEzsignsignatureApi(eZmaxApi.Client.ISynchronousClient client, eZmaxApi.Client.IAsynchronousClient asyncClient, eZmaxApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = eZmaxApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public eZmaxApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public eZmaxApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureCreateObjectV1Response</returns>
        [Obsolete]
        public EzsignsignatureCreateObjectV1Response EzsignsignatureCreateObjectV1(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV1Response> localVarResponse = EzsignsignatureCreateObjectV1WithHttpInfo(ezsignsignatureCreateObjectV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV1Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1WithHttpInfo(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV1Request' is set
            if (ezsignsignatureCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignatureCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignsignatureCreateObjectV1Response>("/1/object/ezsignsignature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureCreateObjectV1Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1Async(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV1Response> localVarResponse = await EzsignsignatureCreateObjectV1WithHttpInfoAsync(ezsignsignatureCreateObjectV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV1Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV1Response>> EzsignsignatureCreateObjectV1WithHttpInfoAsync(List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV1Request' is set
            if (ezsignsignatureCreateObjectV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignatureCreateObjectV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureCreateObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignsignatureCreateObjectV1Response>("/1/object/ezsignsignature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureCreateObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureCreateObjectV2Response</returns>
        [Obsolete]
        public EzsignsignatureCreateObjectV2Response EzsignsignatureCreateObjectV2(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV2Response> localVarResponse = EzsignsignatureCreateObjectV2WithHttpInfo(ezsignsignatureCreateObjectV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV2Response</returns>
        [Obsolete]
        public eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV2Response> EzsignsignatureCreateObjectV2WithHttpInfo(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV2Request' is set
            if (ezsignsignatureCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV2Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignatureCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignsignatureCreateObjectV2Response>("/2/object/ezsignsignature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureCreateObjectV2Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EzsignsignatureCreateObjectV2Response> EzsignsignatureCreateObjectV2Async(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV2Response> localVarResponse = await EzsignsignatureCreateObjectV2WithHttpInfoAsync(ezsignsignatureCreateObjectV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV2Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV2Response>> EzsignsignatureCreateObjectV2WithHttpInfoAsync(EzsignsignatureCreateObjectV2Request ezsignsignatureCreateObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV2Request' is set
            if (ezsignsignatureCreateObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV2Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignatureCreateObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureCreateObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignsignatureCreateObjectV2Response>("/2/object/ezsignsignature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureCreateObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureCreateObjectV3Response</returns>
        public EzsignsignatureCreateObjectV3Response EzsignsignatureCreateObjectV3(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV3Response> localVarResponse = EzsignsignatureCreateObjectV3WithHttpInfo(ezsignsignatureCreateObjectV3Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV3Response> EzsignsignatureCreateObjectV3WithHttpInfo(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV3Request' is set
            if (ezsignsignatureCreateObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV3Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV3");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignatureCreateObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureCreateObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignsignatureCreateObjectV3Response>("/3/object/ezsignsignature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureCreateObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureCreateObjectV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureCreateObjectV3Response> EzsignsignatureCreateObjectV3Async(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV3Response> localVarResponse = await EzsignsignatureCreateObjectV3WithHttpInfoAsync(ezsignsignatureCreateObjectV3Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV3Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureCreateObjectV3Response>> EzsignsignatureCreateObjectV3WithHttpInfoAsync(EzsignsignatureCreateObjectV3Request ezsignsignatureCreateObjectV3Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV3Request' is set
            if (ezsignsignatureCreateObjectV3Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV3Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV3");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = ezsignsignatureCreateObjectV3Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureCreateObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignsignatureCreateObjectV3Response>("/3/object/ezsignsignature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureCreateObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureDeleteObjectV1Response</returns>
        public EzsignsignatureDeleteObjectV1Response EzsignsignatureDeleteObjectV1(int pkiEzsignsignatureID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureDeleteObjectV1Response> localVarResponse = EzsignsignatureDeleteObjectV1WithHttpInfo(pkiEzsignsignatureID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureDeleteObjectV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1WithHttpInfo(int pkiEzsignsignatureID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EzsignsignatureDeleteObjectV1Response>("/1/object/ezsignsignature/{pkiEzsignsignatureID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1Async(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureDeleteObjectV1Response> localVarResponse = await EzsignsignatureDeleteObjectV1WithHttpInfoAsync(pkiEzsignsignatureID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureDeleteObjectV1Response>> EzsignsignatureDeleteObjectV1WithHttpInfoAsync(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureDeleteObjectV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EzsignsignatureDeleteObjectV1Response>("/1/object/ezsignsignature/{pkiEzsignsignatureID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureDeleteObjectV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureEditObjectV2Response</returns>
        public EzsignsignatureEditObjectV2Response EzsignsignatureEditObjectV2(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureEditObjectV2Response> localVarResponse = EzsignsignatureEditObjectV2WithHttpInfo(pkiEzsignsignatureID, ezsignsignatureEditObjectV2Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureEditObjectV2Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureEditObjectV2Response> EzsignsignatureEditObjectV2WithHttpInfo(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignatureEditObjectV2Request' is set
            if (ezsignsignatureEditObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureEditObjectV2Request' when calling ObjectEzsignsignatureApi->EzsignsignatureEditObjectV2");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter
            localVarRequestOptions.Data = ezsignsignatureEditObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureEditObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EzsignsignatureEditObjectV2Response>("/2/object/ezsignsignature/{pkiEzsignsignatureID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureEditObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureEditObjectV2Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureEditObjectV2Response> EzsignsignatureEditObjectV2Async(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureEditObjectV2Response> localVarResponse = await EzsignsignatureEditObjectV2WithHttpInfoAsync(pkiEzsignsignatureID, ezsignsignatureEditObjectV2Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureEditObjectV2Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureEditObjectV2Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureEditObjectV2Response>> EzsignsignatureEditObjectV2WithHttpInfoAsync(int pkiEzsignsignatureID, EzsignsignatureEditObjectV2Request ezsignsignatureEditObjectV2Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignatureEditObjectV2Request' is set
            if (ezsignsignatureEditObjectV2Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureEditObjectV2Request' when calling ObjectEzsignsignatureApi->EzsignsignatureEditObjectV2");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter
            localVarRequestOptions.Data = ezsignsignatureEditObjectV2Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureEditObjectV2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EzsignsignatureEditObjectV2Response>("/2/object/ezsignsignature/{pkiEzsignsignatureID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureEditObjectV2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureGetEzsignsignatureattachmentV1Response</returns>
        public EzsignsignatureGetEzsignsignatureattachmentV1Response EzsignsignatureGetEzsignsignatureattachmentV1(int pkiEzsignsignatureID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignatureattachmentV1Response> localVarResponse = EzsignsignatureGetEzsignsignatureattachmentV1WithHttpInfo(pkiEzsignsignatureID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureGetEzsignsignatureattachmentV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignatureattachmentV1Response> EzsignsignatureGetEzsignsignatureattachmentV1WithHttpInfo(int pkiEzsignsignatureID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureGetEzsignsignatureattachmentV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignsignatureGetEzsignsignatureattachmentV1Response>("/1/object/ezsignsignature/{pkiEzsignsignatureID}/getEzsignsignatureattachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureGetEzsignsignatureattachmentV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureGetEzsignsignatureattachmentV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureGetEzsignsignatureattachmentV1Response> EzsignsignatureGetEzsignsignatureattachmentV1Async(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignatureattachmentV1Response> localVarResponse = await EzsignsignatureGetEzsignsignatureattachmentV1WithHttpInfoAsync(pkiEzsignsignatureID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s Ezsignsignatureattachments 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetEzsignsignatureattachmentV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignatureattachmentV1Response>> EzsignsignatureGetEzsignsignatureattachmentV1WithHttpInfoAsync(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureGetEzsignsignatureattachmentV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignsignatureGetEzsignsignatureattachmentV1Response>("/1/object/ezsignsignature/{pkiEzsignsignatureID}/getEzsignsignatureattachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureGetEzsignsignatureattachmentV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all automatic Ezsignsignatures Return all the Ezsignsignatures that can be signed by the current user
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureGetEzsignsignaturesAutomaticV1Response</returns>
        public EzsignsignatureGetEzsignsignaturesAutomaticV1Response EzsignsignatureGetEzsignsignaturesAutomaticV1(int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> localVarResponse = EzsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all automatic Ezsignsignatures Return all the Ezsignsignatures that can be signed by the current user
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureGetEzsignsignaturesAutomaticV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> EzsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfo(int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignsignatureGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignsignature/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all automatic Ezsignsignatures Return all the Ezsignsignatures that can be signed by the current user
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureGetEzsignsignaturesAutomaticV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> EzsignsignatureGetEzsignsignaturesAutomaticV1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignaturesAutomaticV1Response> localVarResponse = await EzsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all automatic Ezsignsignatures Return all the Ezsignsignatures that can be signed by the current user
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetEzsignsignaturesAutomaticV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureGetEzsignsignaturesAutomaticV1Response>> EzsignsignatureGetEzsignsignaturesAutomaticV1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureGetEzsignsignaturesAutomaticV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignsignatureGetEzsignsignaturesAutomaticV1Response>("/1/object/ezsignsignature/getEzsignsignaturesAutomatic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureGetEzsignsignaturesAutomaticV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureGetObjectV3Response</returns>
        public EzsignsignatureGetObjectV3Response EzsignsignatureGetObjectV3(int pkiEzsignsignatureID, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureGetObjectV3Response> localVarResponse = EzsignsignatureGetObjectV3WithHttpInfo(pkiEzsignsignatureID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureGetObjectV3Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureGetObjectV3Response> EzsignsignatureGetObjectV3WithHttpInfo(int pkiEzsignsignatureID, int operationIndex = 0)
        {
            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureGetObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EzsignsignatureGetObjectV3Response>("/3/object/ezsignsignature/{pkiEzsignsignatureID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureGetObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureGetObjectV3Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureGetObjectV3Response> EzsignsignatureGetObjectV3Async(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureGetObjectV3Response> localVarResponse = await EzsignsignatureGetObjectV3WithHttpInfoAsync(pkiEzsignsignatureID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetObjectV3Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureGetObjectV3Response>> EzsignsignatureGetObjectV3WithHttpInfoAsync(int pkiEzsignsignatureID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureGetObjectV3";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EzsignsignatureGetObjectV3Response>("/3/object/ezsignsignature/{pkiEzsignsignatureID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureGetObjectV3", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign the Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EzsignsignatureSignV1Response</returns>
        public EzsignsignatureSignV1Response EzsignsignatureSignV1(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0)
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureSignV1Response> localVarResponse = EzsignsignatureSignV1WithHttpInfo(pkiEzsignsignatureID, ezsignsignatureSignV1Request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign the Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EzsignsignatureSignV1Response</returns>
        public eZmaxApi.Client.ApiResponse<EzsignsignatureSignV1Response> EzsignsignatureSignV1WithHttpInfo(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0)
        {
            // verify the required parameter 'ezsignsignatureSignV1Request' is set
            if (ezsignsignatureSignV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureSignV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureSignV1");
            }

            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter
            localVarRequestOptions.Data = ezsignsignatureSignV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureSignV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EzsignsignatureSignV1Response>("/1/object/ezsignsignature/{pkiEzsignsignatureID}/sign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureSignV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign the Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EzsignsignatureSignV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureSignV1Response> EzsignsignatureSignV1Async(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            eZmaxApi.Client.ApiResponse<EzsignsignatureSignV1Response> localVarResponse = await EzsignsignatureSignV1WithHttpInfoAsync(pkiEzsignsignatureID, ezsignsignatureSignV1Request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign the Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID"></param>
        /// <param name="ezsignsignatureSignV1Request"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EzsignsignatureSignV1Response)</returns>
        public async System.Threading.Tasks.Task<eZmaxApi.Client.ApiResponse<EzsignsignatureSignV1Response>> EzsignsignatureSignV1WithHttpInfoAsync(int pkiEzsignsignatureID, EzsignsignatureSignV1Request ezsignsignatureSignV1Request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ezsignsignatureSignV1Request' is set
            if (ezsignsignatureSignV1Request == null)
            {
                throw new eZmaxApi.Client.ApiException(400, "Missing required parameter 'ezsignsignatureSignV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureSignV1");
            }


            eZmaxApi.Client.RequestOptions localVarRequestOptions = new eZmaxApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = eZmaxApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = eZmaxApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("pkiEzsignsignatureID", eZmaxApi.Client.ClientUtils.ParameterToString(pkiEzsignsignatureID)); // path parameter
            localVarRequestOptions.Data = ezsignsignatureSignV1Request;

            localVarRequestOptions.Operation = "ObjectEzsignsignatureApi.EzsignsignatureSignV1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EzsignsignatureSignV1Response>("/1/object/ezsignsignature/{pkiEzsignsignatureID}/sign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EzsignsignatureSignV1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
