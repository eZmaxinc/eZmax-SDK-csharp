/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxinvoicinguser Object
    /// </summary>
    [DataContract(Name = "ezmaxinvoicinguser-Response")]
    public partial class EzmaxinvoicinguserResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzmaxinvoicinguserVariationezsign
        /// </summary>
        [DataMember(Name = "eEzmaxinvoicinguserVariationezsign", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzmaxinvoicinguserVariationezsign EEzmaxinvoicinguserVariationezsign { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicinguserResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxinvoicinguserResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicinguserResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezmaxinvoicinguser.</param>
        /// <param name="">The unique ID of the Ezmaxinvoicing.</param>
        /// <param name="">The unique ID of the Billingentityinternal. (required).</param>
        /// <param name="">The description of the Billingentityinternal in the language of the requester (required).</param>
        /// <param name="">The unique ID of the User (required).</param>
        /// <param name="">The number of ezsign documents (required).</param>
        /// <param name="">Whether there is an eZsign account (required).</param>
        /// <param name="">Whether it is billable for eZsign (required).</param>
        /// <param name=""> (required).</param>
        public EzmaxinvoicinguserResponse(int  = default(int), int  = default(int), int  = default(int), string  = default(string), int  = default(int), int  = default(int), bool  = default(bool), bool  = default(bool), FieldEEzmaxinvoicinguserVariationezsign  = default(FieldEEzmaxinvoicinguserVariationezsign))
        {
            this.FkiBillingentityinternalID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzmaxinvoicinguserResponse and cannot be null");
            }
            this.SBillingentityinternalDescriptionX = ;
            this.FkiUserID = ;
            this.IEzmaxinvoicinguserEzsigndocument = ;
            this.BEzmaxinvoicinguserEzsignaccount = ;
            this.BEzmaxinvoicinguserBillableezsign = ;
            this.EEzmaxinvoicinguserVariationezsign = ;
            this.PkiEzmaxinvoicinguserID = ;
            this.FkiEzmaxinvoicingID = ;
        }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicinguser
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicinguser</value>
        /* <example>202</example>*/
        [DataMember(Name = "pkiEzmaxinvoicinguserID", EmitDefaultValue = false)]
        public int PkiEzmaxinvoicinguserID { get; set; }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicing
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicing</value>
        /* <example>28</example>*/
        [DataMember(Name = "fkiEzmaxinvoicingID", EmitDefaultValue = false)]
        public int FkiEzmaxinvoicingID { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiBillingentityinternalID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in the language of the requester
        /// </summary>
        /// <value>The description of the Billingentityinternal in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sBillingentityinternalDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SBillingentityinternalDescriptionX { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The number of ezsign documents
        /// </summary>
        /// <value>The number of ezsign documents</value>
        /* <example>243</example>*/
        [DataMember(Name = "iEzmaxinvoicinguserEzsigndocument", IsRequired = true, EmitDefaultValue = true)]
        public int IEzmaxinvoicinguserEzsigndocument { get; set; }

        /// <summary>
        /// Whether there is an eZsign account
        /// </summary>
        /// <value>Whether there is an eZsign account</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzmaxinvoicinguserEzsignaccount", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzmaxinvoicinguserEzsignaccount { get; set; }

        /// <summary>
        /// Whether it is billable for eZsign
        /// </summary>
        /// <value>Whether it is billable for eZsign</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzmaxinvoicinguserBillableezsign", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzmaxinvoicinguserBillableezsign { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzmaxinvoicinguserResponse {\n");
            sb.Append("  PkiEzmaxinvoicinguserID: ").Append(PkiEzmaxinvoicinguserID).Append("\n");
            sb.Append("  FkiEzmaxinvoicingID: ").Append(FkiEzmaxinvoicingID).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  SBillingentityinternalDescriptionX: ").Append(SBillingentityinternalDescriptionX).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  IEzmaxinvoicinguserEzsigndocument: ").Append(IEzmaxinvoicinguserEzsigndocument).Append("\n");
            sb.Append("  BEzmaxinvoicinguserEzsignaccount: ").Append(BEzmaxinvoicinguserEzsignaccount).Append("\n");
            sb.Append("  BEzmaxinvoicinguserBillableezsign: ").Append(BEzmaxinvoicinguserBillableezsign).Append("\n");
            sb.Append("  EEzmaxinvoicinguserVariationezsign: ").Append(EEzmaxinvoicinguserVariationezsign).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzmaxinvoicinguserID (int) minimum
            if (this.PkiEzmaxinvoicinguserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzmaxinvoicinguserID, must be a value greater than or equal to 0.", new [] { "PkiEzmaxinvoicinguserID" });
            }

            // FkiEzmaxinvoicingID (int) minimum
            if (this.FkiEzmaxinvoicingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzmaxinvoicingID, must be a value greater than or equal to 0.", new [] { "FkiEzmaxinvoicingID" });
            }

            // FkiBillingentityinternalID (int) minimum
            if (this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // IEzmaxinvoicinguserEzsigndocument (int) minimum
            if (this.IEzmaxinvoicinguserEzsigndocument < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzmaxinvoicinguserEzsigndocument, must be a value greater than or equal to 0.", new [] { "IEzmaxinvoicinguserEzsigndocument" });
            }

            yield break;
        }
    }

}
