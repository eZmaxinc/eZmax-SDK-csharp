/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.9
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigntemplateformfield Object
    /// </summary>
    [DataContract]
    public partial class EzsigntemplateformfieldResponse :  IEquatable<EzsigntemplateformfieldResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateformfieldResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateformfieldID">The unique ID of the Ezsigntemplateformfield (required).</param>
        /// <param name="iEzsigntemplatedocumentpagePagenumber">The page number in the Ezsigntemplatedocument (required).</param>
        /// <param name="sEzsigntemplateformfieldLabel">The Label for the Ezsigntemplateformfield (required).</param>
        /// <param name="sEzsigntemplateformfieldValue">The value for the Ezsigntemplateformfield  This can only be set if eEzsigntemplateformfieldgroupType is Checkbox or Radio (required).</param>
        /// <param name="iEzsigntemplateformfieldX">The X coordinate (Horizontal) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsigntemplateformfieldY">The Y coordinate (Vertical) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsigntemplateformfieldWidth">The Width of the Ezsigntemplateformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsigntemplateformfieldgroupType.  | eEzsigntemplateformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     | (required).</param>
        /// <param name="iEzsigntemplateformfieldHeight">The Height of the Ezsigntemplateformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsigntemplateformfieldgroupType.  | eEzsigntemplateformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     |  (required).</param>
        /// <param name="bEzsigntemplateformfieldSelected">Whether the Ezsigntemplateformfield is selected or not by default.  This can only be set if eEzsigntemplateformfieldgroupType is **Checkbox** or **Radio**.</param>
        public EzsigntemplateformfieldResponse(int pkiEzsigntemplateformfieldID = default(int), int iEzsigntemplatedocumentpagePagenumber = default(int), string sEzsigntemplateformfieldLabel = default(string), string sEzsigntemplateformfieldValue = default(string), int iEzsigntemplateformfieldX = default(int), int iEzsigntemplateformfieldY = default(int), int iEzsigntemplateformfieldWidth = default(int), int iEzsigntemplateformfieldHeight = default(int), bool bEzsigntemplateformfieldSelected = default(bool))
        {
            // to ensure "pkiEzsigntemplateformfieldID" is required (not null)
            if (pkiEzsigntemplateformfieldID == null)
            {
                throw new InvalidDataException("pkiEzsigntemplateformfieldID is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigntemplateformfieldID = pkiEzsigntemplateformfieldID;
            }

            // to ensure "iEzsigntemplatedocumentpagePagenumber" is required (not null)
            if (iEzsigntemplatedocumentpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsigntemplatedocumentpagePagenumber is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
            }

            // to ensure "sEzsigntemplateformfieldLabel" is required (not null)
            if (sEzsigntemplateformfieldLabel == null)
            {
                throw new InvalidDataException("sEzsigntemplateformfieldLabel is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.SEzsigntemplateformfieldLabel = sEzsigntemplateformfieldLabel;
            }

            // to ensure "sEzsigntemplateformfieldValue" is required (not null)
            if (sEzsigntemplateformfieldValue == null)
            {
                throw new InvalidDataException("sEzsigntemplateformfieldValue is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.SEzsigntemplateformfieldValue = sEzsigntemplateformfieldValue;
            }

            // to ensure "iEzsigntemplateformfieldX" is required (not null)
            if (iEzsigntemplateformfieldX == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldX is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldX = iEzsigntemplateformfieldX;
            }

            // to ensure "iEzsigntemplateformfieldY" is required (not null)
            if (iEzsigntemplateformfieldY == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldY is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldY = iEzsigntemplateformfieldY;
            }

            // to ensure "iEzsigntemplateformfieldWidth" is required (not null)
            if (iEzsigntemplateformfieldWidth == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldWidth is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldWidth = iEzsigntemplateformfieldWidth;
            }

            // to ensure "iEzsigntemplateformfieldHeight" is required (not null)
            if (iEzsigntemplateformfieldHeight == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldHeight is a required property for EzsigntemplateformfieldResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldHeight = iEzsigntemplateformfieldHeight;
            }

            this.BEzsigntemplateformfieldSelected = bEzsigntemplateformfieldSelected;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfield
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfield</value>
        [DataMember(Name="pkiEzsigntemplateformfieldID", EmitDefaultValue=true)]
        public int PkiEzsigntemplateformfieldID { get; set; }

        /// <summary>
        /// The page number in the Ezsigntemplatedocument
        /// </summary>
        /// <value>The page number in the Ezsigntemplatedocument</value>
        [DataMember(Name="iEzsigntemplatedocumentpagePagenumber", EmitDefaultValue=true)]
        public int IEzsigntemplatedocumentpagePagenumber { get; set; }

        /// <summary>
        /// The Label for the Ezsigntemplateformfield
        /// </summary>
        /// <value>The Label for the Ezsigntemplateformfield</value>
        [DataMember(Name="sEzsigntemplateformfieldLabel", EmitDefaultValue=true)]
        public string SEzsigntemplateformfieldLabel { get; set; }

        /// <summary>
        /// The value for the Ezsigntemplateformfield  This can only be set if eEzsigntemplateformfieldgroupType is Checkbox or Radio
        /// </summary>
        /// <value>The value for the Ezsigntemplateformfield  This can only be set if eEzsigntemplateformfieldgroupType is Checkbox or Radio</value>
        [DataMember(Name="sEzsigntemplateformfieldValue", EmitDefaultValue=true)]
        public string SEzsigntemplateformfieldValue { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsigntemplateformfieldX", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsigntemplateformfieldY", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldY { get; set; }

        /// <summary>
        /// The Width of the Ezsigntemplateformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsigntemplateformfieldgroupType.  | eEzsigntemplateformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     |
        /// </summary>
        /// <value>The Width of the Ezsigntemplateformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsigntemplateformfieldgroupType.  | eEzsigntemplateformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     |</value>
        [DataMember(Name="iEzsigntemplateformfieldWidth", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldWidth { get; set; }

        /// <summary>
        /// The Height of the Ezsigntemplateformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsigntemplateformfieldgroupType.  | eEzsigntemplateformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     | 
        /// </summary>
        /// <value>The Height of the Ezsigntemplateformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsigntemplateformfieldgroupType.  | eEzsigntemplateformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     | </value>
        [DataMember(Name="iEzsigntemplateformfieldHeight", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldHeight { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplateformfield is selected or not by default.  This can only be set if eEzsigntemplateformfieldgroupType is **Checkbox** or **Radio**
        /// </summary>
        /// <value>Whether the Ezsigntemplateformfield is selected or not by default.  This can only be set if eEzsigntemplateformfieldgroupType is **Checkbox** or **Radio**</value>
        [DataMember(Name="bEzsigntemplateformfieldSelected", EmitDefaultValue=false)]
        public bool BEzsigntemplateformfieldSelected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplateformfieldResponse {\n");
            sb.Append("  PkiEzsigntemplateformfieldID: ").Append(PkiEzsigntemplateformfieldID).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpagePagenumber: ").Append(IEzsigntemplatedocumentpagePagenumber).Append("\n");
            sb.Append("  SEzsigntemplateformfieldLabel: ").Append(SEzsigntemplateformfieldLabel).Append("\n");
            sb.Append("  SEzsigntemplateformfieldValue: ").Append(SEzsigntemplateformfieldValue).Append("\n");
            sb.Append("  IEzsigntemplateformfieldX: ").Append(IEzsigntemplateformfieldX).Append("\n");
            sb.Append("  IEzsigntemplateformfieldY: ").Append(IEzsigntemplateformfieldY).Append("\n");
            sb.Append("  IEzsigntemplateformfieldWidth: ").Append(IEzsigntemplateformfieldWidth).Append("\n");
            sb.Append("  IEzsigntemplateformfieldHeight: ").Append(IEzsigntemplateformfieldHeight).Append("\n");
            sb.Append("  BEzsigntemplateformfieldSelected: ").Append(BEzsigntemplateformfieldSelected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplateformfieldResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplateformfieldResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplateformfieldResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplateformfieldResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigntemplateformfieldID == input.PkiEzsigntemplateformfieldID ||
                    (this.PkiEzsigntemplateformfieldID != null &&
                    this.PkiEzsigntemplateformfieldID.Equals(input.PkiEzsigntemplateformfieldID))
                ) && 
                (
                    this.IEzsigntemplatedocumentpagePagenumber == input.IEzsigntemplatedocumentpagePagenumber ||
                    (this.IEzsigntemplatedocumentpagePagenumber != null &&
                    this.IEzsigntemplatedocumentpagePagenumber.Equals(input.IEzsigntemplatedocumentpagePagenumber))
                ) && 
                (
                    this.SEzsigntemplateformfieldLabel == input.SEzsigntemplateformfieldLabel ||
                    (this.SEzsigntemplateformfieldLabel != null &&
                    this.SEzsigntemplateformfieldLabel.Equals(input.SEzsigntemplateformfieldLabel))
                ) && 
                (
                    this.SEzsigntemplateformfieldValue == input.SEzsigntemplateformfieldValue ||
                    (this.SEzsigntemplateformfieldValue != null &&
                    this.SEzsigntemplateformfieldValue.Equals(input.SEzsigntemplateformfieldValue))
                ) && 
                (
                    this.IEzsigntemplateformfieldX == input.IEzsigntemplateformfieldX ||
                    (this.IEzsigntemplateformfieldX != null &&
                    this.IEzsigntemplateformfieldX.Equals(input.IEzsigntemplateformfieldX))
                ) && 
                (
                    this.IEzsigntemplateformfieldY == input.IEzsigntemplateformfieldY ||
                    (this.IEzsigntemplateformfieldY != null &&
                    this.IEzsigntemplateformfieldY.Equals(input.IEzsigntemplateformfieldY))
                ) && 
                (
                    this.IEzsigntemplateformfieldWidth == input.IEzsigntemplateformfieldWidth ||
                    (this.IEzsigntemplateformfieldWidth != null &&
                    this.IEzsigntemplateformfieldWidth.Equals(input.IEzsigntemplateformfieldWidth))
                ) && 
                (
                    this.IEzsigntemplateformfieldHeight == input.IEzsigntemplateformfieldHeight ||
                    (this.IEzsigntemplateformfieldHeight != null &&
                    this.IEzsigntemplateformfieldHeight.Equals(input.IEzsigntemplateformfieldHeight))
                ) && 
                (
                    this.BEzsigntemplateformfieldSelected == input.BEzsigntemplateformfieldSelected ||
                    (this.BEzsigntemplateformfieldSelected != null &&
                    this.BEzsigntemplateformfieldSelected.Equals(input.BEzsigntemplateformfieldSelected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigntemplateformfieldID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplateformfieldID.GetHashCode();
                if (this.IEzsigntemplatedocumentpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatedocumentpagePagenumber.GetHashCode();
                if (this.SEzsigntemplateformfieldLabel != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplateformfieldLabel.GetHashCode();
                if (this.SEzsigntemplateformfieldValue != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplateformfieldValue.GetHashCode();
                if (this.IEzsigntemplateformfieldX != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldX.GetHashCode();
                if (this.IEzsigntemplateformfieldY != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldY.GetHashCode();
                if (this.IEzsigntemplateformfieldWidth != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldWidth.GetHashCode();
                if (this.IEzsigntemplateformfieldHeight != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldHeight.GetHashCode();
                if (this.BEzsigntemplateformfieldSelected != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplateformfieldSelected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntemplateformfieldID (int) minimum
            if(this.PkiEzsigntemplateformfieldID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateformfieldID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateformfieldID" });
            }



            // IEzsigntemplatedocumentpagePagenumber (int) minimum
            if(this.IEzsigntemplatedocumentpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatedocumentpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsigntemplatedocumentpagePagenumber" });
            }



            // IEzsigntemplateformfieldX (int) minimum
            if(this.IEzsigntemplateformfieldX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldX, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldX" });
            }



            // IEzsigntemplateformfieldY (int) minimum
            if(this.IEzsigntemplateformfieldY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldY, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldY" });
            }



            // IEzsigntemplateformfieldWidth (int) minimum
            if(this.IEzsigntemplateformfieldWidth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldWidth, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldWidth" });
            }



            // IEzsigntemplateformfieldHeight (int) minimum
            if(this.IEzsigntemplateformfieldHeight < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldHeight, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldHeight" });
            }

            yield break;
        }
    }

}
