/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Usergroupmembership Object and children
    /// </summary>
    [DataContract(Name = "usergroupmembership-RequestCompound")]
    public partial class UsergroupmembershipRequestCompound : IEquatable<UsergroupmembershipRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupmembershipRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UsergroupmembershipRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupmembershipRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiUsergroupmembershipID">The unique ID of the Usergroupmembership.</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        public UsergroupmembershipRequestCompound(int pkiUsergroupmembershipID = default(int), int fkiUsergroupID = default(int), int fkiUserID = default(int))
        {
            this.FkiUsergroupID = fkiUsergroupID;
            this.FkiUserID = fkiUserID;
            this.PkiUsergroupmembershipID = pkiUsergroupmembershipID;
        }

        /// <summary>
        /// The unique ID of the Usergroupmembership
        /// </summary>
        /// <value>The unique ID of the Usergroupmembership</value>
        /* <example>21</example>*/
        [DataMember(Name = "pkiUsergroupmembershipID", EmitDefaultValue = false)]
        public int PkiUsergroupmembershipID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUsergroupID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsergroupmembershipRequestCompound {\n");
            sb.Append("  PkiUsergroupmembershipID: ").Append(PkiUsergroupmembershipID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsergroupmembershipRequestCompound);
        }

        /// <summary>
        /// Returns true if UsergroupmembershipRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of UsergroupmembershipRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsergroupmembershipRequestCompound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiUsergroupmembershipID == input.PkiUsergroupmembershipID ||
                    this.PkiUsergroupmembershipID.Equals(input.PkiUsergroupmembershipID)
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiUsergroupmembershipID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUsergroupID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUsergroupmembershipID (int) maximum
            if (this.PkiUsergroupmembershipID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUsergroupmembershipID, must be a value less than or equal to 65535.", new [] { "PkiUsergroupmembershipID" });
            }

            // PkiUsergroupmembershipID (int) minimum
            if (this.PkiUsergroupmembershipID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUsergroupmembershipID, must be a value greater than or equal to 0.", new [] { "PkiUsergroupmembershipID" });
            }

            // FkiUsergroupID (int) maximum
            if (this.FkiUsergroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value less than or equal to 255.", new [] { "FkiUsergroupID" });
            }

            // FkiUsergroupID (int) minimum
            if (this.FkiUsergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value greater than or equal to 0.", new [] { "FkiUsergroupID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            yield break;
        }
    }

}
