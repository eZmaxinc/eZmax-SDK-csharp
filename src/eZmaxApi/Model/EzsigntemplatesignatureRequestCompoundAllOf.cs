/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// EzsigntemplatesignatureRequestCompoundAllOf
    /// </summary>
    [DataContract]
    public partial class EzsigntemplatesignatureRequestCompoundAllOf :  IEquatable<EzsigntemplatesignatureRequestCompoundAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignatureRequestCompoundAllOf" /> class.
        /// </summary>
        /// <param name="bEzsigntemplatesignatureCustomdate">Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**).</param>
        /// <param name="aObjEzsigntemplatesignaturecustomdate">An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all..</param>
        public EzsigntemplatesignatureRequestCompoundAllOf(bool bEzsigntemplatesignatureCustomdate = default(bool), List<EzsigntemplatesignaturecustomdateRequestCompound> aObjEzsigntemplatesignaturecustomdate = default(List<EzsigntemplatesignaturecustomdateRequestCompound>))
        {
            this.BEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
            this.AObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
        }

        /// <summary>
        /// Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
        /// </summary>
        /// <value>Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)</value>
        [DataMember(Name="bEzsigntemplatesignatureCustomdate", EmitDefaultValue=false)]
        public bool BEzsigntemplatesignatureCustomdate { get; set; }

        /// <summary>
        /// An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
        /// </summary>
        /// <value>An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.</value>
        [DataMember(Name="a_objEzsigntemplatesignaturecustomdate", EmitDefaultValue=false)]
        public List<EzsigntemplatesignaturecustomdateRequestCompound> AObjEzsigntemplatesignaturecustomdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplatesignatureRequestCompoundAllOf {\n");
            sb.Append("  BEzsigntemplatesignatureCustomdate: ").Append(BEzsigntemplatesignatureCustomdate).Append("\n");
            sb.Append("  AObjEzsigntemplatesignaturecustomdate: ").Append(AObjEzsigntemplatesignaturecustomdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatesignatureRequestCompoundAllOf);
        }

        /// <summary>
        /// Returns true if EzsigntemplatesignatureRequestCompoundAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatesignatureRequestCompoundAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatesignatureRequestCompoundAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BEzsigntemplatesignatureCustomdate == input.BEzsigntemplatesignatureCustomdate ||
                    (this.BEzsigntemplatesignatureCustomdate != null &&
                    this.BEzsigntemplatesignatureCustomdate.Equals(input.BEzsigntemplatesignatureCustomdate))
                ) && 
                (
                    this.AObjEzsigntemplatesignaturecustomdate == input.AObjEzsigntemplatesignaturecustomdate ||
                    this.AObjEzsigntemplatesignaturecustomdate != null &&
                    input.AObjEzsigntemplatesignaturecustomdate != null &&
                    this.AObjEzsigntemplatesignaturecustomdate.SequenceEqual(input.AObjEzsigntemplatesignaturecustomdate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BEzsigntemplatesignatureCustomdate != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplatesignatureCustomdate.GetHashCode();
                if (this.AObjEzsigntemplatesignaturecustomdate != null)
                    hashCode = hashCode * 59 + this.AObjEzsigntemplatesignaturecustomdate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
