/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Clonehistory List Element
    /// </summary>
    [DataContract(Name = "clonehistory-ListElement")]
    public partial class ClonehistoryListElement : IEquatable<ClonehistoryListElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClonehistoryListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClonehistoryListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClonehistoryListElement" /> class.
        /// </summary>
        /// <param name="pkiClonehistoryID">The unique ID of the Clonehistory (required).</param>
        /// <param name="fkiUserIDCloning">The unique ID of the User (required).</param>
        /// <param name="fkiUserIDCloned">The unique ID of the User (required).</param>
        /// <param name="dtClonehistoryFirsthit">The firsthit of the Clonehistory (required).</param>
        /// <param name="dtClonehistoryLasthit">The lasthit of the Clonehistory.</param>
        /// <param name="sUserLoginnameCloning">The login name of the User. (required).</param>
        /// <param name="sUserFirstnameCloning">The first name of the user (required).</param>
        /// <param name="sUserLastnameCloning">The last name of the user (required).</param>
        /// <param name="sUserLoginnameCloned">The login name of the User. (required).</param>
        /// <param name="sUserFirstnameCloned">The first name of the user (required).</param>
        /// <param name="sUserLastnameCloned">The last name of the user (required).</param>
        public ClonehistoryListElement(int pkiClonehistoryID = default(int), int fkiUserIDCloning = default(int), int fkiUserIDCloned = default(int), string dtClonehistoryFirsthit = default(string), string dtClonehistoryLasthit = default(string), string sUserLoginnameCloning = default(string), string sUserFirstnameCloning = default(string), string sUserLastnameCloning = default(string), string sUserLoginnameCloned = default(string), string sUserFirstnameCloned = default(string), string sUserLastnameCloned = default(string))
        {
            this.PkiClonehistoryID = pkiClonehistoryID;
            this.FkiUserIDCloning = fkiUserIDCloning;
            this.FkiUserIDCloned = fkiUserIDCloned;
            // to ensure "dtClonehistoryFirsthit" is required (not null)
            if (dtClonehistoryFirsthit == null)
            {
                throw new ArgumentNullException("dtClonehistoryFirsthit is a required property for ClonehistoryListElement and cannot be null");
            }
            this.DtClonehistoryFirsthit = dtClonehistoryFirsthit;
            // to ensure "sUserLoginnameCloning" is required (not null)
            if (sUserLoginnameCloning == null)
            {
                throw new ArgumentNullException("sUserLoginnameCloning is a required property for ClonehistoryListElement and cannot be null");
            }
            this.SUserLoginnameCloning = sUserLoginnameCloning;
            // to ensure "sUserFirstnameCloning" is required (not null)
            if (sUserFirstnameCloning == null)
            {
                throw new ArgumentNullException("sUserFirstnameCloning is a required property for ClonehistoryListElement and cannot be null");
            }
            this.SUserFirstnameCloning = sUserFirstnameCloning;
            // to ensure "sUserLastnameCloning" is required (not null)
            if (sUserLastnameCloning == null)
            {
                throw new ArgumentNullException("sUserLastnameCloning is a required property for ClonehistoryListElement and cannot be null");
            }
            this.SUserLastnameCloning = sUserLastnameCloning;
            // to ensure "sUserLoginnameCloned" is required (not null)
            if (sUserLoginnameCloned == null)
            {
                throw new ArgumentNullException("sUserLoginnameCloned is a required property for ClonehistoryListElement and cannot be null");
            }
            this.SUserLoginnameCloned = sUserLoginnameCloned;
            // to ensure "sUserFirstnameCloned" is required (not null)
            if (sUserFirstnameCloned == null)
            {
                throw new ArgumentNullException("sUserFirstnameCloned is a required property for ClonehistoryListElement and cannot be null");
            }
            this.SUserFirstnameCloned = sUserFirstnameCloned;
            // to ensure "sUserLastnameCloned" is required (not null)
            if (sUserLastnameCloned == null)
            {
                throw new ArgumentNullException("sUserLastnameCloned is a required property for ClonehistoryListElement and cannot be null");
            }
            this.SUserLastnameCloned = sUserLastnameCloned;
            this.DtClonehistoryLasthit = dtClonehistoryLasthit;
        }

        /// <summary>
        /// The unique ID of the Clonehistory
        /// </summary>
        /// <value>The unique ID of the Clonehistory</value>
		/* <example>12</example>*/
        [DataMember(Name = "pkiClonehistoryID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiClonehistoryID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
		/* <example>70</example>*/
        [DataMember(Name = "fkiUserIDCloning", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserIDCloning { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
		/* <example>70</example>*/
        [DataMember(Name = "fkiUserIDCloned", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserIDCloned { get; set; }

        /// <summary>
        /// The firsthit of the Clonehistory
        /// </summary>
        /// <value>The firsthit of the Clonehistory</value>
		/* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtClonehistoryFirsthit", IsRequired = true, EmitDefaultValue = true)]
        public string DtClonehistoryFirsthit { get; set; }

        /// <summary>
        /// The lasthit of the Clonehistory
        /// </summary>
        /// <value>The lasthit of the Clonehistory</value>
		/* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtClonehistoryLasthit", EmitDefaultValue = false)]
        public string DtClonehistoryLasthit { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
		/* <example>JohnDoe</example>*/
        [DataMember(Name = "sUserLoginnameCloning", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLoginnameCloning { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
		/* <example>John</example>*/
        [DataMember(Name = "sUserFirstnameCloning", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstnameCloning { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
		/* <example>Doe</example>*/
        [DataMember(Name = "sUserLastnameCloning", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastnameCloning { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
		/* <example>JohnDoe</example>*/
        [DataMember(Name = "sUserLoginnameCloned", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLoginnameCloned { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
		/* <example>John</example>*/
        [DataMember(Name = "sUserFirstnameCloned", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstnameCloned { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
		/* <example>Doe</example>*/
        [DataMember(Name = "sUserLastnameCloned", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastnameCloned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClonehistoryListElement {\n");
            sb.Append("  PkiClonehistoryID: ").Append(PkiClonehistoryID).Append("\n");
            sb.Append("  FkiUserIDCloning: ").Append(FkiUserIDCloning).Append("\n");
            sb.Append("  FkiUserIDCloned: ").Append(FkiUserIDCloned).Append("\n");
            sb.Append("  DtClonehistoryFirsthit: ").Append(DtClonehistoryFirsthit).Append("\n");
            sb.Append("  DtClonehistoryLasthit: ").Append(DtClonehistoryLasthit).Append("\n");
            sb.Append("  SUserLoginnameCloning: ").Append(SUserLoginnameCloning).Append("\n");
            sb.Append("  SUserFirstnameCloning: ").Append(SUserFirstnameCloning).Append("\n");
            sb.Append("  SUserLastnameCloning: ").Append(SUserLastnameCloning).Append("\n");
            sb.Append("  SUserLoginnameCloned: ").Append(SUserLoginnameCloned).Append("\n");
            sb.Append("  SUserFirstnameCloned: ").Append(SUserFirstnameCloned).Append("\n");
            sb.Append("  SUserLastnameCloned: ").Append(SUserLastnameCloned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClonehistoryListElement);
        }

        /// <summary>
        /// Returns true if ClonehistoryListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of ClonehistoryListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClonehistoryListElement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiClonehistoryID == input.PkiClonehistoryID ||
                    this.PkiClonehistoryID.Equals(input.PkiClonehistoryID)
                ) && 
                (
                    this.FkiUserIDCloning == input.FkiUserIDCloning ||
                    this.FkiUserIDCloning.Equals(input.FkiUserIDCloning)
                ) && 
                (
                    this.FkiUserIDCloned == input.FkiUserIDCloned ||
                    this.FkiUserIDCloned.Equals(input.FkiUserIDCloned)
                ) && 
                (
                    this.DtClonehistoryFirsthit == input.DtClonehistoryFirsthit ||
                    (this.DtClonehistoryFirsthit != null &&
                    this.DtClonehistoryFirsthit.Equals(input.DtClonehistoryFirsthit))
                ) && 
                (
                    this.DtClonehistoryLasthit == input.DtClonehistoryLasthit ||
                    (this.DtClonehistoryLasthit != null &&
                    this.DtClonehistoryLasthit.Equals(input.DtClonehistoryLasthit))
                ) && 
                (
                    this.SUserLoginnameCloning == input.SUserLoginnameCloning ||
                    (this.SUserLoginnameCloning != null &&
                    this.SUserLoginnameCloning.Equals(input.SUserLoginnameCloning))
                ) && 
                (
                    this.SUserFirstnameCloning == input.SUserFirstnameCloning ||
                    (this.SUserFirstnameCloning != null &&
                    this.SUserFirstnameCloning.Equals(input.SUserFirstnameCloning))
                ) && 
                (
                    this.SUserLastnameCloning == input.SUserLastnameCloning ||
                    (this.SUserLastnameCloning != null &&
                    this.SUserLastnameCloning.Equals(input.SUserLastnameCloning))
                ) && 
                (
                    this.SUserLoginnameCloned == input.SUserLoginnameCloned ||
                    (this.SUserLoginnameCloned != null &&
                    this.SUserLoginnameCloned.Equals(input.SUserLoginnameCloned))
                ) && 
                (
                    this.SUserFirstnameCloned == input.SUserFirstnameCloned ||
                    (this.SUserFirstnameCloned != null &&
                    this.SUserFirstnameCloned.Equals(input.SUserFirstnameCloned))
                ) && 
                (
                    this.SUserLastnameCloned == input.SUserLastnameCloned ||
                    (this.SUserLastnameCloned != null &&
                    this.SUserLastnameCloned.Equals(input.SUserLastnameCloned))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiClonehistoryID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserIDCloning.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserIDCloned.GetHashCode();
                if (this.DtClonehistoryFirsthit != null)
                {
                    hashCode = (hashCode * 59) + this.DtClonehistoryFirsthit.GetHashCode();
                }
                if (this.DtClonehistoryLasthit != null)
                {
                    hashCode = (hashCode * 59) + this.DtClonehistoryLasthit.GetHashCode();
                }
                if (this.SUserLoginnameCloning != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLoginnameCloning.GetHashCode();
                }
                if (this.SUserFirstnameCloning != null)
                {
                    hashCode = (hashCode * 59) + this.SUserFirstnameCloning.GetHashCode();
                }
                if (this.SUserLastnameCloning != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLastnameCloning.GetHashCode();
                }
                if (this.SUserLoginnameCloned != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLoginnameCloned.GetHashCode();
                }
                if (this.SUserFirstnameCloned != null)
                {
                    hashCode = (hashCode * 59) + this.SUserFirstnameCloned.GetHashCode();
                }
                if (this.SUserLastnameCloned != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLastnameCloned.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiClonehistoryID (int) maximum
            if (this.PkiClonehistoryID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiClonehistoryID, must be a value less than or equal to 16777215.", new [] { "PkiClonehistoryID" });
            }

            // PkiClonehistoryID (int) minimum
            if (this.PkiClonehistoryID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiClonehistoryID, must be a value greater than or equal to 1.", new [] { "PkiClonehistoryID" });
            }

            // FkiUserIDCloning (int) minimum
            if (this.FkiUserIDCloning < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserIDCloning, must be a value greater than or equal to 0.", new [] { "FkiUserIDCloning" });
            }

            // FkiUserIDCloned (int) minimum
            if (this.FkiUserIDCloned < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserIDCloned, must be a value greater than or equal to 0.", new [] { "FkiUserIDCloned" });
            }

            if (this.DtClonehistoryFirsthit != null) {
                // DtClonehistoryFirsthit (string) pattern
                Regex regexDtClonehistoryFirsthit = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtClonehistoryFirsthit.Match(this.DtClonehistoryFirsthit).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtClonehistoryFirsthit, must match a pattern of " + regexDtClonehistoryFirsthit, new [] { "DtClonehistoryFirsthit" });
                }
            }

            if (this.DtClonehistoryLasthit != null) {
                // DtClonehistoryLasthit (string) pattern
                Regex regexDtClonehistoryLasthit = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtClonehistoryLasthit.Match(this.DtClonehistoryLasthit).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtClonehistoryLasthit, must match a pattern of " + regexDtClonehistoryLasthit, new [] { "DtClonehistoryLasthit" });
                }
            }

            if (this.SUserLoginnameCloning != null) {
                // SUserLoginnameCloning (string) pattern
                Regex regexSUserLoginnameCloning = new Regex(@"^(?:([\w\.-]+@[\w\.-]+\.\w{2,4})|([a-zA-Z0-9]){1,32})$", RegexOptions.CultureInvariant);
                if (!regexSUserLoginnameCloning.Match(this.SUserLoginnameCloning).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserLoginnameCloning, must match a pattern of " + regexSUserLoginnameCloning, new [] { "SUserLoginnameCloning" });
                }
            }

            if (this.SUserLoginnameCloned != null) {
                // SUserLoginnameCloned (string) pattern
                Regex regexSUserLoginnameCloned = new Regex(@"^(?:([\w\.-]+@[\w\.-]+\.\w{2,4})|([a-zA-Z0-9]){1,32})$", RegexOptions.CultureInvariant);
                if (!regexSUserLoginnameCloned.Match(this.SUserLoginnameCloned).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserLoginnameCloned, must match a pattern of " + regexSUserLoginnameCloned, new [] { "SUserLoginnameCloned" });
                }
            }

            yield break;
        }
    }

}
