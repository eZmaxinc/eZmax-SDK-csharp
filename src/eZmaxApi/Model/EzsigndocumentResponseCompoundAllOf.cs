/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// EzsigndocumentResponseCompoundAllOf
    /// </summary>
    [DataContract]
    public partial class EzsigndocumentResponseCompoundAllOf :  IEquatable<EzsigndocumentResponseCompoundAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentResponseCompoundAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigndocumentResponseCompoundAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentResponseCompoundAllOf" /> class.
        /// </summary>
        /// <param name="iEzsigndocumentStepformtotal">The total number of steps in the form filling phase (required).</param>
        /// <param name="iEzsigndocumentStepformcurrent">The current step in the form filling phase (required).</param>
        /// <param name="iEzsigndocumentStepsignaturetotal">The total number of steps in the signature filling phase (required).</param>
        /// <param name="iEzsigndocumentStepsignatureCurrent">The current step in the signature phase (required).</param>
        /// <param name="aObjEzsignfoldersignerassociationstatus">aObjEzsignfoldersignerassociationstatus (required).</param>
        public EzsigndocumentResponseCompoundAllOf(int iEzsigndocumentStepformtotal = default(int), int iEzsigndocumentStepformcurrent = default(int), int iEzsigndocumentStepsignaturetotal = default(int), int iEzsigndocumentStepsignatureCurrent = default(int), List<CustomEzsignfoldersignerassociationstatusResponse> aObjEzsignfoldersignerassociationstatus = default(List<CustomEzsignfoldersignerassociationstatusResponse>))
        {
            // to ensure "iEzsigndocumentStepformtotal" is required (not null)
            if (iEzsigndocumentStepformtotal == null)
            {
                throw new InvalidDataException("iEzsigndocumentStepformtotal is a required property for EzsigndocumentResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.IEzsigndocumentStepformtotal = iEzsigndocumentStepformtotal;
            }

            // to ensure "iEzsigndocumentStepformcurrent" is required (not null)
            if (iEzsigndocumentStepformcurrent == null)
            {
                throw new InvalidDataException("iEzsigndocumentStepformcurrent is a required property for EzsigndocumentResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.IEzsigndocumentStepformcurrent = iEzsigndocumentStepformcurrent;
            }

            // to ensure "iEzsigndocumentStepsignaturetotal" is required (not null)
            if (iEzsigndocumentStepsignaturetotal == null)
            {
                throw new InvalidDataException("iEzsigndocumentStepsignaturetotal is a required property for EzsigndocumentResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.IEzsigndocumentStepsignaturetotal = iEzsigndocumentStepsignaturetotal;
            }

            // to ensure "iEzsigndocumentStepsignatureCurrent" is required (not null)
            if (iEzsigndocumentStepsignatureCurrent == null)
            {
                throw new InvalidDataException("iEzsigndocumentStepsignatureCurrent is a required property for EzsigndocumentResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.IEzsigndocumentStepsignatureCurrent = iEzsigndocumentStepsignatureCurrent;
            }

            // to ensure "aObjEzsignfoldersignerassociationstatus" is required (not null)
            if (aObjEzsignfoldersignerassociationstatus == null)
            {
                throw new InvalidDataException("aObjEzsignfoldersignerassociationstatus is a required property for EzsigndocumentResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.AObjEzsignfoldersignerassociationstatus = aObjEzsignfoldersignerassociationstatus;
            }

        }

        /// <summary>
        /// The total number of steps in the form filling phase
        /// </summary>
        /// <value>The total number of steps in the form filling phase</value>
        [DataMember(Name="iEzsigndocumentStepformtotal", EmitDefaultValue=true)]
        public int IEzsigndocumentStepformtotal { get; set; }

        /// <summary>
        /// The current step in the form filling phase
        /// </summary>
        /// <value>The current step in the form filling phase</value>
        [DataMember(Name="iEzsigndocumentStepformcurrent", EmitDefaultValue=true)]
        public int IEzsigndocumentStepformcurrent { get; set; }

        /// <summary>
        /// The total number of steps in the signature filling phase
        /// </summary>
        /// <value>The total number of steps in the signature filling phase</value>
        [DataMember(Name="iEzsigndocumentStepsignaturetotal", EmitDefaultValue=true)]
        public int IEzsigndocumentStepsignaturetotal { get; set; }

        /// <summary>
        /// The current step in the signature phase
        /// </summary>
        /// <value>The current step in the signature phase</value>
        [DataMember(Name="iEzsigndocumentStepsignatureCurrent", EmitDefaultValue=true)]
        public int IEzsigndocumentStepsignatureCurrent { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignfoldersignerassociationstatus
        /// </summary>
        [DataMember(Name="a_objEzsignfoldersignerassociationstatus", EmitDefaultValue=true)]
        public List<CustomEzsignfoldersignerassociationstatusResponse> AObjEzsignfoldersignerassociationstatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigndocumentResponseCompoundAllOf {\n");
            sb.Append("  IEzsigndocumentStepformtotal: ").Append(IEzsigndocumentStepformtotal).Append("\n");
            sb.Append("  IEzsigndocumentStepformcurrent: ").Append(IEzsigndocumentStepformcurrent).Append("\n");
            sb.Append("  IEzsigndocumentStepsignaturetotal: ").Append(IEzsigndocumentStepsignaturetotal).Append("\n");
            sb.Append("  IEzsigndocumentStepsignatureCurrent: ").Append(IEzsigndocumentStepsignatureCurrent).Append("\n");
            sb.Append("  AObjEzsignfoldersignerassociationstatus: ").Append(AObjEzsignfoldersignerassociationstatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigndocumentResponseCompoundAllOf);
        }

        /// <summary>
        /// Returns true if EzsigndocumentResponseCompoundAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigndocumentResponseCompoundAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigndocumentResponseCompoundAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IEzsigndocumentStepformtotal == input.IEzsigndocumentStepformtotal ||
                    (this.IEzsigndocumentStepformtotal != null &&
                    this.IEzsigndocumentStepformtotal.Equals(input.IEzsigndocumentStepformtotal))
                ) && 
                (
                    this.IEzsigndocumentStepformcurrent == input.IEzsigndocumentStepformcurrent ||
                    (this.IEzsigndocumentStepformcurrent != null &&
                    this.IEzsigndocumentStepformcurrent.Equals(input.IEzsigndocumentStepformcurrent))
                ) && 
                (
                    this.IEzsigndocumentStepsignaturetotal == input.IEzsigndocumentStepsignaturetotal ||
                    (this.IEzsigndocumentStepsignaturetotal != null &&
                    this.IEzsigndocumentStepsignaturetotal.Equals(input.IEzsigndocumentStepsignaturetotal))
                ) && 
                (
                    this.IEzsigndocumentStepsignatureCurrent == input.IEzsigndocumentStepsignatureCurrent ||
                    (this.IEzsigndocumentStepsignatureCurrent != null &&
                    this.IEzsigndocumentStepsignatureCurrent.Equals(input.IEzsigndocumentStepsignatureCurrent))
                ) && 
                (
                    this.AObjEzsignfoldersignerassociationstatus == input.AObjEzsignfoldersignerassociationstatus ||
                    this.AObjEzsignfoldersignerassociationstatus != null &&
                    input.AObjEzsignfoldersignerassociationstatus != null &&
                    this.AObjEzsignfoldersignerassociationstatus.SequenceEqual(input.AObjEzsignfoldersignerassociationstatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IEzsigndocumentStepformtotal != null)
                    hashCode = hashCode * 59 + this.IEzsigndocumentStepformtotal.GetHashCode();
                if (this.IEzsigndocumentStepformcurrent != null)
                    hashCode = hashCode * 59 + this.IEzsigndocumentStepformcurrent.GetHashCode();
                if (this.IEzsigndocumentStepsignaturetotal != null)
                    hashCode = hashCode * 59 + this.IEzsigndocumentStepsignaturetotal.GetHashCode();
                if (this.IEzsigndocumentStepsignatureCurrent != null)
                    hashCode = hashCode * 59 + this.IEzsigndocumentStepsignatureCurrent.GetHashCode();
                if (this.AObjEzsignfoldersignerassociationstatus != null)
                    hashCode = hashCode * 59 + this.AObjEzsignfoldersignerassociationstatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
