/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Sessionhistory List Element
    /// </summary>
    [DataContract(Name = "sessionhistory-ListElement")]
    public partial class SessionhistoryListElement : IEquatable<SessionhistoryListElement>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ESessionhistoryEndby
        /// </summary>
        [DataMember(Name = "eSessionhistoryEndby", IsRequired = true, EmitDefaultValue = true)]
        public FieldESessionhistoryEndby ESessionhistoryEndby { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionhistoryListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SessionhistoryListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionhistoryListElement" /> class.
        /// </summary>
        /// <param name="pkiSessionhistoryID">The unique ID of the Sessionhistory (required).</param>
        /// <param name="fkiComputerID">The unique ID of the Computer.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="dtSessionhistoryFirsthit">The first hit of the Sessionhistory (required).</param>
        /// <param name="dtSessionhistoryLasthit">The last hit of the Sessionhistory (required).</param>
        /// <param name="eSessionhistoryEndby">eSessionhistoryEndby (required).</param>
        /// <param name="sComputerDescription">The description of the Computer.</param>
        /// <param name="sSessionhistoryDuration">The duration of the session (required).</param>
        /// <param name="sSessionhistoryIP">Represent an IP address. (required).</param>
        /// <param name="sUserLoginname">The login name of the User..</param>
        public SessionhistoryListElement(int pkiSessionhistoryID = default(int), int fkiComputerID = default(int), int fkiUserID = default(int), string dtSessionhistoryFirsthit = default(string), string dtSessionhistoryLasthit = default(string), FieldESessionhistoryEndby eSessionhistoryEndby = default(FieldESessionhistoryEndby), string sComputerDescription = default(string), string sSessionhistoryDuration = default(string), string sSessionhistoryIP = default(string), string sUserLoginname = default(string))
        {
            this.PkiSessionhistoryID = pkiSessionhistoryID;
            // to ensure "dtSessionhistoryFirsthit" is required (not null)
            if (dtSessionhistoryFirsthit == null)
            {
                throw new ArgumentNullException("dtSessionhistoryFirsthit is a required property for SessionhistoryListElement and cannot be null");
            }
            this.DtSessionhistoryFirsthit = dtSessionhistoryFirsthit;
            // to ensure "dtSessionhistoryLasthit" is required (not null)
            if (dtSessionhistoryLasthit == null)
            {
                throw new ArgumentNullException("dtSessionhistoryLasthit is a required property for SessionhistoryListElement and cannot be null");
            }
            this.DtSessionhistoryLasthit = dtSessionhistoryLasthit;
            this.ESessionhistoryEndby = eSessionhistoryEndby;
            // to ensure "sSessionhistoryDuration" is required (not null)
            if (sSessionhistoryDuration == null)
            {
                throw new ArgumentNullException("sSessionhistoryDuration is a required property for SessionhistoryListElement and cannot be null");
            }
            this.SSessionhistoryDuration = sSessionhistoryDuration;
            // to ensure "sSessionhistoryIP" is required (not null)
            if (sSessionhistoryIP == null)
            {
                throw new ArgumentNullException("sSessionhistoryIP is a required property for SessionhistoryListElement and cannot be null");
            }
            this.SSessionhistoryIP = sSessionhistoryIP;
            this.FkiComputerID = fkiComputerID;
            this.FkiUserID = fkiUserID;
            this.SComputerDescription = sComputerDescription;
            this.SUserLoginname = sUserLoginname;
        }

        /// <summary>
        /// The unique ID of the Sessionhistory
        /// </summary>
        /// <value>The unique ID of the Sessionhistory</value>
        /* <example>259</example>*/
        [DataMember(Name = "pkiSessionhistoryID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiSessionhistoryID { get; set; }

        /// <summary>
        /// The unique ID of the Computer
        /// </summary>
        /// <value>The unique ID of the Computer</value>
        /* <example>249</example>*/
        [DataMember(Name = "fkiComputerID", EmitDefaultValue = false)]
        public int FkiComputerID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The first hit of the Sessionhistory
        /// </summary>
        /// <value>The first hit of the Sessionhistory</value>
        /* <example>2020-12-31 17:35:37</example>*/
        [DataMember(Name = "dtSessionhistoryFirsthit", IsRequired = true, EmitDefaultValue = true)]
        public string DtSessionhistoryFirsthit { get; set; }

        /// <summary>
        /// The last hit of the Sessionhistory
        /// </summary>
        /// <value>The last hit of the Sessionhistory</value>
        /* <example>2020-12-31 19:27:38</example>*/
        [DataMember(Name = "dtSessionhistoryLasthit", IsRequired = true, EmitDefaultValue = true)]
        public string DtSessionhistoryLasthit { get; set; }

        /// <summary>
        /// The description of the Computer
        /// </summary>
        /// <value>The description of the Computer</value>
        /* <example>PC001</example>*/
        [DataMember(Name = "sComputerDescription", EmitDefaultValue = false)]
        public string SComputerDescription { get; set; }

        /// <summary>
        /// The duration of the session
        /// </summary>
        /// <value>The duration of the session</value>
        /* <example>01:52:01</example>*/
        [DataMember(Name = "sSessionhistoryDuration", IsRequired = true, EmitDefaultValue = true)]
        public string SSessionhistoryDuration { get; set; }

        /// <summary>
        /// Represent an IP address.
        /// </summary>
        /// <value>Represent an IP address.</value>
        /* <example>127.0.0.1</example>*/
        [DataMember(Name = "sSessionhistoryIP", IsRequired = true, EmitDefaultValue = true)]
        public string SSessionhistoryIP { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        /* <example>JohnDoe</example>*/
        [DataMember(Name = "sUserLoginname", EmitDefaultValue = false)]
        public string SUserLoginname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionhistoryListElement {\n");
            sb.Append("  PkiSessionhistoryID: ").Append(PkiSessionhistoryID).Append("\n");
            sb.Append("  FkiComputerID: ").Append(FkiComputerID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  DtSessionhistoryFirsthit: ").Append(DtSessionhistoryFirsthit).Append("\n");
            sb.Append("  DtSessionhistoryLasthit: ").Append(DtSessionhistoryLasthit).Append("\n");
            sb.Append("  ESessionhistoryEndby: ").Append(ESessionhistoryEndby).Append("\n");
            sb.Append("  SComputerDescription: ").Append(SComputerDescription).Append("\n");
            sb.Append("  SSessionhistoryDuration: ").Append(SSessionhistoryDuration).Append("\n");
            sb.Append("  SSessionhistoryIP: ").Append(SSessionhistoryIP).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionhistoryListElement);
        }

        /// <summary>
        /// Returns true if SessionhistoryListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionhistoryListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionhistoryListElement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiSessionhistoryID == input.PkiSessionhistoryID ||
                    this.PkiSessionhistoryID.Equals(input.PkiSessionhistoryID)
                ) && 
                (
                    this.FkiComputerID == input.FkiComputerID ||
                    this.FkiComputerID.Equals(input.FkiComputerID)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.DtSessionhistoryFirsthit == input.DtSessionhistoryFirsthit ||
                    (this.DtSessionhistoryFirsthit != null &&
                    this.DtSessionhistoryFirsthit.Equals(input.DtSessionhistoryFirsthit))
                ) && 
                (
                    this.DtSessionhistoryLasthit == input.DtSessionhistoryLasthit ||
                    (this.DtSessionhistoryLasthit != null &&
                    this.DtSessionhistoryLasthit.Equals(input.DtSessionhistoryLasthit))
                ) && 
                (
                    this.ESessionhistoryEndby == input.ESessionhistoryEndby ||
                    this.ESessionhistoryEndby.Equals(input.ESessionhistoryEndby)
                ) && 
                (
                    this.SComputerDescription == input.SComputerDescription ||
                    (this.SComputerDescription != null &&
                    this.SComputerDescription.Equals(input.SComputerDescription))
                ) && 
                (
                    this.SSessionhistoryDuration == input.SSessionhistoryDuration ||
                    (this.SSessionhistoryDuration != null &&
                    this.SSessionhistoryDuration.Equals(input.SSessionhistoryDuration))
                ) && 
                (
                    this.SSessionhistoryIP == input.SSessionhistoryIP ||
                    (this.SSessionhistoryIP != null &&
                    this.SSessionhistoryIP.Equals(input.SSessionhistoryIP))
                ) && 
                (
                    this.SUserLoginname == input.SUserLoginname ||
                    (this.SUserLoginname != null &&
                    this.SUserLoginname.Equals(input.SUserLoginname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiSessionhistoryID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiComputerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                if (this.DtSessionhistoryFirsthit != null)
                {
                    hashCode = (hashCode * 59) + this.DtSessionhistoryFirsthit.GetHashCode();
                }
                if (this.DtSessionhistoryLasthit != null)
                {
                    hashCode = (hashCode * 59) + this.DtSessionhistoryLasthit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ESessionhistoryEndby.GetHashCode();
                if (this.SComputerDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SComputerDescription.GetHashCode();
                }
                if (this.SSessionhistoryDuration != null)
                {
                    hashCode = (hashCode * 59) + this.SSessionhistoryDuration.GetHashCode();
                }
                if (this.SSessionhistoryIP != null)
                {
                    hashCode = (hashCode * 59) + this.SSessionhistoryIP.GetHashCode();
                }
                if (this.SUserLoginname != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLoginname.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSessionhistoryID (int) maximum
            if (this.PkiSessionhistoryID > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSessionhistoryID, must be a value less than or equal to 2147483647.", new [] { "PkiSessionhistoryID" });
            }

            // PkiSessionhistoryID (int) minimum
            if (this.PkiSessionhistoryID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSessionhistoryID, must be a value greater than or equal to 1.", new [] { "PkiSessionhistoryID" });
            }

            // FkiComputerID (int) maximum
            if (this.FkiComputerID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiComputerID, must be a value less than or equal to 65535.", new [] { "FkiComputerID" });
            }

            // FkiComputerID (int) minimum
            if (this.FkiComputerID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiComputerID, must be a value greater than or equal to 1.", new [] { "FkiComputerID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            if (this.DtSessionhistoryFirsthit != null) {
                // DtSessionhistoryFirsthit (string) pattern
                Regex regexDtSessionhistoryFirsthit = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtSessionhistoryFirsthit.Match(this.DtSessionhistoryFirsthit).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtSessionhistoryFirsthit, must match a pattern of " + regexDtSessionhistoryFirsthit, new [] { "DtSessionhistoryFirsthit" });
                }
            }

            if (this.DtSessionhistoryLasthit != null) {
                // DtSessionhistoryLasthit (string) pattern
                Regex regexDtSessionhistoryLasthit = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtSessionhistoryLasthit.Match(this.DtSessionhistoryLasthit).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtSessionhistoryLasthit, must match a pattern of " + regexDtSessionhistoryLasthit, new [] { "DtSessionhistoryLasthit" });
                }
            }

            if (this.SComputerDescription != null) {
                // SComputerDescription (string) pattern
                Regex regexSComputerDescription = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSComputerDescription.Match(this.SComputerDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SComputerDescription, must match a pattern of " + regexSComputerDescription, new [] { "SComputerDescription" });
                }
            }

            if (this.SSessionhistoryDuration != null) {
                // SSessionhistoryDuration (string) pattern
                Regex regexSSessionhistoryDuration = new Regex(@"^(0[0-9]{1}|\d{2,}):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexSSessionhistoryDuration.Match(this.SSessionhistoryDuration).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SSessionhistoryDuration, must match a pattern of " + regexSSessionhistoryDuration, new [] { "SSessionhistoryDuration" });
                }
            }

            if (this.SUserLoginname != null) {
                // SUserLoginname (string) pattern
                Regex regexSUserLoginname = new Regex(@"^(?:([\w\.-]+@[\w\.-]+\.\w{2,4})|([a-zA-Z0-9]){1,32})$", RegexOptions.CultureInvariant);
                if (!regexSUserLoginname.Match(this.SUserLoginname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserLoginname, must match a pattern of " + regexSUserLoginname, new [] { "SUserLoginname" });
                }
            }

            yield break;
        }
    }

}
