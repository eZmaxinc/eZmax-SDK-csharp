/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/extractText
    /// </summary>
    [DataContract(Name = "ezsigntemplatedocument-extractText-v1-Request")]
    public partial class EzsigntemplatedocumentExtractTextV1Request : IValidatableObject
    {
        /// <summary>
        /// The section of the page
        /// </summary>
        /// <value>The section of the page</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ESectionEnum
        {
            /// <summary>
            /// Enum FirstLine for value: FirstLine
            /// </summary>
            [EnumMember(Value = "FirstLine")]
            FirstLine = 1,

            /// <summary>
            /// Enum LastLine for value: LastLine
            /// </summary>
            [EnumMember(Value = "LastLine")]
            LastLine = 2,

            /// <summary>
            /// Enum Region for value: Region
            /// </summary>
            [EnumMember(Value = "Region")]
            Region = 3
        }


        /// <summary>
        /// The section of the page
        /// </summary>
        /// <value>The section of the page</value>
        /* <example>Region</example>*/
        [DataMember(Name = "eSection", EmitDefaultValue = false)]
        public ESectionEnum? ESection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentExtractTextV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentExtractTextV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentExtractTextV1Request" /> class.
        /// </summary>
        /// <param name="iPage">The page where the area is located (required).</param>
        /// <param name="eSection">The section of the page.</param>
        /// <param name="iX">The X coordinate (Horizontal). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set..</param>
        /// <param name="iY">The Y coordinate (Vertical). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set..</param>
        /// <param name="iWidth">Area&#39;s width. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set..</param>
        /// <param name="iHeight">Area&#39;s height. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set..</param>
        public EzsigntemplatedocumentExtractTextV1Request(int iPage = default(int), ESectionEnum? eSection = default(ESectionEnum?), int iX = default(int), int iY = default(int), int iWidth = default(int), int iHeight = default(int))
        {
            this.IPage = iPage;
            this.ESection = eSection;
            this.IX = iX;
            this.IY = iY;
            this.IWidth = iWidth;
            this.IHeight = iHeight;
        }

        /// <summary>
        /// The page where the area is located
        /// </summary>
        /// <value>The page where the area is located</value>
        /* <example>1</example>*/
        [DataMember(Name = "iPage", IsRequired = true, EmitDefaultValue = true)]
        public int IPage { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
        /// </summary>
        /// <value>The X coordinate (Horizontal). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.</value>
        /* <example>1</example>*/
        [DataMember(Name = "iX", EmitDefaultValue = false)]
        public int IX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
        /// </summary>
        /// <value>The Y coordinate (Vertical). Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.</value>
        /* <example>1</example>*/
        [DataMember(Name = "iY", EmitDefaultValue = false)]
        public int IY { get; set; }

        /// <summary>
        /// Area&#39;s width. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
        /// </summary>
        /// <value>Area&#39;s width. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.</value>
        /* <example>1</example>*/
        [DataMember(Name = "iWidth", EmitDefaultValue = false)]
        public int IWidth { get; set; }

        /// <summary>
        /// Area&#39;s height. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.
        /// </summary>
        /// <value>Area&#39;s height. Require when eSection &#x3D; &#39;Region&#39; or eSection is not set.</value>
        /* <example>1</example>*/
        [DataMember(Name = "iHeight", EmitDefaultValue = false)]
        public int IHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentExtractTextV1Request {\n");
            sb.Append("  IPage: ").Append(IPage).Append("\n");
            sb.Append("  ESection: ").Append(ESection).Append("\n");
            sb.Append("  IX: ").Append(IX).Append("\n");
            sb.Append("  IY: ").Append(IY).Append("\n");
            sb.Append("  IWidth: ").Append(IWidth).Append("\n");
            sb.Append("  IHeight: ").Append(IHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
