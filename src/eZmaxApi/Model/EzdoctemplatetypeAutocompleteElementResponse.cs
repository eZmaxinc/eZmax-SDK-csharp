/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezdoctemplatetype AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "ezdoctemplatetype-AutocompleteElement-Response")]
    public partial class EzdoctemplatetypeAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatetypeAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzdoctemplatetypeAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatetypeAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiEzdoctemplatetypeID">The unique ID of the Ezdoctemplatetype (required).</param>
        /// <param name="sEzdoctemplatetypeDescriptionX">The description of the Ezdoctemplatetype in the language of the requester (required).</param>
        /// <param name="bEzdoctemplatetypeIsactive">Whether the Ezdoctemplatetype is active or not (required).</param>
        public EzdoctemplatetypeAutocompleteElementResponse(int pkiEzdoctemplatetypeID = default(int), string sEzdoctemplatetypeDescriptionX = default(string), bool bEzdoctemplatetypeIsactive = default(bool))
        {
            this.PkiEzdoctemplatetypeID = pkiEzdoctemplatetypeID;
            // to ensure "sEzdoctemplatetypeDescriptionX" is required (not null)
            if (sEzdoctemplatetypeDescriptionX == null)
            {
                throw new ArgumentNullException("sEzdoctemplatetypeDescriptionX is a required property for EzdoctemplatetypeAutocompleteElementResponse and cannot be null");
            }
            this.SEzdoctemplatetypeDescriptionX = sEzdoctemplatetypeDescriptionX;
            this.BEzdoctemplatetypeIsactive = bEzdoctemplatetypeIsactive;
        }

        /// <summary>
        /// The unique ID of the Ezdoctemplatetype
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatetype</value>
        /* <example>7</example>*/
        [DataMember(Name = "pkiEzdoctemplatetypeID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzdoctemplatetypeID { get; set; }

        /// <summary>
        /// The description of the Ezdoctemplatetype in the language of the requester
        /// </summary>
        /// <value>The description of the Ezdoctemplatetype in the language of the requester</value>
        /* <example>Real Estate</example>*/
        [DataMember(Name = "sEzdoctemplatetypeDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzdoctemplatetypeDescriptionX { get; set; }

        /// <summary>
        /// Whether the Ezdoctemplatetype is active or not
        /// </summary>
        /// <value>Whether the Ezdoctemplatetype is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzdoctemplatetypeIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzdoctemplatetypeIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzdoctemplatetypeAutocompleteElementResponse {\n");
            sb.Append("  PkiEzdoctemplatetypeID: ").Append(PkiEzdoctemplatetypeID).Append("\n");
            sb.Append("  SEzdoctemplatetypeDescriptionX: ").Append(SEzdoctemplatetypeDescriptionX).Append("\n");
            sb.Append("  BEzdoctemplatetypeIsactive: ").Append(BEzdoctemplatetypeIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzdoctemplatetypeID (int) maximum
            if (this.PkiEzdoctemplatetypeID > (int)255)
            {
                yield return new ValidationResult("Invalid value for PkiEzdoctemplatetypeID, must be a value less than or equal to 255.", new [] { "PkiEzdoctemplatetypeID" });
            }

            // PkiEzdoctemplatetypeID (int) minimum
            if (this.PkiEzdoctemplatetypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzdoctemplatetypeID, must be a value greater than or equal to 0.", new [] { "PkiEzdoctemplatetypeID" });
            }

            if (this.SEzdoctemplatetypeDescriptionX != null) {
                // SEzdoctemplatetypeDescriptionX (string) pattern
                Regex regexSEzdoctemplatetypeDescriptionX = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzdoctemplatetypeDescriptionX.Match(this.SEzdoctemplatetypeDescriptionX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzdoctemplatetypeDescriptionX, must match a pattern of " + regexSEzdoctemplatetypeDescriptionX, new [] { "SEzdoctemplatetypeDescriptionX" });
                }
            }

            yield break;
        }
    }

}
