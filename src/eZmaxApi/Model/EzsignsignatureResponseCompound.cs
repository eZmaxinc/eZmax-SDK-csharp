/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignature Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class EzsignsignatureResponseCompound :  IEquatable<EzsignsignatureResponseCompound>
    {
        /// <summary>
        /// Gets or Sets EEzsignsignatureType
        /// </summary>
        [DataMember(Name="eEzsignsignatureType", EmitDefaultValue=true)]
        public FieldEEzsignsignatureType EEzsignsignatureType { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureTooltipposition
        /// </summary>
        [DataMember(Name="eEzsignsignatureTooltipposition", EmitDefaultValue=false)]
        public FieldEEzsignsignatureTooltipposition? EEzsignsignatureTooltipposition { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureFont
        /// </summary>
        [DataMember(Name="eEzsignsignatureFont", EmitDefaultValue=false)]
        public FieldEEzsignsignatureFont? EEzsignsignatureFont { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureAttachmentnamesource
        /// </summary>
        [DataMember(Name="eEzsignsignatureAttachmentnamesource", EmitDefaultValue=false)]
        public FieldEEzsignsignatureAttachmentnamesource? EEzsignsignatureAttachmentnamesource { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureTextvalidation
        /// </summary>
        [DataMember(Name="eEzsignsignatureTextvalidation", EmitDefaultValue=false)]
        public EnumTextvalidation? EEzsignsignatureTextvalidation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="iEzsignsignatureX">The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignsignatureY">The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignsignatureHeight">The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight..</param>
        /// <param name="iEzsignsignatureWidth">The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth..</param>
        /// <param name="iEzsignsignatureStep">The step when the Ezsignsigner will be invited to sign (required).</param>
        /// <param name="eEzsignsignatureType">eEzsignsignatureType (required).</param>
        /// <param name="tEzsignsignatureTooltip">A tooltip that will be presented to Ezsignsigner about the Ezsignsignature.</param>
        /// <param name="eEzsignsignatureTooltipposition">eEzsignsignatureTooltipposition.</param>
        /// <param name="eEzsignsignatureFont">eEzsignsignatureFont.</param>
        /// <param name="iEzsignsignatureValidationstep">The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="sEzsignsignatureAttachmentdescription">The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="eEzsignsignatureAttachmentnamesource">eEzsignsignatureAttachmentnamesource.</param>
        /// <param name="bEzsignsignatureRequired">Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments..</param>
        /// <param name="fkiEzsignfoldersignerassociationIDValidation">The unique ID of the Ezsignfoldersignerassociation.</param>
        /// <param name="dtEzsignsignatureDate">The date the Ezsignsignature was signed.</param>
        /// <param name="iEzsignsignatureattachmentCount">The count of Ezsignsignatureattachment.</param>
        /// <param name="sEzsignsignatureDescription">The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**.</param>
        /// <param name="iEzsignsignatureMaxlength">The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**.</param>
        /// <param name="eEzsignsignatureTextvalidation">eEzsignsignatureTextvalidation.</param>
        /// <param name="sEzsignsignatureRegexp">A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**.</param>
        /// <param name="objContactName">objContactName (required).</param>
        /// <param name="objContactNameDelegation">objContactNameDelegation.</param>
        /// <param name="objSignature">objSignature.</param>
        /// <param name="bEzsignsignatureCustomdate">Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**).</param>
        /// <param name="aObjEzsignsignaturecustomdate">An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all..</param>
        /// <param name="objCreditcardtransaction">objCreditcardtransaction.</param>
        public EzsignsignatureResponseCompound(int pkiEzsignsignatureID = default(int), int fkiEzsigndocumentID = default(int), int fkiEzsignfoldersignerassociationID = default(int), int iEzsignpagePagenumber = default(int), int iEzsignsignatureX = default(int), int iEzsignsignatureY = default(int), int iEzsignsignatureHeight = default(int), int iEzsignsignatureWidth = default(int), int iEzsignsignatureStep = default(int), FieldEEzsignsignatureType eEzsignsignatureType = default(FieldEEzsignsignatureType), string tEzsignsignatureTooltip = default(string), FieldEEzsignsignatureTooltipposition? eEzsignsignatureTooltipposition = default(FieldEEzsignsignatureTooltipposition?), FieldEEzsignsignatureFont? eEzsignsignatureFont = default(FieldEEzsignsignatureFont?), int iEzsignsignatureValidationstep = default(int), string sEzsignsignatureAttachmentdescription = default(string), FieldEEzsignsignatureAttachmentnamesource? eEzsignsignatureAttachmentnamesource = default(FieldEEzsignsignatureAttachmentnamesource?), bool bEzsignsignatureRequired = default(bool), int fkiEzsignfoldersignerassociationIDValidation = default(int), string dtEzsignsignatureDate = default(string), int iEzsignsignatureattachmentCount = default(int), string sEzsignsignatureDescription = default(string), int iEzsignsignatureMaxlength = default(int), EnumTextvalidation? eEzsignsignatureTextvalidation = default(EnumTextvalidation?), string sEzsignsignatureRegexp = default(string), CustomContactNameResponse objContactName = default(CustomContactNameResponse), CustomContactNameResponse objContactNameDelegation = default(CustomContactNameResponse), SignatureResponseCompound objSignature = default(SignatureResponseCompound), bool bEzsignsignatureCustomdate = default(bool), List<EzsignsignaturecustomdateResponseCompound> aObjEzsignsignaturecustomdate = default(List<EzsignsignaturecustomdateResponseCompound>), CustomCreditcardtransactionResponse objCreditcardtransaction = default(CustomCreditcardtransactionResponse))
        {
            // to ensure "pkiEzsignsignatureID" is required (not null)
            if (pkiEzsignsignatureID == null)
            {
                throw new InvalidDataException("pkiEzsignsignatureID is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.PkiEzsignsignatureID = pkiEzsignsignatureID;
            }

            // to ensure "fkiEzsigndocumentID" is required (not null)
            if (fkiEzsigndocumentID == null)
            {
                throw new InvalidDataException("fkiEzsigndocumentID is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            }

            // to ensure "fkiEzsignfoldersignerassociationID" is required (not null)
            if (fkiEzsignfoldersignerassociationID == null)
            {
                throw new InvalidDataException("fkiEzsignfoldersignerassociationID is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
            }

            // to ensure "iEzsignpagePagenumber" is required (not null)
            if (iEzsignpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsignpagePagenumber is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            }

            // to ensure "iEzsignsignatureX" is required (not null)
            if (iEzsignsignatureX == null)
            {
                throw new InvalidDataException("iEzsignsignatureX is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignsignatureX = iEzsignsignatureX;
            }

            // to ensure "iEzsignsignatureY" is required (not null)
            if (iEzsignsignatureY == null)
            {
                throw new InvalidDataException("iEzsignsignatureY is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignsignatureY = iEzsignsignatureY;
            }

            // to ensure "iEzsignsignatureStep" is required (not null)
            if (iEzsignsignatureStep == null)
            {
                throw new InvalidDataException("iEzsignsignatureStep is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignsignatureStep = iEzsignsignatureStep;
            }

            // to ensure "eEzsignsignatureType" is required (not null)
            if (eEzsignsignatureType == null)
            {
                throw new InvalidDataException("eEzsignsignatureType is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.EEzsignsignatureType = eEzsignsignatureType;
            }

            // to ensure "objContactName" is required (not null)
            if (objContactName == null)
            {
                throw new InvalidDataException("objContactName is a required property for EzsignsignatureResponseCompound and cannot be null");
            }
            else
            {
                this.ObjContactName = objContactName;
            }

            this.IEzsignsignatureHeight = iEzsignsignatureHeight;
            this.IEzsignsignatureWidth = iEzsignsignatureWidth;
            this.TEzsignsignatureTooltip = tEzsignsignatureTooltip;
            this.EEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
            this.EEzsignsignatureFont = eEzsignsignatureFont;
            this.IEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
            this.SEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
            this.EEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
            this.BEzsignsignatureRequired = bEzsignsignatureRequired;
            this.FkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
            this.DtEzsignsignatureDate = dtEzsignsignatureDate;
            this.IEzsignsignatureattachmentCount = iEzsignsignatureattachmentCount;
            this.SEzsignsignatureDescription = sEzsignsignatureDescription;
            this.IEzsignsignatureMaxlength = iEzsignsignatureMaxlength;
            this.EEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
            this.SEzsignsignatureRegexp = sEzsignsignatureRegexp;
            this.ObjContactNameDelegation = objContactNameDelegation;
            this.ObjSignature = objSignature;
            this.BEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
            this.AObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
            this.ObjCreditcardtransaction = objCreditcardtransaction;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignature
        /// </summary>
        /// <value>The unique ID of the Ezsignsignature</value>
        [DataMember(Name="pkiEzsignsignatureID", EmitDefaultValue=true)]
        public int PkiEzsignsignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        [DataMember(Name="fkiEzsigndocumentID", EmitDefaultValue=true)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        [DataMember(Name="fkiEzsignfoldersignerassociationID", EmitDefaultValue=true)]
        public int FkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        [DataMember(Name="iEzsignpagePagenumber", EmitDefaultValue=true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsignsignatureX", EmitDefaultValue=true)]
        public int IEzsignsignatureX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsignsignatureY", EmitDefaultValue=true)]
        public int IEzsignsignatureY { get; set; }

        /// <summary>
        /// The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.
        /// </summary>
        /// <value>The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.</value>
        [DataMember(Name="iEzsignsignatureHeight", EmitDefaultValue=false)]
        public int IEzsignsignatureHeight { get; set; }

        /// <summary>
        /// The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.
        /// </summary>
        /// <value>The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.</value>
        [DataMember(Name="iEzsignsignatureWidth", EmitDefaultValue=false)]
        public int IEzsignsignatureWidth { get; set; }

        /// <summary>
        /// The step when the Ezsignsigner will be invited to sign
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to sign</value>
        [DataMember(Name="iEzsignsignatureStep", EmitDefaultValue=true)]
        public int IEzsignsignatureStep { get; set; }


        /// <summary>
        /// A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsignsigner about the Ezsignsignature</value>
        [DataMember(Name="tEzsignsignatureTooltip", EmitDefaultValue=false)]
        public string TEzsignsignatureTooltip { get; set; }



        /// <summary>
        /// The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments</value>
        [DataMember(Name="iEzsignsignatureValidationstep", EmitDefaultValue=false)]
        public int IEzsignsignatureValidationstep { get; set; }

        /// <summary>
        /// The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
        /// </summary>
        /// <value>The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments</value>
        [DataMember(Name="sEzsignsignatureAttachmentdescription", EmitDefaultValue=false)]
        public string SEzsignsignatureAttachmentdescription { get; set; }


        /// <summary>
        /// Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.
        /// </summary>
        /// <value>Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.</value>
        [DataMember(Name="bEzsignsignatureRequired", EmitDefaultValue=false)]
        public bool BEzsignsignatureRequired { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        [DataMember(Name="fkiEzsignfoldersignerassociationIDValidation", EmitDefaultValue=false)]
        public int FkiEzsignfoldersignerassociationIDValidation { get; set; }

        /// <summary>
        /// The date the Ezsignsignature was signed
        /// </summary>
        /// <value>The date the Ezsignsignature was signed</value>
        [DataMember(Name="dtEzsignsignatureDate", EmitDefaultValue=false)]
        public string DtEzsignsignatureDate { get; set; }

        /// <summary>
        /// The count of Ezsignsignatureattachment
        /// </summary>
        /// <value>The count of Ezsignsignatureattachment</value>
        [DataMember(Name="iEzsignsignatureattachmentCount", EmitDefaultValue=false)]
        public int IEzsignsignatureattachmentCount { get; set; }

        /// <summary>
        /// The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**
        /// </summary>
        /// <value>The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**</value>
        [DataMember(Name="sEzsignsignatureDescription", EmitDefaultValue=false)]
        public string SEzsignsignatureDescription { get; set; }

        /// <summary>
        /// The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**
        /// </summary>
        /// <value>The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**</value>
        [DataMember(Name="iEzsignsignatureMaxlength", EmitDefaultValue=false)]
        public int IEzsignsignatureMaxlength { get; set; }


        /// <summary>
        /// A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
        /// </summary>
        /// <value>A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**</value>
        [DataMember(Name="sEzsignsignatureRegexp", EmitDefaultValue=false)]
        public string SEzsignsignatureRegexp { get; set; }

        /// <summary>
        /// Gets or Sets ObjContactName
        /// </summary>
        [DataMember(Name="objContactName", EmitDefaultValue=true)]
        public CustomContactNameResponse ObjContactName { get; set; }

        /// <summary>
        /// Gets or Sets ObjContactNameDelegation
        /// </summary>
        [DataMember(Name="objContactNameDelegation", EmitDefaultValue=false)]
        public CustomContactNameResponse ObjContactNameDelegation { get; set; }

        /// <summary>
        /// Gets or Sets ObjSignature
        /// </summary>
        [DataMember(Name="objSignature", EmitDefaultValue=false)]
        public SignatureResponseCompound ObjSignature { get; set; }

        /// <summary>
        /// Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
        /// </summary>
        /// <value>Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)</value>
        [DataMember(Name="bEzsignsignatureCustomdate", EmitDefaultValue=false)]
        public bool BEzsignsignatureCustomdate { get; set; }

        /// <summary>
        /// An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
        /// </summary>
        /// <value>An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.</value>
        [DataMember(Name="a_objEzsignsignaturecustomdate", EmitDefaultValue=false)]
        public List<EzsignsignaturecustomdateResponseCompound> AObjEzsignsignaturecustomdate { get; set; }

        /// <summary>
        /// Gets or Sets ObjCreditcardtransaction
        /// </summary>
        [DataMember(Name="objCreditcardtransaction", EmitDefaultValue=false)]
        public CustomCreditcardtransactionResponse ObjCreditcardtransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignatureResponseCompound {\n");
            sb.Append("  PkiEzsignsignatureID: ").Append(PkiEzsignsignatureID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationID: ").Append(FkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  IEzsignsignatureX: ").Append(IEzsignsignatureX).Append("\n");
            sb.Append("  IEzsignsignatureY: ").Append(IEzsignsignatureY).Append("\n");
            sb.Append("  IEzsignsignatureHeight: ").Append(IEzsignsignatureHeight).Append("\n");
            sb.Append("  IEzsignsignatureWidth: ").Append(IEzsignsignatureWidth).Append("\n");
            sb.Append("  IEzsignsignatureStep: ").Append(IEzsignsignatureStep).Append("\n");
            sb.Append("  EEzsignsignatureType: ").Append(EEzsignsignatureType).Append("\n");
            sb.Append("  TEzsignsignatureTooltip: ").Append(TEzsignsignatureTooltip).Append("\n");
            sb.Append("  EEzsignsignatureTooltipposition: ").Append(EEzsignsignatureTooltipposition).Append("\n");
            sb.Append("  EEzsignsignatureFont: ").Append(EEzsignsignatureFont).Append("\n");
            sb.Append("  IEzsignsignatureValidationstep: ").Append(IEzsignsignatureValidationstep).Append("\n");
            sb.Append("  SEzsignsignatureAttachmentdescription: ").Append(SEzsignsignatureAttachmentdescription).Append("\n");
            sb.Append("  EEzsignsignatureAttachmentnamesource: ").Append(EEzsignsignatureAttachmentnamesource).Append("\n");
            sb.Append("  BEzsignsignatureRequired: ").Append(BEzsignsignatureRequired).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationIDValidation: ").Append(FkiEzsignfoldersignerassociationIDValidation).Append("\n");
            sb.Append("  DtEzsignsignatureDate: ").Append(DtEzsignsignatureDate).Append("\n");
            sb.Append("  IEzsignsignatureattachmentCount: ").Append(IEzsignsignatureattachmentCount).Append("\n");
            sb.Append("  SEzsignsignatureDescription: ").Append(SEzsignsignatureDescription).Append("\n");
            sb.Append("  IEzsignsignatureMaxlength: ").Append(IEzsignsignatureMaxlength).Append("\n");
            sb.Append("  EEzsignsignatureTextvalidation: ").Append(EEzsignsignatureTextvalidation).Append("\n");
            sb.Append("  SEzsignsignatureRegexp: ").Append(SEzsignsignatureRegexp).Append("\n");
            sb.Append("  ObjContactName: ").Append(ObjContactName).Append("\n");
            sb.Append("  ObjContactNameDelegation: ").Append(ObjContactNameDelegation).Append("\n");
            sb.Append("  ObjSignature: ").Append(ObjSignature).Append("\n");
            sb.Append("  BEzsignsignatureCustomdate: ").Append(BEzsignsignatureCustomdate).Append("\n");
            sb.Append("  AObjEzsignsignaturecustomdate: ").Append(AObjEzsignsignaturecustomdate).Append("\n");
            sb.Append("  ObjCreditcardtransaction: ").Append(ObjCreditcardtransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignatureResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsignsignatureResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignatureResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignatureResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignatureID == input.PkiEzsignsignatureID ||
                    (this.PkiEzsignsignatureID != null &&
                    this.PkiEzsignsignatureID.Equals(input.PkiEzsignsignatureID))
                ) && 
                (
                    this.FkiEzsigndocumentID == input.FkiEzsigndocumentID ||
                    (this.FkiEzsigndocumentID != null &&
                    this.FkiEzsigndocumentID.Equals(input.FkiEzsigndocumentID))
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationID == input.FkiEzsignfoldersignerassociationID ||
                    (this.FkiEzsignfoldersignerassociationID != null &&
                    this.FkiEzsignfoldersignerassociationID.Equals(input.FkiEzsignfoldersignerassociationID))
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    (this.IEzsignpagePagenumber != null &&
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber))
                ) && 
                (
                    this.IEzsignsignatureX == input.IEzsignsignatureX ||
                    (this.IEzsignsignatureX != null &&
                    this.IEzsignsignatureX.Equals(input.IEzsignsignatureX))
                ) && 
                (
                    this.IEzsignsignatureY == input.IEzsignsignatureY ||
                    (this.IEzsignsignatureY != null &&
                    this.IEzsignsignatureY.Equals(input.IEzsignsignatureY))
                ) && 
                (
                    this.IEzsignsignatureHeight == input.IEzsignsignatureHeight ||
                    (this.IEzsignsignatureHeight != null &&
                    this.IEzsignsignatureHeight.Equals(input.IEzsignsignatureHeight))
                ) && 
                (
                    this.IEzsignsignatureWidth == input.IEzsignsignatureWidth ||
                    (this.IEzsignsignatureWidth != null &&
                    this.IEzsignsignatureWidth.Equals(input.IEzsignsignatureWidth))
                ) && 
                (
                    this.IEzsignsignatureStep == input.IEzsignsignatureStep ||
                    (this.IEzsignsignatureStep != null &&
                    this.IEzsignsignatureStep.Equals(input.IEzsignsignatureStep))
                ) && 
                (
                    this.EEzsignsignatureType == input.EEzsignsignatureType ||
                    (this.EEzsignsignatureType != null &&
                    this.EEzsignsignatureType.Equals(input.EEzsignsignatureType))
                ) && 
                (
                    this.TEzsignsignatureTooltip == input.TEzsignsignatureTooltip ||
                    (this.TEzsignsignatureTooltip != null &&
                    this.TEzsignsignatureTooltip.Equals(input.TEzsignsignatureTooltip))
                ) && 
                (
                    this.EEzsignsignatureTooltipposition == input.EEzsignsignatureTooltipposition ||
                    (this.EEzsignsignatureTooltipposition != null &&
                    this.EEzsignsignatureTooltipposition.Equals(input.EEzsignsignatureTooltipposition))
                ) && 
                (
                    this.EEzsignsignatureFont == input.EEzsignsignatureFont ||
                    (this.EEzsignsignatureFont != null &&
                    this.EEzsignsignatureFont.Equals(input.EEzsignsignatureFont))
                ) && 
                (
                    this.IEzsignsignatureValidationstep == input.IEzsignsignatureValidationstep ||
                    (this.IEzsignsignatureValidationstep != null &&
                    this.IEzsignsignatureValidationstep.Equals(input.IEzsignsignatureValidationstep))
                ) && 
                (
                    this.SEzsignsignatureAttachmentdescription == input.SEzsignsignatureAttachmentdescription ||
                    (this.SEzsignsignatureAttachmentdescription != null &&
                    this.SEzsignsignatureAttachmentdescription.Equals(input.SEzsignsignatureAttachmentdescription))
                ) && 
                (
                    this.EEzsignsignatureAttachmentnamesource == input.EEzsignsignatureAttachmentnamesource ||
                    (this.EEzsignsignatureAttachmentnamesource != null &&
                    this.EEzsignsignatureAttachmentnamesource.Equals(input.EEzsignsignatureAttachmentnamesource))
                ) && 
                (
                    this.BEzsignsignatureRequired == input.BEzsignsignatureRequired ||
                    (this.BEzsignsignatureRequired != null &&
                    this.BEzsignsignatureRequired.Equals(input.BEzsignsignatureRequired))
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationIDValidation == input.FkiEzsignfoldersignerassociationIDValidation ||
                    (this.FkiEzsignfoldersignerassociationIDValidation != null &&
                    this.FkiEzsignfoldersignerassociationIDValidation.Equals(input.FkiEzsignfoldersignerassociationIDValidation))
                ) && 
                (
                    this.DtEzsignsignatureDate == input.DtEzsignsignatureDate ||
                    (this.DtEzsignsignatureDate != null &&
                    this.DtEzsignsignatureDate.Equals(input.DtEzsignsignatureDate))
                ) && 
                (
                    this.IEzsignsignatureattachmentCount == input.IEzsignsignatureattachmentCount ||
                    (this.IEzsignsignatureattachmentCount != null &&
                    this.IEzsignsignatureattachmentCount.Equals(input.IEzsignsignatureattachmentCount))
                ) && 
                (
                    this.SEzsignsignatureDescription == input.SEzsignsignatureDescription ||
                    (this.SEzsignsignatureDescription != null &&
                    this.SEzsignsignatureDescription.Equals(input.SEzsignsignatureDescription))
                ) && 
                (
                    this.IEzsignsignatureMaxlength == input.IEzsignsignatureMaxlength ||
                    (this.IEzsignsignatureMaxlength != null &&
                    this.IEzsignsignatureMaxlength.Equals(input.IEzsignsignatureMaxlength))
                ) && 
                (
                    this.EEzsignsignatureTextvalidation == input.EEzsignsignatureTextvalidation ||
                    (this.EEzsignsignatureTextvalidation != null &&
                    this.EEzsignsignatureTextvalidation.Equals(input.EEzsignsignatureTextvalidation))
                ) && 
                (
                    this.SEzsignsignatureRegexp == input.SEzsignsignatureRegexp ||
                    (this.SEzsignsignatureRegexp != null &&
                    this.SEzsignsignatureRegexp.Equals(input.SEzsignsignatureRegexp))
                ) && 
                (
                    this.ObjContactName == input.ObjContactName ||
                    (this.ObjContactName != null &&
                    this.ObjContactName.Equals(input.ObjContactName))
                ) && 
                (
                    this.ObjContactNameDelegation == input.ObjContactNameDelegation ||
                    (this.ObjContactNameDelegation != null &&
                    this.ObjContactNameDelegation.Equals(input.ObjContactNameDelegation))
                ) && 
                (
                    this.ObjSignature == input.ObjSignature ||
                    (this.ObjSignature != null &&
                    this.ObjSignature.Equals(input.ObjSignature))
                ) && 
                (
                    this.BEzsignsignatureCustomdate == input.BEzsignsignatureCustomdate ||
                    (this.BEzsignsignatureCustomdate != null &&
                    this.BEzsignsignatureCustomdate.Equals(input.BEzsignsignatureCustomdate))
                ) && 
                (
                    this.AObjEzsignsignaturecustomdate == input.AObjEzsignsignaturecustomdate ||
                    this.AObjEzsignsignaturecustomdate != null &&
                    input.AObjEzsignsignaturecustomdate != null &&
                    this.AObjEzsignsignaturecustomdate.SequenceEqual(input.AObjEzsignsignaturecustomdate)
                ) && 
                (
                    this.ObjCreditcardtransaction == input.ObjCreditcardtransaction ||
                    (this.ObjCreditcardtransaction != null &&
                    this.ObjCreditcardtransaction.Equals(input.ObjCreditcardtransaction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignatureID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignatureID.GetHashCode();
                if (this.FkiEzsigndocumentID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigndocumentID.GetHashCode();
                if (this.FkiEzsignfoldersignerassociationID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfoldersignerassociationID.GetHashCode();
                if (this.IEzsignpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsignpagePagenumber.GetHashCode();
                if (this.IEzsignsignatureX != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureX.GetHashCode();
                if (this.IEzsignsignatureY != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureY.GetHashCode();
                if (this.IEzsignsignatureHeight != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureHeight.GetHashCode();
                if (this.IEzsignsignatureWidth != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureWidth.GetHashCode();
                if (this.IEzsignsignatureStep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureStep.GetHashCode();
                if (this.EEzsignsignatureType != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureType.GetHashCode();
                if (this.TEzsignsignatureTooltip != null)
                    hashCode = hashCode * 59 + this.TEzsignsignatureTooltip.GetHashCode();
                if (this.EEzsignsignatureTooltipposition != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureTooltipposition.GetHashCode();
                if (this.EEzsignsignatureFont != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureFont.GetHashCode();
                if (this.IEzsignsignatureValidationstep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureValidationstep.GetHashCode();
                if (this.SEzsignsignatureAttachmentdescription != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureAttachmentdescription.GetHashCode();
                if (this.EEzsignsignatureAttachmentnamesource != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureAttachmentnamesource.GetHashCode();
                if (this.BEzsignsignatureRequired != null)
                    hashCode = hashCode * 59 + this.BEzsignsignatureRequired.GetHashCode();
                if (this.FkiEzsignfoldersignerassociationIDValidation != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfoldersignerassociationIDValidation.GetHashCode();
                if (this.DtEzsignsignatureDate != null)
                    hashCode = hashCode * 59 + this.DtEzsignsignatureDate.GetHashCode();
                if (this.IEzsignsignatureattachmentCount != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureattachmentCount.GetHashCode();
                if (this.SEzsignsignatureDescription != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureDescription.GetHashCode();
                if (this.IEzsignsignatureMaxlength != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureMaxlength.GetHashCode();
                if (this.EEzsignsignatureTextvalidation != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureTextvalidation.GetHashCode();
                if (this.SEzsignsignatureRegexp != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureRegexp.GetHashCode();
                if (this.ObjContactName != null)
                    hashCode = hashCode * 59 + this.ObjContactName.GetHashCode();
                if (this.ObjContactNameDelegation != null)
                    hashCode = hashCode * 59 + this.ObjContactNameDelegation.GetHashCode();
                if (this.ObjSignature != null)
                    hashCode = hashCode * 59 + this.ObjSignature.GetHashCode();
                if (this.BEzsignsignatureCustomdate != null)
                    hashCode = hashCode * 59 + this.BEzsignsignatureCustomdate.GetHashCode();
                if (this.AObjEzsignsignaturecustomdate != null)
                    hashCode = hashCode * 59 + this.AObjEzsignsignaturecustomdate.GetHashCode();
                if (this.ObjCreditcardtransaction != null)
                    hashCode = hashCode * 59 + this.ObjCreditcardtransaction.GetHashCode();
                return hashCode;
            }
        }
    }

}
