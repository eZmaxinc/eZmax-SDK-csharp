/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignature Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignsignature-ResponseCompound")]
    public partial class EzsignsignatureResponseCompound : EzsignsignatureResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureResponseCompound" /> class.
        /// </summary>
        /// <param name="dtEzsignsignatureDateInFolderTimezone">The date the Ezsignsignature was signed in folder&#39;s timezone.</param>
        /// <param name="bEzsignsignatureCustomdate">Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**).</param>
        /// <param name="aObjEzsignsignaturecustomdate">An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all..</param>
        /// <param name="objCreditcardtransaction">objCreditcardtransaction.</param>
        /// <param name="aObjEzsignelementdependency">aObjEzsignelementdependency.</param>
        /// <param name="objTimezone">objTimezone.</param>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="fkiEzsignsigningreasonID">The unique ID of the Ezsignsigningreason.</param>
        /// <param name="fkiFontID">The unique ID of the Font.</param>
        /// <param name="sEzsignsigningreasonDescriptionX">The description of the Ezsignsigningreason in the language of the requester.</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="iEzsignsignatureX">The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignsignatureY">The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignsignatureHeight">The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight..</param>
        /// <param name="iEzsignsignatureWidth">The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth..</param>
        /// <param name="iEzsignsignatureStep">The step when the Ezsignsigner will be invited to sign (required).</param>
        /// <param name="iEzsignsignatureStepadjusted">The step when the Ezsignsigner will be invited to sign.</param>
        /// <param name="eEzsignsignatureType">eEzsignsignatureType (required).</param>
        /// <param name="tEzsignsignatureTooltip">A tooltip that will be presented to Ezsignsigner about the Ezsignsignature.</param>
        /// <param name="eEzsignsignatureTooltipposition">eEzsignsignatureTooltipposition.</param>
        /// <param name="eEzsignsignatureFont">eEzsignsignatureFont.</param>
        /// <param name="iEzsignsignatureValidationstep">The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="sEzsignsignatureAttachmentdescription">The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="eEzsignsignatureAttachmentnamesource">eEzsignsignatureAttachmentnamesource.</param>
        /// <param name="eEzsignsignatureConsultationtrigger">eEzsignsignatureConsultationtrigger.</param>
        /// <param name="bEzsignsignatureHandwritten">Whether the Ezsignsignature must be handwritten or not when eEzsignsignatureType &#x3D; Signature..</param>
        /// <param name="bEzsignsignatureReason">Whether the Ezsignsignature must include a reason or not when eEzsignsignatureType &#x3D; Signature..</param>
        /// <param name="bEzsignsignatureRequired">Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments, Text or Textarea..</param>
        /// <param name="fkiEzsignfoldersignerassociationIDValidation">The unique ID of the Ezsignfoldersignerassociation.</param>
        /// <param name="dtEzsignsignatureDate">The date the Ezsignsignature was signed.</param>
        /// <param name="iEzsignsignatureattachmentCount">The count of Ezsignsignatureattachment.</param>
        /// <param name="sEzsignsignatureDescription">The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**.</param>
        /// <param name="iEzsignsignatureMaxlength">The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**.</param>
        /// <param name="eEzsignsignatureTextvalidation">eEzsignsignatureTextvalidation.</param>
        /// <param name="sEzsignsignatureTextvalidationcustommessage">Description of validation rule. Show by signatory..</param>
        /// <param name="eEzsignsignatureDependencyrequirement">eEzsignsignatureDependencyrequirement.</param>
        /// <param name="sEzsignsignatureDefaultvalue">The default value for the Ezsignsignature  You can use the codes below and they will be replaced at signature time.    | Code | Description | Example | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | - -- -- -- -- -- - | | {sUserFirstname} | The first name of the contact | John | | {sUserLastname} | The last name of the contact | Doe | | {sUserJobtitle} | The job title | Sales Representative | | {sCompany} | Company name | eZmax Solutions Inc. | | {sEmailAddress} | The email address | email@example.com | | {sPhoneE164} | A phone number in E.164 Format | +15149901516 | | {sPhoneE164Cell} | A phone number in E.164 Format | +15149901516 |.</param>
        /// <param name="sEzsignsignatureRegexp">A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**.</param>
        /// <param name="objContactName">objContactName (required).</param>
        /// <param name="objContactNameDelegation">objContactNameDelegation.</param>
        /// <param name="objSignature">objSignature.</param>
        public EzsignsignatureResponseCompound(string dtEzsignsignatureDateInFolderTimezone = default(string), bool bEzsignsignatureCustomdate = default(bool), List<EzsignsignaturecustomdateResponseCompound> aObjEzsignsignaturecustomdate = default(List<EzsignsignaturecustomdateResponseCompound>), CustomCreditcardtransactionResponse objCreditcardtransaction = default(CustomCreditcardtransactionResponse), List<EzsignelementdependencyResponseCompound> aObjEzsignelementdependency = default(List<EzsignelementdependencyResponseCompound>), CustomTimezoneWithCodeResponse objTimezone = default(CustomTimezoneWithCodeResponse), int pkiEzsignsignatureID = default(int), int fkiEzsigndocumentID = default(int), int fkiEzsignfoldersignerassociationID = default(int), int fkiEzsignsigningreasonID = default(int), int fkiFontID = default(int), string sEzsignsigningreasonDescriptionX = default(string), int iEzsignpagePagenumber = default(int), int iEzsignsignatureX = default(int), int iEzsignsignatureY = default(int), int iEzsignsignatureHeight = default(int), int iEzsignsignatureWidth = default(int), int iEzsignsignatureStep = default(int), int iEzsignsignatureStepadjusted = default(int), FieldEEzsignsignatureType eEzsignsignatureType = default(FieldEEzsignsignatureType), string tEzsignsignatureTooltip = default(string), FieldEEzsignsignatureTooltipposition? eEzsignsignatureTooltipposition = default(FieldEEzsignsignatureTooltipposition?), FieldEEzsignsignatureFont? eEzsignsignatureFont = default(FieldEEzsignsignatureFont?), int iEzsignsignatureValidationstep = default(int), string sEzsignsignatureAttachmentdescription = default(string), FieldEEzsignsignatureAttachmentnamesource? eEzsignsignatureAttachmentnamesource = default(FieldEEzsignsignatureAttachmentnamesource?), FieldEEzsignsignatureConsultationtrigger? eEzsignsignatureConsultationtrigger = default(FieldEEzsignsignatureConsultationtrigger?), bool bEzsignsignatureHandwritten = default(bool), bool bEzsignsignatureReason = default(bool), bool bEzsignsignatureRequired = default(bool), int fkiEzsignfoldersignerassociationIDValidation = default(int), string dtEzsignsignatureDate = default(string), int iEzsignsignatureattachmentCount = default(int), string sEzsignsignatureDescription = default(string), int iEzsignsignatureMaxlength = default(int), EnumTextvalidation? eEzsignsignatureTextvalidation = default(EnumTextvalidation?), string sEzsignsignatureTextvalidationcustommessage = default(string), FieldEEzsignsignatureDependencyrequirement? eEzsignsignatureDependencyrequirement = default(FieldEEzsignsignatureDependencyrequirement?), string sEzsignsignatureDefaultvalue = default(string), string sEzsignsignatureRegexp = default(string), CustomContactNameResponse objContactName = default(CustomContactNameResponse), CustomContactNameResponse objContactNameDelegation = default(CustomContactNameResponse), SignatureResponseCompound objSignature = default(SignatureResponseCompound)) : base()
        {
            this.DtEzsignsignatureDateInFolderTimezone = dtEzsignsignatureDateInFolderTimezone;
            this.BEzsignsignatureCustomdate = bEzsignsignatureCustomdate;
            this.AObjEzsignsignaturecustomdate = aObjEzsignsignaturecustomdate;
            this.ObjCreditcardtransaction = objCreditcardtransaction;
            this.AObjEzsignelementdependency = aObjEzsignelementdependency;
            this.ObjTimezone = objTimezone;
        }

        /// <summary>
        /// The date the Ezsignsignature was signed in folder&#39;s timezone
        /// </summary>
        /// <value>The date the Ezsignsignature was signed in folder&#39;s timezone</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignsignatureDateInFolderTimezone", EmitDefaultValue = false)]
        public string DtEzsignsignatureDateInFolderTimezone { get; set; }

        /// <summary>
        /// Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)
        /// </summary>
        /// <value>Whether the Ezsignsignature has a custom date format or not. (Only possible when eEzsignsignatureType is **Name** or **Handwritten**)</value>
        [DataMember(Name = "bEzsignsignatureCustomdate", EmitDefaultValue = true)]
        public bool BEzsignsignatureCustomdate { get; set; }

        /// <summary>
        /// An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
        /// </summary>
        /// <value>An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsignsignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.</value>
        [DataMember(Name = "a_objEzsignsignaturecustomdate", EmitDefaultValue = false)]
        public List<EzsignsignaturecustomdateResponseCompound> AObjEzsignsignaturecustomdate { get; set; }

        /// <summary>
        /// Gets or Sets ObjCreditcardtransaction
        /// </summary>
        [DataMember(Name = "objCreditcardtransaction", EmitDefaultValue = false)]
        public CustomCreditcardtransactionResponse ObjCreditcardtransaction { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignelementdependency
        /// </summary>
        [DataMember(Name = "a_objEzsignelementdependency", EmitDefaultValue = false)]
        public List<EzsignelementdependencyResponseCompound> AObjEzsignelementdependency { get; set; }

        /// <summary>
        /// Gets or Sets ObjTimezone
        /// </summary>
        [DataMember(Name = "objTimezone", EmitDefaultValue = false)]
        public CustomTimezoneWithCodeResponse ObjTimezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignsignatureResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DtEzsignsignatureDateInFolderTimezone: ").Append(DtEzsignsignatureDateInFolderTimezone).Append("\n");
            sb.Append("  BEzsignsignatureCustomdate: ").Append(BEzsignsignatureCustomdate).Append("\n");
            sb.Append("  AObjEzsignsignaturecustomdate: ").Append(AObjEzsignsignaturecustomdate).Append("\n");
            sb.Append("  ObjCreditcardtransaction: ").Append(ObjCreditcardtransaction).Append("\n");
            sb.Append("  AObjEzsignelementdependency: ").Append(AObjEzsignelementdependency).Append("\n");
            sb.Append("  ObjTimezone: ").Append(ObjTimezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            if (this.DtEzsignsignatureDateInFolderTimezone != null) {
                // DtEzsignsignatureDateInFolderTimezone (string) pattern
                Regex regexDtEzsignsignatureDateInFolderTimezone = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtEzsignsignatureDateInFolderTimezone.Match(this.DtEzsignsignatureDateInFolderTimezone).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtEzsignsignatureDateInFolderTimezone, must match a pattern of " + regexDtEzsignsignatureDateInFolderTimezone, new [] { "DtEzsignsignatureDateInFolderTimezone" });
                }
            }

            yield break;
        }
    }

}
