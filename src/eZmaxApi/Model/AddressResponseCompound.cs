/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Address Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "address-ResponseCompound")]
    public partial class AddressResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiAddressID">The unique ID of the Address (required).</param>
        /// <param name="fkiAddresstypeID">The unique ID of the Addresstype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Real Estate Invoice| |4|Invoicing| |5|Shipping| (required).</param>
        /// <param name="sAddressCivic">The Civic number. (required).</param>
        /// <param name="sAddressStreet">The Street Name (required).</param>
        /// <param name="sAddressSuite">The Suite or appartment number.</param>
        /// <param name="sAddressCity">The City name (required).</param>
        /// <param name="fkiProvinceID">The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming| (required).</param>
        /// <param name="sProvinceNameX">The name of the Province in the language of the requester (required).</param>
        /// <param name="fkiCountryID">The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States| (required).</param>
        /// <param name="sCountryNameX">The name of the Country in the language of the requester (required).</param>
        /// <param name="sAddressZip">The Postal/Zip Code  The value must be entered without spaces (required).</param>
        /// <param name="fAddressLongitude">The Longitude of the Address.</param>
        /// <param name="fAddressLatitude">The Latitude of the Address.</param>
        public AddressResponseCompound(int pkiAddressID = default(int), int fkiAddresstypeID = default(int), string sAddressCivic = default(string), string sAddressStreet = default(string), string sAddressSuite = default(string), string sAddressCity = default(string), int fkiProvinceID = default(int), string sProvinceNameX = default(string), int fkiCountryID = default(int), string sCountryNameX = default(string), string sAddressZip = default(string), string fAddressLongitude = default(string), string fAddressLatitude = default(string))
        {
            this.PkiAddressID = pkiAddressID;
            this.FkiAddresstypeID = fkiAddresstypeID;
            // to ensure "sAddressCivic" is required (not null)
            if (sAddressCivic == null)
            {
                throw new ArgumentNullException("sAddressCivic is a required property for AddressResponseCompound and cannot be null");
            }
            this.SAddressCivic = sAddressCivic;
            // to ensure "sAddressStreet" is required (not null)
            if (sAddressStreet == null)
            {
                throw new ArgumentNullException("sAddressStreet is a required property for AddressResponseCompound and cannot be null");
            }
            this.SAddressStreet = sAddressStreet;
            // to ensure "sAddressCity" is required (not null)
            if (sAddressCity == null)
            {
                throw new ArgumentNullException("sAddressCity is a required property for AddressResponseCompound and cannot be null");
            }
            this.SAddressCity = sAddressCity;
            this.FkiProvinceID = fkiProvinceID;
            // to ensure "sProvinceNameX" is required (not null)
            if (sProvinceNameX == null)
            {
                throw new ArgumentNullException("sProvinceNameX is a required property for AddressResponseCompound and cannot be null");
            }
            this.SProvinceNameX = sProvinceNameX;
            this.FkiCountryID = fkiCountryID;
            // to ensure "sCountryNameX" is required (not null)
            if (sCountryNameX == null)
            {
                throw new ArgumentNullException("sCountryNameX is a required property for AddressResponseCompound and cannot be null");
            }
            this.SCountryNameX = sCountryNameX;
            // to ensure "sAddressZip" is required (not null)
            if (sAddressZip == null)
            {
                throw new ArgumentNullException("sAddressZip is a required property for AddressResponseCompound and cannot be null");
            }
            this.SAddressZip = sAddressZip;
            this.SAddressSuite = sAddressSuite;
            this.FAddressLongitude = fAddressLongitude;
            this.FAddressLatitude = fAddressLatitude;
        }

        /// <summary>
        /// The unique ID of the Address
        /// </summary>
        /// <value>The unique ID of the Address</value>
        /* <example>142</example>*/
        [DataMember(Name = "pkiAddressID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiAddressID { get; set; }

        /// <summary>
        /// The unique ID of the Addresstype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Real Estate Invoice| |4|Invoicing| |5|Shipping|
        /// </summary>
        /// <value>The unique ID of the Addresstype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Real Estate Invoice| |4|Invoicing| |5|Shipping|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAddresstypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiAddresstypeID { get; set; }

        /// <summary>
        /// The Civic number.
        /// </summary>
        /// <value>The Civic number.</value>
        /* <example>2540</example>*/
        [DataMember(Name = "sAddressCivic", IsRequired = true, EmitDefaultValue = true)]
        public string SAddressCivic { get; set; }

        /// <summary>
        /// The Street Name
        /// </summary>
        /// <value>The Street Name</value>
        /* <example>Daniel-Johnson Blvd.</example>*/
        [DataMember(Name = "sAddressStreet", IsRequired = true, EmitDefaultValue = true)]
        public string SAddressStreet { get; set; }

        /// <summary>
        /// The Suite or appartment number
        /// </summary>
        /// <value>The Suite or appartment number</value>
        /* <example>610</example>*/
        [DataMember(Name = "sAddressSuite", EmitDefaultValue = false)]
        public string SAddressSuite { get; set; }

        /// <summary>
        /// The City name
        /// </summary>
        /// <value>The City name</value>
        /* <example>Laval</example>*/
        [DataMember(Name = "sAddressCity", IsRequired = true, EmitDefaultValue = true)]
        public string SAddressCity { get; set; }

        /// <summary>
        /// The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming|
        /// </summary>
        /// <value>The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming|</value>
        /* <example>11</example>*/
        [DataMember(Name = "fkiProvinceID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiProvinceID { get; set; }

        /// <summary>
        /// The name of the Province in the language of the requester
        /// </summary>
        /// <value>The name of the Province in the language of the requester</value>
        /* <example>Quebec</example>*/
        [DataMember(Name = "sProvinceNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SProvinceNameX { get; set; }

        /// <summary>
        /// The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|
        /// </summary>
        /// <value>The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiCountryID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCountryID { get; set; }

        /// <summary>
        /// The name of the Country in the language of the requester
        /// </summary>
        /// <value>The name of the Country in the language of the requester</value>
        /* <example>Canada</example>*/
        [DataMember(Name = "sCountryNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SCountryNameX { get; set; }

        /// <summary>
        /// The Postal/Zip Code  The value must be entered without spaces
        /// </summary>
        /// <value>The Postal/Zip Code  The value must be entered without spaces</value>
        /* <example>H7T2S3</example>*/
        [DataMember(Name = "sAddressZip", IsRequired = true, EmitDefaultValue = true)]
        public string SAddressZip { get; set; }

        /// <summary>
        /// The Longitude of the Address
        /// </summary>
        /// <value>The Longitude of the Address</value>
        /* <example>73.5674</example>*/
        [DataMember(Name = "fAddressLongitude", EmitDefaultValue = false)]
        public string FAddressLongitude { get; set; }

        /// <summary>
        /// The Latitude of the Address
        /// </summary>
        /// <value>The Latitude of the Address</value>
        /* <example>45.5019</example>*/
        [DataMember(Name = "fAddressLatitude", EmitDefaultValue = false)]
        public string FAddressLatitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressResponseCompound {\n");
            sb.Append("  PkiAddressID: ").Append(PkiAddressID).Append("\n");
            sb.Append("  FkiAddresstypeID: ").Append(FkiAddresstypeID).Append("\n");
            sb.Append("  SAddressCivic: ").Append(SAddressCivic).Append("\n");
            sb.Append("  SAddressStreet: ").Append(SAddressStreet).Append("\n");
            sb.Append("  SAddressSuite: ").Append(SAddressSuite).Append("\n");
            sb.Append("  SAddressCity: ").Append(SAddressCity).Append("\n");
            sb.Append("  FkiProvinceID: ").Append(FkiProvinceID).Append("\n");
            sb.Append("  SProvinceNameX: ").Append(SProvinceNameX).Append("\n");
            sb.Append("  FkiCountryID: ").Append(FkiCountryID).Append("\n");
            sb.Append("  SCountryNameX: ").Append(SCountryNameX).Append("\n");
            sb.Append("  SAddressZip: ").Append(SAddressZip).Append("\n");
            sb.Append("  FAddressLongitude: ").Append(FAddressLongitude).Append("\n");
            sb.Append("  FAddressLatitude: ").Append(FAddressLatitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiAddressID (int) minimum
            if (this.PkiAddressID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiAddressID, must be a value greater than or equal to 0.", new [] { "PkiAddressID" });
            }

            // FkiAddresstypeID (int) minimum
            if (this.FkiAddresstypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiAddresstypeID, must be a value greater than or equal to 0.", new [] { "FkiAddresstypeID" });
            }

            // FkiProvinceID (int) minimum
            if (this.FkiProvinceID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiProvinceID, must be a value greater than or equal to 0.", new [] { "FkiProvinceID" });
            }

            if (this.SProvinceNameX != null) {
                // SProvinceNameX (string) pattern
                Regex regexSProvinceNameX = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSProvinceNameX.Match(this.SProvinceNameX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SProvinceNameX, must match a pattern of " + regexSProvinceNameX, new [] { "SProvinceNameX" });
                }
            }

            // FkiCountryID (int) minimum
            if (this.FkiCountryID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiCountryID, must be a value greater than or equal to 0.", new [] { "FkiCountryID" });
            }

            if (this.SCountryNameX != null) {
                // SCountryNameX (string) pattern
                Regex regexSCountryNameX = new Regex(@"^.{0,40}$", RegexOptions.CultureInvariant);
                if (!regexSCountryNameX.Match(this.SCountryNameX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCountryNameX, must match a pattern of " + regexSCountryNameX, new [] { "SCountryNameX" });
                }
            }

            if (this.FAddressLongitude != null) {
                // FAddressLongitude (string) pattern
                Regex regexFAddressLongitude = new Regex(@"^(-?)(180(\.0{1,15})?|((1[0-7]\d)|(\d{1,2}))(\.\d{1,15})?)$", RegexOptions.CultureInvariant);
                if (!regexFAddressLongitude.Match(this.FAddressLongitude).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FAddressLongitude, must match a pattern of " + regexFAddressLongitude, new [] { "FAddressLongitude" });
                }
            }

            if (this.FAddressLatitude != null) {
                // FAddressLatitude (string) pattern
                Regex regexFAddressLatitude = new Regex(@"^(-?)(90(\.0{1,15})?|([1-8]?\d(\.\d{1,15})?))$", RegexOptions.CultureInvariant);
                if (!regexFAddressLatitude.Match(this.FAddressLatitude).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FAddressLatitude, must match a pattern of " + regexFAddressLatitude, new [] { "FAddressLatitude" });
                }
            }

            yield break;
        }
    }

}
