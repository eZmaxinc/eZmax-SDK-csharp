/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A form Data Signer Object
    /// </summary>
    [DataContract(Name = "Custom-FormDataSigner-Response")]
    public partial class CustomFormDataSignerResponse : IEquatable<CustomFormDataSignerResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormDataSignerResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFormDataSignerResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormDataSignerResponse" /> class.
        /// </summary>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="sContactFirstname">The First name of the contact (required).</param>
        /// <param name="sContactLastname">The Last name of the contact (required).</param>
        /// <param name="aObjEzsignformfieldgroup">aObjEzsignformfieldgroup (required).</param>
        public CustomFormDataSignerResponse(int fkiEzsignfoldersignerassociationID = default(int), int fkiUserID = default(int), string sContactFirstname = default(string), string sContactLastname = default(string), List<CustomFormDataEzsignformfieldgroupResponse> aObjEzsignformfieldgroup = default(List<CustomFormDataEzsignformfieldgroupResponse>))
        {
            this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
            // to ensure "sContactFirstname" is required (not null)
            if (sContactFirstname == null)
            {
                throw new ArgumentNullException("sContactFirstname is a required property for CustomFormDataSignerResponse and cannot be null");
            }
            this.SContactFirstname = sContactFirstname;
            // to ensure "sContactLastname" is required (not null)
            if (sContactLastname == null)
            {
                throw new ArgumentNullException("sContactLastname is a required property for CustomFormDataSignerResponse and cannot be null");
            }
            this.SContactLastname = sContactLastname;
            // to ensure "aObjEzsignformfieldgroup" is required (not null)
            if (aObjEzsignformfieldgroup == null)
            {
                throw new ArgumentNullException("aObjEzsignformfieldgroup is a required property for CustomFormDataSignerResponse and cannot be null");
            }
            this.AObjEzsignformfieldgroup = aObjEzsignformfieldgroup;
            this.FkiUserID = fkiUserID;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        </example> }}
		/* <example>20</example>*/
        [DataMember(Name = "fkiEzsignfoldersignerassociationID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        </example> }}
		/* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The First name of the contact
        /// </summary>
        /// <value>The First name of the contact</value>
        </example> }}
		/* <example>John</example>*/
        [DataMember(Name = "sContactFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SContactFirstname { get; set; }

        /// <summary>
        /// The Last name of the contact
        /// </summary>
        /// <value>The Last name of the contact</value>
        </example> }}
		/* <example>Doe</example>*/
        [DataMember(Name = "sContactLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SContactLastname { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignformfieldgroup
        /// </summary>
        [DataMember(Name = "a_objEzsignformfieldgroup", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomFormDataEzsignformfieldgroupResponse> AObjEzsignformfieldgroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFormDataSignerResponse {\n");
            sb.Append("  FkiEzsignfoldersignerassociationID: ").Append(FkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  SContactFirstname: ").Append(SContactFirstname).Append("\n");
            sb.Append("  SContactLastname: ").Append(SContactLastname).Append("\n");
            sb.Append("  AObjEzsignformfieldgroup: ").Append(AObjEzsignformfieldgroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFormDataSignerResponse);
        }

        /// <summary>
        /// Returns true if CustomFormDataSignerResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFormDataSignerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFormDataSignerResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FkiEzsignfoldersignerassociationID == input.FkiEzsignfoldersignerassociationID ||
                    this.FkiEzsignfoldersignerassociationID.Equals(input.FkiEzsignfoldersignerassociationID)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.SContactFirstname == input.SContactFirstname ||
                    (this.SContactFirstname != null &&
                    this.SContactFirstname.Equals(input.SContactFirstname))
                ) && 
                (
                    this.SContactLastname == input.SContactLastname ||
                    (this.SContactLastname != null &&
                    this.SContactLastname.Equals(input.SContactLastname))
                ) && 
                (
                    this.AObjEzsignformfieldgroup == input.AObjEzsignformfieldgroup ||
                    this.AObjEzsignformfieldgroup != null &&
                    input.AObjEzsignformfieldgroup != null &&
                    this.AObjEzsignformfieldgroup.SequenceEqual(input.AObjEzsignformfieldgroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FkiEzsignfoldersignerassociationID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                if (this.SContactFirstname != null)
                {
                    hashCode = (hashCode * 59) + this.SContactFirstname.GetHashCode();
                }
                if (this.SContactLastname != null)
                {
                    hashCode = (hashCode * 59) + this.SContactLastname.GetHashCode();
                }
                if (this.AObjEzsignformfieldgroup != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignformfieldgroup.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiEzsignfoldersignerassociationID (int) minimum
            if (this.FkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            yield break;
        }
    }

}
