/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /2/object/user/{pkiUserID}
    /// </summary>
    [DataContract]
    public partial class UserGetObjectV2ResponseMPayload :  IEquatable<UserGetObjectV2ResponseMPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGetObjectV2ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserGetObjectV2ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGetObjectV2ResponseMPayload" /> class.
        /// </summary>
        /// <param name="objUser">objUser (required).</param>
        public UserGetObjectV2ResponseMPayload(UserResponseCompound objUser = default(UserResponseCompound))
        {
            // to ensure "objUser" is required (not null)
            if (objUser == null)
            {
                throw new InvalidDataException("objUser is a required property for UserGetObjectV2ResponseMPayload and cannot be null");
            }
            else
            {
                this.ObjUser = objUser;
            }

        }

        /// <summary>
        /// Gets or Sets ObjUser
        /// </summary>
        [DataMember(Name="objUser", EmitDefaultValue=true)]
        public UserResponseCompound ObjUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserGetObjectV2ResponseMPayload {\n");
            sb.Append("  ObjUser: ").Append(ObjUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserGetObjectV2ResponseMPayload);
        }

        /// <summary>
        /// Returns true if UserGetObjectV2ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of UserGetObjectV2ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGetObjectV2ResponseMPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjUser == input.ObjUser ||
                    (this.ObjUser != null &&
                    this.ObjUser.Equals(input.ObjUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjUser != null)
                    hashCode = hashCode * 59 + this.ObjUser.GetHashCode();
                return hashCode;
            }
        }
    }

}
