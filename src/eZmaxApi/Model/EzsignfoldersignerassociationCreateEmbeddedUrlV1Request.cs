/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignfoldersignerassociation/createEmbeddedUrl
    /// </summary>
    [DataContract(Name = "ezsignfoldersignerassociation-createEmbeddedUrl-v1-Request")]
    public partial class EzsignfoldersignerassociationCreateEmbeddedUrlV1Request : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationCreateEmbeddedUrlV1Request" /> class.
        /// </summary>
        /// <param name="sReturnUrl">The return Url to redirect after the signing is completed.</param>
        /// <param name="sIframedomain">Domain protection for the iFrame.</param>
        /// <param name="bIsIframe">Whether the url would be in an iFrame or not.</param>
        public EzsignfoldersignerassociationCreateEmbeddedUrlV1Request(string sReturnUrl = default(string), string sIframedomain = default(string), bool bIsIframe = default(bool))
        {
            this.SReturnUrl = sReturnUrl;
            this.SIframedomain = sIframedomain;
            this.BIsIframe = bIsIframe;
        }

        /// <summary>
        /// The return Url to redirect after the signing is completed
        /// </summary>
        /// <value>The return Url to redirect after the signing is completed</value>
        /* <example>Https://www.example.com</example>*/
        [DataMember(Name = "sReturnUrl", EmitDefaultValue = false)]
        public string SReturnUrl { get; set; }

        /// <summary>
        /// Domain protection for the iFrame
        /// </summary>
        /// <value>Domain protection for the iFrame</value>
        /* <example>*.example.com</example>*/
        [DataMember(Name = "sIframedomain", EmitDefaultValue = false)]
        public string SIframedomain { get; set; }

        /// <summary>
        /// Whether the url would be in an iFrame or not
        /// </summary>
        /// <value>Whether the url would be in an iFrame or not</value>
        [DataMember(Name = "bIsIframe", EmitDefaultValue = true)]
        public bool BIsIframe { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfoldersignerassociationCreateEmbeddedUrlV1Request {\n");
            sb.Append("  SReturnUrl: ").Append(SReturnUrl).Append("\n");
            sb.Append("  SIframedomain: ").Append(SIframedomain).Append("\n");
            sb.Append("  BIsIframe: ").Append(BIsIframe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SReturnUrl != null) {
                // SReturnUrl (string) pattern
                Regex regexSReturnUrl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSReturnUrl.Match(this.SReturnUrl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SReturnUrl, must match a pattern of " + regexSReturnUrl, new [] { "SReturnUrl" });
                }
            }

            yield break;
        }
    }

}
