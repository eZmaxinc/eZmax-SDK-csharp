/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplate AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class EzsigntemplateAutocompleteElementResponse :  IEquatable<EzsigntemplateAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name="eEzsignfoldertypePrivacylevel", EmitDefaultValue=true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="sEzsigntemplateDescription">The description of the Ezsigntemplate (required).</param>
        /// <param name="pkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="bEzsigntemplateIsactive">Whether the Ezsigntemplate is active or not (required).</param>
        public EzsigntemplateAutocompleteElementResponse(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), string sEzsigntemplateDescription = default(string), int pkiEzsigntemplateID = default(int), bool bEzsigntemplateIsactive = default(bool))
        {
            // to ensure "eEzsignfoldertypePrivacylevel" is required (not null)
            if (eEzsignfoldertypePrivacylevel == null)
            {
                throw new InvalidDataException("eEzsignfoldertypePrivacylevel is a required property for EzsigntemplateAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            }

            // to ensure "sEzsigntemplateDescription" is required (not null)
            if (sEzsigntemplateDescription == null)
            {
                throw new InvalidDataException("sEzsigntemplateDescription is a required property for EzsigntemplateAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SEzsigntemplateDescription = sEzsigntemplateDescription;
            }

            // to ensure "pkiEzsigntemplateID" is required (not null)
            if (pkiEzsigntemplateID == null)
            {
                throw new InvalidDataException("pkiEzsigntemplateID is a required property for EzsigntemplateAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigntemplateID = pkiEzsigntemplateID;
            }

            // to ensure "bEzsigntemplateIsactive" is required (not null)
            if (bEzsigntemplateIsactive == null)
            {
                throw new InvalidDataException("bEzsigntemplateIsactive is a required property for EzsigntemplateAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BEzsigntemplateIsactive = bEzsigntemplateIsactive;
            }

        }


        /// <summary>
        /// The description of the Ezsigntemplate
        /// </summary>
        /// <value>The description of the Ezsigntemplate</value>
        [DataMember(Name="sEzsigntemplateDescription", EmitDefaultValue=true)]
        public string SEzsigntemplateDescription { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        [DataMember(Name="pkiEzsigntemplateID", EmitDefaultValue=true)]
        public int PkiEzsigntemplateID { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplate is active or not
        /// </summary>
        /// <value>Whether the Ezsigntemplate is active or not</value>
        [DataMember(Name="bEzsigntemplateIsactive", EmitDefaultValue=true)]
        public bool BEzsigntemplateIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplateAutocompleteElementResponse {\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsigntemplateDescription: ").Append(SEzsigntemplateDescription).Append("\n");
            sb.Append("  PkiEzsigntemplateID: ").Append(PkiEzsigntemplateID).Append("\n");
            sb.Append("  BEzsigntemplateIsactive: ").Append(BEzsigntemplateIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplateAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplateAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplateAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplateAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EEzsignfoldertypePrivacylevel == input.EEzsignfoldertypePrivacylevel ||
                    (this.EEzsignfoldertypePrivacylevel != null &&
                    this.EEzsignfoldertypePrivacylevel.Equals(input.EEzsignfoldertypePrivacylevel))
                ) && 
                (
                    this.SEzsigntemplateDescription == input.SEzsigntemplateDescription ||
                    (this.SEzsigntemplateDescription != null &&
                    this.SEzsigntemplateDescription.Equals(input.SEzsigntemplateDescription))
                ) && 
                (
                    this.PkiEzsigntemplateID == input.PkiEzsigntemplateID ||
                    (this.PkiEzsigntemplateID != null &&
                    this.PkiEzsigntemplateID.Equals(input.PkiEzsigntemplateID))
                ) && 
                (
                    this.BEzsigntemplateIsactive == input.BEzsigntemplateIsactive ||
                    (this.BEzsigntemplateIsactive != null &&
                    this.BEzsigntemplateIsactive.Equals(input.BEzsigntemplateIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EEzsignfoldertypePrivacylevel != null)
                    hashCode = hashCode * 59 + this.EEzsignfoldertypePrivacylevel.GetHashCode();
                if (this.SEzsigntemplateDescription != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplateDescription.GetHashCode();
                if (this.PkiEzsigntemplateID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplateID.GetHashCode();
                if (this.BEzsigntemplateIsactive != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplateIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntemplateID (int) minimum
            if(this.PkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateID" });
            }

            yield break;
        }
    }

}
