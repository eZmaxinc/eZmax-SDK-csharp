/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Signature Object
    /// </summary>
    [DataContract(Name = "signature-Request")]
    public partial class SignatureRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ESignaturePreference
        /// </summary>
        [DataMember(Name = "eSignaturePreference", IsRequired = true, EmitDefaultValue = true)]
        public FieldESignaturePreference ESignaturePreference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequest" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Signature.</param>
        /// <param name="">The unique ID of the Font (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The svg of the Signature.</param>
        /// <param name="">The svg of the Initials.</param>
        public SignatureRequest(int  = default(int), int  = default(int), FieldESignaturePreference  = default(FieldESignaturePreference), string  = default(string), string  = default(string))
        {
            this.FkiFontID = ;
            this.ESignaturePreference = ;
            this.PkiSignatureID = ;
            this.TSignatureSvg = ;
            this.TSignatureSvginitials = ;
        }

        /// <summary>
        /// The unique ID of the Signature
        /// </summary>
        /// <value>The unique ID of the Signature</value>
        /* <example>12</example>*/
        [DataMember(Name = "pkiSignatureID", EmitDefaultValue = false)]
        public int PkiSignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Font
        /// </summary>
        /// <value>The unique ID of the Font</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiFontID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiFontID { get; set; }

        /// <summary>
        /// The svg of the Signature
        /// </summary>
        /// <value>The svg of the Signature</value>
        /* <example>{&quot;$ref&quot;:&quot;#/components/examples/Svg/value&quot;}</example>*/
        [DataMember(Name = "tSignatureSvg", EmitDefaultValue = false)]
        public string TSignatureSvg { get; set; }

        /// <summary>
        /// The svg of the Initials
        /// </summary>
        /// <value>The svg of the Initials</value>
        /* <example>{&quot;$ref&quot;:&quot;#/components/examples/Svg/value&quot;}</example>*/
        [DataMember(Name = "tSignatureSvginitials", EmitDefaultValue = false)]
        public string TSignatureSvginitials { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequest {\n");
            sb.Append("  PkiSignatureID: ").Append(PkiSignatureID).Append("\n");
            sb.Append("  FkiFontID: ").Append(FkiFontID).Append("\n");
            sb.Append("  ESignaturePreference: ").Append(ESignaturePreference).Append("\n");
            sb.Append("  TSignatureSvg: ").Append(TSignatureSvg).Append("\n");
            sb.Append("  TSignatureSvginitials: ").Append(TSignatureSvginitials).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSignatureID (int) maximum
            if (this.PkiSignatureID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSignatureID, must be a value less than or equal to 16777215.", new [] { "PkiSignatureID" });
            }

            // PkiSignatureID (int) minimum
            if (this.PkiSignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSignatureID, must be a value greater than or equal to 0.", new [] { "PkiSignatureID" });
            }

            // FkiFontID (int) minimum
            if (this.FkiFontID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiFontID, must be a value greater than or equal to 0.", new [] { "FkiFontID" });
            }

            if (this.TSignatureSvg != null) {
                // TSignatureSvg (string) pattern
                Regex regexTSignatureSvg = new Regex(@"^.{60,65535}$", RegexOptions.CultureInvariant);
                if (!regexTSignatureSvg.Match(this.TSignatureSvg).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TSignatureSvg, must match a pattern of " + regexTSignatureSvg, new [] { "TSignatureSvg" });
                }
            }

            if (this.TSignatureSvginitials != null) {
                // TSignatureSvginitials (string) pattern
                Regex regexTSignatureSvginitials = new Regex(@"^.{60,65535}$", RegexOptions.CultureInvariant);
                if (!regexTSignatureSvginitials.Match(this.TSignatureSvginitials).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TSignatureSvginitials, must match a pattern of " + regexTSignatureSvginitials, new [] { "TSignatureSvginitials" });
                }
            }

            yield break;
        }
    }

}
