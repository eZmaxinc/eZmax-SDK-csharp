/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Customer Object and children
    /// </summary>
    [DataContract(Name = "customer-RequestCompound")]
    public partial class CustomerRequestCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ECustomerType
        /// </summary>
        [DataMember(Name = "eCustomerType", IsRequired = true, EmitDefaultValue = true)]
        public FieldECustomerType ECustomerType { get; set; }

        /// <summary>
        /// Gets or Sets ECustomerMarketingcorrespondence
        /// </summary>
        [DataMember(Name = "eCustomerMarketingcorrespondence", IsRequired = true, EmitDefaultValue = true)]
        public FieldECustomerMarketingcorrespondence ECustomerMarketingcorrespondence { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiCustomerID">The unique ID of the Customer..</param>
        /// <param name="fkiCompanyID">The unique ID of the Company (required).</param>
        /// <param name="fkiCustomergroupID">The unique ID of the Customergroup (required).</param>
        /// <param name="sCustomerName">The name of the Customer (required).</param>
        /// <param name="fkiContactinformationsID">The unique ID of the Contactinformations (required).</param>
        /// <param name="fkiContactcontainerID">The unique ID of the Contactcontainer (required).</param>
        /// <param name="fkiImageID">The unique ID of the Image (required).</param>
        /// <param name="fkiGlaccountcontainerID">The unique ID of the Glaccountcontainer (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="fkiDepartmentID">The unique ID of the Department (required).</param>
        /// <param name="fkiPaymentmethodID">The unique ID of the Paymentmethod (required).</param>
        /// <param name="fkiElectronicfundstransferbankaccountID">The unique ID of the Electronicfundstransferbankaccount (required).</param>
        /// <param name="fkiElectronicfundstransferbankaccountIDDirectdebit">The unique ID of the Electronicfundstransferbankaccount (required).</param>
        /// <param name="fkiSendingmethodID">The unique ID of the Sendingmethod (required).</param>
        /// <param name="fkiTaxassignmentID">The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable| (required).</param>
        /// <param name="fkiAttendancestatusID">The unique ID of the Attendancestatus (required).</param>
        /// <param name="fkiAgentIDVariableexpensechargeto">The unique ID of the Agent. (required).</param>
        /// <param name="fkiBrokerIDVariableexpensechargeto">The unique ID of the Broker. (required).</param>
        /// <param name="fkiCustomerIDVariableexpensechargeto">The unique ID of the Customer. (required).</param>
        /// <param name="fkiGlaccountcontainerIDVariableexpensechargeto">The unique ID of the Glaccountcontainer (required).</param>
        /// <param name="fkiAgentIDSupplychargechargeto">The unique ID of the Agent. (required).</param>
        /// <param name="fkiBrokerIDSupplychargechargeto">The unique ID of the Broker. (required).</param>
        /// <param name="fkiCustomerIDSupplychargechargeto">The unique ID of the Customer. (required).</param>
        /// <param name="fkiGlaccountcontainerIDSupplychargechargeto">The unique ID of the Glaccountcontainer (required).</param>
        /// <param name="fkiInvoicealternatelogoID">The unique ID of the Invoicealternatelogo (required).</param>
        /// <param name="fkiSynchronizationlinkserverID">The unique ID of the Synchronizationlinkserver (required).</param>
        /// <param name="efkiUserID">The unique ID of the User.</param>
        /// <param name="efksCustomerCode">The code of the Customer.</param>
        /// <param name="sCustomerCode">The code of the Customer (required).</param>
        /// <param name="dCustomerFulltimeequivalent">The fulltimeequivalent of the Customer (required).</param>
        /// <param name="iCustomerPhotocopiercode">The photocopiercode of the Customer (required).</param>
        /// <param name="iCustomerLongdistancecode">The longdistancecode of the Customer (required).</param>
        /// <param name="iCustomerTimewindowstart">The timewindowstart of the Customer (required).</param>
        /// <param name="iCustomerTimewindowend">The timewindowend of the Customer (required).</param>
        /// <param name="dCustomerMinimumchargeableinterests">The minimumchargeableinterests of the Customer (required).</param>
        /// <param name="dtCustomerBirthdate">The birthdate of the Customer (required).</param>
        /// <param name="dtCustomerTransfer">The transfer of the Customer (required).</param>
        /// <param name="dtCustomerTransferappointment">The transferappointment of the Customer (required).</param>
        /// <param name="dtCustomerTransfersurvey">The transfersurvey of the Customer (required).</param>
        /// <param name="bCustomerIsactive">Whether the customer is active or not (required).</param>
        /// <param name="bCustomerVariableexpensefinanced">Whether if it&#39;s an variableexpensefinanced (required).</param>
        /// <param name="bCustomerVariableexpensefinancedtaxes">Whether if it&#39;s an variableexpensefinancedtaxes (required).</param>
        /// <param name="bCustomerSupplychargefinanced">Whether if it&#39;s an supplychargefinanced (required).</param>
        /// <param name="bCustomerSupplychargefinancedtaxes">Whether if it&#39;s an supplychargefinancedtaxes (required).</param>
        /// <param name="bCustomerAttendance">Whether if it&#39;s an attendance (required).</param>
        /// <param name="eCustomerType">eCustomerType (required).</param>
        /// <param name="eCustomerMarketingcorrespondence">eCustomerMarketingcorrespondence (required).</param>
        /// <param name="bCustomerBlackcopycarbon">Whether if it&#39;s an blackcopycarbon (required).</param>
        /// <param name="bCustomerUnsubscribeinfo">Whether if it&#39;s an unsubscribeinfo (required).</param>
        /// <param name="tCustomerComment">The comment of the Customer (required).</param>
        /// <param name="iMPORTID">iMPORTID.</param>
        public CustomerRequestCompound(int pkiCustomerID = default(int), int fkiCompanyID = default(int), int fkiCustomergroupID = default(int), string sCustomerName = default(string), int fkiContactinformationsID = default(int), int fkiContactcontainerID = default(int), int fkiImageID = default(int), int fkiGlaccountcontainerID = default(int), int fkiLanguageID = default(int), int fkiDepartmentID = default(int), int fkiPaymentmethodID = default(int), int fkiElectronicfundstransferbankaccountID = default(int), int fkiElectronicfundstransferbankaccountIDDirectdebit = default(int), int fkiSendingmethodID = default(int), int fkiTaxassignmentID = default(int), int fkiAttendancestatusID = default(int), int fkiAgentIDVariableexpensechargeto = default(int), int fkiBrokerIDVariableexpensechargeto = default(int), int fkiCustomerIDVariableexpensechargeto = default(int), int fkiGlaccountcontainerIDVariableexpensechargeto = default(int), int fkiAgentIDSupplychargechargeto = default(int), int fkiBrokerIDSupplychargechargeto = default(int), int fkiCustomerIDSupplychargechargeto = default(int), int fkiGlaccountcontainerIDSupplychargechargeto = default(int), int fkiInvoicealternatelogoID = default(int), int fkiSynchronizationlinkserverID = default(int), int efkiUserID = default(int), string efksCustomerCode = default(string), string sCustomerCode = default(string), string dCustomerFulltimeequivalent = default(string), int iCustomerPhotocopiercode = default(int), int iCustomerLongdistancecode = default(int), int iCustomerTimewindowstart = default(int), int iCustomerTimewindowend = default(int), string dCustomerMinimumchargeableinterests = default(string), string dtCustomerBirthdate = default(string), string dtCustomerTransfer = default(string), string dtCustomerTransferappointment = default(string), string dtCustomerTransfersurvey = default(string), bool bCustomerIsactive = default(bool), bool bCustomerVariableexpensefinanced = default(bool), bool bCustomerVariableexpensefinancedtaxes = default(bool), bool bCustomerSupplychargefinanced = default(bool), bool bCustomerSupplychargefinancedtaxes = default(bool), bool bCustomerAttendance = default(bool), FieldECustomerType eCustomerType = default(FieldECustomerType), FieldECustomerMarketingcorrespondence eCustomerMarketingcorrespondence = default(FieldECustomerMarketingcorrespondence), bool bCustomerBlackcopycarbon = default(bool), bool bCustomerUnsubscribeinfo = default(bool), string tCustomerComment = default(string), string iMPORTID = default(string))
        {
            this.FkiCompanyID = fkiCompanyID;
            this.FkiCustomergroupID = fkiCustomergroupID;
            // to ensure "sCustomerName" is required (not null)
            if (sCustomerName == null)
            {
                throw new ArgumentNullException("sCustomerName is a required property for CustomerRequestCompound and cannot be null");
            }
            this.SCustomerName = sCustomerName;
            this.FkiContactinformationsID = fkiContactinformationsID;
            this.FkiContactcontainerID = fkiContactcontainerID;
            this.FkiImageID = fkiImageID;
            this.FkiGlaccountcontainerID = fkiGlaccountcontainerID;
            this.FkiLanguageID = fkiLanguageID;
            this.FkiDepartmentID = fkiDepartmentID;
            this.FkiPaymentmethodID = fkiPaymentmethodID;
            this.FkiElectronicfundstransferbankaccountID = fkiElectronicfundstransferbankaccountID;
            this.FkiElectronicfundstransferbankaccountIDDirectdebit = fkiElectronicfundstransferbankaccountIDDirectdebit;
            this.FkiSendingmethodID = fkiSendingmethodID;
            this.FkiTaxassignmentID = fkiTaxassignmentID;
            this.FkiAttendancestatusID = fkiAttendancestatusID;
            this.FkiAgentIDVariableexpensechargeto = fkiAgentIDVariableexpensechargeto;
            this.FkiBrokerIDVariableexpensechargeto = fkiBrokerIDVariableexpensechargeto;
            this.FkiCustomerIDVariableexpensechargeto = fkiCustomerIDVariableexpensechargeto;
            this.FkiGlaccountcontainerIDVariableexpensechargeto = fkiGlaccountcontainerIDVariableexpensechargeto;
            this.FkiAgentIDSupplychargechargeto = fkiAgentIDSupplychargechargeto;
            this.FkiBrokerIDSupplychargechargeto = fkiBrokerIDSupplychargechargeto;
            this.FkiCustomerIDSupplychargechargeto = fkiCustomerIDSupplychargechargeto;
            this.FkiGlaccountcontainerIDSupplychargechargeto = fkiGlaccountcontainerIDSupplychargechargeto;
            this.FkiInvoicealternatelogoID = fkiInvoicealternatelogoID;
            this.FkiSynchronizationlinkserverID = fkiSynchronizationlinkserverID;
            // to ensure "sCustomerCode" is required (not null)
            if (sCustomerCode == null)
            {
                throw new ArgumentNullException("sCustomerCode is a required property for CustomerRequestCompound and cannot be null");
            }
            this.SCustomerCode = sCustomerCode;
            // to ensure "dCustomerFulltimeequivalent" is required (not null)
            if (dCustomerFulltimeequivalent == null)
            {
                throw new ArgumentNullException("dCustomerFulltimeequivalent is a required property for CustomerRequestCompound and cannot be null");
            }
            this.DCustomerFulltimeequivalent = dCustomerFulltimeequivalent;
            this.ICustomerPhotocopiercode = iCustomerPhotocopiercode;
            this.ICustomerLongdistancecode = iCustomerLongdistancecode;
            this.ICustomerTimewindowstart = iCustomerTimewindowstart;
            this.ICustomerTimewindowend = iCustomerTimewindowend;
            // to ensure "dCustomerMinimumchargeableinterests" is required (not null)
            if (dCustomerMinimumchargeableinterests == null)
            {
                throw new ArgumentNullException("dCustomerMinimumchargeableinterests is a required property for CustomerRequestCompound and cannot be null");
            }
            this.DCustomerMinimumchargeableinterests = dCustomerMinimumchargeableinterests;
            // to ensure "dtCustomerBirthdate" is required (not null)
            if (dtCustomerBirthdate == null)
            {
                throw new ArgumentNullException("dtCustomerBirthdate is a required property for CustomerRequestCompound and cannot be null");
            }
            this.DtCustomerBirthdate = dtCustomerBirthdate;
            // to ensure "dtCustomerTransfer" is required (not null)
            if (dtCustomerTransfer == null)
            {
                throw new ArgumentNullException("dtCustomerTransfer is a required property for CustomerRequestCompound and cannot be null");
            }
            this.DtCustomerTransfer = dtCustomerTransfer;
            // to ensure "dtCustomerTransferappointment" is required (not null)
            if (dtCustomerTransferappointment == null)
            {
                throw new ArgumentNullException("dtCustomerTransferappointment is a required property for CustomerRequestCompound and cannot be null");
            }
            this.DtCustomerTransferappointment = dtCustomerTransferappointment;
            // to ensure "dtCustomerTransfersurvey" is required (not null)
            if (dtCustomerTransfersurvey == null)
            {
                throw new ArgumentNullException("dtCustomerTransfersurvey is a required property for CustomerRequestCompound and cannot be null");
            }
            this.DtCustomerTransfersurvey = dtCustomerTransfersurvey;
            this.BCustomerIsactive = bCustomerIsactive;
            this.BCustomerVariableexpensefinanced = bCustomerVariableexpensefinanced;
            this.BCustomerVariableexpensefinancedtaxes = bCustomerVariableexpensefinancedtaxes;
            this.BCustomerSupplychargefinanced = bCustomerSupplychargefinanced;
            this.BCustomerSupplychargefinancedtaxes = bCustomerSupplychargefinancedtaxes;
            this.BCustomerAttendance = bCustomerAttendance;
            this.ECustomerType = eCustomerType;
            this.ECustomerMarketingcorrespondence = eCustomerMarketingcorrespondence;
            this.BCustomerBlackcopycarbon = bCustomerBlackcopycarbon;
            this.BCustomerUnsubscribeinfo = bCustomerUnsubscribeinfo;
            // to ensure "tCustomerComment" is required (not null)
            if (tCustomerComment == null)
            {
                throw new ArgumentNullException("tCustomerComment is a required property for CustomerRequestCompound and cannot be null");
            }
            this.TCustomerComment = tCustomerComment;
            this.PkiCustomerID = pkiCustomerID;
            this.EfkiUserID = efkiUserID;
            this.EfksCustomerCode = efksCustomerCode;
            this.IMPORTID = iMPORTID;
        }

        /// <summary>
        /// The unique ID of the Customer.
        /// </summary>
        /// <value>The unique ID of the Customer.</value>
        /* <example>18</example>*/
        [DataMember(Name = "pkiCustomerID", EmitDefaultValue = false)]
        public int PkiCustomerID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiCompanyID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCompanyID { get; set; }

        /// <summary>
        /// The unique ID of the Customergroup
        /// </summary>
        /// <value>The unique ID of the Customergroup</value>
        /* <example>229</example>*/
        [DataMember(Name = "fkiCustomergroupID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCustomergroupID { get; set; }

        /// <summary>
        /// The name of the Customer
        /// </summary>
        /// <value>The name of the Customer</value>
        /* <example>eZmax Solutions</example>*/
        [DataMember(Name = "sCustomerName", IsRequired = true, EmitDefaultValue = true)]
        public string SCustomerName { get; set; }

        /// <summary>
        /// The unique ID of the Contactinformations
        /// </summary>
        /// <value>The unique ID of the Contactinformations</value>
        /* <example>55</example>*/
        [DataMember(Name = "fkiContactinformationsID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiContactinformationsID { get; set; }

        /// <summary>
        /// The unique ID of the Contactcontainer
        /// </summary>
        /// <value>The unique ID of the Contactcontainer</value>
        /* <example>150</example>*/
        [DataMember(Name = "fkiContactcontainerID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiContactcontainerID { get; set; }

        /// <summary>
        /// The unique ID of the Image
        /// </summary>
        /// <value>The unique ID of the Image</value>
        /* <example>164</example>*/
        [DataMember(Name = "fkiImageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiImageID { get; set; }

        /// <summary>
        /// The unique ID of the Glaccountcontainer
        /// </summary>
        /// <value>The unique ID of the Glaccountcontainer</value>
        /* <example>66</example>*/
        [DataMember(Name = "fkiGlaccountcontainerID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiGlaccountcontainerID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        /* <example>21</example>*/
        [DataMember(Name = "fkiDepartmentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiDepartmentID { get; set; }

        /// <summary>
        /// The unique ID of the Paymentmethod
        /// </summary>
        /// <value>The unique ID of the Paymentmethod</value>
        /* <example>166</example>*/
        [DataMember(Name = "fkiPaymentmethodID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiPaymentmethodID { get; set; }

        /// <summary>
        /// The unique ID of the Electronicfundstransferbankaccount
        /// </summary>
        /// <value>The unique ID of the Electronicfundstransferbankaccount</value>
        /* <example>36</example>*/
        [DataMember(Name = "fkiElectronicfundstransferbankaccountID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiElectronicfundstransferbankaccountID { get; set; }

        /// <summary>
        /// The unique ID of the Electronicfundstransferbankaccount
        /// </summary>
        /// <value>The unique ID of the Electronicfundstransferbankaccount</value>
        /* <example>36</example>*/
        [DataMember(Name = "fkiElectronicfundstransferbankaccountIDDirectdebit", IsRequired = true, EmitDefaultValue = true)]
        public int FkiElectronicfundstransferbankaccountIDDirectdebit { get; set; }

        /// <summary>
        /// The unique ID of the Sendingmethod
        /// </summary>
        /// <value>The unique ID of the Sendingmethod</value>
        /* <example>223</example>*/
        [DataMember(Name = "fkiSendingmethodID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiSendingmethodID { get; set; }

        /// <summary>
        /// The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
        /// </summary>
        /// <value>The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiTaxassignmentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiTaxassignmentID { get; set; }

        /// <summary>
        /// The unique ID of the Attendancestatus
        /// </summary>
        /// <value>The unique ID of the Attendancestatus</value>
        /* <example>170</example>*/
        [DataMember(Name = "fkiAttendancestatusID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiAttendancestatusID { get; set; }

        /// <summary>
        /// The unique ID of the Agent.
        /// </summary>
        /// <value>The unique ID of the Agent.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAgentIDVariableexpensechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiAgentIDVariableexpensechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Broker.
        /// </summary>
        /// <value>The unique ID of the Broker.</value>
        /* <example>26</example>*/
        [DataMember(Name = "fkiBrokerIDVariableexpensechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBrokerIDVariableexpensechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Customer.
        /// </summary>
        /// <value>The unique ID of the Customer.</value>
        /* <example>18</example>*/
        [DataMember(Name = "fkiCustomerIDVariableexpensechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCustomerIDVariableexpensechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Glaccountcontainer
        /// </summary>
        /// <value>The unique ID of the Glaccountcontainer</value>
        /* <example>66</example>*/
        [DataMember(Name = "fkiGlaccountcontainerIDVariableexpensechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiGlaccountcontainerIDVariableexpensechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Agent.
        /// </summary>
        /// <value>The unique ID of the Agent.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAgentIDSupplychargechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiAgentIDSupplychargechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Broker.
        /// </summary>
        /// <value>The unique ID of the Broker.</value>
        /* <example>26</example>*/
        [DataMember(Name = "fkiBrokerIDSupplychargechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBrokerIDSupplychargechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Customer.
        /// </summary>
        /// <value>The unique ID of the Customer.</value>
        /* <example>18</example>*/
        [DataMember(Name = "fkiCustomerIDSupplychargechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCustomerIDSupplychargechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Glaccountcontainer
        /// </summary>
        /// <value>The unique ID of the Glaccountcontainer</value>
        /* <example>66</example>*/
        [DataMember(Name = "fkiGlaccountcontainerIDSupplychargechargeto", IsRequired = true, EmitDefaultValue = true)]
        public int FkiGlaccountcontainerIDSupplychargechargeto { get; set; }

        /// <summary>
        /// The unique ID of the Invoicealternatelogo
        /// </summary>
        /// <value>The unique ID of the Invoicealternatelogo</value>
        /* <example>242</example>*/
        [DataMember(Name = "fkiInvoicealternatelogoID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiInvoicealternatelogoID { get; set; }

        /// <summary>
        /// The unique ID of the Synchronizationlinkserver
        /// </summary>
        /// <value>The unique ID of the Synchronizationlinkserver</value>
        /* <example>107</example>*/
        [DataMember(Name = "fkiSynchronizationlinkserverID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiSynchronizationlinkserverID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "efkiUserID", EmitDefaultValue = false)]
        public int EfkiUserID { get; set; }

        /// <summary>
        /// The code of the Customer
        /// </summary>
        /// <value>The code of the Customer</value>
        /* <example>EZMA1</example>*/
        [DataMember(Name = "efksCustomerCode", EmitDefaultValue = false)]
        public string EfksCustomerCode { get; set; }

        /// <summary>
        /// The code of the Customer
        /// </summary>
        /// <value>The code of the Customer</value>
        /* <example>EZMA1</example>*/
        [DataMember(Name = "sCustomerCode", IsRequired = true, EmitDefaultValue = true)]
        public string SCustomerCode { get; set; }

        /// <summary>
        /// The fulltimeequivalent of the Customer
        /// </summary>
        /// <value>The fulltimeequivalent of the Customer</value>
        /* <example>4.00</example>*/
        [DataMember(Name = "dCustomerFulltimeequivalent", IsRequired = true, EmitDefaultValue = true)]
        public string DCustomerFulltimeequivalent { get; set; }

        /// <summary>
        /// The photocopiercode of the Customer
        /// </summary>
        /// <value>The photocopiercode of the Customer</value>
        /* <example>7085237</example>*/
        [DataMember(Name = "iCustomerPhotocopiercode", IsRequired = true, EmitDefaultValue = true)]
        public int ICustomerPhotocopiercode { get; set; }

        /// <summary>
        /// The longdistancecode of the Customer
        /// </summary>
        /// <value>The longdistancecode of the Customer</value>
        /* <example>12316524</example>*/
        [DataMember(Name = "iCustomerLongdistancecode", IsRequired = true, EmitDefaultValue = true)]
        public int ICustomerLongdistancecode { get; set; }

        /// <summary>
        /// The timewindowstart of the Customer
        /// </summary>
        /// <value>The timewindowstart of the Customer</value>
        /* <example>172</example>*/
        [DataMember(Name = "iCustomerTimewindowstart", IsRequired = true, EmitDefaultValue = true)]
        public int ICustomerTimewindowstart { get; set; }

        /// <summary>
        /// The timewindowend of the Customer
        /// </summary>
        /// <value>The timewindowend of the Customer</value>
        /* <example>193</example>*/
        [DataMember(Name = "iCustomerTimewindowend", IsRequired = true, EmitDefaultValue = true)]
        public int ICustomerTimewindowend { get; set; }

        /// <summary>
        /// The minimumchargeableinterests of the Customer
        /// </summary>
        /// <value>The minimumchargeableinterests of the Customer</value>
        /* <example>4.00</example>*/
        [DataMember(Name = "dCustomerMinimumchargeableinterests", IsRequired = true, EmitDefaultValue = true)]
        public string DCustomerMinimumchargeableinterests { get; set; }

        /// <summary>
        /// The birthdate of the Customer
        /// </summary>
        /// <value>The birthdate of the Customer</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtCustomerBirthdate", IsRequired = true, EmitDefaultValue = true)]
        public string DtCustomerBirthdate { get; set; }

        /// <summary>
        /// The transfer of the Customer
        /// </summary>
        /// <value>The transfer of the Customer</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtCustomerTransfer", IsRequired = true, EmitDefaultValue = true)]
        public string DtCustomerTransfer { get; set; }

        /// <summary>
        /// The transferappointment of the Customer
        /// </summary>
        /// <value>The transferappointment of the Customer</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtCustomerTransferappointment", IsRequired = true, EmitDefaultValue = true)]
        public string DtCustomerTransferappointment { get; set; }

        /// <summary>
        /// The transfersurvey of the Customer
        /// </summary>
        /// <value>The transfersurvey of the Customer</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtCustomerTransfersurvey", IsRequired = true, EmitDefaultValue = true)]
        public string DtCustomerTransfersurvey { get; set; }

        /// <summary>
        /// Whether the customer is active or not
        /// </summary>
        /// <value>Whether the customer is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerIsactive { get; set; }

        /// <summary>
        /// Whether if it&#39;s an variableexpensefinanced
        /// </summary>
        /// <value>Whether if it&#39;s an variableexpensefinanced</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerVariableexpensefinanced", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerVariableexpensefinanced { get; set; }

        /// <summary>
        /// Whether if it&#39;s an variableexpensefinancedtaxes
        /// </summary>
        /// <value>Whether if it&#39;s an variableexpensefinancedtaxes</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerVariableexpensefinancedtaxes", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerVariableexpensefinancedtaxes { get; set; }

        /// <summary>
        /// Whether if it&#39;s an supplychargefinanced
        /// </summary>
        /// <value>Whether if it&#39;s an supplychargefinanced</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerSupplychargefinanced", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerSupplychargefinanced { get; set; }

        /// <summary>
        /// Whether if it&#39;s an supplychargefinancedtaxes
        /// </summary>
        /// <value>Whether if it&#39;s an supplychargefinancedtaxes</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerSupplychargefinancedtaxes", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerSupplychargefinancedtaxes { get; set; }

        /// <summary>
        /// Whether if it&#39;s an attendance
        /// </summary>
        /// <value>Whether if it&#39;s an attendance</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerAttendance", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerAttendance { get; set; }

        /// <summary>
        /// Whether if it&#39;s an blackcopycarbon
        /// </summary>
        /// <value>Whether if it&#39;s an blackcopycarbon</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerBlackcopycarbon", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerBlackcopycarbon { get; set; }

        /// <summary>
        /// Whether if it&#39;s an unsubscribeinfo
        /// </summary>
        /// <value>Whether if it&#39;s an unsubscribeinfo</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCustomerUnsubscribeinfo", IsRequired = true, EmitDefaultValue = true)]
        public bool BCustomerUnsubscribeinfo { get; set; }

        /// <summary>
        /// The comment of the Customer
        /// </summary>
        /// <value>The comment of the Customer</value>
        /* <example>This is a comment</example>*/
        [DataMember(Name = "tCustomerComment", IsRequired = true, EmitDefaultValue = true)]
        public string TCustomerComment { get; set; }

        /// <summary>
        /// Gets or Sets IMPORTID
        /// </summary>
        [DataMember(Name = "IMPORTID", EmitDefaultValue = false)]
        public string IMPORTID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerRequestCompound {\n");
            sb.Append("  PkiCustomerID: ").Append(PkiCustomerID).Append("\n");
            sb.Append("  FkiCompanyID: ").Append(FkiCompanyID).Append("\n");
            sb.Append("  FkiCustomergroupID: ").Append(FkiCustomergroupID).Append("\n");
            sb.Append("  SCustomerName: ").Append(SCustomerName).Append("\n");
            sb.Append("  FkiContactinformationsID: ").Append(FkiContactinformationsID).Append("\n");
            sb.Append("  FkiContactcontainerID: ").Append(FkiContactcontainerID).Append("\n");
            sb.Append("  FkiImageID: ").Append(FkiImageID).Append("\n");
            sb.Append("  FkiGlaccountcontainerID: ").Append(FkiGlaccountcontainerID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  FkiDepartmentID: ").Append(FkiDepartmentID).Append("\n");
            sb.Append("  FkiPaymentmethodID: ").Append(FkiPaymentmethodID).Append("\n");
            sb.Append("  FkiElectronicfundstransferbankaccountID: ").Append(FkiElectronicfundstransferbankaccountID).Append("\n");
            sb.Append("  FkiElectronicfundstransferbankaccountIDDirectdebit: ").Append(FkiElectronicfundstransferbankaccountIDDirectdebit).Append("\n");
            sb.Append("  FkiSendingmethodID: ").Append(FkiSendingmethodID).Append("\n");
            sb.Append("  FkiTaxassignmentID: ").Append(FkiTaxassignmentID).Append("\n");
            sb.Append("  FkiAttendancestatusID: ").Append(FkiAttendancestatusID).Append("\n");
            sb.Append("  FkiAgentIDVariableexpensechargeto: ").Append(FkiAgentIDVariableexpensechargeto).Append("\n");
            sb.Append("  FkiBrokerIDVariableexpensechargeto: ").Append(FkiBrokerIDVariableexpensechargeto).Append("\n");
            sb.Append("  FkiCustomerIDVariableexpensechargeto: ").Append(FkiCustomerIDVariableexpensechargeto).Append("\n");
            sb.Append("  FkiGlaccountcontainerIDVariableexpensechargeto: ").Append(FkiGlaccountcontainerIDVariableexpensechargeto).Append("\n");
            sb.Append("  FkiAgentIDSupplychargechargeto: ").Append(FkiAgentIDSupplychargechargeto).Append("\n");
            sb.Append("  FkiBrokerIDSupplychargechargeto: ").Append(FkiBrokerIDSupplychargechargeto).Append("\n");
            sb.Append("  FkiCustomerIDSupplychargechargeto: ").Append(FkiCustomerIDSupplychargechargeto).Append("\n");
            sb.Append("  FkiGlaccountcontainerIDSupplychargechargeto: ").Append(FkiGlaccountcontainerIDSupplychargechargeto).Append("\n");
            sb.Append("  FkiInvoicealternatelogoID: ").Append(FkiInvoicealternatelogoID).Append("\n");
            sb.Append("  FkiSynchronizationlinkserverID: ").Append(FkiSynchronizationlinkserverID).Append("\n");
            sb.Append("  EfkiUserID: ").Append(EfkiUserID).Append("\n");
            sb.Append("  EfksCustomerCode: ").Append(EfksCustomerCode).Append("\n");
            sb.Append("  SCustomerCode: ").Append(SCustomerCode).Append("\n");
            sb.Append("  DCustomerFulltimeequivalent: ").Append(DCustomerFulltimeequivalent).Append("\n");
            sb.Append("  ICustomerPhotocopiercode: ").Append(ICustomerPhotocopiercode).Append("\n");
            sb.Append("  ICustomerLongdistancecode: ").Append(ICustomerLongdistancecode).Append("\n");
            sb.Append("  ICustomerTimewindowstart: ").Append(ICustomerTimewindowstart).Append("\n");
            sb.Append("  ICustomerTimewindowend: ").Append(ICustomerTimewindowend).Append("\n");
            sb.Append("  DCustomerMinimumchargeableinterests: ").Append(DCustomerMinimumchargeableinterests).Append("\n");
            sb.Append("  DtCustomerBirthdate: ").Append(DtCustomerBirthdate).Append("\n");
            sb.Append("  DtCustomerTransfer: ").Append(DtCustomerTransfer).Append("\n");
            sb.Append("  DtCustomerTransferappointment: ").Append(DtCustomerTransferappointment).Append("\n");
            sb.Append("  DtCustomerTransfersurvey: ").Append(DtCustomerTransfersurvey).Append("\n");
            sb.Append("  BCustomerIsactive: ").Append(BCustomerIsactive).Append("\n");
            sb.Append("  BCustomerVariableexpensefinanced: ").Append(BCustomerVariableexpensefinanced).Append("\n");
            sb.Append("  BCustomerVariableexpensefinancedtaxes: ").Append(BCustomerVariableexpensefinancedtaxes).Append("\n");
            sb.Append("  BCustomerSupplychargefinanced: ").Append(BCustomerSupplychargefinanced).Append("\n");
            sb.Append("  BCustomerSupplychargefinancedtaxes: ").Append(BCustomerSupplychargefinancedtaxes).Append("\n");
            sb.Append("  BCustomerAttendance: ").Append(BCustomerAttendance).Append("\n");
            sb.Append("  ECustomerType: ").Append(ECustomerType).Append("\n");
            sb.Append("  ECustomerMarketingcorrespondence: ").Append(ECustomerMarketingcorrespondence).Append("\n");
            sb.Append("  BCustomerBlackcopycarbon: ").Append(BCustomerBlackcopycarbon).Append("\n");
            sb.Append("  BCustomerUnsubscribeinfo: ").Append(BCustomerUnsubscribeinfo).Append("\n");
            sb.Append("  TCustomerComment: ").Append(TCustomerComment).Append("\n");
            sb.Append("  IMPORTID: ").Append(IMPORTID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCustomerID (int) minimum
            if (this.PkiCustomerID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiCustomerID, must be a value greater than or equal to 0.", new [] { "PkiCustomerID" });
            }

            // FkiCompanyID (int) maximum
            if (this.FkiCompanyID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiCompanyID, must be a value less than or equal to 255.", new [] { "FkiCompanyID" });
            }

            // FkiCompanyID (int) minimum
            if (this.FkiCompanyID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiCompanyID, must be a value greater than or equal to 1.", new [] { "FkiCompanyID" });
            }

            // FkiCustomergroupID (int) maximum
            if (this.FkiCustomergroupID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiCustomergroupID, must be a value less than or equal to 255.", new [] { "FkiCustomergroupID" });
            }

            // FkiCustomergroupID (int) minimum
            if (this.FkiCustomergroupID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiCustomergroupID, must be a value greater than or equal to 0.", new [] { "FkiCustomergroupID" });
            }

            if (this.SCustomerName != null) {
                // SCustomerName (string) pattern
                Regex regexSCustomerName = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSCustomerName.Match(this.SCustomerName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCustomerName, must match a pattern of " + regexSCustomerName, new [] { "SCustomerName" });
                }
            }

            // FkiContactinformationsID (int) maximum
            if (this.FkiContactinformationsID > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for FkiContactinformationsID, must be a value less than or equal to 16777215.", new [] { "FkiContactinformationsID" });
            }

            // FkiContactinformationsID (int) minimum
            if (this.FkiContactinformationsID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiContactinformationsID, must be a value greater than or equal to 0.", new [] { "FkiContactinformationsID" });
            }

            // FkiContactcontainerID (int) maximum
            if (this.FkiContactcontainerID > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for FkiContactcontainerID, must be a value less than or equal to 16777215.", new [] { "FkiContactcontainerID" });
            }

            // FkiContactcontainerID (int) minimum
            if (this.FkiContactcontainerID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiContactcontainerID, must be a value greater than or equal to 0.", new [] { "FkiContactcontainerID" });
            }

            // FkiGlaccountcontainerID (int) minimum
            if (this.FkiGlaccountcontainerID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiGlaccountcontainerID, must be a value greater than or equal to 0.", new [] { "FkiGlaccountcontainerID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            // FkiDepartmentID (int) minimum
            if (this.FkiDepartmentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiDepartmentID, must be a value greater than or equal to 0.", new [] { "FkiDepartmentID" });
            }

            // FkiPaymentmethodID (int) maximum
            if (this.FkiPaymentmethodID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiPaymentmethodID, must be a value less than or equal to 255.", new [] { "FkiPaymentmethodID" });
            }

            // FkiPaymentmethodID (int) minimum
            if (this.FkiPaymentmethodID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiPaymentmethodID, must be a value greater than or equal to 0.", new [] { "FkiPaymentmethodID" });
            }

            // FkiElectronicfundstransferbankaccountID (int) maximum
            if (this.FkiElectronicfundstransferbankaccountID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for FkiElectronicfundstransferbankaccountID, must be a value less than or equal to 65535.", new [] { "FkiElectronicfundstransferbankaccountID" });
            }

            // FkiElectronicfundstransferbankaccountID (int) minimum
            if (this.FkiElectronicfundstransferbankaccountID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiElectronicfundstransferbankaccountID, must be a value greater than or equal to 0.", new [] { "FkiElectronicfundstransferbankaccountID" });
            }

            // FkiElectronicfundstransferbankaccountIDDirectdebit (int) maximum
            if (this.FkiElectronicfundstransferbankaccountIDDirectdebit > (int)65535)
            {
                yield return new ValidationResult("Invalid value for FkiElectronicfundstransferbankaccountIDDirectdebit, must be a value less than or equal to 65535.", new [] { "FkiElectronicfundstransferbankaccountIDDirectdebit" });
            }

            // FkiElectronicfundstransferbankaccountIDDirectdebit (int) minimum
            if (this.FkiElectronicfundstransferbankaccountIDDirectdebit < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiElectronicfundstransferbankaccountIDDirectdebit, must be a value greater than or equal to 0.", new [] { "FkiElectronicfundstransferbankaccountIDDirectdebit" });
            }

            // FkiSendingmethodID (int) maximum
            if (this.FkiSendingmethodID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiSendingmethodID, must be a value less than or equal to 255.", new [] { "FkiSendingmethodID" });
            }

            // FkiSendingmethodID (int) minimum
            if (this.FkiSendingmethodID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiSendingmethodID, must be a value greater than or equal to 0.", new [] { "FkiSendingmethodID" });
            }

            // FkiTaxassignmentID (int) maximum
            if (this.FkiTaxassignmentID > (int)15)
            {
                yield return new ValidationResult("Invalid value for FkiTaxassignmentID, must be a value less than or equal to 15.", new [] { "FkiTaxassignmentID" });
            }

            // FkiTaxassignmentID (int) minimum
            if (this.FkiTaxassignmentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiTaxassignmentID, must be a value greater than or equal to 0.", new [] { "FkiTaxassignmentID" });
            }

            // FkiAttendancestatusID (int) maximum
            if (this.FkiAttendancestatusID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for FkiAttendancestatusID, must be a value less than or equal to 65535.", new [] { "FkiAttendancestatusID" });
            }

            // FkiAttendancestatusID (int) minimum
            if (this.FkiAttendancestatusID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiAttendancestatusID, must be a value greater than or equal to 0.", new [] { "FkiAttendancestatusID" });
            }

            // FkiAgentIDVariableexpensechargeto (int) minimum
            if (this.FkiAgentIDVariableexpensechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiAgentIDVariableexpensechargeto, must be a value greater than or equal to 0.", new [] { "FkiAgentIDVariableexpensechargeto" });
            }

            // FkiBrokerIDVariableexpensechargeto (int) minimum
            if (this.FkiBrokerIDVariableexpensechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiBrokerIDVariableexpensechargeto, must be a value greater than or equal to 0.", new [] { "FkiBrokerIDVariableexpensechargeto" });
            }

            // FkiCustomerIDVariableexpensechargeto (int) minimum
            if (this.FkiCustomerIDVariableexpensechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiCustomerIDVariableexpensechargeto, must be a value greater than or equal to 0.", new [] { "FkiCustomerIDVariableexpensechargeto" });
            }

            // FkiGlaccountcontainerIDVariableexpensechargeto (int) minimum
            if (this.FkiGlaccountcontainerIDVariableexpensechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiGlaccountcontainerIDVariableexpensechargeto, must be a value greater than or equal to 0.", new [] { "FkiGlaccountcontainerIDVariableexpensechargeto" });
            }

            // FkiAgentIDSupplychargechargeto (int) minimum
            if (this.FkiAgentIDSupplychargechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiAgentIDSupplychargechargeto, must be a value greater than or equal to 0.", new [] { "FkiAgentIDSupplychargechargeto" });
            }

            // FkiBrokerIDSupplychargechargeto (int) minimum
            if (this.FkiBrokerIDSupplychargechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiBrokerIDSupplychargechargeto, must be a value greater than or equal to 0.", new [] { "FkiBrokerIDSupplychargechargeto" });
            }

            // FkiCustomerIDSupplychargechargeto (int) minimum
            if (this.FkiCustomerIDSupplychargechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiCustomerIDSupplychargechargeto, must be a value greater than or equal to 0.", new [] { "FkiCustomerIDSupplychargechargeto" });
            }

            // FkiGlaccountcontainerIDSupplychargechargeto (int) minimum
            if (this.FkiGlaccountcontainerIDSupplychargechargeto < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiGlaccountcontainerIDSupplychargechargeto, must be a value greater than or equal to 0.", new [] { "FkiGlaccountcontainerIDSupplychargechargeto" });
            }

            // FkiInvoicealternatelogoID (int) maximum
            if (this.FkiInvoicealternatelogoID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiInvoicealternatelogoID, must be a value less than or equal to 255.", new [] { "FkiInvoicealternatelogoID" });
            }

            // FkiInvoicealternatelogoID (int) minimum
            if (this.FkiInvoicealternatelogoID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiInvoicealternatelogoID, must be a value greater than or equal to 0.", new [] { "FkiInvoicealternatelogoID" });
            }

            // FkiSynchronizationlinkserverID (int) maximum
            if (this.FkiSynchronizationlinkserverID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiSynchronizationlinkserverID, must be a value less than or equal to 255.", new [] { "FkiSynchronizationlinkserverID" });
            }

            // FkiSynchronizationlinkserverID (int) minimum
            if (this.FkiSynchronizationlinkserverID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiSynchronizationlinkserverID, must be a value greater than or equal to 0.", new [] { "FkiSynchronizationlinkserverID" });
            }

            // EfkiUserID (int) minimum
            if (this.EfkiUserID < (int)0)
            {
                yield return new ValidationResult("Invalid value for EfkiUserID, must be a value greater than or equal to 0.", new [] { "EfkiUserID" });
            }

            if (this.EfksCustomerCode != null) {
                // EfksCustomerCode (string) pattern
                Regex regexEfksCustomerCode = new Regex(@"^.{0,6}$", RegexOptions.CultureInvariant);
                if (!regexEfksCustomerCode.Match(this.EfksCustomerCode).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EfksCustomerCode, must match a pattern of " + regexEfksCustomerCode, new [] { "EfksCustomerCode" });
                }
            }

            if (this.SCustomerCode != null) {
                // SCustomerCode (string) pattern
                Regex regexSCustomerCode = new Regex(@"^.{0,6}$", RegexOptions.CultureInvariant);
                if (!regexSCustomerCode.Match(this.SCustomerCode).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCustomerCode, must match a pattern of " + regexSCustomerCode, new [] { "SCustomerCode" });
                }
            }

            if (this.DCustomerFulltimeequivalent != null) {
                // DCustomerFulltimeequivalent (string) pattern
                Regex regexDCustomerFulltimeequivalent = new Regex(@"^-{0,1}[\d]{1,3}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDCustomerFulltimeequivalent.Match(this.DCustomerFulltimeequivalent).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DCustomerFulltimeequivalent, must match a pattern of " + regexDCustomerFulltimeequivalent, new [] { "DCustomerFulltimeequivalent" });
                }
            }

            // ICustomerPhotocopiercode (int) maximum
            if (this.ICustomerPhotocopiercode > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for ICustomerPhotocopiercode, must be a value less than or equal to 16777215.", new [] { "ICustomerPhotocopiercode" });
            }

            // ICustomerPhotocopiercode (int) minimum
            if (this.ICustomerPhotocopiercode < (int)0)
            {
                yield return new ValidationResult("Invalid value for ICustomerPhotocopiercode, must be a value greater than or equal to 0.", new [] { "ICustomerPhotocopiercode" });
            }

            // ICustomerLongdistancecode (int) maximum
            if (this.ICustomerLongdistancecode > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for ICustomerLongdistancecode, must be a value less than or equal to 16777215.", new [] { "ICustomerLongdistancecode" });
            }

            // ICustomerLongdistancecode (int) minimum
            if (this.ICustomerLongdistancecode < (int)0)
            {
                yield return new ValidationResult("Invalid value for ICustomerLongdistancecode, must be a value greater than or equal to 0.", new [] { "ICustomerLongdistancecode" });
            }

            // ICustomerTimewindowstart (int) maximum
            if (this.ICustomerTimewindowstart > (int)255)
            {
                yield return new ValidationResult("Invalid value for ICustomerTimewindowstart, must be a value less than or equal to 255.", new [] { "ICustomerTimewindowstart" });
            }

            // ICustomerTimewindowstart (int) minimum
            if (this.ICustomerTimewindowstart < (int)0)
            {
                yield return new ValidationResult("Invalid value for ICustomerTimewindowstart, must be a value greater than or equal to 0.", new [] { "ICustomerTimewindowstart" });
            }

            // ICustomerTimewindowend (int) maximum
            if (this.ICustomerTimewindowend > (int)255)
            {
                yield return new ValidationResult("Invalid value for ICustomerTimewindowend, must be a value less than or equal to 255.", new [] { "ICustomerTimewindowend" });
            }

            // ICustomerTimewindowend (int) minimum
            if (this.ICustomerTimewindowend < (int)0)
            {
                yield return new ValidationResult("Invalid value for ICustomerTimewindowend, must be a value greater than or equal to 0.", new [] { "ICustomerTimewindowend" });
            }

            if (this.DCustomerMinimumchargeableinterests != null) {
                // DCustomerMinimumchargeableinterests (string) pattern
                Regex regexDCustomerMinimumchargeableinterests = new Regex(@"^-{0,1}[\d]{1,9}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDCustomerMinimumchargeableinterests.Match(this.DCustomerMinimumchargeableinterests).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DCustomerMinimumchargeableinterests, must match a pattern of " + regexDCustomerMinimumchargeableinterests, new [] { "DCustomerMinimumchargeableinterests" });
                }
            }

            if (this.DtCustomerBirthdate != null) {
                // DtCustomerBirthdate (string) pattern
                Regex regexDtCustomerBirthdate = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtCustomerBirthdate.Match(this.DtCustomerBirthdate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtCustomerBirthdate, must match a pattern of " + regexDtCustomerBirthdate, new [] { "DtCustomerBirthdate" });
                }
            }

            if (this.DtCustomerTransfer != null) {
                // DtCustomerTransfer (string) pattern
                Regex regexDtCustomerTransfer = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtCustomerTransfer.Match(this.DtCustomerTransfer).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtCustomerTransfer, must match a pattern of " + regexDtCustomerTransfer, new [] { "DtCustomerTransfer" });
                }
            }

            if (this.DtCustomerTransferappointment != null) {
                // DtCustomerTransferappointment (string) pattern
                Regex regexDtCustomerTransferappointment = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtCustomerTransferappointment.Match(this.DtCustomerTransferappointment).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtCustomerTransferappointment, must match a pattern of " + regexDtCustomerTransferappointment, new [] { "DtCustomerTransferappointment" });
                }
            }

            if (this.DtCustomerTransfersurvey != null) {
                // DtCustomerTransfersurvey (string) pattern
                Regex regexDtCustomerTransfersurvey = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtCustomerTransfersurvey.Match(this.DtCustomerTransfersurvey).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtCustomerTransfersurvey, must match a pattern of " + regexDtCustomerTransfersurvey, new [] { "DtCustomerTransfersurvey" });
                }
            }

            if (this.TCustomerComment != null) {
                // TCustomerComment (string) pattern
                Regex regexTCustomerComment = new Regex(@"^.{0,16777215}$", RegexOptions.CultureInvariant);
                if (!regexTCustomerComment.Match(this.TCustomerComment).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TCustomerComment, must match a pattern of " + regexTCustomerComment, new [] { "TCustomerComment" });
                }
            }

            if (this.IMPORTID != null) {
                // IMPORTID (string) pattern
                Regex regexIMPORTID = new Regex(@"^.{0,15}$", RegexOptions.CultureInvariant);
                if (!regexIMPORTID.Match(this.IMPORTID).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IMPORTID, must match a pattern of " + regexIMPORTID, new [] { "IMPORTID" });
                }
            }

            yield break;
        }
    }

}
