/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Department AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "department-AutocompleteElement-Response")]
    public partial class DepartmentAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartmentAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="pkiDepartmentID">The unique ID of the Department (required).</param>
        /// <param name="bDepartmentIsactive">Whether the Department is active or not (required).</param>
        public DepartmentAutocompleteElementResponse(string sCompanyNameX = default(string), string sDepartmentNameX = default(string), int pkiDepartmentID = default(int), bool bDepartmentIsactive = default(bool))
        {
            // to ensure "sCompanyNameX" is required (not null)
            if (sCompanyNameX == null)
            {
                throw new ArgumentNullException("sCompanyNameX is a required property for DepartmentAutocompleteElementResponse and cannot be null");
            }
            this.SCompanyNameX = sCompanyNameX;
            // to ensure "sDepartmentNameX" is required (not null)
            if (sDepartmentNameX == null)
            {
                throw new ArgumentNullException("sDepartmentNameX is a required property for DepartmentAutocompleteElementResponse and cannot be null");
            }
            this.SDepartmentNameX = sDepartmentNameX;
            this.PkiDepartmentID = pkiDepartmentID;
            this.BDepartmentIsactive = bDepartmentIsactive;
        }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        /* <example>Acme inc.</example>*/
        [DataMember(Name = "sCompanyNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        /* <example>Head Office</example>*/
        [DataMember(Name = "sDepartmentNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        /* <example>21</example>*/
        [DataMember(Name = "pkiDepartmentID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiDepartmentID { get; set; }

        /// <summary>
        /// Whether the Department is active or not
        /// </summary>
        /// <value>Whether the Department is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDepartmentIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BDepartmentIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DepartmentAutocompleteElementResponse {\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  PkiDepartmentID: ").Append(PkiDepartmentID).Append("\n");
            sb.Append("  BDepartmentIsactive: ").Append(BDepartmentIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiDepartmentID (int) minimum
            if (this.PkiDepartmentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiDepartmentID, must be a value greater than or equal to 0.", new [] { "PkiDepartmentID" });
            }

            yield break;
        }
    }

}
