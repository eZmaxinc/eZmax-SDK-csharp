/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Department AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class DepartmentAutocompleteElementResponse :  IEquatable<DepartmentAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartmentAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="pkiDepartmentID">The unique ID of the Department (required).</param>
        /// <param name="bDepartmentIsactive">Whether the Department is active or not (required).</param>
        public DepartmentAutocompleteElementResponse(string sCompanyNameX = default(string), string sDepartmentNameX = default(string), int pkiDepartmentID = default(int), bool bDepartmentIsactive = default(bool))
        {
            // to ensure "sCompanyNameX" is required (not null)
            if (sCompanyNameX == null)
            {
                throw new InvalidDataException("sCompanyNameX is a required property for DepartmentAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SCompanyNameX = sCompanyNameX;
            }

            // to ensure "sDepartmentNameX" is required (not null)
            if (sDepartmentNameX == null)
            {
                throw new InvalidDataException("sDepartmentNameX is a required property for DepartmentAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SDepartmentNameX = sDepartmentNameX;
            }

            // to ensure "pkiDepartmentID" is required (not null)
            if (pkiDepartmentID == null)
            {
                throw new InvalidDataException("pkiDepartmentID is a required property for DepartmentAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiDepartmentID = pkiDepartmentID;
            }

            // to ensure "bDepartmentIsactive" is required (not null)
            if (bDepartmentIsactive == null)
            {
                throw new InvalidDataException("bDepartmentIsactive is a required property for DepartmentAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BDepartmentIsactive = bDepartmentIsactive;
            }

        }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        [DataMember(Name="sCompanyNameX", EmitDefaultValue=true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        [DataMember(Name="sDepartmentNameX", EmitDefaultValue=true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        [DataMember(Name="pkiDepartmentID", EmitDefaultValue=true)]
        public int PkiDepartmentID { get; set; }

        /// <summary>
        /// Whether the Department is active or not
        /// </summary>
        /// <value>Whether the Department is active or not</value>
        [DataMember(Name="bDepartmentIsactive", EmitDefaultValue=true)]
        public bool BDepartmentIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartmentAutocompleteElementResponse {\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  PkiDepartmentID: ").Append(PkiDepartmentID).Append("\n");
            sb.Append("  BDepartmentIsactive: ").Append(BDepartmentIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepartmentAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if DepartmentAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DepartmentAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartmentAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SCompanyNameX == input.SCompanyNameX ||
                    (this.SCompanyNameX != null &&
                    this.SCompanyNameX.Equals(input.SCompanyNameX))
                ) && 
                (
                    this.SDepartmentNameX == input.SDepartmentNameX ||
                    (this.SDepartmentNameX != null &&
                    this.SDepartmentNameX.Equals(input.SDepartmentNameX))
                ) && 
                (
                    this.PkiDepartmentID == input.PkiDepartmentID ||
                    (this.PkiDepartmentID != null &&
                    this.PkiDepartmentID.Equals(input.PkiDepartmentID))
                ) && 
                (
                    this.BDepartmentIsactive == input.BDepartmentIsactive ||
                    (this.BDepartmentIsactive != null &&
                    this.BDepartmentIsactive.Equals(input.BDepartmentIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SCompanyNameX != null)
                    hashCode = hashCode * 59 + this.SCompanyNameX.GetHashCode();
                if (this.SDepartmentNameX != null)
                    hashCode = hashCode * 59 + this.SDepartmentNameX.GetHashCode();
                if (this.PkiDepartmentID != null)
                    hashCode = hashCode * 59 + this.PkiDepartmentID.GetHashCode();
                if (this.BDepartmentIsactive != null)
                    hashCode = hashCode * 59 + this.BDepartmentIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiDepartmentID (int) minimum
            if(this.PkiDepartmentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiDepartmentID, must be a value greater than or equal to 0.", new [] { "PkiDepartmentID" });
            }

            yield break;
        }
    }

}
