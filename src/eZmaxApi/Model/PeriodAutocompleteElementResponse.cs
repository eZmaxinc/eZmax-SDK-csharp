/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Period AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class PeriodAutocompleteElementResponse :  IEquatable<PeriodAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PeriodAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sPeriodYYYYMM">The YYYYMM of the Period (required).</param>
        /// <param name="pkiPeriodID">The unique ID of the Period (required).</param>
        /// <param name="bPeriodIsactive">Whether the Period is active or not (required).</param>
        public PeriodAutocompleteElementResponse(string sPeriodYYYYMM = default(string), int pkiPeriodID = default(int), bool bPeriodIsactive = default(bool))
        {
            // to ensure "sPeriodYYYYMM" is required (not null)
            if (sPeriodYYYYMM == null)
            {
                throw new InvalidDataException("sPeriodYYYYMM is a required property for PeriodAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SPeriodYYYYMM = sPeriodYYYYMM;
            }

            // to ensure "pkiPeriodID" is required (not null)
            if (pkiPeriodID == null)
            {
                throw new InvalidDataException("pkiPeriodID is a required property for PeriodAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiPeriodID = pkiPeriodID;
            }

            // to ensure "bPeriodIsactive" is required (not null)
            if (bPeriodIsactive == null)
            {
                throw new InvalidDataException("bPeriodIsactive is a required property for PeriodAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BPeriodIsactive = bPeriodIsactive;
            }

        }

        /// <summary>
        /// The YYYYMM of the Period
        /// </summary>
        /// <value>The YYYYMM of the Period</value>
        [DataMember(Name="sPeriodYYYYMM", EmitDefaultValue=true)]
        public string SPeriodYYYYMM { get; set; }

        /// <summary>
        /// The unique ID of the Period
        /// </summary>
        /// <value>The unique ID of the Period</value>
        [DataMember(Name="pkiPeriodID", EmitDefaultValue=true)]
        public int PkiPeriodID { get; set; }

        /// <summary>
        /// Whether the Period is active or not
        /// </summary>
        /// <value>Whether the Period is active or not</value>
        [DataMember(Name="bPeriodIsactive", EmitDefaultValue=true)]
        public bool BPeriodIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PeriodAutocompleteElementResponse {\n");
            sb.Append("  SPeriodYYYYMM: ").Append(SPeriodYYYYMM).Append("\n");
            sb.Append("  PkiPeriodID: ").Append(PkiPeriodID).Append("\n");
            sb.Append("  BPeriodIsactive: ").Append(BPeriodIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if PeriodAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SPeriodYYYYMM == input.SPeriodYYYYMM ||
                    (this.SPeriodYYYYMM != null &&
                    this.SPeriodYYYYMM.Equals(input.SPeriodYYYYMM))
                ) && 
                (
                    this.PkiPeriodID == input.PkiPeriodID ||
                    (this.PkiPeriodID != null &&
                    this.PkiPeriodID.Equals(input.PkiPeriodID))
                ) && 
                (
                    this.BPeriodIsactive == input.BPeriodIsactive ||
                    (this.BPeriodIsactive != null &&
                    this.BPeriodIsactive.Equals(input.BPeriodIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SPeriodYYYYMM != null)
                    hashCode = hashCode * 59 + this.SPeriodYYYYMM.GetHashCode();
                if (this.PkiPeriodID != null)
                    hashCode = hashCode * 59 + this.PkiPeriodID.GetHashCode();
                if (this.BPeriodIsactive != null)
                    hashCode = hashCode * 59 + this.BPeriodIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiPeriodID (int) minimum
            if(this.PkiPeriodID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPeriodID, must be a value greater than or equal to 0.", new [] { "PkiPeriodID" });
            }

            yield break;
        }
    }

}
