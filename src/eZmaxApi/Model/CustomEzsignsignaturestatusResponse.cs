/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignsignaturestatus Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "Custom-Ezsignsignaturestatus-Response")]
    public partial class CustomEzsignsignaturestatusResponse : IValidatableObject
    {
        /// <summary>
        /// Type of step
        /// </summary>
        /// <value>Type of step</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsignsignaturestatusSteptypeEnum
        {
            /// <summary>
            /// Enum Form for value: Form
            /// </summary>
            [EnumMember(Value = "Form")]
            Form = 1,

            /// <summary>
            /// Enum Signature for value: Signature
            /// </summary>
            [EnumMember(Value = "Signature")]
            Signature = 2
        }


        /// <summary>
        /// Type of step
        /// </summary>
        /// <value>Type of step</value>
        [DataMember(Name = "eEzsignsignaturestatusSteptype", IsRequired = true, EmitDefaultValue = true)]
        public EEzsignsignaturestatusSteptypeEnum EEzsignsignaturestatusSteptype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignaturestatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignsignaturestatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignaturestatusResponse" /> class.
        /// </summary>
        /// <param name="eEzsignsignaturestatusSteptype">Type of step (required).</param>
        /// <param name="iEzsignsignaturestatusStep">The step at which the Ezsignsigner will be invited to sign or fill the form fields (required).</param>
        /// <param name="iEzsignsignaturestatusTotal">The total number of signature or form fields the Ezsignsigner must process at the current step (required).</param>
        /// <param name="iEzsignsignaturestatusSigned">The number of signature or form fields the Ezsignsigner has already processed at the current step (required).</param>
        public CustomEzsignsignaturestatusResponse(EEzsignsignaturestatusSteptypeEnum eEzsignsignaturestatusSteptype = default(EEzsignsignaturestatusSteptypeEnum), int iEzsignsignaturestatusStep = default(int), int iEzsignsignaturestatusTotal = default(int), int iEzsignsignaturestatusSigned = default(int))
        {
            this.EEzsignsignaturestatusSteptype = eEzsignsignaturestatusSteptype;
            this.IEzsignsignaturestatusStep = iEzsignsignaturestatusStep;
            this.IEzsignsignaturestatusTotal = iEzsignsignaturestatusTotal;
            this.IEzsignsignaturestatusSigned = iEzsignsignaturestatusSigned;
        }

        /// <summary>
        /// The step at which the Ezsignsigner will be invited to sign or fill the form fields
        /// </summary>
        /// <value>The step at which the Ezsignsigner will be invited to sign or fill the form fields</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsignsignaturestatusStep", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignsignaturestatusStep { get; set; }

        /// <summary>
        /// The total number of signature or form fields the Ezsignsigner must process at the current step
        /// </summary>
        /// <value>The total number of signature or form fields the Ezsignsigner must process at the current step</value>
        /* <example>2</example>*/
        [DataMember(Name = "iEzsignsignaturestatusTotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignsignaturestatusTotal { get; set; }

        /// <summary>
        /// The number of signature or form fields the Ezsignsigner has already processed at the current step
        /// </summary>
        /// <value>The number of signature or form fields the Ezsignsigner has already processed at the current step</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsignsignaturestatusSigned", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignsignaturestatusSigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzsignsignaturestatusResponse {\n");
            sb.Append("  EEzsignsignaturestatusSteptype: ").Append(EEzsignsignaturestatusSteptype).Append("\n");
            sb.Append("  IEzsignsignaturestatusStep: ").Append(IEzsignsignaturestatusStep).Append("\n");
            sb.Append("  IEzsignsignaturestatusTotal: ").Append(IEzsignsignaturestatusTotal).Append("\n");
            sb.Append("  IEzsignsignaturestatusSigned: ").Append(IEzsignsignaturestatusSigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
