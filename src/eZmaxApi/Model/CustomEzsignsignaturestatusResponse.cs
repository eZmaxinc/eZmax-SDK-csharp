/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignsignaturestatus Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class CustomEzsignsignaturestatusResponse :  IEquatable<CustomEzsignsignaturestatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Type of step
        /// </summary>
        /// <value>Type of step</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsignsignaturestatusSteptypeEnum
        {
            /// <summary>
            /// Enum Form for value: Form
            /// </summary>
            [EnumMember(Value = "Form")]
            Form = 1,

            /// <summary>
            /// Enum Signature for value: Signature
            /// </summary>
            [EnumMember(Value = "Signature")]
            Signature = 2

        }

        /// <summary>
        /// Type of step
        /// </summary>
        /// <value>Type of step</value>
        [DataMember(Name="eEzsignsignaturestatusSteptype", EmitDefaultValue=true)]
        public EEzsignsignaturestatusSteptypeEnum EEzsignsignaturestatusSteptype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignaturestatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignsignaturestatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignaturestatusResponse" /> class.
        /// </summary>
        /// <param name="eEzsignsignaturestatusSteptype">Type of step (required).</param>
        /// <param name="iEzsignsignaturestatusStep">The step at which the Ezsignsigner will be invited to sign or fill the form fields (required).</param>
        /// <param name="iEzsignsignaturestatusTotal">The total number of signature or form fields the Ezsignsigner must process at the current step (required).</param>
        /// <param name="iEzsignsignaturestatusSigned">The number of signature or form fields the Ezsignsigner has already processed at the current step (required).</param>
        public CustomEzsignsignaturestatusResponse(EEzsignsignaturestatusSteptypeEnum eEzsignsignaturestatusSteptype = default(EEzsignsignaturestatusSteptypeEnum), int iEzsignsignaturestatusStep = default(int), int iEzsignsignaturestatusTotal = default(int), int iEzsignsignaturestatusSigned = default(int))
        {
            // to ensure "eEzsignsignaturestatusSteptype" is required (not null)
            if (eEzsignsignaturestatusSteptype == null)
            {
                throw new InvalidDataException("eEzsignsignaturestatusSteptype is a required property for CustomEzsignsignaturestatusResponse and cannot be null");
            }
            else
            {
                this.EEzsignsignaturestatusSteptype = eEzsignsignaturestatusSteptype;
            }

            // to ensure "iEzsignsignaturestatusStep" is required (not null)
            if (iEzsignsignaturestatusStep == null)
            {
                throw new InvalidDataException("iEzsignsignaturestatusStep is a required property for CustomEzsignsignaturestatusResponse and cannot be null");
            }
            else
            {
                this.IEzsignsignaturestatusStep = iEzsignsignaturestatusStep;
            }

            // to ensure "iEzsignsignaturestatusTotal" is required (not null)
            if (iEzsignsignaturestatusTotal == null)
            {
                throw new InvalidDataException("iEzsignsignaturestatusTotal is a required property for CustomEzsignsignaturestatusResponse and cannot be null");
            }
            else
            {
                this.IEzsignsignaturestatusTotal = iEzsignsignaturestatusTotal;
            }

            // to ensure "iEzsignsignaturestatusSigned" is required (not null)
            if (iEzsignsignaturestatusSigned == null)
            {
                throw new InvalidDataException("iEzsignsignaturestatusSigned is a required property for CustomEzsignsignaturestatusResponse and cannot be null");
            }
            else
            {
                this.IEzsignsignaturestatusSigned = iEzsignsignaturestatusSigned;
            }

        }


        /// <summary>
        /// The step at which the Ezsignsigner will be invited to sign or fill the form fields
        /// </summary>
        /// <value>The step at which the Ezsignsigner will be invited to sign or fill the form fields</value>
        [DataMember(Name="iEzsignsignaturestatusStep", EmitDefaultValue=true)]
        public int IEzsignsignaturestatusStep { get; set; }

        /// <summary>
        /// The total number of signature or form fields the Ezsignsigner must process at the current step
        /// </summary>
        /// <value>The total number of signature or form fields the Ezsignsigner must process at the current step</value>
        [DataMember(Name="iEzsignsignaturestatusTotal", EmitDefaultValue=true)]
        public int IEzsignsignaturestatusTotal { get; set; }

        /// <summary>
        /// The number of signature or form fields the Ezsignsigner has already processed at the current step
        /// </summary>
        /// <value>The number of signature or form fields the Ezsignsigner has already processed at the current step</value>
        [DataMember(Name="iEzsignsignaturestatusSigned", EmitDefaultValue=true)]
        public int IEzsignsignaturestatusSigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomEzsignsignaturestatusResponse {\n");
            sb.Append("  EEzsignsignaturestatusSteptype: ").Append(EEzsignsignaturestatusSteptype).Append("\n");
            sb.Append("  IEzsignsignaturestatusStep: ").Append(IEzsignsignaturestatusStep).Append("\n");
            sb.Append("  IEzsignsignaturestatusTotal: ").Append(IEzsignsignaturestatusTotal).Append("\n");
            sb.Append("  IEzsignsignaturestatusSigned: ").Append(IEzsignsignaturestatusSigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignsignaturestatusResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignsignaturestatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignsignaturestatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignsignaturestatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EEzsignsignaturestatusSteptype == input.EEzsignsignaturestatusSteptype ||
                    (this.EEzsignsignaturestatusSteptype != null &&
                    this.EEzsignsignaturestatusSteptype.Equals(input.EEzsignsignaturestatusSteptype))
                ) && 
                (
                    this.IEzsignsignaturestatusStep == input.IEzsignsignaturestatusStep ||
                    (this.IEzsignsignaturestatusStep != null &&
                    this.IEzsignsignaturestatusStep.Equals(input.IEzsignsignaturestatusStep))
                ) && 
                (
                    this.IEzsignsignaturestatusTotal == input.IEzsignsignaturestatusTotal ||
                    (this.IEzsignsignaturestatusTotal != null &&
                    this.IEzsignsignaturestatusTotal.Equals(input.IEzsignsignaturestatusTotal))
                ) && 
                (
                    this.IEzsignsignaturestatusSigned == input.IEzsignsignaturestatusSigned ||
                    (this.IEzsignsignaturestatusSigned != null &&
                    this.IEzsignsignaturestatusSigned.Equals(input.IEzsignsignaturestatusSigned))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EEzsignsignaturestatusSteptype != null)
                    hashCode = hashCode * 59 + this.EEzsignsignaturestatusSteptype.GetHashCode();
                if (this.IEzsignsignaturestatusStep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignaturestatusStep.GetHashCode();
                if (this.IEzsignsignaturestatusTotal != null)
                    hashCode = hashCode * 59 + this.IEzsignsignaturestatusTotal.GetHashCode();
                if (this.IEzsignsignaturestatusSigned != null)
                    hashCode = hashCode * 59 + this.IEzsignsignaturestatusSigned.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
