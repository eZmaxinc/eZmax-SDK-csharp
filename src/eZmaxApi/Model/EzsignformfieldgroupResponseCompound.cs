/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignformfieldgroup Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignformfieldgroup-ResponseCompound")]
    public partial class EzsignformfieldgroupResponseCompound : IEquatable<EzsignformfieldgroupResponseCompound>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignformfieldgroupType
        /// </summary>
        [DataMember(Name = "eEzsignformfieldgroupType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignformfieldgroupType EEzsignformfieldgroupType { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignformfieldgroupSignerrequirement
        /// </summary>
        [DataMember(Name = "eEzsignformfieldgroupSignerrequirement", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignformfieldgroupSignerrequirement EEzsignformfieldgroupSignerrequirement { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignformfieldgroupTextvalidation
        /// </summary>
        [DataMember(Name = "eEzsignformfieldgroupTextvalidation", EmitDefaultValue = false)]
        public EnumTextvalidation? EEzsignformfieldgroupTextvalidation { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignformfieldgroupTooltipposition
        /// </summary>
        [DataMember(Name = "eEzsignformfieldgroupTooltipposition", EmitDefaultValue = false)]
        public FieldEEzsignformfieldgroupTooltipposition? EEzsignformfieldgroupTooltipposition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignformfieldgroupResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignformfieldgroupResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignformfieldgroupResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignformfieldgroupID">The unique ID of the Ezsignformfieldgroup (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="eEzsignformfieldgroupType">eEzsignformfieldgroupType (required).</param>
        /// <param name="eEzsignformfieldgroupSignerrequirement">eEzsignformfieldgroupSignerrequirement (required).</param>
        /// <param name="sEzsignformfieldgroupLabel">The Label for the Ezsignformfieldgroup (required).</param>
        /// <param name="iEzsignformfieldgroupStep">The step when the Ezsignsigner will be invited to fill the form fields (required).</param>
        /// <param name="sEzsignformfieldgroupDefaultvalue">The default value for the Ezsignformfieldgroup.</param>
        /// <param name="iEzsignformfieldgroupFilledmin">The minimum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup (required).</param>
        /// <param name="iEzsignformfieldgroupFilledmax">The maximum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup (required).</param>
        /// <param name="bEzsignformfieldgroupReadonly">Whether the Ezsignformfieldgroup is read only or not. (required).</param>
        /// <param name="iEzsignformfieldgroupMaxlength">The maximum length for the value in the Ezsignformfieldgroup  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="bEzsignformfieldgroupEncrypted">Whether the Ezsignformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="eEzsignformfieldgroupTextvalidation">eEzsignformfieldgroupTextvalidation.</param>
        /// <param name="sEzsignformfieldgroupRegexp">A regular expression to indicate what values are acceptable for the Ezsignformfieldgroup.  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="tEzsignformfieldgroupTooltip">A tooltip that will be presented to Ezsignsigner about the Ezsignformfieldgroup.</param>
        /// <param name="eEzsignformfieldgroupTooltipposition">eEzsignformfieldgroupTooltipposition.</param>
        /// <param name="aObjEzsignformfield">aObjEzsignformfield (required).</param>
        /// <param name="aObjDropdownElement">aObjDropdownElement.</param>
        /// <param name="aObjEzsignformfieldgroupsigner">aObjEzsignformfieldgroupsigner (required).</param>
        public EzsignformfieldgroupResponseCompound(int pkiEzsignformfieldgroupID = default(int), int fkiEzsigndocumentID = default(int), FieldEEzsignformfieldgroupType eEzsignformfieldgroupType = default(FieldEEzsignformfieldgroupType), FieldEEzsignformfieldgroupSignerrequirement eEzsignformfieldgroupSignerrequirement = default(FieldEEzsignformfieldgroupSignerrequirement), string sEzsignformfieldgroupLabel = default(string), int iEzsignformfieldgroupStep = default(int), string sEzsignformfieldgroupDefaultvalue = default(string), int iEzsignformfieldgroupFilledmin = default(int), int iEzsignformfieldgroupFilledmax = default(int), bool bEzsignformfieldgroupReadonly = default(bool), int iEzsignformfieldgroupMaxlength = default(int), bool bEzsignformfieldgroupEncrypted = default(bool), EnumTextvalidation? eEzsignformfieldgroupTextvalidation = default(EnumTextvalidation?), string sEzsignformfieldgroupRegexp = default(string), string tEzsignformfieldgroupTooltip = default(string), FieldEEzsignformfieldgroupTooltipposition? eEzsignformfieldgroupTooltipposition = default(FieldEEzsignformfieldgroupTooltipposition?), List<EzsignformfieldResponseCompound> aObjEzsignformfield = default(List<EzsignformfieldResponseCompound>), List<CustomDropdownElementResponseCompound> aObjDropdownElement = default(List<CustomDropdownElementResponseCompound>), List<EzsignformfieldgroupsignerResponseCompound> aObjEzsignformfieldgroupsigner = default(List<EzsignformfieldgroupsignerResponseCompound>))
        {
            this.PkiEzsignformfieldgroupID = pkiEzsignformfieldgroupID;
            this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            this.EEzsignformfieldgroupType = eEzsignformfieldgroupType;
            this.EEzsignformfieldgroupSignerrequirement = eEzsignformfieldgroupSignerrequirement;
            // to ensure "sEzsignformfieldgroupLabel" is required (not null)
            if (sEzsignformfieldgroupLabel == null)
            {
                throw new ArgumentNullException("sEzsignformfieldgroupLabel is a required property for EzsignformfieldgroupResponseCompound and cannot be null");
            }
            this.SEzsignformfieldgroupLabel = sEzsignformfieldgroupLabel;
            this.IEzsignformfieldgroupStep = iEzsignformfieldgroupStep;
            this.IEzsignformfieldgroupFilledmin = iEzsignformfieldgroupFilledmin;
            this.IEzsignformfieldgroupFilledmax = iEzsignformfieldgroupFilledmax;
            this.BEzsignformfieldgroupReadonly = bEzsignformfieldgroupReadonly;
            // to ensure "aObjEzsignformfield" is required (not null)
            if (aObjEzsignformfield == null)
            {
                throw new ArgumentNullException("aObjEzsignformfield is a required property for EzsignformfieldgroupResponseCompound and cannot be null");
            }
            this.AObjEzsignformfield = aObjEzsignformfield;
            // to ensure "aObjEzsignformfieldgroupsigner" is required (not null)
            if (aObjEzsignformfieldgroupsigner == null)
            {
                throw new ArgumentNullException("aObjEzsignformfieldgroupsigner is a required property for EzsignformfieldgroupResponseCompound and cannot be null");
            }
            this.AObjEzsignformfieldgroupsigner = aObjEzsignformfieldgroupsigner;
            this.SEzsignformfieldgroupDefaultvalue = sEzsignformfieldgroupDefaultvalue;
            this.IEzsignformfieldgroupMaxlength = iEzsignformfieldgroupMaxlength;
            this.BEzsignformfieldgroupEncrypted = bEzsignformfieldgroupEncrypted;
            this.EEzsignformfieldgroupTextvalidation = eEzsignformfieldgroupTextvalidation;
            this.SEzsignformfieldgroupRegexp = sEzsignformfieldgroupRegexp;
            this.TEzsignformfieldgroupTooltip = tEzsignformfieldgroupTooltip;
            this.EEzsignformfieldgroupTooltipposition = eEzsignformfieldgroupTooltipposition;
            this.AObjDropdownElement = aObjDropdownElement;
        }

        /// <summary>
        /// The unique ID of the Ezsignformfieldgroup
        /// </summary>
        /// <value>The unique ID of the Ezsignformfieldgroup</value>
		/* <example>26</example>*/
        [DataMember(Name = "pkiEzsignformfieldgroupID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignformfieldgroupID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
		/* <example>97</example>*/
        [DataMember(Name = "fkiEzsigndocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The Label for the Ezsignformfieldgroup
        /// </summary>
        /// <value>The Label for the Ezsignformfieldgroup</value>
		/* <example>Allergies</example>*/
        [DataMember(Name = "sEzsignformfieldgroupLabel", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignformfieldgroupLabel { get; set; }

        /// <summary>
        /// The step when the Ezsignsigner will be invited to fill the form fields
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to fill the form fields</value>
		/* <example>1</example>*/
        [DataMember(Name = "iEzsignformfieldgroupStep", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldgroupStep { get; set; }

        /// <summary>
        /// The default value for the Ezsignformfieldgroup
        /// </summary>
        /// <value>The default value for the Ezsignformfieldgroup</value>
		/* <example>Foo</example>*/
        [DataMember(Name = "sEzsignformfieldgroupDefaultvalue", EmitDefaultValue = false)]
        public string SEzsignformfieldgroupDefaultvalue { get; set; }

        /// <summary>
        /// The minimum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup
        /// </summary>
        /// <value>The minimum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup</value>
		/* <example>1</example>*/
        [DataMember(Name = "iEzsignformfieldgroupFilledmin", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldgroupFilledmin { get; set; }

        /// <summary>
        /// The maximum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup
        /// </summary>
        /// <value>The maximum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup</value>
		/* <example>2</example>*/
        [DataMember(Name = "iEzsignformfieldgroupFilledmax", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldgroupFilledmax { get; set; }

        /// <summary>
        /// Whether the Ezsignformfieldgroup is read only or not.
        /// </summary>
        /// <value>Whether the Ezsignformfieldgroup is read only or not.</value>
        [DataMember(Name = "bEzsignformfieldgroupReadonly", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignformfieldgroupReadonly { get; set; }

        /// <summary>
        /// The maximum length for the value in the Ezsignformfieldgroup  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>The maximum length for the value in the Ezsignformfieldgroup  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**</value>
		/* <example>75</example>*/
        [DataMember(Name = "iEzsignformfieldgroupMaxlength", EmitDefaultValue = false)]
        public int IEzsignformfieldgroupMaxlength { get; set; }

        /// <summary>
        /// Whether the Ezsignformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>Whether the Ezsignformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**</value>
        [DataMember(Name = "bEzsignformfieldgroupEncrypted", EmitDefaultValue = true)]
        public bool BEzsignformfieldgroupEncrypted { get; set; }

        /// <summary>
        /// A regular expression to indicate what values are acceptable for the Ezsignformfieldgroup.  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>A regular expression to indicate what values are acceptable for the Ezsignformfieldgroup.  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**</value>
		/* <example>/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/</example>*/
        [DataMember(Name = "sEzsignformfieldgroupRegexp", EmitDefaultValue = false)]
        public string SEzsignformfieldgroupRegexp { get; set; }

        /// <summary>
        /// A tooltip that will be presented to Ezsignsigner about the Ezsignformfieldgroup
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsignsigner about the Ezsignformfieldgroup</value>
		/* <example>Please enter a valid email address</example>*/
        [DataMember(Name = "tEzsignformfieldgroupTooltip", EmitDefaultValue = false)]
        public string TEzsignformfieldgroupTooltip { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignformfield
        /// </summary>
        [DataMember(Name = "a_objEzsignformfield", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsignformfieldResponseCompound> AObjEzsignformfield { get; set; }

        /// <summary>
        /// Gets or Sets AObjDropdownElement
        /// </summary>
        [DataMember(Name = "a_objDropdownElement", EmitDefaultValue = false)]
        public List<CustomDropdownElementResponseCompound> AObjDropdownElement { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignformfieldgroupsigner
        /// </summary>
        [DataMember(Name = "a_objEzsignformfieldgroupsigner", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsignformfieldgroupsignerResponseCompound> AObjEzsignformfieldgroupsigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignformfieldgroupResponseCompound {\n");
            sb.Append("  PkiEzsignformfieldgroupID: ").Append(PkiEzsignformfieldgroupID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  EEzsignformfieldgroupType: ").Append(EEzsignformfieldgroupType).Append("\n");
            sb.Append("  EEzsignformfieldgroupSignerrequirement: ").Append(EEzsignformfieldgroupSignerrequirement).Append("\n");
            sb.Append("  SEzsignformfieldgroupLabel: ").Append(SEzsignformfieldgroupLabel).Append("\n");
            sb.Append("  IEzsignformfieldgroupStep: ").Append(IEzsignformfieldgroupStep).Append("\n");
            sb.Append("  SEzsignformfieldgroupDefaultvalue: ").Append(SEzsignformfieldgroupDefaultvalue).Append("\n");
            sb.Append("  IEzsignformfieldgroupFilledmin: ").Append(IEzsignformfieldgroupFilledmin).Append("\n");
            sb.Append("  IEzsignformfieldgroupFilledmax: ").Append(IEzsignformfieldgroupFilledmax).Append("\n");
            sb.Append("  BEzsignformfieldgroupReadonly: ").Append(BEzsignformfieldgroupReadonly).Append("\n");
            sb.Append("  IEzsignformfieldgroupMaxlength: ").Append(IEzsignformfieldgroupMaxlength).Append("\n");
            sb.Append("  BEzsignformfieldgroupEncrypted: ").Append(BEzsignformfieldgroupEncrypted).Append("\n");
            sb.Append("  EEzsignformfieldgroupTextvalidation: ").Append(EEzsignformfieldgroupTextvalidation).Append("\n");
            sb.Append("  SEzsignformfieldgroupRegexp: ").Append(SEzsignformfieldgroupRegexp).Append("\n");
            sb.Append("  TEzsignformfieldgroupTooltip: ").Append(TEzsignformfieldgroupTooltip).Append("\n");
            sb.Append("  EEzsignformfieldgroupTooltipposition: ").Append(EEzsignformfieldgroupTooltipposition).Append("\n");
            sb.Append("  AObjEzsignformfield: ").Append(AObjEzsignformfield).Append("\n");
            sb.Append("  AObjDropdownElement: ").Append(AObjDropdownElement).Append("\n");
            sb.Append("  AObjEzsignformfieldgroupsigner: ").Append(AObjEzsignformfieldgroupsigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignformfieldgroupResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsignformfieldgroupResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignformfieldgroupResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignformfieldgroupResponseCompound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsignformfieldgroupID == input.PkiEzsignformfieldgroupID ||
                    this.PkiEzsignformfieldgroupID.Equals(input.PkiEzsignformfieldgroupID)
                ) && 
                (
                    this.FkiEzsigndocumentID == input.FkiEzsigndocumentID ||
                    this.FkiEzsigndocumentID.Equals(input.FkiEzsigndocumentID)
                ) && 
                (
                    this.EEzsignformfieldgroupType == input.EEzsignformfieldgroupType ||
                    this.EEzsignformfieldgroupType.Equals(input.EEzsignformfieldgroupType)
                ) && 
                (
                    this.EEzsignformfieldgroupSignerrequirement == input.EEzsignformfieldgroupSignerrequirement ||
                    this.EEzsignformfieldgroupSignerrequirement.Equals(input.EEzsignformfieldgroupSignerrequirement)
                ) && 
                (
                    this.SEzsignformfieldgroupLabel == input.SEzsignformfieldgroupLabel ||
                    (this.SEzsignformfieldgroupLabel != null &&
                    this.SEzsignformfieldgroupLabel.Equals(input.SEzsignformfieldgroupLabel))
                ) && 
                (
                    this.IEzsignformfieldgroupStep == input.IEzsignformfieldgroupStep ||
                    this.IEzsignformfieldgroupStep.Equals(input.IEzsignformfieldgroupStep)
                ) && 
                (
                    this.SEzsignformfieldgroupDefaultvalue == input.SEzsignformfieldgroupDefaultvalue ||
                    (this.SEzsignformfieldgroupDefaultvalue != null &&
                    this.SEzsignformfieldgroupDefaultvalue.Equals(input.SEzsignformfieldgroupDefaultvalue))
                ) && 
                (
                    this.IEzsignformfieldgroupFilledmin == input.IEzsignformfieldgroupFilledmin ||
                    this.IEzsignformfieldgroupFilledmin.Equals(input.IEzsignformfieldgroupFilledmin)
                ) && 
                (
                    this.IEzsignformfieldgroupFilledmax == input.IEzsignformfieldgroupFilledmax ||
                    this.IEzsignformfieldgroupFilledmax.Equals(input.IEzsignformfieldgroupFilledmax)
                ) && 
                (
                    this.BEzsignformfieldgroupReadonly == input.BEzsignformfieldgroupReadonly ||
                    this.BEzsignformfieldgroupReadonly.Equals(input.BEzsignformfieldgroupReadonly)
                ) && 
                (
                    this.IEzsignformfieldgroupMaxlength == input.IEzsignformfieldgroupMaxlength ||
                    this.IEzsignformfieldgroupMaxlength.Equals(input.IEzsignformfieldgroupMaxlength)
                ) && 
                (
                    this.BEzsignformfieldgroupEncrypted == input.BEzsignformfieldgroupEncrypted ||
                    this.BEzsignformfieldgroupEncrypted.Equals(input.BEzsignformfieldgroupEncrypted)
                ) && 
                (
                    this.EEzsignformfieldgroupTextvalidation == input.EEzsignformfieldgroupTextvalidation ||
                    this.EEzsignformfieldgroupTextvalidation.Equals(input.EEzsignformfieldgroupTextvalidation)
                ) && 
                (
                    this.SEzsignformfieldgroupRegexp == input.SEzsignformfieldgroupRegexp ||
                    (this.SEzsignformfieldgroupRegexp != null &&
                    this.SEzsignformfieldgroupRegexp.Equals(input.SEzsignformfieldgroupRegexp))
                ) && 
                (
                    this.TEzsignformfieldgroupTooltip == input.TEzsignformfieldgroupTooltip ||
                    (this.TEzsignformfieldgroupTooltip != null &&
                    this.TEzsignformfieldgroupTooltip.Equals(input.TEzsignformfieldgroupTooltip))
                ) && 
                (
                    this.EEzsignformfieldgroupTooltipposition == input.EEzsignformfieldgroupTooltipposition ||
                    this.EEzsignformfieldgroupTooltipposition.Equals(input.EEzsignformfieldgroupTooltipposition)
                ) && 
                (
                    this.AObjEzsignformfield == input.AObjEzsignformfield ||
                    this.AObjEzsignformfield != null &&
                    input.AObjEzsignformfield != null &&
                    this.AObjEzsignformfield.SequenceEqual(input.AObjEzsignformfield)
                ) && 
                (
                    this.AObjDropdownElement == input.AObjDropdownElement ||
                    this.AObjDropdownElement != null &&
                    input.AObjDropdownElement != null &&
                    this.AObjDropdownElement.SequenceEqual(input.AObjDropdownElement)
                ) && 
                (
                    this.AObjEzsignformfieldgroupsigner == input.AObjEzsignformfieldgroupsigner ||
                    this.AObjEzsignformfieldgroupsigner != null &&
                    input.AObjEzsignformfieldgroupsigner != null &&
                    this.AObjEzsignformfieldgroupsigner.SequenceEqual(input.AObjEzsignformfieldgroupsigner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsignformfieldgroupID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigndocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsignformfieldgroupType.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsignformfieldgroupSignerrequirement.GetHashCode();
                if (this.SEzsignformfieldgroupLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldgroupLabel.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IEzsignformfieldgroupStep.GetHashCode();
                if (this.SEzsignformfieldgroupDefaultvalue != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldgroupDefaultvalue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IEzsignformfieldgroupFilledmin.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignformfieldgroupFilledmax.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignformfieldgroupReadonly.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignformfieldgroupMaxlength.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignformfieldgroupEncrypted.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsignformfieldgroupTextvalidation.GetHashCode();
                if (this.SEzsignformfieldgroupRegexp != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldgroupRegexp.GetHashCode();
                }
                if (this.TEzsignformfieldgroupTooltip != null)
                {
                    hashCode = (hashCode * 59) + this.TEzsignformfieldgroupTooltip.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsignformfieldgroupTooltipposition.GetHashCode();
                if (this.AObjEzsignformfield != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignformfield.GetHashCode();
                }
                if (this.AObjDropdownElement != null)
                {
                    hashCode = (hashCode * 59) + this.AObjDropdownElement.GetHashCode();
                }
                if (this.AObjEzsignformfieldgroupsigner != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignformfieldgroupsigner.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignformfieldgroupID (int) minimum
            if (this.PkiEzsignformfieldgroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignformfieldgroupID, must be a value greater than or equal to 0.", new [] { "PkiEzsignformfieldgroupID" });
            }

            // FkiEzsigndocumentID (int) minimum
            if (this.FkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigndocumentID" });
            }

            // SEzsignformfieldgroupLabel (string) maxLength
            if (this.SEzsignformfieldgroupLabel != null && this.SEzsignformfieldgroupLabel.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignformfieldgroupLabel, length must be less than 50.", new [] { "SEzsignformfieldgroupLabel" });
            }

            // SEzsignformfieldgroupLabel (string) minLength
            if (this.SEzsignformfieldgroupLabel != null && this.SEzsignformfieldgroupLabel.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignformfieldgroupLabel, length must be greater than 1.", new [] { "SEzsignformfieldgroupLabel" });
            }

            // IEzsignformfieldgroupStep (int) minimum
            if (this.IEzsignformfieldgroupStep < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldgroupStep, must be a value greater than or equal to 1.", new [] { "IEzsignformfieldgroupStep" });
            }

            // IEzsignformfieldgroupFilledmin (int) minimum
            if (this.IEzsignformfieldgroupFilledmin < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldgroupFilledmin, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldgroupFilledmin" });
            }

            // IEzsignformfieldgroupFilledmax (int) minimum
            if (this.IEzsignformfieldgroupFilledmax < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldgroupFilledmax, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldgroupFilledmax" });
            }

            // IEzsignformfieldgroupMaxlength (int) maximum
            if (this.IEzsignformfieldgroupMaxlength > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldgroupMaxlength, must be a value less than or equal to 65535.", new [] { "IEzsignformfieldgroupMaxlength" });
            }

            // IEzsignformfieldgroupMaxlength (int) minimum
            if (this.IEzsignformfieldgroupMaxlength < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldgroupMaxlength, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldgroupMaxlength" });
            }

            if (this.SEzsignformfieldgroupRegexp != null) {
                // SEzsignformfieldgroupRegexp (string) pattern
                Regex regexSEzsignformfieldgroupRegexp = new Regex(@"^\^.*\$$|^$", RegexOptions.CultureInvariant);
                if (!regexSEzsignformfieldgroupRegexp.Match(this.SEzsignformfieldgroupRegexp).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignformfieldgroupRegexp, must match a pattern of " + regexSEzsignformfieldgroupRegexp, new [] { "SEzsignformfieldgroupRegexp" });
                }
            }

            yield break;
        }
    }

}
