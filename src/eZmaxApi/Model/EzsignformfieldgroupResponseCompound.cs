/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignformfieldgroup Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignformfieldgroup-ResponseCompound")]
    public partial class EzsignformfieldgroupResponseCompound : EzsignformfieldgroupResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignformfieldgroupResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignformfieldgroupResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignformfieldgroupResponseCompound" /> class.
        /// </summary>
        /// <param name="aObjEzsignformfield">aObjEzsignformfield (required).</param>
        /// <param name="aObjDropdownElement">aObjDropdownElement.</param>
        /// <param name="aObjEzsignformfieldgroupsigner">aObjEzsignformfieldgroupsigner (required).</param>
        /// <param name="pkiEzsignformfieldgroupID">The unique ID of the Ezsignformfieldgroup (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="eEzsignformfieldgroupType">eEzsignformfieldgroupType (required).</param>
        /// <param name="eEzsignformfieldgroupSignerrequirement">eEzsignformfieldgroupSignerrequirement.</param>
        /// <param name="sEzsignformfieldgroupLabel">The Label for the Ezsignformfieldgroup (required).</param>
        /// <param name="iEzsignformfieldgroupStep">The step when the Ezsignsigner will be invited to fill the form fields (required).</param>
        /// <param name="sEzsignformfieldgroupDefaultvalue">The default value for the Ezsignformfieldgroup  You can use the codes below and they will be replaced at signature time.    | Code | Description | Example | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | - -- -- -- -- -- - | | {sUserFirstname} | The first name of the contact | John | | {sUserLastname} | The last name of the contact | Doe | | {sUserJobtitle} | The job title | Sales Representative | | {sCompany} | Company name | eZmax Solutions Inc. | | {sEmailAddress} | The email address | email@example.com | | {sPhoneE164} | A phone number in E.164 Format | +15149901516 | | {sPhoneE164Cell} | A phone number in E.164 Format | +15149901516 |.</param>
        /// <param name="iEzsignformfieldgroupFilledmin">The minimum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup (required).</param>
        /// <param name="iEzsignformfieldgroupFilledmax">The maximum number of Ezsignformfield that must be filled in the Ezsignformfieldgroup (required).</param>
        /// <param name="bEzsignformfieldgroupReadonly">Whether the Ezsignformfieldgroup is read only or not. (required).</param>
        /// <param name="iEzsignformfieldgroupMaxlength">The maximum length for the value in the Ezsignformfieldgroup  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="bEzsignformfieldgroupEncrypted">Whether the Ezsignformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="eEzsignformfieldgroupTextvalidation">eEzsignformfieldgroupTextvalidation.</param>
        /// <param name="sEzsignformfieldgroupRegexp">A regular expression to indicate what values are acceptable for the Ezsignformfieldgroup.  This can only be set if eEzsignformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="sEzsignformfieldgroupTextvalidationcustommessage">Description of validation rule. Show by signatory..</param>
        /// <param name="tEzsignformfieldgroupTooltip">A tooltip that will be presented to Ezsignsigner about the Ezsignformfieldgroup.</param>
        /// <param name="eEzsignformfieldgroupTooltipposition">eEzsignformfieldgroupTooltipposition.</param>
        public EzsignformfieldgroupResponseCompound(List<EzsignformfieldResponseCompound> aObjEzsignformfield = default(List<EzsignformfieldResponseCompound>), List<CustomDropdownElementResponseCompound> aObjDropdownElement = default(List<CustomDropdownElementResponseCompound>), List<EzsignformfieldgroupsignerResponseCompound> aObjEzsignformfieldgroupsigner = default(List<EzsignformfieldgroupsignerResponseCompound>), int pkiEzsignformfieldgroupID = default(int), int fkiEzsigndocumentID = default(int), FieldEEzsignformfieldgroupType eEzsignformfieldgroupType = default(FieldEEzsignformfieldgroupType), FieldEEzsignformfieldgroupSignerrequirement? eEzsignformfieldgroupSignerrequirement = default(FieldEEzsignformfieldgroupSignerrequirement?), string sEzsignformfieldgroupLabel = default(string), int iEzsignformfieldgroupStep = default(int), string sEzsignformfieldgroupDefaultvalue = default(string), int iEzsignformfieldgroupFilledmin = default(int), int iEzsignformfieldgroupFilledmax = default(int), bool bEzsignformfieldgroupReadonly = default(bool), int iEzsignformfieldgroupMaxlength = default(int), bool bEzsignformfieldgroupEncrypted = default(bool), EnumTextvalidation? eEzsignformfieldgroupTextvalidation = default(EnumTextvalidation?), string sEzsignformfieldgroupRegexp = default(string), string sEzsignformfieldgroupTextvalidationcustommessage = default(string), string tEzsignformfieldgroupTooltip = default(string), FieldEEzsignformfieldgroupTooltipposition? eEzsignformfieldgroupTooltipposition = default(FieldEEzsignformfieldgroupTooltipposition?)) : base()
        {
            // to ensure "aObjEzsignformfield" is required (not null)
            if (aObjEzsignformfield == null)
            {
                throw new ArgumentNullException("aObjEzsignformfield is a required property for EzsignformfieldgroupResponseCompound and cannot be null");
            }
            this.AObjEzsignformfield = aObjEzsignformfield;
            // to ensure "aObjEzsignformfieldgroupsigner" is required (not null)
            if (aObjEzsignformfieldgroupsigner == null)
            {
                throw new ArgumentNullException("aObjEzsignformfieldgroupsigner is a required property for EzsignformfieldgroupResponseCompound and cannot be null");
            }
            this.AObjEzsignformfieldgroupsigner = aObjEzsignformfieldgroupsigner;
            this.AObjDropdownElement = aObjDropdownElement;
        }

        /// <summary>
        /// Gets or Sets AObjEzsignformfield
        /// </summary>
        [DataMember(Name = "a_objEzsignformfield", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsignformfieldResponseCompound> AObjEzsignformfield { get; set; }

        /// <summary>
        /// Gets or Sets AObjDropdownElement
        /// </summary>
        [DataMember(Name = "a_objDropdownElement", EmitDefaultValue = false)]
        public List<CustomDropdownElementResponseCompound> AObjDropdownElement { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignformfieldgroupsigner
        /// </summary>
        [DataMember(Name = "a_objEzsignformfieldgroupsigner", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsignformfieldgroupsignerResponseCompound> AObjEzsignformfieldgroupsigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignformfieldgroupResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AObjEzsignformfield: ").Append(AObjEzsignformfield).Append("\n");
            sb.Append("  AObjDropdownElement: ").Append(AObjDropdownElement).Append("\n");
            sb.Append("  AObjEzsignformfieldgroupsigner: ").Append(AObjEzsignformfieldgroupsigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
