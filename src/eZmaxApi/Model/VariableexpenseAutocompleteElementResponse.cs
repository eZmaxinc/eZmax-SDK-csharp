/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Variableexpense AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "variableexpense-AutocompleteElement-Response")]
    public partial class VariableexpenseAutocompleteElementResponse : IEquatable<VariableexpenseAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableexpenseAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VariableexpenseAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableexpenseAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sVariableexpenseDescriptionX">The description of the Variableexpense in the language of the requester (required).</param>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense (required).</param>
        /// <param name="bVariableexpenseIsactive">Whether the variableexpense is active or not (required).</param>
        public VariableexpenseAutocompleteElementResponse(string sVariableexpenseDescriptionX = default(string), int pkiVariableexpenseID = default(int), bool bVariableexpenseIsactive = default(bool))
        {
            // to ensure "sVariableexpenseDescriptionX" is required (not null)
            if (sVariableexpenseDescriptionX == null)
            {
                throw new ArgumentNullException("sVariableexpenseDescriptionX is a required property for VariableexpenseAutocompleteElementResponse and cannot be null");
            }
            this.SVariableexpenseDescriptionX = sVariableexpenseDescriptionX;
            this.PkiVariableexpenseID = pkiVariableexpenseID;
            this.BVariableexpenseIsactive = bVariableexpenseIsactive;
        }

        /// <summary>
        /// The description of the Variableexpense in the language of the requester
        /// </summary>
        /// <value>The description of the Variableexpense in the language of the requester</value>
        /// <example>Ã‰quipements de bureau</example>
        [DataMember(Name = "sVariableexpenseDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SVariableexpenseDescriptionX { get; set; }

        /// <summary>
        /// The unique ID of the Variableexpense
        /// </summary>
        /// <value>The unique ID of the Variableexpense</value>
        /// <example>2</example>
        [DataMember(Name = "pkiVariableexpenseID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiVariableexpenseID { get; set; }

        /// <summary>
        /// Whether the variableexpense is active or not
        /// </summary>
        /// <value>Whether the variableexpense is active or not</value>
        /// <example>true</example>
        [DataMember(Name = "bVariableexpenseIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BVariableexpenseIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VariableexpenseAutocompleteElementResponse {\n");
            sb.Append("  SVariableexpenseDescriptionX: ").Append(SVariableexpenseDescriptionX).Append("\n");
            sb.Append("  PkiVariableexpenseID: ").Append(PkiVariableexpenseID).Append("\n");
            sb.Append("  BVariableexpenseIsactive: ").Append(BVariableexpenseIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariableexpenseAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if VariableexpenseAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VariableexpenseAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableexpenseAutocompleteElementResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SVariableexpenseDescriptionX == input.SVariableexpenseDescriptionX ||
                    (this.SVariableexpenseDescriptionX != null &&
                    this.SVariableexpenseDescriptionX.Equals(input.SVariableexpenseDescriptionX))
                ) && 
                (
                    this.PkiVariableexpenseID == input.PkiVariableexpenseID ||
                    this.PkiVariableexpenseID.Equals(input.PkiVariableexpenseID)
                ) && 
                (
                    this.BVariableexpenseIsactive == input.BVariableexpenseIsactive ||
                    this.BVariableexpenseIsactive.Equals(input.BVariableexpenseIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SVariableexpenseDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SVariableexpenseDescriptionX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PkiVariableexpenseID.GetHashCode();
                hashCode = (hashCode * 59) + this.BVariableexpenseIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SVariableexpenseDescriptionX != null) {
                // SVariableexpenseDescriptionX (string) pattern
                Regex regexSVariableexpenseDescriptionX = new Regex(@"^.{0,40}$", RegexOptions.CultureInvariant);
                if (!regexSVariableexpenseDescriptionX.Match(this.SVariableexpenseDescriptionX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SVariableexpenseDescriptionX, must match a pattern of " + regexSVariableexpenseDescriptionX, new [] { "SVariableexpenseDescriptionX" });
                }
            }

            // PkiVariableexpenseID (int) maximum
            if (this.PkiVariableexpenseID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiVariableexpenseID, must be a value less than or equal to 255.", new [] { "PkiVariableexpenseID" });
            }

            // PkiVariableexpenseID (int) minimum
            if (this.PkiVariableexpenseID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiVariableexpenseID, must be a value greater than or equal to 1.", new [] { "PkiVariableexpenseID" });
            }

            yield break;
        }
    }

}
