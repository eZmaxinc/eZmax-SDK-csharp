/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignbulksend Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignbulksend-ResponseCompound")]
    public partial class EzsignbulksendResponseCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignbulksendResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendResponseCompound" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsignbulksend (required).</param>
        /// <param name="">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="">The Name of the Language in the language of the requester (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="">The description of the Ezsignbulksend (required).</param>
        /// <param name="">Note about the Ezsignbulksend (required).</param>
        /// <param name="">Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation (required).</param>
        /// <param name="">Whether the Ezsignbulksend is active or not (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        public EzsignbulksendResponseCompound(int  = default(int), int  = default(int), int  = default(int), string  = default(string), FieldEEzsignfoldertypePrivacylevel  = default(FieldEEzsignfoldertypePrivacylevel), string  = default(string), string  = default(string), string  = default(string), bool  = default(bool), bool  = default(bool), CommonAudit  = default(CommonAudit), List<EzsignbulksenddocumentmappingResponseCompound>  = default(List<EzsignbulksenddocumentmappingResponseCompound>), List<EzsignbulksendsignermappingResponse>  = default(List<EzsignbulksendsignermappingResponse>))
        {
            this.PkiEzsignbulksendID = ;
            this.FkiEzsignfoldertypeID = ;
            this.FkiLanguageID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.SLanguageNameX = ;
            this.EEzsignfoldertypePrivacylevel = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.SEzsignfoldertypeNameX = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.SEzsignbulksendDescription = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.TEzsignbulksendNote = ;
            this.BEzsignbulksendNeedvalidation = ;
            this.BEzsignbulksendIsactive = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.ObjAudit = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.AObjEzsignbulksenddocumentmapping = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignbulksendResponseCompound and cannot be null");
            }
            this.AObjEzsignbulksendsignermapping = ;
        }

        /// <summary>
        /// The unique ID of the Ezsignbulksend
        /// </summary>
        /// <value>The unique ID of the Ezsignbulksend</value>
        /* <example>8</example>*/
        [DataMember(Name = "pkiEzsignbulksendID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignbulksendID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        /* <example>English</example>*/
        [DataMember(Name = "sLanguageNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// The description of the Ezsignbulksend
        /// </summary>
        /// <value>The description of the Ezsignbulksend</value>
        /* <example>Test eZsign Bulk Send</example>*/
        [DataMember(Name = "sEzsignbulksendDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignbulksendDescription { get; set; }

        /// <summary>
        /// Note about the Ezsignbulksend
        /// </summary>
        /// <value>Note about the Ezsignbulksend</value>
        /* <example>This is a note</example>*/
        [DataMember(Name = "tEzsignbulksendNote", IsRequired = true, EmitDefaultValue = true)]
        public string TEzsignbulksendNote { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation</value>
        [DataMember(Name = "bEzsignbulksendNeedvalidation", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignbulksendNeedvalidation { get; set; }

        /// <summary>
        /// Whether the Ezsignbulksend is active or not
        /// </summary>
        /// <value>Whether the Ezsignbulksend is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignbulksendIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignbulksendIsactive { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", IsRequired = true, EmitDefaultValue = true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignbulksenddocumentmapping
        /// </summary>
        [DataMember(Name = "a_objEzsignbulksenddocumentmapping", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsignbulksenddocumentmappingResponseCompound> AObjEzsignbulksenddocumentmapping { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignbulksendsignermapping
        /// </summary>
        [DataMember(Name = "a_objEzsignbulksendsignermapping", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsignbulksendsignermappingResponse> AObjEzsignbulksendsignermapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignbulksendResponseCompound {\n");
            sb.Append("  PkiEzsignbulksendID: ").Append(PkiEzsignbulksendID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  SEzsignbulksendDescription: ").Append(SEzsignbulksendDescription).Append("\n");
            sb.Append("  TEzsignbulksendNote: ").Append(TEzsignbulksendNote).Append("\n");
            sb.Append("  BEzsignbulksendNeedvalidation: ").Append(BEzsignbulksendNeedvalidation).Append("\n");
            sb.Append("  BEzsignbulksendIsactive: ").Append(BEzsignbulksendIsactive).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  AObjEzsignbulksenddocumentmapping: ").Append(AObjEzsignbulksenddocumentmapping).Append("\n");
            sb.Append("  AObjEzsignbulksendsignermapping: ").Append(AObjEzsignbulksendsignermapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignbulksendID (int) minimum
            if (this.PkiEzsignbulksendID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignbulksendID, must be a value greater than or equal to 0.", new [] { "PkiEzsignbulksendID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            yield break;
        }
    }

}
