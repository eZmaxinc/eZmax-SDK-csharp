/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A User AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class UserAutocompleteElementResponse :  IEquatable<UserAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="eUserType">eUserType (required).</param>
        /// <param name="sUserName">The description of the User in the language of the requester (required).</param>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="bUserIsactive">Whether the User is active or not (required).</param>
        public UserAutocompleteElementResponse(FieldEUserType eUserType = default(FieldEUserType), string sUserName = default(string), int pkiUserID = default(int), bool bUserIsactive = default(bool))
        {
            // to ensure "eUserType" is required (not null)
            if (eUserType == null)
            {
                throw new InvalidDataException("eUserType is a required property for UserAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.EUserType = eUserType;
            }

            // to ensure "sUserName" is required (not null)
            if (sUserName == null)
            {
                throw new InvalidDataException("sUserName is a required property for UserAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SUserName = sUserName;
            }

            // to ensure "pkiUserID" is required (not null)
            if (pkiUserID == null)
            {
                throw new InvalidDataException("pkiUserID is a required property for UserAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiUserID = pkiUserID;
            }

            // to ensure "bUserIsactive" is required (not null)
            if (bUserIsactive == null)
            {
                throw new InvalidDataException("bUserIsactive is a required property for UserAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BUserIsactive = bUserIsactive;
            }

        }

        /// <summary>
        /// Gets or Sets EUserType
        /// </summary>
        [DataMember(Name="eUserType", EmitDefaultValue=true)]
        public FieldEUserType EUserType { get; set; }

        /// <summary>
        /// The description of the User in the language of the requester
        /// </summary>
        /// <value>The description of the User in the language of the requester</value>
        [DataMember(Name="sUserName", EmitDefaultValue=true)]
        public string SUserName { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="pkiUserID", EmitDefaultValue=true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// Whether the User is active or not
        /// </summary>
        /// <value>Whether the User is active or not</value>
        [DataMember(Name="bUserIsactive", EmitDefaultValue=true)]
        public bool BUserIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAutocompleteElementResponse {\n");
            sb.Append("  EUserType: ").Append(EUserType).Append("\n");
            sb.Append("  SUserName: ").Append(SUserName).Append("\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  BUserIsactive: ").Append(BUserIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if UserAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EUserType == input.EUserType ||
                    (this.EUserType != null &&
                    this.EUserType.Equals(input.EUserType))
                ) && 
                (
                    this.SUserName == input.SUserName ||
                    (this.SUserName != null &&
                    this.SUserName.Equals(input.SUserName))
                ) && 
                (
                    this.PkiUserID == input.PkiUserID ||
                    (this.PkiUserID != null &&
                    this.PkiUserID.Equals(input.PkiUserID))
                ) && 
                (
                    this.BUserIsactive == input.BUserIsactive ||
                    (this.BUserIsactive != null &&
                    this.BUserIsactive.Equals(input.BUserIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EUserType != null)
                    hashCode = hashCode * 59 + this.EUserType.GetHashCode();
                if (this.SUserName != null)
                    hashCode = hashCode * 59 + this.SUserName.GetHashCode();
                if (this.PkiUserID != null)
                    hashCode = hashCode * 59 + this.PkiUserID.GetHashCode();
                if (this.BUserIsactive != null)
                    hashCode = hashCode * 59 + this.BUserIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiUserID (int) minimum
            if(this.PkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserID, must be a value greater than or equal to 0.", new [] { "PkiUserID" });
            }

            yield break;
        }
    }

}
