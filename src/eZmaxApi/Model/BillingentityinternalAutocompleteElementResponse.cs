/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Billingentityinternal AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "billingentityinternal-AutocompleteElement-Response")]
    public partial class BillingentityinternalAutocompleteElementResponse : IEquatable<BillingentityinternalAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingentityinternalAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillingentityinternalAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingentityinternalAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiBillingentityinternalID">The unique ID of the Billingentityinternal. (required).</param>
        /// <param name="sBillingentityinternalDescriptionX">The description of the Billingentityinternal in the language of the requester (required).</param>
        /// <param name="bBillingentityinternalIsactive">Whether the Billingentityinternal is active or not (required).</param>
        public BillingentityinternalAutocompleteElementResponse(int pkiBillingentityinternalID = default(int), string sBillingentityinternalDescriptionX = default(string), bool bBillingentityinternalIsactive = default(bool))
        {
            this.PkiBillingentityinternalID = pkiBillingentityinternalID;
            // to ensure "sBillingentityinternalDescriptionX" is required (not null)
            if (sBillingentityinternalDescriptionX == null)
            {
                throw new ArgumentNullException("sBillingentityinternalDescriptionX is a required property for BillingentityinternalAutocompleteElementResponse and cannot be null");
            }
            this.SBillingentityinternalDescriptionX = sBillingentityinternalDescriptionX;
            this.BBillingentityinternalIsactive = bBillingentityinternalIsactive;
        }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
		/* <example>1</example>*/
        [DataMember(Name = "pkiBillingentityinternalID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in the language of the requester
        /// </summary>
        /// <value>The description of the Billingentityinternal in the language of the requester</value>
		/* <example>Default</example>*/
        [DataMember(Name = "sBillingentityinternalDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SBillingentityinternalDescriptionX { get; set; }

        /// <summary>
        /// Whether the Billingentityinternal is active or not
        /// </summary>
        /// <value>Whether the Billingentityinternal is active or not</value>
		/* <example>true</example>*/
        [DataMember(Name = "bBillingentityinternalIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BBillingentityinternalIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BillingentityinternalAutocompleteElementResponse {\n");
            sb.Append("  PkiBillingentityinternalID: ").Append(PkiBillingentityinternalID).Append("\n");
            sb.Append("  SBillingentityinternalDescriptionX: ").Append(SBillingentityinternalDescriptionX).Append("\n");
            sb.Append("  BBillingentityinternalIsactive: ").Append(BBillingentityinternalIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingentityinternalAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if BillingentityinternalAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingentityinternalAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingentityinternalAutocompleteElementResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiBillingentityinternalID == input.PkiBillingentityinternalID ||
                    this.PkiBillingentityinternalID.Equals(input.PkiBillingentityinternalID)
                ) && 
                (
                    this.SBillingentityinternalDescriptionX == input.SBillingentityinternalDescriptionX ||
                    (this.SBillingentityinternalDescriptionX != null &&
                    this.SBillingentityinternalDescriptionX.Equals(input.SBillingentityinternalDescriptionX))
                ) && 
                (
                    this.BBillingentityinternalIsactive == input.BBillingentityinternalIsactive ||
                    this.BBillingentityinternalIsactive.Equals(input.BBillingentityinternalIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiBillingentityinternalID.GetHashCode();
                if (this.SBillingentityinternalDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SBillingentityinternalDescriptionX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BBillingentityinternalIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiBillingentityinternalID (int) minimum
            if (this.PkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "PkiBillingentityinternalID" });
            }

            yield break;
        }
    }

}
