/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignfolder/disposeEzsignfolders
    /// </summary>
    [DataContract(Name = "ezsignfolder-disposeEzsignfolders-v1-Request")]
    public partial class EzsignfolderDisposeEzsignfoldersV1Request : IEquatable<EzsignfolderDisposeEzsignfoldersV1Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderDisposeEzsignfoldersV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfolderDisposeEzsignfoldersV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderDisposeEzsignfoldersV1Request" /> class.
        /// </summary>
        /// <param name="aPkiEzsignfolderID">aPkiEzsignfolderID (required).</param>
        public EzsignfolderDisposeEzsignfoldersV1Request(List<int> aPkiEzsignfolderID = default(List<int>))
        {
            // to ensure "aPkiEzsignfolderID" is required (not null)
            if (aPkiEzsignfolderID == null)
            {
                throw new ArgumentNullException("aPkiEzsignfolderID is a required property for EzsignfolderDisposeEzsignfoldersV1Request and cannot be null");
            }
            this.APkiEzsignfolderID = aPkiEzsignfolderID;
        }

        /// <summary>
        /// Gets or Sets APkiEzsignfolderID
        /// </summary>
        [DataMember(Name = "a_pkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public List<int> APkiEzsignfolderID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfolderDisposeEzsignfoldersV1Request {\n");
            sb.Append("  APkiEzsignfolderID: ").Append(APkiEzsignfolderID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfolderDisposeEzsignfoldersV1Request);
        }

        /// <summary>
        /// Returns true if EzsignfolderDisposeEzsignfoldersV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfolderDisposeEzsignfoldersV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfolderDisposeEzsignfoldersV1Request input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.APkiEzsignfolderID == input.APkiEzsignfolderID ||
                    this.APkiEzsignfolderID != null &&
                    input.APkiEzsignfolderID != null &&
                    this.APkiEzsignfolderID.SequenceEqual(input.APkiEzsignfolderID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.APkiEzsignfolderID != null)
                {
                    hashCode = (hashCode * 59) + this.APkiEzsignfolderID.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
