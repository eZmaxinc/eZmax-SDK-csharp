/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Usergroupmembership Object
    /// </summary>
    [DataContract]
    public partial class UsergroupmembershipResponseCompound :  IEquatable<UsergroupmembershipResponseCompound>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupmembershipResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UsergroupmembershipResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupmembershipResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiUsergroupmembershipID">The unique ID of the Usergroupmembership (required).</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sUserLoginname">The login name of the User. (required).</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="sUsergroupNameX">The Name of the Usergroup in the language of the requester (required).</param>
        public UsergroupmembershipResponseCompound(int pkiUsergroupmembershipID = default(int), int fkiUsergroupID = default(int), int fkiUserID = default(int), string sUserFirstname = default(string), string sUserLastname = default(string), string sUserLoginname = default(string), string sEmailAddress = default(string), string sUsergroupNameX = default(string))
        {
            // to ensure "pkiUsergroupmembershipID" is required (not null)
            if (pkiUsergroupmembershipID == null)
            {
                throw new InvalidDataException("pkiUsergroupmembershipID is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.PkiUsergroupmembershipID = pkiUsergroupmembershipID;
            }

            // to ensure "fkiUsergroupID" is required (not null)
            if (fkiUsergroupID == null)
            {
                throw new InvalidDataException("fkiUsergroupID is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.FkiUsergroupID = fkiUsergroupID;
            }

            // to ensure "fkiUserID" is required (not null)
            if (fkiUserID == null)
            {
                throw new InvalidDataException("fkiUserID is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.FkiUserID = fkiUserID;
            }

            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new InvalidDataException("sUserFirstname is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.SUserFirstname = sUserFirstname;
            }

            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new InvalidDataException("sUserLastname is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.SUserLastname = sUserLastname;
            }

            // to ensure "sUserLoginname" is required (not null)
            if (sUserLoginname == null)
            {
                throw new InvalidDataException("sUserLoginname is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.SUserLoginname = sUserLoginname;
            }

            // to ensure "sUsergroupNameX" is required (not null)
            if (sUsergroupNameX == null)
            {
                throw new InvalidDataException("sUsergroupNameX is a required property for UsergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.SUsergroupNameX = sUsergroupNameX;
            }

            this.SEmailAddress = sEmailAddress;
        }

        /// <summary>
        /// The unique ID of the Usergroupmembership
        /// </summary>
        /// <value>The unique ID of the Usergroupmembership</value>
        [DataMember(Name="pkiUsergroupmembershipID", EmitDefaultValue=true)]
        public int PkiUsergroupmembershipID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        [DataMember(Name="fkiUsergroupID", EmitDefaultValue=true)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        [DataMember(Name="sUserFirstname", EmitDefaultValue=true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        [DataMember(Name="sUserLastname", EmitDefaultValue=true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        [DataMember(Name="sUserLoginname", EmitDefaultValue=true)]
        public string SUserLoginname { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// The Name of the Usergroup in the language of the requester
        /// </summary>
        /// <value>The Name of the Usergroup in the language of the requester</value>
        [DataMember(Name="sUsergroupNameX", EmitDefaultValue=true)]
        public string SUsergroupNameX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsergroupmembershipResponseCompound {\n");
            sb.Append("  PkiUsergroupmembershipID: ").Append(PkiUsergroupmembershipID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  SUsergroupNameX: ").Append(SUsergroupNameX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsergroupmembershipResponseCompound);
        }

        /// <summary>
        /// Returns true if UsergroupmembershipResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of UsergroupmembershipResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsergroupmembershipResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUsergroupmembershipID == input.PkiUsergroupmembershipID ||
                    (this.PkiUsergroupmembershipID != null &&
                    this.PkiUsergroupmembershipID.Equals(input.PkiUsergroupmembershipID))
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    (this.FkiUsergroupID != null &&
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.SUserFirstname == input.SUserFirstname ||
                    (this.SUserFirstname != null &&
                    this.SUserFirstname.Equals(input.SUserFirstname))
                ) && 
                (
                    this.SUserLastname == input.SUserLastname ||
                    (this.SUserLastname != null &&
                    this.SUserLastname.Equals(input.SUserLastname))
                ) && 
                (
                    this.SUserLoginname == input.SUserLoginname ||
                    (this.SUserLoginname != null &&
                    this.SUserLoginname.Equals(input.SUserLoginname))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                ) && 
                (
                    this.SUsergroupNameX == input.SUsergroupNameX ||
                    (this.SUsergroupNameX != null &&
                    this.SUsergroupNameX.Equals(input.SUsergroupNameX))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUsergroupmembershipID != null)
                    hashCode = hashCode * 59 + this.PkiUsergroupmembershipID.GetHashCode();
                if (this.FkiUsergroupID != null)
                    hashCode = hashCode * 59 + this.FkiUsergroupID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.SUserFirstname != null)
                    hashCode = hashCode * 59 + this.SUserFirstname.GetHashCode();
                if (this.SUserLastname != null)
                    hashCode = hashCode * 59 + this.SUserLastname.GetHashCode();
                if (this.SUserLoginname != null)
                    hashCode = hashCode * 59 + this.SUserLoginname.GetHashCode();
                if (this.SEmailAddress != null)
                    hashCode = hashCode * 59 + this.SEmailAddress.GetHashCode();
                if (this.SUsergroupNameX != null)
                    hashCode = hashCode * 59 + this.SUsergroupNameX.GetHashCode();
                return hashCode;
            }
        }
    }

}
