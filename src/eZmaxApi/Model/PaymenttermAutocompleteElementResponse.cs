/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Paymentterm AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class PaymenttermAutocompleteElementResponse :  IEquatable<PaymenttermAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymenttermAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymenttermAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymenttermAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiPaymenttermID">The unique ID of the Paymentterm (required).</param>
        /// <param name="sPaymenttermDescriptionX">The description of the Paymentterm in the language of the requester (required).</param>
        /// <param name="bPaymenttermIsactive">Whether the Paymentterm is active or not (required).</param>
        public PaymenttermAutocompleteElementResponse(int pkiPaymenttermID = default(int), string sPaymenttermDescriptionX = default(string), bool bPaymenttermIsactive = default(bool))
        {
            // to ensure "pkiPaymenttermID" is required (not null)
            if (pkiPaymenttermID == null)
            {
                throw new InvalidDataException("pkiPaymenttermID is a required property for PaymenttermAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiPaymenttermID = pkiPaymenttermID;
            }

            // to ensure "sPaymenttermDescriptionX" is required (not null)
            if (sPaymenttermDescriptionX == null)
            {
                throw new InvalidDataException("sPaymenttermDescriptionX is a required property for PaymenttermAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SPaymenttermDescriptionX = sPaymenttermDescriptionX;
            }

            // to ensure "bPaymenttermIsactive" is required (not null)
            if (bPaymenttermIsactive == null)
            {
                throw new InvalidDataException("bPaymenttermIsactive is a required property for PaymenttermAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BPaymenttermIsactive = bPaymenttermIsactive;
            }

        }

        /// <summary>
        /// The unique ID of the Paymentterm
        /// </summary>
        /// <value>The unique ID of the Paymentterm</value>
        [DataMember(Name="pkiPaymenttermID", EmitDefaultValue=true)]
        public int PkiPaymenttermID { get; set; }

        /// <summary>
        /// The description of the Paymentterm in the language of the requester
        /// </summary>
        /// <value>The description of the Paymentterm in the language of the requester</value>
        [DataMember(Name="sPaymenttermDescriptionX", EmitDefaultValue=true)]
        public string SPaymenttermDescriptionX { get; set; }

        /// <summary>
        /// Whether the Paymentterm is active or not
        /// </summary>
        /// <value>Whether the Paymentterm is active or not</value>
        [DataMember(Name="bPaymenttermIsactive", EmitDefaultValue=true)]
        public bool BPaymenttermIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymenttermAutocompleteElementResponse {\n");
            sb.Append("  PkiPaymenttermID: ").Append(PkiPaymenttermID).Append("\n");
            sb.Append("  SPaymenttermDescriptionX: ").Append(SPaymenttermDescriptionX).Append("\n");
            sb.Append("  BPaymenttermIsactive: ").Append(BPaymenttermIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymenttermAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if PaymenttermAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymenttermAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymenttermAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiPaymenttermID == input.PkiPaymenttermID ||
                    (this.PkiPaymenttermID != null &&
                    this.PkiPaymenttermID.Equals(input.PkiPaymenttermID))
                ) && 
                (
                    this.SPaymenttermDescriptionX == input.SPaymenttermDescriptionX ||
                    (this.SPaymenttermDescriptionX != null &&
                    this.SPaymenttermDescriptionX.Equals(input.SPaymenttermDescriptionX))
                ) && 
                (
                    this.BPaymenttermIsactive == input.BPaymenttermIsactive ||
                    (this.BPaymenttermIsactive != null &&
                    this.BPaymenttermIsactive.Equals(input.BPaymenttermIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiPaymenttermID != null)
                    hashCode = hashCode * 59 + this.PkiPaymenttermID.GetHashCode();
                if (this.SPaymenttermDescriptionX != null)
                    hashCode = hashCode * 59 + this.SPaymenttermDescriptionX.GetHashCode();
                if (this.BPaymenttermIsactive != null)
                    hashCode = hashCode * 59 + this.BPaymenttermIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // SPaymenttermDescriptionX (string) pattern
            Regex regexSPaymenttermDescriptionX = new Regex(@"^.{1,40}$", RegexOptions.CultureInvariant);
            if (false == regexSPaymenttermDescriptionX.Match(this.SPaymenttermDescriptionX).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPaymenttermDescriptionX, must match a pattern of " + regexSPaymenttermDescriptionX, new [] { "SPaymenttermDescriptionX" });
            }

            yield break;
        }
    }

}
