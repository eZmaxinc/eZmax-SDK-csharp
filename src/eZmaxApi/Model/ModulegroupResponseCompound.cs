/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Modulegroup Object
    /// </summary>
    [DataContract]
    public partial class ModulegroupResponseCompound :  IEquatable<ModulegroupResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModulegroupResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModulegroupResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModulegroupResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiModulegroupID">The unique ID of the Modulegroup (required).</param>
        /// <param name="sModulegroupNameX">The name of the Modulegroup in the language of the requester (required).</param>
        /// <param name="aObjModule">aObjModule (required).</param>
        public ModulegroupResponseCompound(int pkiModulegroupID = default(int), string sModulegroupNameX = default(string), List<ModuleResponseCompound> aObjModule = default(List<ModuleResponseCompound>))
        {
            // to ensure "pkiModulegroupID" is required (not null)
            if (pkiModulegroupID == null)
            {
                throw new InvalidDataException("pkiModulegroupID is a required property for ModulegroupResponseCompound and cannot be null");
            }
            else
            {
                this.PkiModulegroupID = pkiModulegroupID;
            }

            // to ensure "sModulegroupNameX" is required (not null)
            if (sModulegroupNameX == null)
            {
                throw new InvalidDataException("sModulegroupNameX is a required property for ModulegroupResponseCompound and cannot be null");
            }
            else
            {
                this.SModulegroupNameX = sModulegroupNameX;
            }

            // to ensure "aObjModule" is required (not null)
            if (aObjModule == null)
            {
                throw new InvalidDataException("aObjModule is a required property for ModulegroupResponseCompound and cannot be null");
            }
            else
            {
                this.AObjModule = aObjModule;
            }

        }

        /// <summary>
        /// The unique ID of the Modulegroup
        /// </summary>
        /// <value>The unique ID of the Modulegroup</value>
        [DataMember(Name="pkiModulegroupID", EmitDefaultValue=true)]
        public int PkiModulegroupID { get; set; }

        /// <summary>
        /// The name of the Modulegroup in the language of the requester
        /// </summary>
        /// <value>The name of the Modulegroup in the language of the requester</value>
        [DataMember(Name="sModulegroupNameX", EmitDefaultValue=true)]
        public string SModulegroupNameX { get; set; }

        /// <summary>
        /// Gets or Sets AObjModule
        /// </summary>
        [DataMember(Name="a_objModule", EmitDefaultValue=true)]
        public List<ModuleResponseCompound> AObjModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModulegroupResponseCompound {\n");
            sb.Append("  PkiModulegroupID: ").Append(PkiModulegroupID).Append("\n");
            sb.Append("  SModulegroupNameX: ").Append(SModulegroupNameX).Append("\n");
            sb.Append("  AObjModule: ").Append(AObjModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModulegroupResponseCompound);
        }

        /// <summary>
        /// Returns true if ModulegroupResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ModulegroupResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModulegroupResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiModulegroupID == input.PkiModulegroupID ||
                    (this.PkiModulegroupID != null &&
                    this.PkiModulegroupID.Equals(input.PkiModulegroupID))
                ) && 
                (
                    this.SModulegroupNameX == input.SModulegroupNameX ||
                    (this.SModulegroupNameX != null &&
                    this.SModulegroupNameX.Equals(input.SModulegroupNameX))
                ) && 
                (
                    this.AObjModule == input.AObjModule ||
                    this.AObjModule != null &&
                    input.AObjModule != null &&
                    this.AObjModule.SequenceEqual(input.AObjModule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiModulegroupID != null)
                    hashCode = hashCode * 59 + this.PkiModulegroupID.GetHashCode();
                if (this.SModulegroupNameX != null)
                    hashCode = hashCode * 59 + this.SModulegroupNameX.GetHashCode();
                if (this.AObjModule != null)
                    hashCode = hashCode * 59 + this.AObjModule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiModulegroupID (int) maximum
            if(this.PkiModulegroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiModulegroupID, must be a value less than or equal to 255.", new [] { "PkiModulegroupID" });
            }

            // PkiModulegroupID (int) minimum
            if(this.PkiModulegroupID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiModulegroupID, must be a value greater than or equal to 1.", new [] { "PkiModulegroupID" });
            }



            // SModulegroupNameX (string) pattern
            Regex regexSModulegroupNameX = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
            if (false == regexSModulegroupNameX.Match(this.SModulegroupNameX).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SModulegroupNameX, must match a pattern of " + regexSModulegroupNameX, new [] { "SModulegroupNameX" });
            }

            yield break;
        }
    }

}
