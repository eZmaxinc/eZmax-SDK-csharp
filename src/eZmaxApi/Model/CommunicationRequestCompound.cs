/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/communication
    /// </summary>
    [DataContract(Name = "communication-RequestCompound")]
    public partial class CommunicationRequestCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ECommunicationImportance
        /// </summary>
        [DataMember(Name = "eCommunicationImportance", EmitDefaultValue = false)]
        public FieldECommunicationImportance? ECommunicationImportance { get; set; }

        /// <summary>
        /// Gets or Sets ECommunicationType
        /// </summary>
        [DataMember(Name = "eCommunicationType", IsRequired = true, EmitDefaultValue = true)]
        public FieldECommunicationType ECommunicationType { get; set; }
        /// <summary>
        /// How the attachment should be included in the email.   Only used if eCommunicationType is **Email**
        /// </summary>
        /// <value>How the attachment should be included in the email.   Only used if eCommunicationType is **Email**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ECommunicationAttachmenttypeEnum
        {
            /// <summary>
            /// Enum Attachment for value: Attachment
            /// </summary>
            [EnumMember(Value = "Attachment")]
            Attachment = 1,

            /// <summary>
            /// Enum Url for value: Url
            /// </summary>
            [EnumMember(Value = "Url")]
            Url = 2
        }


        /// <summary>
        /// How the attachment should be included in the email.   Only used if eCommunicationType is **Email**
        /// </summary>
        /// <value>How the attachment should be included in the email.   Only used if eCommunicationType is **Email**</value>
        [DataMember(Name = "eCommunicationAttachmenttype", EmitDefaultValue = false)]
        public ECommunicationAttachmenttypeEnum? ECommunicationAttachmenttype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiCommunicationID">The unique ID of the Communication..</param>
        /// <param name="eCommunicationImportance">eCommunicationImportance.</param>
        /// <param name="eCommunicationType">eCommunicationType (required).</param>
        /// <param name="objCommunicationsender">objCommunicationsender.</param>
        /// <param name="sCommunicationSubject">The subject of the Communication.</param>
        /// <param name="tCommunicationBody">The Body of the Communication (required).</param>
        /// <param name="bCommunicationPrivate">Whether the Communication is private or not (required).</param>
        /// <param name="eCommunicationAttachmenttype">How the attachment should be included in the email.   Only used if eCommunicationType is **Email**.</param>
        /// <param name="iCommunicationAttachmentlinkexpiration">The number of days before the attachment link expired.   Only used if eCommunicationType is **Email** and eCommunicationattachmentType is **Link**.</param>
        /// <param name="bCommunicationReadreceipt">Whether we ask for a read receipt or not..</param>
        /// <param name="aObjCommunicationattachment">aObjCommunicationattachment (required).</param>
        /// <param name="aObjCommunicationrecipient">aObjCommunicationrecipient (required).</param>
        /// <param name="aObjCommunicationreference">aObjCommunicationreference (required).</param>
        /// <param name="aObjCommunicationexternalrecipient">aObjCommunicationexternalrecipient (required).</param>
        public CommunicationRequestCompound(int pkiCommunicationID = default(int), FieldECommunicationImportance? eCommunicationImportance = default(FieldECommunicationImportance?), FieldECommunicationType eCommunicationType = default(FieldECommunicationType), CustomCommunicationsenderRequest objCommunicationsender = default(CustomCommunicationsenderRequest), string sCommunicationSubject = default(string), string tCommunicationBody = default(string), bool bCommunicationPrivate = default(bool), ECommunicationAttachmenttypeEnum? eCommunicationAttachmenttype = default(ECommunicationAttachmenttypeEnum?), int iCommunicationAttachmentlinkexpiration = default(int), bool bCommunicationReadreceipt = default(bool), List<CustomCommunicationattachmentRequest> aObjCommunicationattachment = default(List<CustomCommunicationattachmentRequest>), List<CommunicationrecipientRequestCompound> aObjCommunicationrecipient = default(List<CommunicationrecipientRequestCompound>), List<CommunicationreferenceRequestCompound> aObjCommunicationreference = default(List<CommunicationreferenceRequestCompound>), List<CommunicationexternalrecipientRequestCompound> aObjCommunicationexternalrecipient = default(List<CommunicationexternalrecipientRequestCompound>))
        {
            this.ECommunicationType = eCommunicationType;
            // to ensure "tCommunicationBody" is required (not null)
            if (tCommunicationBody == null)
            {
                throw new ArgumentNullException("tCommunicationBody is a required property for CommunicationRequestCompound and cannot be null");
            }
            this.TCommunicationBody = tCommunicationBody;
            this.BCommunicationPrivate = bCommunicationPrivate;
            // to ensure "aObjCommunicationattachment" is required (not null)
            if (aObjCommunicationattachment == null)
            {
                throw new ArgumentNullException("aObjCommunicationattachment is a required property for CommunicationRequestCompound and cannot be null");
            }
            this.AObjCommunicationattachment = aObjCommunicationattachment;
            // to ensure "aObjCommunicationrecipient" is required (not null)
            if (aObjCommunicationrecipient == null)
            {
                throw new ArgumentNullException("aObjCommunicationrecipient is a required property for CommunicationRequestCompound and cannot be null");
            }
            this.AObjCommunicationrecipient = aObjCommunicationrecipient;
            // to ensure "aObjCommunicationreference" is required (not null)
            if (aObjCommunicationreference == null)
            {
                throw new ArgumentNullException("aObjCommunicationreference is a required property for CommunicationRequestCompound and cannot be null");
            }
            this.AObjCommunicationreference = aObjCommunicationreference;
            // to ensure "aObjCommunicationexternalrecipient" is required (not null)
            if (aObjCommunicationexternalrecipient == null)
            {
                throw new ArgumentNullException("aObjCommunicationexternalrecipient is a required property for CommunicationRequestCompound and cannot be null");
            }
            this.AObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
            this.PkiCommunicationID = pkiCommunicationID;
            this.ECommunicationImportance = eCommunicationImportance;
            this.ObjCommunicationsender = objCommunicationsender;
            this.SCommunicationSubject = sCommunicationSubject;
            this.ECommunicationAttachmenttype = eCommunicationAttachmenttype;
            this.ICommunicationAttachmentlinkexpiration = iCommunicationAttachmentlinkexpiration;
            this.BCommunicationReadreceipt = bCommunicationReadreceipt;
        }

        /// <summary>
        /// The unique ID of the Communication.
        /// </summary>
        /// <value>The unique ID of the Communication.</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiCommunicationID", EmitDefaultValue = false)]
        public int PkiCommunicationID { get; set; }

        /// <summary>
        /// Gets or Sets ObjCommunicationsender
        /// </summary>
        [DataMember(Name = "objCommunicationsender", EmitDefaultValue = false)]
        public CustomCommunicationsenderRequest ObjCommunicationsender { get; set; }

        /// <summary>
        /// The subject of the Communication
        /// </summary>
        /// <value>The subject of the Communication</value>
        /* <example>This is an example of subject</example>*/
        [DataMember(Name = "sCommunicationSubject", EmitDefaultValue = false)]
        public string SCommunicationSubject { get; set; }

        /// <summary>
        /// The Body of the Communication
        /// </summary>
        /// <value>The Body of the Communication</value>
        [DataMember(Name = "tCommunicationBody", IsRequired = true, EmitDefaultValue = true)]
        public string TCommunicationBody { get; set; }

        /// <summary>
        /// Whether the Communication is private or not
        /// </summary>
        /// <value>Whether the Communication is private or not</value>
        /* <example>false</example>*/
        [DataMember(Name = "bCommunicationPrivate", IsRequired = true, EmitDefaultValue = true)]
        public bool BCommunicationPrivate { get; set; }

        /// <summary>
        /// The number of days before the attachment link expired.   Only used if eCommunicationType is **Email** and eCommunicationattachmentType is **Link**
        /// </summary>
        /// <value>The number of days before the attachment link expired.   Only used if eCommunicationType is **Email** and eCommunicationattachmentType is **Link**</value>
        [DataMember(Name = "iCommunicationAttachmentlinkexpiration", EmitDefaultValue = false)]
        public int ICommunicationAttachmentlinkexpiration { get; set; }

        /// <summary>
        /// Whether we ask for a read receipt or not.
        /// </summary>
        /// <value>Whether we ask for a read receipt or not.</value>
        [DataMember(Name = "bCommunicationReadreceipt", EmitDefaultValue = true)]
        public bool BCommunicationReadreceipt { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationattachment
        /// </summary>
        [DataMember(Name = "a_objCommunicationattachment", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomCommunicationattachmentRequest> AObjCommunicationattachment { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationrecipient
        /// </summary>
        [DataMember(Name = "a_objCommunicationrecipient", IsRequired = true, EmitDefaultValue = true)]
        public List<CommunicationrecipientRequestCompound> AObjCommunicationrecipient { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationreference
        /// </summary>
        [DataMember(Name = "a_objCommunicationreference", IsRequired = true, EmitDefaultValue = true)]
        public List<CommunicationreferenceRequestCompound> AObjCommunicationreference { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationexternalrecipient
        /// </summary>
        [DataMember(Name = "a_objCommunicationexternalrecipient", IsRequired = true, EmitDefaultValue = true)]
        public List<CommunicationexternalrecipientRequestCompound> AObjCommunicationexternalrecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommunicationRequestCompound {\n");
            sb.Append("  PkiCommunicationID: ").Append(PkiCommunicationID).Append("\n");
            sb.Append("  ECommunicationImportance: ").Append(ECommunicationImportance).Append("\n");
            sb.Append("  ECommunicationType: ").Append(ECommunicationType).Append("\n");
            sb.Append("  ObjCommunicationsender: ").Append(ObjCommunicationsender).Append("\n");
            sb.Append("  SCommunicationSubject: ").Append(SCommunicationSubject).Append("\n");
            sb.Append("  TCommunicationBody: ").Append(TCommunicationBody).Append("\n");
            sb.Append("  BCommunicationPrivate: ").Append(BCommunicationPrivate).Append("\n");
            sb.Append("  ECommunicationAttachmenttype: ").Append(ECommunicationAttachmenttype).Append("\n");
            sb.Append("  ICommunicationAttachmentlinkexpiration: ").Append(ICommunicationAttachmentlinkexpiration).Append("\n");
            sb.Append("  BCommunicationReadreceipt: ").Append(BCommunicationReadreceipt).Append("\n");
            sb.Append("  AObjCommunicationattachment: ").Append(AObjCommunicationattachment).Append("\n");
            sb.Append("  AObjCommunicationrecipient: ").Append(AObjCommunicationrecipient).Append("\n");
            sb.Append("  AObjCommunicationreference: ").Append(AObjCommunicationreference).Append("\n");
            sb.Append("  AObjCommunicationexternalrecipient: ").Append(AObjCommunicationexternalrecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCommunicationID (int) minimum
            if (this.PkiCommunicationID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiCommunicationID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationID" });
            }

            if (this.SCommunicationSubject != null) {
                // SCommunicationSubject (string) pattern
                Regex regexSCommunicationSubject = new Regex(@"^.{0,200}$", RegexOptions.CultureInvariant);
                if (!regexSCommunicationSubject.Match(this.SCommunicationSubject).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCommunicationSubject, must match a pattern of " + regexSCommunicationSubject, new [] { "SCommunicationSubject" });
                }
            }

            // ICommunicationAttachmentlinkexpiration (int) maximum
            if (this.ICommunicationAttachmentlinkexpiration > (int)30)
            {
                yield return new ValidationResult("Invalid value for ICommunicationAttachmentlinkexpiration, must be a value less than or equal to 30.", new [] { "ICommunicationAttachmentlinkexpiration" });
            }

            // ICommunicationAttachmentlinkexpiration (int) minimum
            if (this.ICommunicationAttachmentlinkexpiration < (int)1)
            {
                yield return new ValidationResult("Invalid value for ICommunicationAttachmentlinkexpiration, must be a value greater than or equal to 1.", new [] { "ICommunicationAttachmentlinkexpiration" });
            }

            yield break;
        }
    }

}
