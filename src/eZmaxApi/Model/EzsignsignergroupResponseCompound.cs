/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignergroup Object
    /// </summary>
    [DataContract]
    public partial class EzsignsignergroupResponseCompound :  IEquatable<EzsignsignergroupResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignergroupResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup (required).</param>
        public EzsignsignergroupResponseCompound(int pkiEzsignsignergroupID = default(int))
        {
            // to ensure "pkiEzsignsignergroupID" is required (not null)
            if (pkiEzsignsignergroupID == null)
            {
                throw new InvalidDataException("pkiEzsignsignergroupID is a required property for EzsignsignergroupResponseCompound and cannot be null");
            }
            else
            {
                this.PkiEzsignsignergroupID = pkiEzsignsignergroupID;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsignsignergroup
        /// </summary>
        /// <value>The unique ID of the Ezsignsignergroup</value>
        [DataMember(Name="pkiEzsignsignergroupID", EmitDefaultValue=true)]
        public int PkiEzsignsignergroupID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignergroupResponseCompound {\n");
            sb.Append("  PkiEzsignsignergroupID: ").Append(PkiEzsignsignergroupID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignergroupResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsignsignergroupResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignergroupResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignergroupResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignergroupID == input.PkiEzsignsignergroupID ||
                    (this.PkiEzsignsignergroupID != null &&
                    this.PkiEzsignsignergroupID.Equals(input.PkiEzsignsignergroupID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignergroupID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignergroupID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsignsignergroupID (int) maximum
            if(this.PkiEzsignsignergroupID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignsignergroupID, must be a value less than or equal to 65535.", new [] { "PkiEzsignsignergroupID" });
            }

            // PkiEzsignsignergroupID (int) minimum
            if(this.PkiEzsignsignergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignsignergroupID, must be a value greater than or equal to 0.", new [] { "PkiEzsignsignergroupID" });
            }

            yield break;
        }
    }

}
