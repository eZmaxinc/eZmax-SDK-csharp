/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Discussion Object
    /// </summary>
    [DataContract(Name = "discussion-ResponseCompound")]
    public partial class DiscussionResponseCompound : DiscussionResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscussionResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DiscussionResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscussionResponseCompound" /> class.
        /// </summary>
        /// <param name="aObjDiscussionmembership">aObjDiscussionmembership (required).</param>
        /// <param name="aObjDiscussionmessage">aObjDiscussionmessage (required).</param>
        /// <param name="pkiDiscussionID">The unique ID of the Discussion (required).</param>
        /// <param name="sDiscussionDescription">The description of the Discussion (required).</param>
        /// <param name="bDiscussionClosed">Whether if it&#39;s an closed (required).</param>
        /// <param name="dtDiscussionLastread">The date the Discussion was last read.</param>
        /// <param name="iDiscussionmessageCount">The count of Attachment. (required).</param>
        /// <param name="iDiscussionmessageCountunread">The count of Attachment. (required).</param>
        /// <param name="objDiscussionconfiguration">objDiscussionconfiguration.</param>
        public DiscussionResponseCompound(List<DiscussionmembershipResponseCompound> aObjDiscussionmembership = default(List<DiscussionmembershipResponseCompound>), List<DiscussionmessageResponseCompound> aObjDiscussionmessage = default(List<DiscussionmessageResponseCompound>), int pkiDiscussionID = default(int), string sDiscussionDescription = default(string), bool bDiscussionClosed = default(bool), string dtDiscussionLastread = default(string), int iDiscussionmessageCount = default(int), int iDiscussionmessageCountunread = default(int), CustomDiscussionconfigurationResponse objDiscussionconfiguration = default(CustomDiscussionconfigurationResponse)) : base()
        {
            // to ensure "aObjDiscussionmembership" is required (not null)
            if (aObjDiscussionmembership == null)
            {
                throw new ArgumentNullException("aObjDiscussionmembership is a required property for DiscussionResponseCompound and cannot be null");
            }
            this.AObjDiscussionmembership = aObjDiscussionmembership;
            // to ensure "aObjDiscussionmessage" is required (not null)
            if (aObjDiscussionmessage == null)
            {
                throw new ArgumentNullException("aObjDiscussionmessage is a required property for DiscussionResponseCompound and cannot be null");
            }
            this.AObjDiscussionmessage = aObjDiscussionmessage;
        }

        /// <summary>
        /// Gets or Sets AObjDiscussionmembership
        /// </summary>
        [DataMember(Name = "a_objDiscussionmembership", IsRequired = true, EmitDefaultValue = true)]
        public List<DiscussionmembershipResponseCompound> AObjDiscussionmembership { get; set; }

        /// <summary>
        /// Gets or Sets AObjDiscussionmessage
        /// </summary>
        [DataMember(Name = "a_objDiscussionmessage", IsRequired = true, EmitDefaultValue = true)]
        public List<DiscussionmessageResponseCompound> AObjDiscussionmessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscussionResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AObjDiscussionmembership: ").Append(AObjDiscussionmembership).Append("\n");
            sb.Append("  AObjDiscussionmessage: ").Append(AObjDiscussionmessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
