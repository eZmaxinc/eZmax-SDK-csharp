/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigndocument Object
    /// </summary>
    [DataContract(Name = "ezsigndocument-Request")]
    public partial class EzsigndocumentRequest : IEquatable<EzsigndocumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Indicates where to look for the document binary content.
        /// </summary>
        /// <value>Indicates where to look for the document binary content.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsigndocumentSourceEnum
        {
            /// <summary>
            /// Enum Base64 for value: Base64
            /// </summary>
            [EnumMember(Value = "Base64")]
            Base64 = 1,

            /// <summary>
            /// Enum Ezsigntemplate for value: Ezsigntemplate
            /// </summary>
            [EnumMember(Value = "Ezsigntemplate")]
            Ezsigntemplate = 2,

            /// <summary>
            /// Enum Url for value: Url
            /// </summary>
            [EnumMember(Value = "Url")]
            Url = 3
        }


        /// <summary>
        /// Indicates where to look for the document binary content.
        /// </summary>
        /// <value>Indicates where to look for the document binary content.</value>
        [DataMember(Name = "eEzsigndocumentSource", IsRequired = true, EmitDefaultValue = true)]
        public EEzsigndocumentSourceEnum EEzsigndocumentSource { get; set; }
        /// <summary>
        /// Indicates the format of the document.
        /// </summary>
        /// <value>Indicates the format of the document.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsigndocumentFormatEnum
        {
            /// <summary>
            /// Enum Pdf for value: Pdf
            /// </summary>
            [EnumMember(Value = "Pdf")]
            Pdf = 1,

            /// <summary>
            /// Enum Doc for value: Doc
            /// </summary>
            [EnumMember(Value = "Doc")]
            Doc = 2,

            /// <summary>
            /// Enum Docx for value: Docx
            /// </summary>
            [EnumMember(Value = "Docx")]
            Docx = 3,

            /// <summary>
            /// Enum Xls for value: Xls
            /// </summary>
            [EnumMember(Value = "Xls")]
            Xls = 4,

            /// <summary>
            /// Enum Xlsx for value: Xlsx
            /// </summary>
            [EnumMember(Value = "Xlsx")]
            Xlsx = 5,

            /// <summary>
            /// Enum Ppt for value: Ppt
            /// </summary>
            [EnumMember(Value = "Ppt")]
            Ppt = 6,

            /// <summary>
            /// Enum Pptx for value: Pptx
            /// </summary>
            [EnumMember(Value = "Pptx")]
            Pptx = 7
        }


        /// <summary>
        /// Indicates the format of the document.
        /// </summary>
        /// <value>Indicates the format of the document.</value>
        [DataMember(Name = "eEzsigndocumentFormat", EmitDefaultValue = false)]
        public EEzsigndocumentFormatEnum? EEzsigndocumentFormat { get; set; }
        /// <summary>
        /// If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**
        /// </summary>
        /// <value>If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsigndocumentFormEnum
        {
            /// <summary>
            /// Enum Keep for value: Keep
            /// </summary>
            [EnumMember(Value = "Keep")]
            Keep = 1,

            /// <summary>
            /// Enum Convert for value: Convert
            /// </summary>
            [EnumMember(Value = "Convert")]
            Convert = 2
        }


        /// <summary>
        /// If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**
        /// </summary>
        /// <value>If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**</value>
        [DataMember(Name = "eEzsigndocumentForm", EmitDefaultValue = false)]
        public EEzsigndocumentFormEnum? EEzsigndocumentForm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigndocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentRequest" /> class.
        /// </summary>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument.</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="fkiEzsigntemplateID">The unique ID of the Ezsigntemplate.</param>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation.</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="eEzsigndocumentSource">Indicates where to look for the document binary content. (required).</param>
        /// <param name="eEzsigndocumentFormat">Indicates the format of the document..</param>
        /// <param name="sEzsigndocumentBase64">The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource &#x3D; Base64..</param>
        /// <param name="sEzsigndocumentUrl">The url where the document content resides.  This field is Required when eEzsigndocumentSource &#x3D; Url..</param>
        /// <param name="bEzsigndocumentForcerepair">Try to repair the document or flatten it if it cannot be used for electronic signature.  (default to true).</param>
        /// <param name="sEzsigndocumentPassword">If the source document is password protected, the password to open/modify it..</param>
        /// <param name="eEzsigndocumentForm">If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsignformfieldgroups and assign them to the specified **fkiEzsignfoldersignerassociationID**.</param>
        /// <param name="dtEzsigndocumentDuedate">The maximum date and time at which the Ezsigndocument can be signed. (required).</param>
        /// <param name="sEzsigndocumentName">The name of the document that will be presented to Ezsignfoldersignerassociations (required).</param>
        /// <param name="sEzsigndocumentExternalid">This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. .</param>
        public EzsigndocumentRequest(int pkiEzsigndocumentID = default(int), int fkiEzsignfolderID = default(int), int fkiEzsigntemplateID = default(int), int fkiEzsignfoldersignerassociationID = default(int), int fkiLanguageID = default(int), EEzsigndocumentSourceEnum eEzsigndocumentSource = default(EEzsigndocumentSourceEnum), EEzsigndocumentFormatEnum? eEzsigndocumentFormat = default(EEzsigndocumentFormatEnum?), byte[] sEzsigndocumentBase64 = default(byte[]), string sEzsigndocumentUrl = default(string), bool bEzsigndocumentForcerepair = true, string sEzsigndocumentPassword = default(string), EEzsigndocumentFormEnum? eEzsigndocumentForm = default(EEzsigndocumentFormEnum?), string dtEzsigndocumentDuedate = default(string), string sEzsigndocumentName = default(string), string sEzsigndocumentExternalid = default(string))
        {
            this.FkiEzsignfolderID = fkiEzsignfolderID;
            this.FkiLanguageID = fkiLanguageID;
            this.EEzsigndocumentSource = eEzsigndocumentSource;
            // to ensure "dtEzsigndocumentDuedate" is required (not null)
            if (dtEzsigndocumentDuedate == null)
            {
                throw new ArgumentNullException("dtEzsigndocumentDuedate is a required property for EzsigndocumentRequest and cannot be null");
            }
            this.DtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
            // to ensure "sEzsigndocumentName" is required (not null)
            if (sEzsigndocumentName == null)
            {
                throw new ArgumentNullException("sEzsigndocumentName is a required property for EzsigndocumentRequest and cannot be null");
            }
            this.SEzsigndocumentName = sEzsigndocumentName;
            this.PkiEzsigndocumentID = pkiEzsigndocumentID;
            this.FkiEzsigntemplateID = fkiEzsigntemplateID;
            this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
            this.EEzsigndocumentFormat = eEzsigndocumentFormat;
            this.SEzsigndocumentBase64 = sEzsigndocumentBase64;
            this.SEzsigndocumentUrl = sEzsigndocumentUrl;
            this.BEzsigndocumentForcerepair = bEzsigndocumentForcerepair;
            this.SEzsigndocumentPassword = sEzsigndocumentPassword;
            this.EEzsigndocumentForm = eEzsigndocumentForm;
            this.SEzsigndocumentExternalid = sEzsigndocumentExternalid;
        }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
		/* <example>97</example>*/
        [DataMember(Name = "pkiEzsigndocumentID", EmitDefaultValue = false)]
        public int PkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
		/* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
		/* <example>36</example>*/
        [DataMember(Name = "fkiEzsigntemplateID", EmitDefaultValue = false)]
        public int FkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
		/* <example>20</example>*/
        [DataMember(Name = "fkiEzsignfoldersignerassociationID", EmitDefaultValue = false)]
        public int FkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
		/* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource &#x3D; Base64.
        /// </summary>
        /// <value>The Base64 encoded binary content of the document.  This field is Required when eEzsigndocumentSource &#x3D; Base64.</value>
		/* <example>[B@4985cbcb</example>*/
        [DataMember(Name = "sEzsigndocumentBase64", EmitDefaultValue = false)]
        public byte[] SEzsigndocumentBase64 { get; set; }

        /// <summary>
        /// The url where the document content resides.  This field is Required when eEzsigndocumentSource &#x3D; Url.
        /// </summary>
        /// <value>The url where the document content resides.  This field is Required when eEzsigndocumentSource &#x3D; Url.</value>
		/* <example>http://www.example.com/document.pdf</example>*/
        [DataMember(Name = "sEzsigndocumentUrl", EmitDefaultValue = false)]
        public string SEzsigndocumentUrl { get; set; }

        /// <summary>
        /// Try to repair the document or flatten it if it cannot be used for electronic signature. 
        /// </summary>
        /// <value>Try to repair the document or flatten it if it cannot be used for electronic signature. </value>
        [DataMember(Name = "bEzsigndocumentForcerepair", EmitDefaultValue = true)]
        public bool BEzsigndocumentForcerepair { get; set; }

        /// <summary>
        /// If the source document is password protected, the password to open/modify it.
        /// </summary>
        /// <value>If the source document is password protected, the password to open/modify it.</value>
		/* <example>SecretPassword123</example>*/
        [DataMember(Name = "sEzsigndocumentPassword", EmitDefaultValue = false)]
        public string SEzsigndocumentPassword { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsigndocument can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsigndocument can be signed.</value>
		/* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsigndocumentDuedate", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzsigndocumentDuedate { get; set; }

        /// <summary>
        /// The name of the document that will be presented to Ezsignfoldersignerassociations
        /// </summary>
        /// <value>The name of the document that will be presented to Ezsignfoldersignerassociations</value>
		/* <example>Contract #123</example>*/
        [DataMember(Name = "sEzsigndocumentName", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentName { get; set; }

        /// <summary>
        /// This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
        /// </summary>
        /// <value>This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. </value>
		/* <example>{&quot;ID&quot;: 1234, &quot;TAGS&quot;: [&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;]}</example>*/
        [DataMember(Name = "sEzsigndocumentExternalid", EmitDefaultValue = false)]
        public string SEzsigndocumentExternalid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigndocumentRequest {\n");
            sb.Append("  PkiEzsigndocumentID: ").Append(PkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  FkiEzsigntemplateID: ").Append(FkiEzsigntemplateID).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationID: ").Append(FkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  EEzsigndocumentSource: ").Append(EEzsigndocumentSource).Append("\n");
            sb.Append("  EEzsigndocumentFormat: ").Append(EEzsigndocumentFormat).Append("\n");
            sb.Append("  SEzsigndocumentBase64: ").Append(SEzsigndocumentBase64).Append("\n");
            sb.Append("  SEzsigndocumentUrl: ").Append(SEzsigndocumentUrl).Append("\n");
            sb.Append("  BEzsigndocumentForcerepair: ").Append(BEzsigndocumentForcerepair).Append("\n");
            sb.Append("  SEzsigndocumentPassword: ").Append(SEzsigndocumentPassword).Append("\n");
            sb.Append("  EEzsigndocumentForm: ").Append(EEzsigndocumentForm).Append("\n");
            sb.Append("  DtEzsigndocumentDuedate: ").Append(DtEzsigndocumentDuedate).Append("\n");
            sb.Append("  SEzsigndocumentName: ").Append(SEzsigndocumentName).Append("\n");
            sb.Append("  SEzsigndocumentExternalid: ").Append(SEzsigndocumentExternalid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigndocumentRequest);
        }

        /// <summary>
        /// Returns true if EzsigndocumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigndocumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigndocumentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigndocumentID == input.PkiEzsigndocumentID ||
                    this.PkiEzsigndocumentID.Equals(input.PkiEzsigndocumentID)
                ) && 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID)
                ) && 
                (
                    this.FkiEzsigntemplateID == input.FkiEzsigntemplateID ||
                    this.FkiEzsigntemplateID.Equals(input.FkiEzsigntemplateID)
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationID == input.FkiEzsignfoldersignerassociationID ||
                    this.FkiEzsignfoldersignerassociationID.Equals(input.FkiEzsignfoldersignerassociationID)
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    this.FkiLanguageID.Equals(input.FkiLanguageID)
                ) && 
                (
                    this.EEzsigndocumentSource == input.EEzsigndocumentSource ||
                    this.EEzsigndocumentSource.Equals(input.EEzsigndocumentSource)
                ) && 
                (
                    this.EEzsigndocumentFormat == input.EEzsigndocumentFormat ||
                    this.EEzsigndocumentFormat.Equals(input.EEzsigndocumentFormat)
                ) && 
                (
                    this.SEzsigndocumentBase64 == input.SEzsigndocumentBase64 ||
                    (this.SEzsigndocumentBase64 != null &&
                    this.SEzsigndocumentBase64.Equals(input.SEzsigndocumentBase64))
                ) && 
                (
                    this.SEzsigndocumentUrl == input.SEzsigndocumentUrl ||
                    (this.SEzsigndocumentUrl != null &&
                    this.SEzsigndocumentUrl.Equals(input.SEzsigndocumentUrl))
                ) && 
                (
                    this.BEzsigndocumentForcerepair == input.BEzsigndocumentForcerepair ||
                    this.BEzsigndocumentForcerepair.Equals(input.BEzsigndocumentForcerepair)
                ) && 
                (
                    this.SEzsigndocumentPassword == input.SEzsigndocumentPassword ||
                    (this.SEzsigndocumentPassword != null &&
                    this.SEzsigndocumentPassword.Equals(input.SEzsigndocumentPassword))
                ) && 
                (
                    this.EEzsigndocumentForm == input.EEzsigndocumentForm ||
                    this.EEzsigndocumentForm.Equals(input.EEzsigndocumentForm)
                ) && 
                (
                    this.DtEzsigndocumentDuedate == input.DtEzsigndocumentDuedate ||
                    (this.DtEzsigndocumentDuedate != null &&
                    this.DtEzsigndocumentDuedate.Equals(input.DtEzsigndocumentDuedate))
                ) && 
                (
                    this.SEzsigndocumentName == input.SEzsigndocumentName ||
                    (this.SEzsigndocumentName != null &&
                    this.SEzsigndocumentName.Equals(input.SEzsigndocumentName))
                ) && 
                (
                    this.SEzsigndocumentExternalid == input.SEzsigndocumentExternalid ||
                    (this.SEzsigndocumentExternalid != null &&
                    this.SEzsigndocumentExternalid.Equals(input.SEzsigndocumentExternalid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigndocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfolderID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfoldersignerassociationID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiLanguageID.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsigndocumentSource.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsigndocumentFormat.GetHashCode();
                if (this.SEzsigndocumentBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentBase64.GetHashCode();
                }
                if (this.SEzsigndocumentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzsigndocumentForcerepair.GetHashCode();
                if (this.SEzsigndocumentPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentPassword.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsigndocumentForm.GetHashCode();
                if (this.DtEzsigndocumentDuedate != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsigndocumentDuedate.GetHashCode();
                }
                if (this.SEzsigndocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentName.GetHashCode();
                }
                if (this.SEzsigndocumentExternalid != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentExternalid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigndocumentID (int) minimum
            if (this.PkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzsigndocumentID" });
            }

            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            // FkiEzsigntemplateID (int) minimum
            if (this.FkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateID" });
            }

            // FkiEzsignfoldersignerassociationID (int) minimum
            if (this.FkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SEzsigndocumentExternalid != null) {
                // SEzsigndocumentExternalid (string) pattern
                Regex regexSEzsigndocumentExternalid = new Regex(@"^.{0,64}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigndocumentExternalid.Match(this.SEzsigndocumentExternalid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigndocumentExternalid, must match a pattern of " + regexSEzsigndocumentExternalid, new [] { "SEzsigndocumentExternalid" });
                }
            }

            yield break;
        }
    }

}
