/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /1/object/ezsigntemplate/{pkiEzsigntemplateID}
    /// </summary>
    [DataContract(Name = "ezsigntemplate-getObject-v1-Response-mPayload")]
    public partial class EzsigntemplateGetObjectV1ResponseMPayload : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigntemplateType
        /// </summary>
        [DataMember(Name = "eEzsigntemplateType", EmitDefaultValue = false)]
        public FieldEEzsigntemplateType? EEzsigntemplateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateGetObjectV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateGetObjectV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateGetObjectV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="fkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument.</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="sEzsigntemplateDescription">The description of the Ezsigntemplate (required).</param>
        /// <param name="sEzsigntemplateFilenamepattern">The filename pattern of the Ezsigntemplate.</param>
        /// <param name="bEzsigntemplateAdminonly">Whether the Ezsigntemplate can be accessed by admin users only (eUserType&#x3D;Normal) (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester.</param>
        /// <param name="objAudit">objAudit (required).</param>
        /// <param name="bEzsigntemplateEditallowed">Whether the Ezsigntemplate if allowed to edit or not (required).</param>
        /// <param name="eEzsigntemplateType">eEzsigntemplateType.</param>
        /// <param name="objEzsigntemplatedocument">objEzsigntemplatedocument.</param>
        /// <param name="aObjEzsigntemplatesigner">aObjEzsigntemplatesigner (required).</param>
        public EzsigntemplateGetObjectV1ResponseMPayload(int pkiEzsigntemplateID = default(int), int fkiEzsigntemplatedocumentID = default(int), int fkiEzsignfoldertypeID = default(int), int fkiLanguageID = default(int), string sLanguageNameX = default(string), string sEzsigntemplateDescription = default(string), string sEzsigntemplateFilenamepattern = default(string), bool bEzsigntemplateAdminonly = default(bool), string sEzsignfoldertypeNameX = default(string), CommonAudit objAudit = default(CommonAudit), bool bEzsigntemplateEditallowed = default(bool), FieldEEzsigntemplateType? eEzsigntemplateType = default(FieldEEzsigntemplateType?), EzsigntemplatedocumentResponse objEzsigntemplatedocument = default(EzsigntemplatedocumentResponse), List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner = default(List<EzsigntemplatesignerResponseCompound>))
        {
            this.PkiEzsigntemplateID = pkiEzsigntemplateID;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sLanguageNameX" is required (not null)
            if (sLanguageNameX == null)
            {
                throw new ArgumentNullException("sLanguageNameX is a required property for EzsigntemplateGetObjectV1ResponseMPayload and cannot be null");
            }
            this.SLanguageNameX = sLanguageNameX;
            // to ensure "sEzsigntemplateDescription" is required (not null)
            if (sEzsigntemplateDescription == null)
            {
                throw new ArgumentNullException("sEzsigntemplateDescription is a required property for EzsigntemplateGetObjectV1ResponseMPayload and cannot be null");
            }
            this.SEzsigntemplateDescription = sEzsigntemplateDescription;
            this.BEzsigntemplateAdminonly = bEzsigntemplateAdminonly;
            // to ensure "objAudit" is required (not null)
            if (objAudit == null)
            {
                throw new ArgumentNullException("objAudit is a required property for EzsigntemplateGetObjectV1ResponseMPayload and cannot be null");
            }
            this.ObjAudit = objAudit;
            this.BEzsigntemplateEditallowed = bEzsigntemplateEditallowed;
            // to ensure "aObjEzsigntemplatesigner" is required (not null)
            if (aObjEzsigntemplatesigner == null)
            {
                throw new ArgumentNullException("aObjEzsigntemplatesigner is a required property for EzsigntemplateGetObjectV1ResponseMPayload and cannot be null");
            }
            this.AObjEzsigntemplatesigner = aObjEzsigntemplatesigner;
            this.FkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
            this.FkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
            this.SEzsigntemplateFilenamepattern = sEzsigntemplateFilenamepattern;
            this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
            this.EEzsigntemplateType = eEzsigntemplateType;
            this.ObjEzsigntemplatedocument = objEzsigntemplatedocument;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        /* <example>36</example>*/
        [DataMember(Name = "pkiEzsigntemplateID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
        /* <example>133</example>*/
        [DataMember(Name = "fkiEzsigntemplatedocumentID", EmitDefaultValue = false)]
        public int FkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", EmitDefaultValue = false)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        /* <example>English</example>*/
        [DataMember(Name = "sLanguageNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplate
        /// </summary>
        /// <value>The description of the Ezsigntemplate</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzsigntemplateDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplateDescription { get; set; }

        /// <summary>
        /// The filename pattern of the Ezsigntemplate
        /// </summary>
        /// <value>The filename pattern of the Ezsigntemplate</value>
        /* <example>Contract</example>*/
        [DataMember(Name = "sEzsigntemplateFilenamepattern", EmitDefaultValue = false)]
        public string SEzsigntemplateFilenamepattern { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplate can be accessed by admin users only (eUserType&#x3D;Normal)
        /// </summary>
        /// <value>Whether the Ezsigntemplate can be accessed by admin users only (eUserType&#x3D;Normal)</value>
        [DataMember(Name = "bEzsigntemplateAdminonly", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplateAdminonly { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", EmitDefaultValue = false)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", IsRequired = true, EmitDefaultValue = true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplate if allowed to edit or not
        /// </summary>
        /// <value>Whether the Ezsigntemplate if allowed to edit or not</value>
        [DataMember(Name = "bEzsigntemplateEditallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplateEditallowed { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsigntemplatedocument
        /// </summary>
        [DataMember(Name = "objEzsigntemplatedocument", EmitDefaultValue = false)]
        public EzsigntemplatedocumentResponse ObjEzsigntemplatedocument { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplatesigner
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplatesigner", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsigntemplatesignerResponseCompound> AObjEzsigntemplatesigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateGetObjectV1ResponseMPayload {\n");
            sb.Append("  PkiEzsigntemplateID: ").Append(PkiEzsigntemplateID).Append("\n");
            sb.Append("  FkiEzsigntemplatedocumentID: ").Append(FkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  SEzsigntemplateDescription: ").Append(SEzsigntemplateDescription).Append("\n");
            sb.Append("  SEzsigntemplateFilenamepattern: ").Append(SEzsigntemplateFilenamepattern).Append("\n");
            sb.Append("  BEzsigntemplateAdminonly: ").Append(BEzsigntemplateAdminonly).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  BEzsigntemplateEditallowed: ").Append(BEzsigntemplateEditallowed).Append("\n");
            sb.Append("  EEzsigntemplateType: ").Append(EEzsigntemplateType).Append("\n");
            sb.Append("  ObjEzsigntemplatedocument: ").Append(ObjEzsigntemplatedocument).Append("\n");
            sb.Append("  AObjEzsigntemplatesigner: ").Append(AObjEzsigntemplatesigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplateID (int) minimum
            if (this.PkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateID" });
            }

            // FkiEzsigntemplatedocumentID (int) minimum
            if (this.FkiEzsigntemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatedocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatedocumentID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SEzsigntemplateFilenamepattern != null) {
                // SEzsigntemplateFilenamepattern (string) pattern
                Regex regexSEzsigntemplateFilenamepattern = new Regex(@"^.{1,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplateFilenamepattern.Match(this.SEzsigntemplateFilenamepattern).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateFilenamepattern, must match a pattern of " + regexSEzsigntemplateFilenamepattern, new [] { "SEzsigntemplateFilenamepattern" });
                }
            }

            yield break;
        }
    }

}
