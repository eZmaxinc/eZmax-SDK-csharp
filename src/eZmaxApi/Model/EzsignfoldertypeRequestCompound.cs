/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignfoldertype Object and children
    /// </summary>
    [DataContract]
    public partial class EzsignfoldertypeRequestCompound :  IEquatable<EzsignfoldertypeRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldertypeRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="objEzsignfoldertypeName">objEzsignfoldertypeName (required).</param>
        /// <param name="fkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal..</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup.</param>
        /// <param name="fkiUsergroupIDRestricted">The unique ID of the Usergroup.</param>
        /// <param name="fkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="sEmailAddressSigned">The email address..</param>
        /// <param name="sEmailAddressSummary">The email address..</param>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="eEzsignfoldertypeSendreminderfrequency">eEzsignfoldertypeSendreminderfrequency.</param>
        /// <param name="iEzsignfoldertypeArchivaldays">The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype (required).</param>
        /// <param name="eEzsignfoldertypeDisposal">eEzsignfoldertypeDisposal (required).</param>
        /// <param name="iEzsignfoldertypeDisposaldays">The number of days after the archival before the disposal of the Ezsignfolder.</param>
        /// <param name="iEzsignfoldertypeDeadlinedays">The number of days to get all Ezsignsignatures (required).</param>
        /// <param name="bEzsignfoldertypeSendattatchmentsigner">Whether we send the Ezsigndocument and the proof as attachment in the email (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtodocumentowner">Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtofolderowner">Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtofullgroup">Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsignedtolimitedgroup">Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsignedtocolleague">Whether we send the signed Ezsigndocument to the colleagues (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytodocumentowner">Whether we send the summary to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytofolderowner">Whether we send the summary to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytofullgroup">Whether we send the summary to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsummarytolimitedgroup">Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsummarytocolleague">Whether we send the summary to the colleagues (required).</param>
        /// <param name="bEzsignfoldertypeIsactive">Whether the Ezsignfoldertype is active or not (required).</param>
        /// <param name="aFkiUserIDSigned">aFkiUserIDSigned.</param>
        /// <param name="aFkiUserIDSummary">aFkiUserIDSummary.</param>
        public EzsignfoldertypeRequestCompound(int pkiEzsignfoldertypeID = default(int), MultilingualEzsignfoldertypeName objEzsignfoldertypeName = default(MultilingualEzsignfoldertypeName), int fkiBrandingID = default(int), int fkiBillingentityinternalID = default(int), int fkiUsergroupID = default(int), int fkiUsergroupIDRestricted = default(int), int fkiEzsigntsarequirementID = default(int), string sEmailAddressSigned = default(string), string sEmailAddressSummary = default(string), FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), FieldEEzsignfoldertypeSendreminderfrequency eEzsignfoldertypeSendreminderfrequency = default(FieldEEzsignfoldertypeSendreminderfrequency), int iEzsignfoldertypeArchivaldays = default(int), FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal = default(FieldEEzsignfoldertypeDisposal), int iEzsignfoldertypeDisposaldays = default(int), int iEzsignfoldertypeDeadlinedays = default(int), bool bEzsignfoldertypeSendattatchmentsigner = default(bool), bool bEzsignfoldertypeSendsignedtodocumentowner = default(bool), bool bEzsignfoldertypeSendsignedtofolderowner = default(bool), bool bEzsignfoldertypeSendsignedtofullgroup = default(bool), bool bEzsignfoldertypeSendsignedtolimitedgroup = default(bool), bool bEzsignfoldertypeSendsignedtocolleague = default(bool), bool bEzsignfoldertypeSendsummarytodocumentowner = default(bool), bool bEzsignfoldertypeSendsummarytofolderowner = default(bool), bool bEzsignfoldertypeSendsummarytofullgroup = default(bool), bool bEzsignfoldertypeSendsummarytolimitedgroup = default(bool), bool bEzsignfoldertypeSendsummarytocolleague = default(bool), bool bEzsignfoldertypeIsactive = default(bool), List<int> aFkiUserIDSigned = default(List<int>), List<int> aFkiUserIDSummary = default(List<int>))
        {
            // to ensure "objEzsignfoldertypeName" is required (not null)
            if (objEzsignfoldertypeName == null)
            {
                throw new InvalidDataException("objEzsignfoldertypeName is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.ObjEzsignfoldertypeName = objEzsignfoldertypeName;
            }

            // to ensure "fkiBrandingID" is required (not null)
            if (fkiBrandingID == null)
            {
                throw new InvalidDataException("fkiBrandingID is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.FkiBrandingID = fkiBrandingID;
            }

            // to ensure "eEzsignfoldertypePrivacylevel" is required (not null)
            if (eEzsignfoldertypePrivacylevel == null)
            {
                throw new InvalidDataException("eEzsignfoldertypePrivacylevel is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            }

            // to ensure "iEzsignfoldertypeArchivaldays" is required (not null)
            if (iEzsignfoldertypeArchivaldays == null)
            {
                throw new InvalidDataException("iEzsignfoldertypeArchivaldays is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.IEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays;
            }

            // to ensure "eEzsignfoldertypeDisposal" is required (not null)
            if (eEzsignfoldertypeDisposal == null)
            {
                throw new InvalidDataException("eEzsignfoldertypeDisposal is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.EEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal;
            }

            // to ensure "iEzsignfoldertypeDeadlinedays" is required (not null)
            if (iEzsignfoldertypeDeadlinedays == null)
            {
                throw new InvalidDataException("iEzsignfoldertypeDeadlinedays is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.IEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays;
            }

            // to ensure "bEzsignfoldertypeSendattatchmentsigner" is required (not null)
            if (bEzsignfoldertypeSendattatchmentsigner == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendattatchmentsigner is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendattatchmentsigner = bEzsignfoldertypeSendattatchmentsigner;
            }

            // to ensure "bEzsignfoldertypeSendsignedtodocumentowner" is required (not null)
            if (bEzsignfoldertypeSendsignedtodocumentowner == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendsignedtodocumentowner is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner;
            }

            // to ensure "bEzsignfoldertypeSendsignedtofolderowner" is required (not null)
            if (bEzsignfoldertypeSendsignedtofolderowner == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendsignedtofolderowner is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner;
            }

            // to ensure "bEzsignfoldertypeSendsignedtocolleague" is required (not null)
            if (bEzsignfoldertypeSendsignedtocolleague == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendsignedtocolleague is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague;
            }

            // to ensure "bEzsignfoldertypeSendsummarytodocumentowner" is required (not null)
            if (bEzsignfoldertypeSendsummarytodocumentowner == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendsummarytodocumentowner is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner;
            }

            // to ensure "bEzsignfoldertypeSendsummarytofolderowner" is required (not null)
            if (bEzsignfoldertypeSendsummarytofolderowner == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendsummarytofolderowner is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner;
            }

            // to ensure "bEzsignfoldertypeSendsummarytocolleague" is required (not null)
            if (bEzsignfoldertypeSendsummarytocolleague == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeSendsummarytocolleague is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague;
            }

            // to ensure "bEzsignfoldertypeIsactive" is required (not null)
            if (bEzsignfoldertypeIsactive == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeIsactive is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
            }

            this.PkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
            this.FkiBillingentityinternalID = fkiBillingentityinternalID;
            this.FkiUsergroupID = fkiUsergroupID;
            this.FkiUsergroupIDRestricted = fkiUsergroupIDRestricted;
            this.FkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
            this.SEmailAddressSigned = sEmailAddressSigned;
            this.SEmailAddressSummary = sEmailAddressSummary;
            this.EEzsignfoldertypeSendreminderfrequency = eEzsignfoldertypeSendreminderfrequency;
            this.IEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays;
            this.BEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup;
            this.BEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup;
            this.BEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup;
            this.BEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup;
            this.AFkiUserIDSigned = aFkiUserIDSigned;
            this.AFkiUserIDSummary = aFkiUserIDSummary;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        [DataMember(Name="pkiEzsignfoldertypeID", EmitDefaultValue=false)]
        public int PkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignfoldertypeName
        /// </summary>
        [DataMember(Name="objEzsignfoldertypeName", EmitDefaultValue=true)]
        public MultilingualEzsignfoldertypeName ObjEzsignfoldertypeName { get; set; }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        [DataMember(Name="fkiBrandingID", EmitDefaultValue=true)]
        public int FkiBrandingID { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        [DataMember(Name="fkiBillingentityinternalID", EmitDefaultValue=false)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        [DataMember(Name="fkiUsergroupID", EmitDefaultValue=false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        [DataMember(Name="fkiUsergroupIDRestricted", EmitDefaultValue=false)]
        public int FkiUsergroupIDRestricted { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        [DataMember(Name="fkiEzsigntsarequirementID", EmitDefaultValue=false)]
        public int FkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddressSigned", EmitDefaultValue=false)]
        public string SEmailAddressSigned { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddressSummary", EmitDefaultValue=false)]
        public string SEmailAddressSummary { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name="eEzsignfoldertypePrivacylevel", EmitDefaultValue=true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeSendreminderfrequency
        /// </summary>
        [DataMember(Name="eEzsignfoldertypeSendreminderfrequency", EmitDefaultValue=false)]
        public FieldEEzsignfoldertypeSendreminderfrequency EEzsignfoldertypeSendreminderfrequency { get; set; }

        /// <summary>
        /// The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
        /// </summary>
        /// <value>The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype</value>
        [DataMember(Name="iEzsignfoldertypeArchivaldays", EmitDefaultValue=true)]
        public int IEzsignfoldertypeArchivaldays { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeDisposal
        /// </summary>
        [DataMember(Name="eEzsignfoldertypeDisposal", EmitDefaultValue=true)]
        public FieldEEzsignfoldertypeDisposal EEzsignfoldertypeDisposal { get; set; }

        /// <summary>
        /// The number of days after the archival before the disposal of the Ezsignfolder
        /// </summary>
        /// <value>The number of days after the archival before the disposal of the Ezsignfolder</value>
        [DataMember(Name="iEzsignfoldertypeDisposaldays", EmitDefaultValue=false)]
        public int IEzsignfoldertypeDisposaldays { get; set; }

        /// <summary>
        /// The number of days to get all Ezsignsignatures
        /// </summary>
        /// <value>The number of days to get all Ezsignsignatures</value>
        [DataMember(Name="iEzsignfoldertypeDeadlinedays", EmitDefaultValue=true)]
        public int IEzsignfoldertypeDeadlinedays { get; set; }

        /// <summary>
        /// Whether we send the Ezsigndocument and the proof as attachment in the email
        /// </summary>
        /// <value>Whether we send the Ezsigndocument and the proof as attachment in the email</value>
        [DataMember(Name="bEzsignfoldertypeSendattatchmentsigner", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendattatchmentsigner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner</value>
        [DataMember(Name="bEzsignfoldertypeSendsignedtodocumentowner", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendsignedtodocumentowner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner</value>
        [DataMember(Name="bEzsignfoldertypeSendsignedtofolderowner", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendsignedtofolderowner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders</value>
        [DataMember(Name="bEzsignfoldertypeSendsignedtofullgroup", EmitDefaultValue=false)]
        public bool BEzsignfoldertypeSendsignedtofullgroup { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders</value>
        [DataMember(Name="bEzsignfoldertypeSendsignedtolimitedgroup", EmitDefaultValue=false)]
        public bool BEzsignfoldertypeSendsignedtolimitedgroup { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the colleagues
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the colleagues</value>
        [DataMember(Name="bEzsignfoldertypeSendsignedtocolleague", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendsignedtocolleague { get; set; }

        /// <summary>
        /// Whether we send the summary to the Ezsigndocument&#39;s owner
        /// </summary>
        /// <value>Whether we send the summary to the Ezsigndocument&#39;s owner</value>
        [DataMember(Name="bEzsignfoldertypeSendsummarytodocumentowner", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendsummarytodocumentowner { get; set; }

        /// <summary>
        /// Whether we send the summary to the Ezsignfolder&#39;s owner
        /// </summary>
        /// <value>Whether we send the summary to the Ezsignfolder&#39;s owner</value>
        [DataMember(Name="bEzsignfoldertypeSendsummarytofolderowner", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendsummarytofolderowner { get; set; }

        /// <summary>
        /// Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
        /// </summary>
        /// <value>Whether we send the summary to the Usergroup that has acces to all Ezsignfolders</value>
        [DataMember(Name="bEzsignfoldertypeSendsummarytofullgroup", EmitDefaultValue=false)]
        public bool BEzsignfoldertypeSendsummarytofullgroup { get; set; }

        /// <summary>
        /// Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
        /// </summary>
        /// <value>Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders</value>
        [DataMember(Name="bEzsignfoldertypeSendsummarytolimitedgroup", EmitDefaultValue=false)]
        public bool BEzsignfoldertypeSendsummarytolimitedgroup { get; set; }

        /// <summary>
        /// Whether we send the summary to the colleagues
        /// </summary>
        /// <value>Whether we send the summary to the colleagues</value>
        [DataMember(Name="bEzsignfoldertypeSendsummarytocolleague", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeSendsummarytocolleague { get; set; }

        /// <summary>
        /// Whether the Ezsignfoldertype is active or not
        /// </summary>
        /// <value>Whether the Ezsignfoldertype is active or not</value>
        [DataMember(Name="bEzsignfoldertypeIsactive", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeIsactive { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSigned
        /// </summary>
        [DataMember(Name="a_fkiUserIDSigned", EmitDefaultValue=false)]
        public List<int> AFkiUserIDSigned { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSummary
        /// </summary>
        [DataMember(Name="a_fkiUserIDSummary", EmitDefaultValue=false)]
        public List<int> AFkiUserIDSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfoldertypeRequestCompound {\n");
            sb.Append("  PkiEzsignfoldertypeID: ").Append(PkiEzsignfoldertypeID).Append("\n");
            sb.Append("  ObjEzsignfoldertypeName: ").Append(ObjEzsignfoldertypeName).Append("\n");
            sb.Append("  FkiBrandingID: ").Append(FkiBrandingID).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiUsergroupIDRestricted: ").Append(FkiUsergroupIDRestricted).Append("\n");
            sb.Append("  FkiEzsigntsarequirementID: ").Append(FkiEzsigntsarequirementID).Append("\n");
            sb.Append("  SEmailAddressSigned: ").Append(SEmailAddressSigned).Append("\n");
            sb.Append("  SEmailAddressSummary: ").Append(SEmailAddressSummary).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  EEzsignfoldertypeSendreminderfrequency: ").Append(EEzsignfoldertypeSendreminderfrequency).Append("\n");
            sb.Append("  IEzsignfoldertypeArchivaldays: ").Append(IEzsignfoldertypeArchivaldays).Append("\n");
            sb.Append("  EEzsignfoldertypeDisposal: ").Append(EEzsignfoldertypeDisposal).Append("\n");
            sb.Append("  IEzsignfoldertypeDisposaldays: ").Append(IEzsignfoldertypeDisposaldays).Append("\n");
            sb.Append("  IEzsignfoldertypeDeadlinedays: ").Append(IEzsignfoldertypeDeadlinedays).Append("\n");
            sb.Append("  BEzsignfoldertypeSendattatchmentsigner: ").Append(BEzsignfoldertypeSendattatchmentsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtodocumentowner: ").Append(BEzsignfoldertypeSendsignedtodocumentowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtofolderowner: ").Append(BEzsignfoldertypeSendsignedtofolderowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtofullgroup: ").Append(BEzsignfoldertypeSendsignedtofullgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtolimitedgroup: ").Append(BEzsignfoldertypeSendsignedtolimitedgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtocolleague: ").Append(BEzsignfoldertypeSendsignedtocolleague).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytodocumentowner: ").Append(BEzsignfoldertypeSendsummarytodocumentowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytofolderowner: ").Append(BEzsignfoldertypeSendsummarytofolderowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytofullgroup: ").Append(BEzsignfoldertypeSendsummarytofullgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytolimitedgroup: ").Append(BEzsignfoldertypeSendsummarytolimitedgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytocolleague: ").Append(BEzsignfoldertypeSendsummarytocolleague).Append("\n");
            sb.Append("  BEzsignfoldertypeIsactive: ").Append(BEzsignfoldertypeIsactive).Append("\n");
            sb.Append("  AFkiUserIDSigned: ").Append(AFkiUserIDSigned).Append("\n");
            sb.Append("  AFkiUserIDSummary: ").Append(AFkiUserIDSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfoldertypeRequestCompound);
        }

        /// <summary>
        /// Returns true if EzsignfoldertypeRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfoldertypeRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfoldertypeRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignfoldertypeID == input.PkiEzsignfoldertypeID ||
                    (this.PkiEzsignfoldertypeID != null &&
                    this.PkiEzsignfoldertypeID.Equals(input.PkiEzsignfoldertypeID))
                ) && 
                (
                    this.ObjEzsignfoldertypeName == input.ObjEzsignfoldertypeName ||
                    (this.ObjEzsignfoldertypeName != null &&
                    this.ObjEzsignfoldertypeName.Equals(input.ObjEzsignfoldertypeName))
                ) && 
                (
                    this.FkiBrandingID == input.FkiBrandingID ||
                    (this.FkiBrandingID != null &&
                    this.FkiBrandingID.Equals(input.FkiBrandingID))
                ) && 
                (
                    this.FkiBillingentityinternalID == input.FkiBillingentityinternalID ||
                    (this.FkiBillingentityinternalID != null &&
                    this.FkiBillingentityinternalID.Equals(input.FkiBillingentityinternalID))
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    (this.FkiUsergroupID != null &&
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID))
                ) && 
                (
                    this.FkiUsergroupIDRestricted == input.FkiUsergroupIDRestricted ||
                    (this.FkiUsergroupIDRestricted != null &&
                    this.FkiUsergroupIDRestricted.Equals(input.FkiUsergroupIDRestricted))
                ) && 
                (
                    this.FkiEzsigntsarequirementID == input.FkiEzsigntsarequirementID ||
                    (this.FkiEzsigntsarequirementID != null &&
                    this.FkiEzsigntsarequirementID.Equals(input.FkiEzsigntsarequirementID))
                ) && 
                (
                    this.SEmailAddressSigned == input.SEmailAddressSigned ||
                    (this.SEmailAddressSigned != null &&
                    this.SEmailAddressSigned.Equals(input.SEmailAddressSigned))
                ) && 
                (
                    this.SEmailAddressSummary == input.SEmailAddressSummary ||
                    (this.SEmailAddressSummary != null &&
                    this.SEmailAddressSummary.Equals(input.SEmailAddressSummary))
                ) && 
                (
                    this.EEzsignfoldertypePrivacylevel == input.EEzsignfoldertypePrivacylevel ||
                    (this.EEzsignfoldertypePrivacylevel != null &&
                    this.EEzsignfoldertypePrivacylevel.Equals(input.EEzsignfoldertypePrivacylevel))
                ) && 
                (
                    this.EEzsignfoldertypeSendreminderfrequency == input.EEzsignfoldertypeSendreminderfrequency ||
                    (this.EEzsignfoldertypeSendreminderfrequency != null &&
                    this.EEzsignfoldertypeSendreminderfrequency.Equals(input.EEzsignfoldertypeSendreminderfrequency))
                ) && 
                (
                    this.IEzsignfoldertypeArchivaldays == input.IEzsignfoldertypeArchivaldays ||
                    (this.IEzsignfoldertypeArchivaldays != null &&
                    this.IEzsignfoldertypeArchivaldays.Equals(input.IEzsignfoldertypeArchivaldays))
                ) && 
                (
                    this.EEzsignfoldertypeDisposal == input.EEzsignfoldertypeDisposal ||
                    (this.EEzsignfoldertypeDisposal != null &&
                    this.EEzsignfoldertypeDisposal.Equals(input.EEzsignfoldertypeDisposal))
                ) && 
                (
                    this.IEzsignfoldertypeDisposaldays == input.IEzsignfoldertypeDisposaldays ||
                    (this.IEzsignfoldertypeDisposaldays != null &&
                    this.IEzsignfoldertypeDisposaldays.Equals(input.IEzsignfoldertypeDisposaldays))
                ) && 
                (
                    this.IEzsignfoldertypeDeadlinedays == input.IEzsignfoldertypeDeadlinedays ||
                    (this.IEzsignfoldertypeDeadlinedays != null &&
                    this.IEzsignfoldertypeDeadlinedays.Equals(input.IEzsignfoldertypeDeadlinedays))
                ) && 
                (
                    this.BEzsignfoldertypeSendattatchmentsigner == input.BEzsignfoldertypeSendattatchmentsigner ||
                    (this.BEzsignfoldertypeSendattatchmentsigner != null &&
                    this.BEzsignfoldertypeSendattatchmentsigner.Equals(input.BEzsignfoldertypeSendattatchmentsigner))
                ) && 
                (
                    this.BEzsignfoldertypeSendsignedtodocumentowner == input.BEzsignfoldertypeSendsignedtodocumentowner ||
                    (this.BEzsignfoldertypeSendsignedtodocumentowner != null &&
                    this.BEzsignfoldertypeSendsignedtodocumentowner.Equals(input.BEzsignfoldertypeSendsignedtodocumentowner))
                ) && 
                (
                    this.BEzsignfoldertypeSendsignedtofolderowner == input.BEzsignfoldertypeSendsignedtofolderowner ||
                    (this.BEzsignfoldertypeSendsignedtofolderowner != null &&
                    this.BEzsignfoldertypeSendsignedtofolderowner.Equals(input.BEzsignfoldertypeSendsignedtofolderowner))
                ) && 
                (
                    this.BEzsignfoldertypeSendsignedtofullgroup == input.BEzsignfoldertypeSendsignedtofullgroup ||
                    (this.BEzsignfoldertypeSendsignedtofullgroup != null &&
                    this.BEzsignfoldertypeSendsignedtofullgroup.Equals(input.BEzsignfoldertypeSendsignedtofullgroup))
                ) && 
                (
                    this.BEzsignfoldertypeSendsignedtolimitedgroup == input.BEzsignfoldertypeSendsignedtolimitedgroup ||
                    (this.BEzsignfoldertypeSendsignedtolimitedgroup != null &&
                    this.BEzsignfoldertypeSendsignedtolimitedgroup.Equals(input.BEzsignfoldertypeSendsignedtolimitedgroup))
                ) && 
                (
                    this.BEzsignfoldertypeSendsignedtocolleague == input.BEzsignfoldertypeSendsignedtocolleague ||
                    (this.BEzsignfoldertypeSendsignedtocolleague != null &&
                    this.BEzsignfoldertypeSendsignedtocolleague.Equals(input.BEzsignfoldertypeSendsignedtocolleague))
                ) && 
                (
                    this.BEzsignfoldertypeSendsummarytodocumentowner == input.BEzsignfoldertypeSendsummarytodocumentowner ||
                    (this.BEzsignfoldertypeSendsummarytodocumentowner != null &&
                    this.BEzsignfoldertypeSendsummarytodocumentowner.Equals(input.BEzsignfoldertypeSendsummarytodocumentowner))
                ) && 
                (
                    this.BEzsignfoldertypeSendsummarytofolderowner == input.BEzsignfoldertypeSendsummarytofolderowner ||
                    (this.BEzsignfoldertypeSendsummarytofolderowner != null &&
                    this.BEzsignfoldertypeSendsummarytofolderowner.Equals(input.BEzsignfoldertypeSendsummarytofolderowner))
                ) && 
                (
                    this.BEzsignfoldertypeSendsummarytofullgroup == input.BEzsignfoldertypeSendsummarytofullgroup ||
                    (this.BEzsignfoldertypeSendsummarytofullgroup != null &&
                    this.BEzsignfoldertypeSendsummarytofullgroup.Equals(input.BEzsignfoldertypeSendsummarytofullgroup))
                ) && 
                (
                    this.BEzsignfoldertypeSendsummarytolimitedgroup == input.BEzsignfoldertypeSendsummarytolimitedgroup ||
                    (this.BEzsignfoldertypeSendsummarytolimitedgroup != null &&
                    this.BEzsignfoldertypeSendsummarytolimitedgroup.Equals(input.BEzsignfoldertypeSendsummarytolimitedgroup))
                ) && 
                (
                    this.BEzsignfoldertypeSendsummarytocolleague == input.BEzsignfoldertypeSendsummarytocolleague ||
                    (this.BEzsignfoldertypeSendsummarytocolleague != null &&
                    this.BEzsignfoldertypeSendsummarytocolleague.Equals(input.BEzsignfoldertypeSendsummarytocolleague))
                ) && 
                (
                    this.BEzsignfoldertypeIsactive == input.BEzsignfoldertypeIsactive ||
                    (this.BEzsignfoldertypeIsactive != null &&
                    this.BEzsignfoldertypeIsactive.Equals(input.BEzsignfoldertypeIsactive))
                ) && 
                (
                    this.AFkiUserIDSigned == input.AFkiUserIDSigned ||
                    this.AFkiUserIDSigned != null &&
                    input.AFkiUserIDSigned != null &&
                    this.AFkiUserIDSigned.SequenceEqual(input.AFkiUserIDSigned)
                ) && 
                (
                    this.AFkiUserIDSummary == input.AFkiUserIDSummary ||
                    this.AFkiUserIDSummary != null &&
                    input.AFkiUserIDSummary != null &&
                    this.AFkiUserIDSummary.SequenceEqual(input.AFkiUserIDSummary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignfoldertypeID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignfoldertypeID.GetHashCode();
                if (this.ObjEzsignfoldertypeName != null)
                    hashCode = hashCode * 59 + this.ObjEzsignfoldertypeName.GetHashCode();
                if (this.FkiBrandingID != null)
                    hashCode = hashCode * 59 + this.FkiBrandingID.GetHashCode();
                if (this.FkiBillingentityinternalID != null)
                    hashCode = hashCode * 59 + this.FkiBillingentityinternalID.GetHashCode();
                if (this.FkiUsergroupID != null)
                    hashCode = hashCode * 59 + this.FkiUsergroupID.GetHashCode();
                if (this.FkiUsergroupIDRestricted != null)
                    hashCode = hashCode * 59 + this.FkiUsergroupIDRestricted.GetHashCode();
                if (this.FkiEzsigntsarequirementID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntsarequirementID.GetHashCode();
                if (this.SEmailAddressSigned != null)
                    hashCode = hashCode * 59 + this.SEmailAddressSigned.GetHashCode();
                if (this.SEmailAddressSummary != null)
                    hashCode = hashCode * 59 + this.SEmailAddressSummary.GetHashCode();
                if (this.EEzsignfoldertypePrivacylevel != null)
                    hashCode = hashCode * 59 + this.EEzsignfoldertypePrivacylevel.GetHashCode();
                if (this.EEzsignfoldertypeSendreminderfrequency != null)
                    hashCode = hashCode * 59 + this.EEzsignfoldertypeSendreminderfrequency.GetHashCode();
                if (this.IEzsignfoldertypeArchivaldays != null)
                    hashCode = hashCode * 59 + this.IEzsignfoldertypeArchivaldays.GetHashCode();
                if (this.EEzsignfoldertypeDisposal != null)
                    hashCode = hashCode * 59 + this.EEzsignfoldertypeDisposal.GetHashCode();
                if (this.IEzsignfoldertypeDisposaldays != null)
                    hashCode = hashCode * 59 + this.IEzsignfoldertypeDisposaldays.GetHashCode();
                if (this.IEzsignfoldertypeDeadlinedays != null)
                    hashCode = hashCode * 59 + this.IEzsignfoldertypeDeadlinedays.GetHashCode();
                if (this.BEzsignfoldertypeSendattatchmentsigner != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendattatchmentsigner.GetHashCode();
                if (this.BEzsignfoldertypeSendsignedtodocumentowner != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsignedtodocumentowner.GetHashCode();
                if (this.BEzsignfoldertypeSendsignedtofolderowner != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsignedtofolderowner.GetHashCode();
                if (this.BEzsignfoldertypeSendsignedtofullgroup != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsignedtofullgroup.GetHashCode();
                if (this.BEzsignfoldertypeSendsignedtolimitedgroup != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsignedtolimitedgroup.GetHashCode();
                if (this.BEzsignfoldertypeSendsignedtocolleague != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsignedtocolleague.GetHashCode();
                if (this.BEzsignfoldertypeSendsummarytodocumentowner != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsummarytodocumentowner.GetHashCode();
                if (this.BEzsignfoldertypeSendsummarytofolderowner != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsummarytofolderowner.GetHashCode();
                if (this.BEzsignfoldertypeSendsummarytofullgroup != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsummarytofullgroup.GetHashCode();
                if (this.BEzsignfoldertypeSendsummarytolimitedgroup != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsummarytolimitedgroup.GetHashCode();
                if (this.BEzsignfoldertypeSendsummarytocolleague != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeSendsummarytocolleague.GetHashCode();
                if (this.BEzsignfoldertypeIsactive != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeIsactive.GetHashCode();
                if (this.AFkiUserIDSigned != null)
                    hashCode = hashCode * 59 + this.AFkiUserIDSigned.GetHashCode();
                if (this.AFkiUserIDSummary != null)
                    hashCode = hashCode * 59 + this.AFkiUserIDSummary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsignfoldertypeID (int) minimum
            if(this.PkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldertypeID" });
            }



            // FkiBrandingID (int) minimum
            if(this.FkiBrandingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBrandingID, must be a value greater than or equal to 0.", new [] { "FkiBrandingID" });
            }



            // FkiBillingentityinternalID (int) minimum
            if(this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }



            // FkiUsergroupID (int) minimum
            if(this.FkiUsergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value greater than or equal to 0.", new [] { "FkiUsergroupID" });
            }



            // FkiUsergroupIDRestricted (int) minimum
            if(this.FkiUsergroupIDRestricted < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupIDRestricted, must be a value greater than or equal to 0.", new [] { "FkiUsergroupIDRestricted" });
            }



            // FkiEzsigntsarequirementID (int) maximum
            if(this.FkiEzsigntsarequirementID > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiEzsigntsarequirementID (int) minimum
            if(this.FkiEzsigntsarequirementID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "FkiEzsigntsarequirementID" });
            }



            // IEzsignfoldertypeArchivaldays (int) maximum
            if(this.IEzsignfoldertypeArchivaldays > (int)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeArchivaldays, must be a value less than or equal to 180.", new [] { "IEzsignfoldertypeArchivaldays" });
            }

            // IEzsignfoldertypeArchivaldays (int) minimum
            if(this.IEzsignfoldertypeArchivaldays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeArchivaldays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeArchivaldays" });
            }



            // IEzsignfoldertypeDisposaldays (int) maximum
            if(this.IEzsignfoldertypeDisposaldays > (int)9999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDisposaldays, must be a value less than or equal to 9999.", new [] { "IEzsignfoldertypeDisposaldays" });
            }

            // IEzsignfoldertypeDisposaldays (int) minimum
            if(this.IEzsignfoldertypeDisposaldays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDisposaldays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeDisposaldays" });
            }



            // IEzsignfoldertypeDeadlinedays (int) maximum
            if(this.IEzsignfoldertypeDeadlinedays > (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDeadlinedays, must be a value less than or equal to 60.", new [] { "IEzsignfoldertypeDeadlinedays" });
            }

            // IEzsignfoldertypeDeadlinedays (int) minimum
            if(this.IEzsignfoldertypeDeadlinedays < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDeadlinedays, must be a value greater than or equal to 1.", new [] { "IEzsignfoldertypeDeadlinedays" });
            }

            yield break;
        }
    }

}
