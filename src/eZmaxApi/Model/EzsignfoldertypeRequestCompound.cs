/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignfoldertype Object and children
    /// </summary>
    [DataContract(Name = "ezsignfoldertype-RequestCompound")]
    public partial class EzsignfoldertypeRequestCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeSendreminderfrequency
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypeSendreminderfrequency", EmitDefaultValue = false)]
        public FieldEEzsignfoldertypeSendreminderfrequency? EEzsignfoldertypeSendreminderfrequency { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeDisposal
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypeDisposal", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypeDisposal EEzsignfoldertypeDisposal { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldertypeRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="objEzsignfoldertypeName">objEzsignfoldertypeName (required).</param>
        /// <param name="fkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal..</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup.</param>
        /// <param name="fkiUsergroupIDRestricted">The unique ID of the Usergroup.</param>
        /// <param name="fkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="sEmailAddressSigned">The email address..</param>
        /// <param name="sEmailAddressSummary">The email address..</param>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="eEzsignfoldertypeSendreminderfrequency">eEzsignfoldertypeSendreminderfrequency.</param>
        /// <param name="iEzsignfoldertypeArchivaldays">The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype (required).</param>
        /// <param name="eEzsignfoldertypeDisposal">eEzsignfoldertypeDisposal (required).</param>
        /// <param name="iEzsignfoldertypeDisposaldays">The number of days after the archival before the disposal of the Ezsignfolder.</param>
        /// <param name="iEzsignfoldertypeDeadlinedays">The number of days to get all Ezsignsignatures (required).</param>
        /// <param name="bEzsignfoldertypeDelegate">Wheter if delegation of signature is allowed to another user or not.</param>
        /// <param name="bEzsignfoldertypeReassign">Wheter if Reassignment of signature is allowed to another signatory or not.</param>
        /// <param name="bEzsignfoldertypeSendattatchmentsigner">THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email.</param>
        /// <param name="bEzsignfoldertypeSendsignedtoezsignsigner">Whether we send an email to Ezsignsigner  when document is completed.</param>
        /// <param name="bEzsignfoldertypeSendsignedtouser">Whether we send an email to User who signed when document is completed.</param>
        /// <param name="bEzsignfoldertypeSendattachmentezsignsigner">Whether we send the Ezsigndocument in the email to Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeSendproofezsignsigner">Whether we send the proof in the email to Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeSendattachmentuser">Whether we send the Ezsigndocument in the email to User.</param>
        /// <param name="bEzsignfoldertypeSendproofuser">Whether we send the proof in the email to User.</param>
        /// <param name="bEzsignfoldertypeSendproofemail">Whether we send the proof in the email to external recipient.</param>
        /// <param name="bEzsignfoldertypeAllowdownloadattachmentezsignsigner">Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeAllowdownloadproofezsignsigner">Whether we allow the proof to be downloaded by an Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeSendproofreceivealldocument">Whether we send the proof to user and Ezsignsigner who receive all documents..</param>
        /// <param name="bEzsignfoldertypeSendsignedtodocumentowner">Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtofolderowner">Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtofullgroup">Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsignedtolimitedgroup">THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsignedtocolleague">Whether we send the signed Ezsigndocument to the colleagues (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytodocumentowner">Whether we send the summary to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytofolderowner">Whether we send the summary to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytofullgroup">Whether we send the summary to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsummarytolimitedgroup">Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsummarytocolleague">Whether we send the summary to the colleagues (required).</param>
        /// <param name="bEzsignfoldertypeIncludeproofsigner">THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners.</param>
        /// <param name="bEzsignfoldertypeIncludeproofuser">Whether we include the proof with the signed Ezsigndocument for users (required).</param>
        /// <param name="bEzsignfoldertypeIsactive">Whether the Ezsignfoldertype is active or not (required).</param>
        /// <param name="aFkiUserIDSigned">aFkiUserIDSigned.</param>
        /// <param name="aFkiUserIDSummary">aFkiUserIDSummary.</param>
        public EzsignfoldertypeRequestCompound(int pkiEzsignfoldertypeID = default(int), MultilingualEzsignfoldertypeName objEzsignfoldertypeName = default(MultilingualEzsignfoldertypeName), int fkiBrandingID = default(int), int fkiBillingentityinternalID = default(int), int fkiUsergroupID = default(int), int fkiUsergroupIDRestricted = default(int), int fkiEzsigntsarequirementID = default(int), string sEmailAddressSigned = default(string), string sEmailAddressSummary = default(string), FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), FieldEEzsignfoldertypeSendreminderfrequency? eEzsignfoldertypeSendreminderfrequency = default(FieldEEzsignfoldertypeSendreminderfrequency?), int iEzsignfoldertypeArchivaldays = default(int), FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal = default(FieldEEzsignfoldertypeDisposal), int iEzsignfoldertypeDisposaldays = default(int), int iEzsignfoldertypeDeadlinedays = default(int), bool bEzsignfoldertypeDelegate = default(bool), bool bEzsignfoldertypeReassign = default(bool), bool bEzsignfoldertypeSendattatchmentsigner = default(bool), bool bEzsignfoldertypeSendsignedtoezsignsigner = default(bool), bool bEzsignfoldertypeSendsignedtouser = default(bool), bool bEzsignfoldertypeSendattachmentezsignsigner = default(bool), bool bEzsignfoldertypeSendproofezsignsigner = default(bool), bool bEzsignfoldertypeSendattachmentuser = default(bool), bool bEzsignfoldertypeSendproofuser = default(bool), bool bEzsignfoldertypeSendproofemail = default(bool), bool bEzsignfoldertypeAllowdownloadattachmentezsignsigner = default(bool), bool bEzsignfoldertypeAllowdownloadproofezsignsigner = default(bool), bool bEzsignfoldertypeSendproofreceivealldocument = default(bool), bool bEzsignfoldertypeSendsignedtodocumentowner = default(bool), bool bEzsignfoldertypeSendsignedtofolderowner = default(bool), bool bEzsignfoldertypeSendsignedtofullgroup = default(bool), bool bEzsignfoldertypeSendsignedtolimitedgroup = default(bool), bool bEzsignfoldertypeSendsignedtocolleague = default(bool), bool bEzsignfoldertypeSendsummarytodocumentowner = default(bool), bool bEzsignfoldertypeSendsummarytofolderowner = default(bool), bool bEzsignfoldertypeSendsummarytofullgroup = default(bool), bool bEzsignfoldertypeSendsummarytolimitedgroup = default(bool), bool bEzsignfoldertypeSendsummarytocolleague = default(bool), bool bEzsignfoldertypeIncludeproofsigner = default(bool), bool bEzsignfoldertypeIncludeproofuser = default(bool), bool bEzsignfoldertypeIsactive = default(bool), List<int> aFkiUserIDSigned = default(List<int>), List<int> aFkiUserIDSummary = default(List<int>))
        {
            // to ensure "objEzsignfoldertypeName" is required (not null)
            if (objEzsignfoldertypeName == null)
            {
                throw new ArgumentNullException("objEzsignfoldertypeName is a required property for EzsignfoldertypeRequestCompound and cannot be null");
            }
            this.ObjEzsignfoldertypeName = objEzsignfoldertypeName;
            this.FkiBrandingID = fkiBrandingID;
            this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            this.IEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays;
            this.EEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal;
            this.IEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays;
            this.BEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner;
            this.BEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner;
            this.BEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague;
            this.BEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner;
            this.BEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner;
            this.BEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague;
            this.BEzsignfoldertypeIncludeproofuser = bEzsignfoldertypeIncludeproofuser;
            this.BEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
            this.PkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
            this.FkiBillingentityinternalID = fkiBillingentityinternalID;
            this.FkiUsergroupID = fkiUsergroupID;
            this.FkiUsergroupIDRestricted = fkiUsergroupIDRestricted;
            this.FkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
            this.SEmailAddressSigned = sEmailAddressSigned;
            this.SEmailAddressSummary = sEmailAddressSummary;
            this.EEzsignfoldertypeSendreminderfrequency = eEzsignfoldertypeSendreminderfrequency;
            this.IEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays;
            this.BEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate;
            this.BEzsignfoldertypeReassign = bEzsignfoldertypeReassign;
            this.BEzsignfoldertypeSendattatchmentsigner = bEzsignfoldertypeSendattatchmentsigner;
            this.BEzsignfoldertypeSendsignedtoezsignsigner = bEzsignfoldertypeSendsignedtoezsignsigner;
            this.BEzsignfoldertypeSendsignedtouser = bEzsignfoldertypeSendsignedtouser;
            this.BEzsignfoldertypeSendattachmentezsignsigner = bEzsignfoldertypeSendattachmentezsignsigner;
            this.BEzsignfoldertypeSendproofezsignsigner = bEzsignfoldertypeSendproofezsignsigner;
            this.BEzsignfoldertypeSendattachmentuser = bEzsignfoldertypeSendattachmentuser;
            this.BEzsignfoldertypeSendproofuser = bEzsignfoldertypeSendproofuser;
            this.BEzsignfoldertypeSendproofemail = bEzsignfoldertypeSendproofemail;
            this.BEzsignfoldertypeAllowdownloadattachmentezsignsigner = bEzsignfoldertypeAllowdownloadattachmentezsignsigner;
            this.BEzsignfoldertypeAllowdownloadproofezsignsigner = bEzsignfoldertypeAllowdownloadproofezsignsigner;
            this.BEzsignfoldertypeSendproofreceivealldocument = bEzsignfoldertypeSendproofreceivealldocument;
            this.BEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup;
            this.BEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup;
            this.BEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup;
            this.BEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup;
            this.BEzsignfoldertypeIncludeproofsigner = bEzsignfoldertypeIncludeproofsigner;
            this.AFkiUserIDSigned = aFkiUserIDSigned;
            this.AFkiUserIDSummary = aFkiUserIDSummary;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "pkiEzsignfoldertypeID", EmitDefaultValue = false)]
        public int PkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignfoldertypeName
        /// </summary>
        [DataMember(Name = "objEzsignfoldertypeName", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualEzsignfoldertypeName ObjEzsignfoldertypeName { get; set; }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        /* <example>78</example>*/
        [DataMember(Name = "fkiBrandingID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBrandingID { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiBillingentityinternalID", EmitDefaultValue = false)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUsergroupID", EmitDefaultValue = false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUsergroupIDRestricted", EmitDefaultValue = false)]
        public int FkiUsergroupIDRestricted { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiEzsigntsarequirementID", EmitDefaultValue = false)]
        public int FkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddressSigned", EmitDefaultValue = false)]
        public string SEmailAddressSigned { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddressSummary", EmitDefaultValue = false)]
        public string SEmailAddressSummary { get; set; }

        /// <summary>
        /// The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
        /// </summary>
        /// <value>The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype</value>
        /* <example>30</example>*/
        [DataMember(Name = "iEzsignfoldertypeArchivaldays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfoldertypeArchivaldays { get; set; }

        /// <summary>
        /// The number of days after the archival before the disposal of the Ezsignfolder
        /// </summary>
        /// <value>The number of days after the archival before the disposal of the Ezsignfolder</value>
        /* <example>365</example>*/
        [DataMember(Name = "iEzsignfoldertypeDisposaldays", EmitDefaultValue = false)]
        public int IEzsignfoldertypeDisposaldays { get; set; }

        /// <summary>
        /// The number of days to get all Ezsignsignatures
        /// </summary>
        /// <value>The number of days to get all Ezsignsignatures</value>
        /* <example>5</example>*/
        [DataMember(Name = "iEzsignfoldertypeDeadlinedays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfoldertypeDeadlinedays { get; set; }

        /// <summary>
        /// Wheter if delegation of signature is allowed to another user or not
        /// </summary>
        /// <value>Wheter if delegation of signature is allowed to another user or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeDelegate", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeDelegate { get; set; }

        /// <summary>
        /// Wheter if Reassignment of signature is allowed to another signatory or not
        /// </summary>
        /// <value>Wheter if Reassignment of signature is allowed to another signatory or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeReassign", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeReassign { get; set; }

        /// <summary>
        /// THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email
        /// </summary>
        /// <value>THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendattatchmentsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendattatchmentsigner { get; set; }

        /// <summary>
        /// Whether we send an email to Ezsignsigner  when document is completed
        /// </summary>
        /// <value>Whether we send an email to Ezsignsigner  when document is completed</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtoezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtoezsignsigner { get; set; }

        /// <summary>
        /// Whether we send an email to User who signed when document is completed
        /// </summary>
        /// <value>Whether we send an email to User who signed when document is completed</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtouser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtouser { get; set; }

        /// <summary>
        /// Whether we send the Ezsigndocument in the email to Ezsignsigner
        /// </summary>
        /// <value>Whether we send the Ezsigndocument in the email to Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendattachmentezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendattachmentezsignsigner { get; set; }

        /// <summary>
        /// Whether we send the proof in the email to Ezsignsigner
        /// </summary>
        /// <value>Whether we send the proof in the email to Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofezsignsigner { get; set; }

        /// <summary>
        /// Whether we send the Ezsigndocument in the email to User
        /// </summary>
        /// <value>Whether we send the Ezsigndocument in the email to User</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendattachmentuser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendattachmentuser { get; set; }

        /// <summary>
        /// Whether we send the proof in the email to User
        /// </summary>
        /// <value>Whether we send the proof in the email to User</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofuser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofuser { get; set; }

        /// <summary>
        /// Whether we send the proof in the email to external recipient
        /// </summary>
        /// <value>Whether we send the proof in the email to external recipient</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofemail", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofemail { get; set; }

        /// <summary>
        /// Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
        /// </summary>
        /// <value>Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeAllowdownloadattachmentezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeAllowdownloadattachmentezsignsigner { get; set; }

        /// <summary>
        /// Whether we allow the proof to be downloaded by an Ezsignsigner
        /// </summary>
        /// <value>Whether we allow the proof to be downloaded by an Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeAllowdownloadproofezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeAllowdownloadproofezsignsigner { get; set; }

        /// <summary>
        /// Whether we send the proof to user and Ezsignsigner who receive all documents.
        /// </summary>
        /// <value>Whether we send the proof to user and Ezsignsigner who receive all documents.</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofreceivealldocument", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofreceivealldocument { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtodocumentowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtodocumentowner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtofolderowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtofolderowner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtofullgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtofullgroup { get; set; }

        /// <summary>
        /// THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
        /// </summary>
        /// <value>THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtolimitedgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtolimitedgroup { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the colleagues
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the colleagues</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtocolleague", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtocolleague { get; set; }

        /// <summary>
        /// Whether we send the summary to the Ezsigndocument&#39;s owner
        /// </summary>
        /// <value>Whether we send the summary to the Ezsigndocument&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytodocumentowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytodocumentowner { get; set; }

        /// <summary>
        /// Whether we send the summary to the Ezsignfolder&#39;s owner
        /// </summary>
        /// <value>Whether we send the summary to the Ezsignfolder&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytofolderowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytofolderowner { get; set; }

        /// <summary>
        /// Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
        /// </summary>
        /// <value>Whether we send the summary to the Usergroup that has acces to all Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytofullgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytofullgroup { get; set; }

        /// <summary>
        /// Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
        /// </summary>
        /// <value>Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytolimitedgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytolimitedgroup { get; set; }

        /// <summary>
        /// Whether we send the summary to the colleagues
        /// </summary>
        /// <value>Whether we send the summary to the colleagues</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytocolleague", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytocolleague { get; set; }

        /// <summary>
        /// THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
        /// </summary>
        /// <value>THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeIncludeproofsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeIncludeproofsigner { get; set; }

        /// <summary>
        /// Whether we include the proof with the signed Ezsigndocument for users
        /// </summary>
        /// <value>Whether we include the proof with the signed Ezsigndocument for users</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeIncludeproofuser", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeIncludeproofuser { get; set; }

        /// <summary>
        /// Whether the Ezsignfoldertype is active or not
        /// </summary>
        /// <value>Whether the Ezsignfoldertype is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeIsactive { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSigned
        /// </summary>
        [DataMember(Name = "a_fkiUserIDSigned", EmitDefaultValue = false)]
        public List<int> AFkiUserIDSigned { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSummary
        /// </summary>
        [DataMember(Name = "a_fkiUserIDSummary", EmitDefaultValue = false)]
        public List<int> AFkiUserIDSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfoldertypeRequestCompound {\n");
            sb.Append("  PkiEzsignfoldertypeID: ").Append(PkiEzsignfoldertypeID).Append("\n");
            sb.Append("  ObjEzsignfoldertypeName: ").Append(ObjEzsignfoldertypeName).Append("\n");
            sb.Append("  FkiBrandingID: ").Append(FkiBrandingID).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiUsergroupIDRestricted: ").Append(FkiUsergroupIDRestricted).Append("\n");
            sb.Append("  FkiEzsigntsarequirementID: ").Append(FkiEzsigntsarequirementID).Append("\n");
            sb.Append("  SEmailAddressSigned: ").Append(SEmailAddressSigned).Append("\n");
            sb.Append("  SEmailAddressSummary: ").Append(SEmailAddressSummary).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  EEzsignfoldertypeSendreminderfrequency: ").Append(EEzsignfoldertypeSendreminderfrequency).Append("\n");
            sb.Append("  IEzsignfoldertypeArchivaldays: ").Append(IEzsignfoldertypeArchivaldays).Append("\n");
            sb.Append("  EEzsignfoldertypeDisposal: ").Append(EEzsignfoldertypeDisposal).Append("\n");
            sb.Append("  IEzsignfoldertypeDisposaldays: ").Append(IEzsignfoldertypeDisposaldays).Append("\n");
            sb.Append("  IEzsignfoldertypeDeadlinedays: ").Append(IEzsignfoldertypeDeadlinedays).Append("\n");
            sb.Append("  BEzsignfoldertypeDelegate: ").Append(BEzsignfoldertypeDelegate).Append("\n");
            sb.Append("  BEzsignfoldertypeReassign: ").Append(BEzsignfoldertypeReassign).Append("\n");
            sb.Append("  BEzsignfoldertypeSendattatchmentsigner: ").Append(BEzsignfoldertypeSendattatchmentsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtoezsignsigner: ").Append(BEzsignfoldertypeSendsignedtoezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtouser: ").Append(BEzsignfoldertypeSendsignedtouser).Append("\n");
            sb.Append("  BEzsignfoldertypeSendattachmentezsignsigner: ").Append(BEzsignfoldertypeSendattachmentezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofezsignsigner: ").Append(BEzsignfoldertypeSendproofezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendattachmentuser: ").Append(BEzsignfoldertypeSendattachmentuser).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofuser: ").Append(BEzsignfoldertypeSendproofuser).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofemail: ").Append(BEzsignfoldertypeSendproofemail).Append("\n");
            sb.Append("  BEzsignfoldertypeAllowdownloadattachmentezsignsigner: ").Append(BEzsignfoldertypeAllowdownloadattachmentezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeAllowdownloadproofezsignsigner: ").Append(BEzsignfoldertypeAllowdownloadproofezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofreceivealldocument: ").Append(BEzsignfoldertypeSendproofreceivealldocument).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtodocumentowner: ").Append(BEzsignfoldertypeSendsignedtodocumentowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtofolderowner: ").Append(BEzsignfoldertypeSendsignedtofolderowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtofullgroup: ").Append(BEzsignfoldertypeSendsignedtofullgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtolimitedgroup: ").Append(BEzsignfoldertypeSendsignedtolimitedgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtocolleague: ").Append(BEzsignfoldertypeSendsignedtocolleague).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytodocumentowner: ").Append(BEzsignfoldertypeSendsummarytodocumentowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytofolderowner: ").Append(BEzsignfoldertypeSendsummarytofolderowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytofullgroup: ").Append(BEzsignfoldertypeSendsummarytofullgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytolimitedgroup: ").Append(BEzsignfoldertypeSendsummarytolimitedgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytocolleague: ").Append(BEzsignfoldertypeSendsummarytocolleague).Append("\n");
            sb.Append("  BEzsignfoldertypeIncludeproofsigner: ").Append(BEzsignfoldertypeIncludeproofsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeIncludeproofuser: ").Append(BEzsignfoldertypeIncludeproofuser).Append("\n");
            sb.Append("  BEzsignfoldertypeIsactive: ").Append(BEzsignfoldertypeIsactive).Append("\n");
            sb.Append("  AFkiUserIDSigned: ").Append(AFkiUserIDSigned).Append("\n");
            sb.Append("  AFkiUserIDSummary: ").Append(AFkiUserIDSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfoldertypeID (int) minimum
            if (this.PkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldertypeID" });
            }

            // FkiBrandingID (int) minimum
            if (this.FkiBrandingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBrandingID, must be a value greater than or equal to 0.", new [] { "FkiBrandingID" });
            }

            // FkiBillingentityinternalID (int) minimum
            if (this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }

            // FkiUsergroupID (int) maximum
            if (this.FkiUsergroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value less than or equal to 255.", new [] { "FkiUsergroupID" });
            }

            // FkiUsergroupID (int) minimum
            if (this.FkiUsergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value greater than or equal to 0.", new [] { "FkiUsergroupID" });
            }

            // FkiUsergroupIDRestricted (int) maximum
            if (this.FkiUsergroupIDRestricted > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupIDRestricted, must be a value less than or equal to 255.", new [] { "FkiUsergroupIDRestricted" });
            }

            // FkiUsergroupIDRestricted (int) minimum
            if (this.FkiUsergroupIDRestricted < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupIDRestricted, must be a value greater than or equal to 0.", new [] { "FkiUsergroupIDRestricted" });
            }

            // FkiEzsigntsarequirementID (int) maximum
            if (this.FkiEzsigntsarequirementID > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiEzsigntsarequirementID (int) minimum
            if (this.FkiEzsigntsarequirementID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "FkiEzsigntsarequirementID" });
            }

            // IEzsignfoldertypeArchivaldays (int) maximum
            if (this.IEzsignfoldertypeArchivaldays > (int)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeArchivaldays, must be a value less than or equal to 180.", new [] { "IEzsignfoldertypeArchivaldays" });
            }

            // IEzsignfoldertypeArchivaldays (int) minimum
            if (this.IEzsignfoldertypeArchivaldays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeArchivaldays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeArchivaldays" });
            }

            // IEzsignfoldertypeDisposaldays (int) maximum
            if (this.IEzsignfoldertypeDisposaldays > (int)9999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDisposaldays, must be a value less than or equal to 9999.", new [] { "IEzsignfoldertypeDisposaldays" });
            }

            // IEzsignfoldertypeDisposaldays (int) minimum
            if (this.IEzsignfoldertypeDisposaldays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDisposaldays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeDisposaldays" });
            }

            // IEzsignfoldertypeDeadlinedays (int) maximum
            if (this.IEzsignfoldertypeDeadlinedays > (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDeadlinedays, must be a value less than or equal to 60.", new [] { "IEzsignfoldertypeDeadlinedays" });
            }

            // IEzsignfoldertypeDeadlinedays (int) minimum
            if (this.IEzsignfoldertypeDeadlinedays < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDeadlinedays, must be a value greater than or equal to 1.", new [] { "IEzsignfoldertypeDeadlinedays" });
            }

            yield break;
        }
    }

}
