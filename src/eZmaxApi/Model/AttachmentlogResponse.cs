/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Attachmentlog Object
    /// </summary>
    [DataContract(Name = "attachmentlog-Response")]
    public partial class AttachmentlogResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EAttachmentlogType
        /// </summary>
        [DataMember(Name = "eAttachmentlogType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEAttachmentlogType EAttachmentlogType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentlogResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachmentlogResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentlogResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Attachment. (required).</param>
        /// <param name="">The unique ID of the User (required).</param>
        /// <param name="">The created date (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The additionnal detail.</param>
        public AttachmentlogResponse(int  = default(int), int  = default(int), string  = default(string), FieldEAttachmentlogType  = default(FieldEAttachmentlogType), string  = default(string))
        {
            this.FkiAttachmentID = ;
            this.FkiUserID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for AttachmentlogResponse and cannot be null");
            }
            this.DtAttachmentlogDatetime = ;
            this.EAttachmentlogType = ;
            this.SAttachmentlogDetail = ;
        }

        /// <summary>
        /// The unique ID of the Attachment.
        /// </summary>
        /// <value>The unique ID of the Attachment.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAttachmentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiAttachmentID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The created date
        /// </summary>
        /// <value>The created date</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtAttachmentlogDatetime", IsRequired = true, EmitDefaultValue = true)]
        public string DtAttachmentlogDatetime { get; set; }

        /// <summary>
        /// The additionnal detail
        /// </summary>
        /// <value>The additionnal detail</value>
        /* <example>System</example>*/
        [DataMember(Name = "sAttachmentlogDetail", EmitDefaultValue = false)]
        public string SAttachmentlogDetail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AttachmentlogResponse {\n");
            sb.Append("  FkiAttachmentID: ").Append(FkiAttachmentID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  DtAttachmentlogDatetime: ").Append(DtAttachmentlogDatetime).Append("\n");
            sb.Append("  EAttachmentlogType: ").Append(EAttachmentlogType).Append("\n");
            sb.Append("  SAttachmentlogDetail: ").Append(SAttachmentlogDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiAttachmentID (int) minimum
            if (this.FkiAttachmentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiAttachmentID, must be a value greater than or equal to 0.", new [] { "FkiAttachmentID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            if (this.DtAttachmentlogDatetime != null) {
                // DtAttachmentlogDatetime (string) pattern
                Regex regexDtAttachmentlogDatetime = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtAttachmentlogDatetime.Match(this.DtAttachmentlogDatetime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtAttachmentlogDatetime, must match a pattern of " + regexDtAttachmentlogDatetime, new [] { "DtAttachmentlogDatetime" });
                }
            }

            if (this.SAttachmentlogDetail != null) {
                // SAttachmentlogDetail (string) pattern
                Regex regexSAttachmentlogDetail = new Regex(@"^.{0,75}$", RegexOptions.CultureInvariant);
                if (!regexSAttachmentlogDetail.Match(this.SAttachmentlogDetail).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SAttachmentlogDetail, must match a pattern of " + regexSAttachmentlogDetail, new [] { "SAttachmentlogDetail" });
                }
            }

            yield break;
        }
    }

}
