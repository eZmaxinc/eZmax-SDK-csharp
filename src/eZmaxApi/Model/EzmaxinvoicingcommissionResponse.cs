/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxinvoicingcommission Object
    /// </summary>
    [DataContract(Name = "ezmaxinvoicingcommission-Response")]
    public partial class EzmaxinvoicingcommissionResponse : IEquatable<EzmaxinvoicingcommissionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingcommissionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxinvoicingcommissionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingcommissionResponse" /> class.
        /// </summary>
        /// <param name="pkiEzmaxinvoicingcommissionID">The unique ID of the Ezmaxinvoicingcommission.</param>
        /// <param name="fkiEzmaxinvoicingsummaryglobalID">The unique ID of the Ezmaxinvoicingsummaryglobal.</param>
        /// <param name="fkiEzmaxpartnerID">The unique ID of the Ezmaxpartner.</param>
        /// <param name="fkiEzmaxrepresentativeID">The unique ID of the Ezmaxrepresentative.</param>
        /// <param name="dtEzmaxinvoicingcommissionStart">The start date for the Ezmaxinvoicingcommission (required).</param>
        /// <param name="dtEzmaxinvoicingcommissionEnd">The end date for the Ezmaxinvoicingcommission (required).</param>
        /// <param name="iEzmaxinvoicingcommissionDays">This is the number of days during the month on which the Ezmaxinvoigcommission applies (required).</param>
        /// <param name="dEzmaxinvoicingcommissionAmount">The amount of Ezmaxinvoicingcommission (required).</param>
        public EzmaxinvoicingcommissionResponse(int pkiEzmaxinvoicingcommissionID = default(int), int fkiEzmaxinvoicingsummaryglobalID = default(int), int fkiEzmaxpartnerID = default(int), int fkiEzmaxrepresentativeID = default(int), string dtEzmaxinvoicingcommissionStart = default(string), string dtEzmaxinvoicingcommissionEnd = default(string), int iEzmaxinvoicingcommissionDays = default(int), string dEzmaxinvoicingcommissionAmount = default(string))
        {
            // to ensure "dtEzmaxinvoicingcommissionStart" is required (not null)
            if (dtEzmaxinvoicingcommissionStart == null)
            {
                throw new ArgumentNullException("dtEzmaxinvoicingcommissionStart is a required property for EzmaxinvoicingcommissionResponse and cannot be null");
            }
            this.DtEzmaxinvoicingcommissionStart = dtEzmaxinvoicingcommissionStart;
            // to ensure "dtEzmaxinvoicingcommissionEnd" is required (not null)
            if (dtEzmaxinvoicingcommissionEnd == null)
            {
                throw new ArgumentNullException("dtEzmaxinvoicingcommissionEnd is a required property for EzmaxinvoicingcommissionResponse and cannot be null");
            }
            this.DtEzmaxinvoicingcommissionEnd = dtEzmaxinvoicingcommissionEnd;
            this.IEzmaxinvoicingcommissionDays = iEzmaxinvoicingcommissionDays;
            // to ensure "dEzmaxinvoicingcommissionAmount" is required (not null)
            if (dEzmaxinvoicingcommissionAmount == null)
            {
                throw new ArgumentNullException("dEzmaxinvoicingcommissionAmount is a required property for EzmaxinvoicingcommissionResponse and cannot be null");
            }
            this.DEzmaxinvoicingcommissionAmount = dEzmaxinvoicingcommissionAmount;
            this.PkiEzmaxinvoicingcommissionID = pkiEzmaxinvoicingcommissionID;
            this.FkiEzmaxinvoicingsummaryglobalID = fkiEzmaxinvoicingsummaryglobalID;
            this.FkiEzmaxpartnerID = fkiEzmaxpartnerID;
            this.FkiEzmaxrepresentativeID = fkiEzmaxrepresentativeID;
        }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicingcommission
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicingcommission</value>
		/* <example>36</example>*/
        [DataMember(Name = "pkiEzmaxinvoicingcommissionID", EmitDefaultValue = false)]
        public int PkiEzmaxinvoicingcommissionID { get; set; }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicingsummaryglobal
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicingsummaryglobal</value>
		/* <example>241</example>*/
        [DataMember(Name = "fkiEzmaxinvoicingsummaryglobalID", EmitDefaultValue = false)]
        public int FkiEzmaxinvoicingsummaryglobalID { get; set; }

        /// <summary>
        /// The unique ID of the Ezmaxpartner
        /// </summary>
        /// <value>The unique ID of the Ezmaxpartner</value>
		/* <example>12</example>*/
        [DataMember(Name = "fkiEzmaxpartnerID", EmitDefaultValue = false)]
        public int FkiEzmaxpartnerID { get; set; }

        /// <summary>
        /// The unique ID of the Ezmaxrepresentative
        /// </summary>
        /// <value>The unique ID of the Ezmaxrepresentative</value>
		/* <example>21</example>*/
        [DataMember(Name = "fkiEzmaxrepresentativeID", EmitDefaultValue = false)]
        public int FkiEzmaxrepresentativeID { get; set; }

        /// <summary>
        /// The start date for the Ezmaxinvoicingcommission
        /// </summary>
        /// <value>The start date for the Ezmaxinvoicingcommission</value>
		/* <example>2020-12-31</example>*/
        [DataMember(Name = "dtEzmaxinvoicingcommissionStart", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzmaxinvoicingcommissionStart { get; set; }

        /// <summary>
        /// The end date for the Ezmaxinvoicingcommission
        /// </summary>
        /// <value>The end date for the Ezmaxinvoicingcommission</value>
		/* <example>2020-12-31</example>*/
        [DataMember(Name = "dtEzmaxinvoicingcommissionEnd", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzmaxinvoicingcommissionEnd { get; set; }

        /// <summary>
        /// This is the number of days during the month on which the Ezmaxinvoigcommission applies
        /// </summary>
        /// <value>This is the number of days during the month on which the Ezmaxinvoigcommission applies</value>
		/* <example>30</example>*/
        [DataMember(Name = "iEzmaxinvoicingcommissionDays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzmaxinvoicingcommissionDays { get; set; }

        /// <summary>
        /// The amount of Ezmaxinvoicingcommission
        /// </summary>
        /// <value>The amount of Ezmaxinvoicingcommission</value>
		/* <example>450.34</example>*/
        [DataMember(Name = "dEzmaxinvoicingcommissionAmount", IsRequired = true, EmitDefaultValue = true)]
        public string DEzmaxinvoicingcommissionAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzmaxinvoicingcommissionResponse {\n");
            sb.Append("  PkiEzmaxinvoicingcommissionID: ").Append(PkiEzmaxinvoicingcommissionID).Append("\n");
            sb.Append("  FkiEzmaxinvoicingsummaryglobalID: ").Append(FkiEzmaxinvoicingsummaryglobalID).Append("\n");
            sb.Append("  FkiEzmaxpartnerID: ").Append(FkiEzmaxpartnerID).Append("\n");
            sb.Append("  FkiEzmaxrepresentativeID: ").Append(FkiEzmaxrepresentativeID).Append("\n");
            sb.Append("  DtEzmaxinvoicingcommissionStart: ").Append(DtEzmaxinvoicingcommissionStart).Append("\n");
            sb.Append("  DtEzmaxinvoicingcommissionEnd: ").Append(DtEzmaxinvoicingcommissionEnd).Append("\n");
            sb.Append("  IEzmaxinvoicingcommissionDays: ").Append(IEzmaxinvoicingcommissionDays).Append("\n");
            sb.Append("  DEzmaxinvoicingcommissionAmount: ").Append(DEzmaxinvoicingcommissionAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzmaxinvoicingcommissionResponse);
        }

        /// <summary>
        /// Returns true if EzmaxinvoicingcommissionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzmaxinvoicingcommissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzmaxinvoicingcommissionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzmaxinvoicingcommissionID == input.PkiEzmaxinvoicingcommissionID ||
                    this.PkiEzmaxinvoicingcommissionID.Equals(input.PkiEzmaxinvoicingcommissionID)
                ) && 
                (
                    this.FkiEzmaxinvoicingsummaryglobalID == input.FkiEzmaxinvoicingsummaryglobalID ||
                    this.FkiEzmaxinvoicingsummaryglobalID.Equals(input.FkiEzmaxinvoicingsummaryglobalID)
                ) && 
                (
                    this.FkiEzmaxpartnerID == input.FkiEzmaxpartnerID ||
                    this.FkiEzmaxpartnerID.Equals(input.FkiEzmaxpartnerID)
                ) && 
                (
                    this.FkiEzmaxrepresentativeID == input.FkiEzmaxrepresentativeID ||
                    this.FkiEzmaxrepresentativeID.Equals(input.FkiEzmaxrepresentativeID)
                ) && 
                (
                    this.DtEzmaxinvoicingcommissionStart == input.DtEzmaxinvoicingcommissionStart ||
                    (this.DtEzmaxinvoicingcommissionStart != null &&
                    this.DtEzmaxinvoicingcommissionStart.Equals(input.DtEzmaxinvoicingcommissionStart))
                ) && 
                (
                    this.DtEzmaxinvoicingcommissionEnd == input.DtEzmaxinvoicingcommissionEnd ||
                    (this.DtEzmaxinvoicingcommissionEnd != null &&
                    this.DtEzmaxinvoicingcommissionEnd.Equals(input.DtEzmaxinvoicingcommissionEnd))
                ) && 
                (
                    this.IEzmaxinvoicingcommissionDays == input.IEzmaxinvoicingcommissionDays ||
                    this.IEzmaxinvoicingcommissionDays.Equals(input.IEzmaxinvoicingcommissionDays)
                ) && 
                (
                    this.DEzmaxinvoicingcommissionAmount == input.DEzmaxinvoicingcommissionAmount ||
                    (this.DEzmaxinvoicingcommissionAmount != null &&
                    this.DEzmaxinvoicingcommissionAmount.Equals(input.DEzmaxinvoicingcommissionAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzmaxinvoicingcommissionID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzmaxinvoicingsummaryglobalID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzmaxpartnerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzmaxrepresentativeID.GetHashCode();
                if (this.DtEzmaxinvoicingcommissionStart != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzmaxinvoicingcommissionStart.GetHashCode();
                }
                if (this.DtEzmaxinvoicingcommissionEnd != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzmaxinvoicingcommissionEnd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IEzmaxinvoicingcommissionDays.GetHashCode();
                if (this.DEzmaxinvoicingcommissionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DEzmaxinvoicingcommissionAmount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiEzmaxinvoicingsummaryglobalID (int) minimum
            if (this.FkiEzmaxinvoicingsummaryglobalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzmaxinvoicingsummaryglobalID, must be a value greater than or equal to 0.", new [] { "FkiEzmaxinvoicingsummaryglobalID" });
            }

            // FkiEzmaxpartnerID (int) minimum
            if (this.FkiEzmaxpartnerID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzmaxpartnerID, must be a value greater than or equal to 1.", new [] { "FkiEzmaxpartnerID" });
            }

            // FkiEzmaxrepresentativeID (int) minimum
            if (this.FkiEzmaxrepresentativeID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzmaxrepresentativeID, must be a value greater than or equal to 1.", new [] { "FkiEzmaxrepresentativeID" });
            }

            // IEzmaxinvoicingcommissionDays (int) minimum
            if (this.IEzmaxinvoicingcommissionDays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzmaxinvoicingcommissionDays, must be a value greater than or equal to 0.", new [] { "IEzmaxinvoicingcommissionDays" });
            }

            if (this.DEzmaxinvoicingcommissionAmount != null) {
                // DEzmaxinvoicingcommissionAmount (string) pattern
                Regex regexDEzmaxinvoicingcommissionAmount = new Regex(@"^-{0,1}[\d]{1,9}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDEzmaxinvoicingcommissionAmount.Match(this.DEzmaxinvoicingcommissionAmount).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzmaxinvoicingcommissionAmount, must match a pattern of " + regexDEzmaxinvoicingcommissionAmount, new [] { "DEzmaxinvoicingcommissionAmount" });
                }
            }

            yield break;
        }
    }

}
