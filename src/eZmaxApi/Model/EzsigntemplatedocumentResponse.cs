/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatedocument Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatedocument-Response")]
    public partial class EzsigntemplatedocumentResponse : IEquatable<EzsigntemplatedocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument (required).</param>
        /// <param name="fkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="sEzsigntemplatedocumentName">The name of the Ezsigntemplatedocument. (required).</param>
        /// <param name="iEzsigntemplatedocumentPagetotal">The number of pages in the Ezsigntemplatedocument. (required).</param>
        /// <param name="iEzsigntemplatedocumentSignaturetotal">The number of total signatures in the Ezsigntemplate. (required).</param>
        /// <param name="bEzsigntemplatedocumentHassignedsignatures">If the Ezsigntemplatedocument contains signed signatures (From internal or external sources) (required).</param>
        public EzsigntemplatedocumentResponse(int pkiEzsigntemplatedocumentID = default(int), int fkiEzsigntemplateID = default(int), string sEzsigntemplatedocumentName = default(string), int iEzsigntemplatedocumentPagetotal = default(int), int iEzsigntemplatedocumentSignaturetotal = default(int), bool bEzsigntemplatedocumentHassignedsignatures = default(bool))
        {
            this.PkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
            this.FkiEzsigntemplateID = fkiEzsigntemplateID;
            // to ensure "sEzsigntemplatedocumentName" is required (not null)
            if (sEzsigntemplatedocumentName == null)
            {
                throw new ArgumentNullException("sEzsigntemplatedocumentName is a required property for EzsigntemplatedocumentResponse and cannot be null");
            }
            this.SEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
            this.IEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
            this.IEzsigntemplatedocumentSignaturetotal = iEzsigntemplatedocumentSignaturetotal;
            this.BEzsigntemplatedocumentHassignedsignatures = bEzsigntemplatedocumentHassignedsignatures;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
		/* <example>133</example>*/
        [DataMember(Name = "pkiEzsigntemplatedocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
		/* <example>36</example>*/
        [DataMember(Name = "fkiEzsigntemplateID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The name of the Ezsigntemplatedocument.
        /// </summary>
        /// <value>The name of the Ezsigntemplatedocument.</value>
		/* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzsigntemplatedocumentName", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatedocumentName { get; set; }

        /// <summary>
        /// The number of pages in the Ezsigntemplatedocument.
        /// </summary>
        /// <value>The number of pages in the Ezsigntemplatedocument.</value>
		/* <example>5</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentPagetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentPagetotal { get; set; }

        /// <summary>
        /// The number of total signatures in the Ezsigntemplate.
        /// </summary>
        /// <value>The number of total signatures in the Ezsigntemplate.</value>
		/* <example>8</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentSignaturetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentSignaturetotal { get; set; }

        /// <summary>
        /// If the Ezsigntemplatedocument contains signed signatures (From internal or external sources)
        /// </summary>
        /// <value>If the Ezsigntemplatedocument contains signed signatures (From internal or external sources)</value>
		/* <example>true</example>*/
        [DataMember(Name = "bEzsigntemplatedocumentHassignedsignatures", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatedocumentHassignedsignatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentResponse {\n");
            sb.Append("  PkiEzsigntemplatedocumentID: ").Append(PkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  FkiEzsigntemplateID: ").Append(FkiEzsigntemplateID).Append("\n");
            sb.Append("  SEzsigntemplatedocumentName: ").Append(SEzsigntemplatedocumentName).Append("\n");
            sb.Append("  IEzsigntemplatedocumentPagetotal: ").Append(IEzsigntemplatedocumentPagetotal).Append("\n");
            sb.Append("  IEzsigntemplatedocumentSignaturetotal: ").Append(IEzsigntemplatedocumentSignaturetotal).Append("\n");
            sb.Append("  BEzsigntemplatedocumentHassignedsignatures: ").Append(BEzsigntemplatedocumentHassignedsignatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatedocumentResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplatedocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatedocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatedocumentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigntemplatedocumentID == input.PkiEzsigntemplatedocumentID ||
                    this.PkiEzsigntemplatedocumentID.Equals(input.PkiEzsigntemplatedocumentID)
                ) && 
                (
                    this.FkiEzsigntemplateID == input.FkiEzsigntemplateID ||
                    this.FkiEzsigntemplateID.Equals(input.FkiEzsigntemplateID)
                ) && 
                (
                    this.SEzsigntemplatedocumentName == input.SEzsigntemplatedocumentName ||
                    (this.SEzsigntemplatedocumentName != null &&
                    this.SEzsigntemplatedocumentName.Equals(input.SEzsigntemplatedocumentName))
                ) && 
                (
                    this.IEzsigntemplatedocumentPagetotal == input.IEzsigntemplatedocumentPagetotal ||
                    this.IEzsigntemplatedocumentPagetotal.Equals(input.IEzsigntemplatedocumentPagetotal)
                ) && 
                (
                    this.IEzsigntemplatedocumentSignaturetotal == input.IEzsigntemplatedocumentSignaturetotal ||
                    this.IEzsigntemplatedocumentSignaturetotal.Equals(input.IEzsigntemplatedocumentSignaturetotal)
                ) && 
                (
                    this.BEzsigntemplatedocumentHassignedsignatures == input.BEzsigntemplatedocumentHassignedsignatures ||
                    this.BEzsigntemplatedocumentHassignedsignatures.Equals(input.BEzsigntemplatedocumentHassignedsignatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigntemplatedocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateID.GetHashCode();
                if (this.SEzsigntemplatedocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatedocumentName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IEzsigntemplatedocumentPagetotal.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigntemplatedocumentSignaturetotal.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsigntemplatedocumentHassignedsignatures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatedocumentID (int) minimum
            if (this.PkiEzsigntemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatedocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatedocumentID" });
            }

            // FkiEzsigntemplateID (int) minimum
            if (this.FkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateID" });
            }

            // IEzsigntemplatedocumentPagetotal (int) minimum
            if (this.IEzsigntemplatedocumentPagetotal < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatedocumentPagetotal, must be a value greater than or equal to 1.", new [] { "IEzsigntemplatedocumentPagetotal" });
            }

            yield break;
        }
    }

}
