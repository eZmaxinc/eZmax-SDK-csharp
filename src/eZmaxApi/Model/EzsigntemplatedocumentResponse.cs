/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatedocument Object
    /// </summary>
    [DataContract]
    public partial class EzsigntemplatedocumentResponse :  IEquatable<EzsigntemplatedocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument (required).</param>
        /// <param name="fkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="sEzsigntemplatedocumentName">The name of the Ezsigntemplatedocument. (required).</param>
        /// <param name="iEzsigntemplatedocumentPagetotal">The number of pages in the Ezsigntemplatedocument. (required).</param>
        /// <param name="iEzsigntemplatedocumentSignaturetotal">The number of total signatures in the Ezsigntemplate. (required).</param>
        public EzsigntemplatedocumentResponse(int pkiEzsigntemplatedocumentID = default(int), int fkiEzsigntemplateID = default(int), string sEzsigntemplatedocumentName = default(string), int iEzsigntemplatedocumentPagetotal = default(int), int iEzsigntemplatedocumentSignaturetotal = default(int))
        {
            // to ensure "pkiEzsigntemplatedocumentID" is required (not null)
            if (pkiEzsigntemplatedocumentID == null)
            {
                throw new InvalidDataException("pkiEzsigntemplatedocumentID is a required property for EzsigntemplatedocumentResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
            }

            // to ensure "fkiEzsigntemplateID" is required (not null)
            if (fkiEzsigntemplateID == null)
            {
                throw new InvalidDataException("fkiEzsigntemplateID is a required property for EzsigntemplatedocumentResponse and cannot be null");
            }
            else
            {
                this.FkiEzsigntemplateID = fkiEzsigntemplateID;
            }

            // to ensure "sEzsigntemplatedocumentName" is required (not null)
            if (sEzsigntemplatedocumentName == null)
            {
                throw new InvalidDataException("sEzsigntemplatedocumentName is a required property for EzsigntemplatedocumentResponse and cannot be null");
            }
            else
            {
                this.SEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
            }

            // to ensure "iEzsigntemplatedocumentPagetotal" is required (not null)
            if (iEzsigntemplatedocumentPagetotal == null)
            {
                throw new InvalidDataException("iEzsigntemplatedocumentPagetotal is a required property for EzsigntemplatedocumentResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
            }

            // to ensure "iEzsigntemplatedocumentSignaturetotal" is required (not null)
            if (iEzsigntemplatedocumentSignaturetotal == null)
            {
                throw new InvalidDataException("iEzsigntemplatedocumentSignaturetotal is a required property for EzsigntemplatedocumentResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplatedocumentSignaturetotal = iEzsigntemplatedocumentSignaturetotal;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
        [DataMember(Name="pkiEzsigntemplatedocumentID", EmitDefaultValue=true)]
        public int PkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        [DataMember(Name="fkiEzsigntemplateID", EmitDefaultValue=true)]
        public int FkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The name of the Ezsigntemplatedocument.
        /// </summary>
        /// <value>The name of the Ezsigntemplatedocument.</value>
        [DataMember(Name="sEzsigntemplatedocumentName", EmitDefaultValue=true)]
        public string SEzsigntemplatedocumentName { get; set; }

        /// <summary>
        /// The number of pages in the Ezsigntemplatedocument.
        /// </summary>
        /// <value>The number of pages in the Ezsigntemplatedocument.</value>
        [DataMember(Name="iEzsigntemplatedocumentPagetotal", EmitDefaultValue=true)]
        public int IEzsigntemplatedocumentPagetotal { get; set; }

        /// <summary>
        /// The number of total signatures in the Ezsigntemplate.
        /// </summary>
        /// <value>The number of total signatures in the Ezsigntemplate.</value>
        [DataMember(Name="iEzsigntemplatedocumentSignaturetotal", EmitDefaultValue=true)]
        public int IEzsigntemplatedocumentSignaturetotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentResponse {\n");
            sb.Append("  PkiEzsigntemplatedocumentID: ").Append(PkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  FkiEzsigntemplateID: ").Append(FkiEzsigntemplateID).Append("\n");
            sb.Append("  SEzsigntemplatedocumentName: ").Append(SEzsigntemplatedocumentName).Append("\n");
            sb.Append("  IEzsigntemplatedocumentPagetotal: ").Append(IEzsigntemplatedocumentPagetotal).Append("\n");
            sb.Append("  IEzsigntemplatedocumentSignaturetotal: ").Append(IEzsigntemplatedocumentSignaturetotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatedocumentResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplatedocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatedocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatedocumentResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigntemplatedocumentID == input.PkiEzsigntemplatedocumentID ||
                    (this.PkiEzsigntemplatedocumentID != null &&
                    this.PkiEzsigntemplatedocumentID.Equals(input.PkiEzsigntemplatedocumentID))
                ) && 
                (
                    this.FkiEzsigntemplateID == input.FkiEzsigntemplateID ||
                    (this.FkiEzsigntemplateID != null &&
                    this.FkiEzsigntemplateID.Equals(input.FkiEzsigntemplateID))
                ) && 
                (
                    this.SEzsigntemplatedocumentName == input.SEzsigntemplatedocumentName ||
                    (this.SEzsigntemplatedocumentName != null &&
                    this.SEzsigntemplatedocumentName.Equals(input.SEzsigntemplatedocumentName))
                ) && 
                (
                    this.IEzsigntemplatedocumentPagetotal == input.IEzsigntemplatedocumentPagetotal ||
                    (this.IEzsigntemplatedocumentPagetotal != null &&
                    this.IEzsigntemplatedocumentPagetotal.Equals(input.IEzsigntemplatedocumentPagetotal))
                ) && 
                (
                    this.IEzsigntemplatedocumentSignaturetotal == input.IEzsigntemplatedocumentSignaturetotal ||
                    (this.IEzsigntemplatedocumentSignaturetotal != null &&
                    this.IEzsigntemplatedocumentSignaturetotal.Equals(input.IEzsigntemplatedocumentSignaturetotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigntemplatedocumentID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplatedocumentID.GetHashCode();
                if (this.FkiEzsigntemplateID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplateID.GetHashCode();
                if (this.SEzsigntemplatedocumentName != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplatedocumentName.GetHashCode();
                if (this.IEzsigntemplatedocumentPagetotal != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatedocumentPagetotal.GetHashCode();
                if (this.IEzsigntemplatedocumentSignaturetotal != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatedocumentSignaturetotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
