/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A CreateEzsignelementsPositionedByWord object
    /// </summary>
    [DataContract(Name = "Custom-CreateEzsignelementsPositionedByWord-Request")]
    public partial class CustomCreateEzsignelementsPositionedByWordRequest : IValidatableObject
    {
        /// <summary>
        /// The occurance in the search to add the ezsign element
        /// </summary>
        /// <value>The occurance in the search to add the ezsign element</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ECreateezsignelementspositionedbywordOccuranceEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,

            /// <summary>
            /// Enum First for value: First
            /// </summary>
            [EnumMember(Value = "First")]
            First = 2,

            /// <summary>
            /// Enum Last for value: Last
            /// </summary>
            [EnumMember(Value = "Last")]
            Last = 3
        }


        /// <summary>
        /// The occurance in the search to add the ezsign element
        /// </summary>
        /// <value>The occurance in the search to add the ezsign element</value>
        [DataMember(Name = "eCreateezsignelementspositionedbywordOccurance", IsRequired = true, EmitDefaultValue = true)]
        public ECreateezsignelementspositionedbywordOccuranceEnum ECreateezsignelementspositionedbywordOccurance { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCreateEzsignelementsPositionedByWordRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomCreateEzsignelementsPositionedByWordRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCreateEzsignelementsPositionedByWordRequest" /> class.
        /// </summary>
        /// <param name="sCreateezsignelementspositionedbywordPattern">The word to search (required).</param>
        /// <param name="iCreateezsignelementspositionedbywordOffsetx">The X offset (required).</param>
        /// <param name="iCreateezsignelementspositionedbywordOffsety">The Y offset (required).</param>
        /// <param name="eCreateezsignelementspositionedbywordOccurance">The occurance in the search to add the ezsign element (required).</param>
        public CustomCreateEzsignelementsPositionedByWordRequest(string sCreateezsignelementspositionedbywordPattern = default(string), int iCreateezsignelementspositionedbywordOffsetx = default(int), int iCreateezsignelementspositionedbywordOffsety = default(int), ECreateezsignelementspositionedbywordOccuranceEnum eCreateezsignelementspositionedbywordOccurance = default(ECreateezsignelementspositionedbywordOccuranceEnum))
        {
            // to ensure "sCreateezsignelementspositionedbywordPattern" is required (not null)
            if (sCreateezsignelementspositionedbywordPattern == null)
            {
                throw new ArgumentNullException("sCreateezsignelementspositionedbywordPattern is a required property for CustomCreateEzsignelementsPositionedByWordRequest and cannot be null");
            }
            this.SCreateezsignelementspositionedbywordPattern = sCreateezsignelementspositionedbywordPattern;
            this.ICreateezsignelementspositionedbywordOffsetx = iCreateezsignelementspositionedbywordOffsetx;
            this.ICreateezsignelementspositionedbywordOffsety = iCreateezsignelementspositionedbywordOffsety;
            this.ECreateezsignelementspositionedbywordOccurance = eCreateezsignelementspositionedbywordOccurance;
        }

        /// <summary>
        /// The word to search
        /// </summary>
        /// <value>The word to search</value>
        [DataMember(Name = "sCreateezsignelementspositionedbywordPattern", IsRequired = true, EmitDefaultValue = true)]
        public string SCreateezsignelementspositionedbywordPattern { get; set; }

        /// <summary>
        /// The X offset
        /// </summary>
        /// <value>The X offset</value>
        [DataMember(Name = "iCreateezsignelementspositionedbywordOffsetx", IsRequired = true, EmitDefaultValue = true)]
        public int ICreateezsignelementspositionedbywordOffsetx { get; set; }

        /// <summary>
        /// The Y offset
        /// </summary>
        /// <value>The Y offset</value>
        [DataMember(Name = "iCreateezsignelementspositionedbywordOffsety", IsRequired = true, EmitDefaultValue = true)]
        public int ICreateezsignelementspositionedbywordOffsety { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomCreateEzsignelementsPositionedByWordRequest {\n");
            sb.Append("  SCreateezsignelementspositionedbywordPattern: ").Append(SCreateezsignelementspositionedbywordPattern).Append("\n");
            sb.Append("  ICreateezsignelementspositionedbywordOffsetx: ").Append(ICreateezsignelementspositionedbywordOffsetx).Append("\n");
            sb.Append("  ICreateezsignelementspositionedbywordOffsety: ").Append(ICreateezsignelementspositionedbywordOffsety).Append("\n");
            sb.Append("  ECreateezsignelementspositionedbywordOccurance: ").Append(ECreateezsignelementspositionedbywordOccurance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SCreateezsignelementspositionedbywordPattern != null) {
                // SCreateezsignelementspositionedbywordPattern (string) pattern
                Regex regexSCreateezsignelementspositionedbywordPattern = new Regex(@"^.{1,35}$", RegexOptions.CultureInvariant);
                if (!regexSCreateezsignelementspositionedbywordPattern.Match(this.SCreateezsignelementspositionedbywordPattern).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreateezsignelementspositionedbywordPattern, must match a pattern of " + regexSCreateezsignelementspositionedbywordPattern, new [] { "SCreateezsignelementspositionedbywordPattern" });
                }
            }

            yield break;
        }
    }

}
