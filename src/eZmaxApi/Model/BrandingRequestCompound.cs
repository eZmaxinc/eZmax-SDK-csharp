/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Branding Object and children
    /// </summary>
    [DataContract(Name = "branding-RequestCompound")]
    public partial class BrandingRequestCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EBrandingLogo
        /// </summary>
        [DataMember(Name = "eBrandingLogo", IsRequired = true, EmitDefaultValue = true)]
        public FieldEBrandingLogo EBrandingLogo { get; set; }

        /// <summary>
        /// Gets or Sets EBrandingLogointerface
        /// </summary>
        [DataMember(Name = "eBrandingLogointerface", EmitDefaultValue = false)]
        public FieldEBrandingLogointerface? EBrandingLogointerface { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandingRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiBrandingID">The unique ID of the Branding.</param>
        /// <param name="objBrandingDescription">objBrandingDescription (required).</param>
        /// <param name="eBrandingLogo">eBrandingLogo (required).</param>
        /// <param name="sBrandingBase64">The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogo if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used..</param>
        /// <param name="eBrandingLogointerface">eBrandingLogointerface.</param>
        /// <param name="sBrandingLogointerfaceBase64">The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogointerface if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used..</param>
        /// <param name="iBrandingColortext">The color of the text. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColortextlinkbox">The color of the text in the link box. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColortextbutton">The color of the text in the button. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackground">The color of the background. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackgroundbutton">The color of the background of the button. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackgroundsmallbox">The color of the background of the small box. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingInterfacecolor">The color of the interface. This is a RGB color converted into integer.</param>
        /// <param name="sBrandingName">The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty.</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="bBrandingIsactive">Whether the Branding is active or not (required).</param>
        public BrandingRequestCompound(int pkiBrandingID = default(int), MultilingualBrandingDescription objBrandingDescription = default(MultilingualBrandingDescription), FieldEBrandingLogo eBrandingLogo = default(FieldEBrandingLogo), byte[] sBrandingBase64 = default(byte[]), FieldEBrandingLogointerface? eBrandingLogointerface = default(FieldEBrandingLogointerface?), byte[] sBrandingLogointerfaceBase64 = default(byte[]), int iBrandingColortext = default(int), int iBrandingColortextlinkbox = default(int), int iBrandingColortextbutton = default(int), int iBrandingColorbackground = default(int), int iBrandingColorbackgroundbutton = default(int), int iBrandingColorbackgroundsmallbox = default(int), int iBrandingInterfacecolor = default(int), string sBrandingName = default(string), string sEmailAddress = default(string), bool bBrandingIsactive = default(bool))
        {
            // to ensure "objBrandingDescription" is required (not null)
            if (objBrandingDescription == null)
            {
                throw new ArgumentNullException("objBrandingDescription is a required property for BrandingRequestCompound and cannot be null");
            }
            this.ObjBrandingDescription = objBrandingDescription;
            this.EBrandingLogo = eBrandingLogo;
            this.IBrandingColortext = iBrandingColortext;
            this.IBrandingColortextlinkbox = iBrandingColortextlinkbox;
            this.IBrandingColortextbutton = iBrandingColortextbutton;
            this.IBrandingColorbackground = iBrandingColorbackground;
            this.IBrandingColorbackgroundbutton = iBrandingColorbackgroundbutton;
            this.IBrandingColorbackgroundsmallbox = iBrandingColorbackgroundsmallbox;
            this.BBrandingIsactive = bBrandingIsactive;
            this.PkiBrandingID = pkiBrandingID;
            this.SBrandingBase64 = sBrandingBase64;
            this.EBrandingLogointerface = eBrandingLogointerface;
            this.SBrandingLogointerfaceBase64 = sBrandingLogointerfaceBase64;
            this.IBrandingInterfacecolor = iBrandingInterfacecolor;
            this.SBrandingName = sBrandingName;
            this.SEmailAddress = sEmailAddress;
        }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        /* <example>78</example>*/
        [DataMember(Name = "pkiBrandingID", EmitDefaultValue = false)]
        public int PkiBrandingID { get; set; }

        /// <summary>
        /// Gets or Sets ObjBrandingDescription
        /// </summary>
        [DataMember(Name = "objBrandingDescription", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualBrandingDescription ObjBrandingDescription { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogo if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used.
        /// </summary>
        /// <value>The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogo if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used.</value>
        /* <example>eyIkcmVmIjoiIy9jb21wb25lbnRzL2V4YW1wbGVzL1BuZ0FzQmFzZTY0L3ZhbHVlIn0&#x3D;</example>*/
        [DataMember(Name = "sBrandingBase64", EmitDefaultValue = false)]
        public byte[] SBrandingBase64 { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogointerface if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used.
        /// </summary>
        /// <value>The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogointerface if you supply an image. If you select &#39;Default&#39;, the logo will be deleted and the default one will be used.</value>
        /* <example>eyIkcmVmIjoiIy9jb21wb25lbnRzL2V4YW1wbGVzL1BuZ0FzQmFzZTY0L3ZhbHVlIn0&#x3D;</example>*/
        [DataMember(Name = "sBrandingLogointerfaceBase64", EmitDefaultValue = false)]
        public byte[] SBrandingLogointerfaceBase64 { get; set; }

        /// <summary>
        /// The color of the text. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text. This is a RGB color converted into integer</value>
        /* <example>3752795</example>*/
        [DataMember(Name = "iBrandingColortext", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortext { get; set; }

        /// <summary>
        /// The color of the text in the link box. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text in the link box. This is a RGB color converted into integer</value>
        /* <example>0</example>*/
        [DataMember(Name = "iBrandingColortextlinkbox", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortextlinkbox { get; set; }

        /// <summary>
        /// The color of the text in the button. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text in the button. This is a RGB color converted into integer</value>
        /* <example>16777215</example>*/
        [DataMember(Name = "iBrandingColortextbutton", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortextbutton { get; set; }

        /// <summary>
        /// The color of the background. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background. This is a RGB color converted into integer</value>
        /* <example>15658734</example>*/
        [DataMember(Name = "iBrandingColorbackground", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackground { get; set; }

        /// <summary>
        /// The color of the background of the button. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background of the button. This is a RGB color converted into integer</value>
        /* <example>13577007</example>*/
        [DataMember(Name = "iBrandingColorbackgroundbutton", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackgroundbutton { get; set; }

        /// <summary>
        /// The color of the background of the small box. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background of the small box. This is a RGB color converted into integer</value>
        /* <example>16777215</example>*/
        [DataMember(Name = "iBrandingColorbackgroundsmallbox", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackgroundsmallbox { get; set; }

        /// <summary>
        /// The color of the interface. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the interface. This is a RGB color converted into integer</value>
        /* <example>15658734</example>*/
        [DataMember(Name = "iBrandingInterfacecolor", EmitDefaultValue = false)]
        public int IBrandingInterfacecolor { get; set; }

        /// <summary>
        /// The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty
        /// </summary>
        /// <value>The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty</value>
        /* <example>eZmax (Corp)</example>*/
        [DataMember(Name = "sBrandingName", EmitDefaultValue = false)]
        public string SBrandingName { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddress", EmitDefaultValue = false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// Whether the Branding is active or not
        /// </summary>
        /// <value>Whether the Branding is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bBrandingIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BBrandingIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandingRequestCompound {\n");
            sb.Append("  PkiBrandingID: ").Append(PkiBrandingID).Append("\n");
            sb.Append("  ObjBrandingDescription: ").Append(ObjBrandingDescription).Append("\n");
            sb.Append("  EBrandingLogo: ").Append(EBrandingLogo).Append("\n");
            sb.Append("  SBrandingBase64: ").Append(SBrandingBase64).Append("\n");
            sb.Append("  EBrandingLogointerface: ").Append(EBrandingLogointerface).Append("\n");
            sb.Append("  SBrandingLogointerfaceBase64: ").Append(SBrandingLogointerfaceBase64).Append("\n");
            sb.Append("  IBrandingColortext: ").Append(IBrandingColortext).Append("\n");
            sb.Append("  IBrandingColortextlinkbox: ").Append(IBrandingColortextlinkbox).Append("\n");
            sb.Append("  IBrandingColortextbutton: ").Append(IBrandingColortextbutton).Append("\n");
            sb.Append("  IBrandingColorbackground: ").Append(IBrandingColorbackground).Append("\n");
            sb.Append("  IBrandingColorbackgroundbutton: ").Append(IBrandingColorbackgroundbutton).Append("\n");
            sb.Append("  IBrandingColorbackgroundsmallbox: ").Append(IBrandingColorbackgroundsmallbox).Append("\n");
            sb.Append("  IBrandingInterfacecolor: ").Append(IBrandingInterfacecolor).Append("\n");
            sb.Append("  SBrandingName: ").Append(SBrandingName).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  BBrandingIsactive: ").Append(BBrandingIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiBrandingID (int) minimum
            if (this.PkiBrandingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiBrandingID, must be a value greater than or equal to 0.", new [] { "PkiBrandingID" });
            }

            // IBrandingColortext (int) maximum
            if (this.IBrandingColortext > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortext, must be a value less than or equal to 16777215.", new [] { "IBrandingColortext" });
            }

            // IBrandingColortext (int) minimum
            if (this.IBrandingColortext < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortext, must be a value greater than or equal to 0.", new [] { "IBrandingColortext" });
            }

            // IBrandingColortextlinkbox (int) maximum
            if (this.IBrandingColortextlinkbox > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextlinkbox, must be a value less than or equal to 16777215.", new [] { "IBrandingColortextlinkbox" });
            }

            // IBrandingColortextlinkbox (int) minimum
            if (this.IBrandingColortextlinkbox < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextlinkbox, must be a value greater than or equal to 0.", new [] { "IBrandingColortextlinkbox" });
            }

            // IBrandingColortextbutton (int) maximum
            if (this.IBrandingColortextbutton > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextbutton, must be a value less than or equal to 16777215.", new [] { "IBrandingColortextbutton" });
            }

            // IBrandingColortextbutton (int) minimum
            if (this.IBrandingColortextbutton < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextbutton, must be a value greater than or equal to 0.", new [] { "IBrandingColortextbutton" });
            }

            // IBrandingColorbackground (int) maximum
            if (this.IBrandingColorbackground > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackground, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackground" });
            }

            // IBrandingColorbackground (int) minimum
            if (this.IBrandingColorbackground < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackground, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackground" });
            }

            // IBrandingColorbackgroundbutton (int) maximum
            if (this.IBrandingColorbackgroundbutton > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundbutton, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackgroundbutton" });
            }

            // IBrandingColorbackgroundbutton (int) minimum
            if (this.IBrandingColorbackgroundbutton < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundbutton, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackgroundbutton" });
            }

            // IBrandingColorbackgroundsmallbox (int) maximum
            if (this.IBrandingColorbackgroundsmallbox > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundsmallbox, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackgroundsmallbox" });
            }

            // IBrandingColorbackgroundsmallbox (int) minimum
            if (this.IBrandingColorbackgroundsmallbox < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundsmallbox, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackgroundsmallbox" });
            }

            // IBrandingInterfacecolor (int) maximum
            if (this.IBrandingInterfacecolor > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingInterfacecolor, must be a value less than or equal to 16777215.", new [] { "IBrandingInterfacecolor" });
            }

            // IBrandingInterfacecolor (int) minimum
            if (this.IBrandingInterfacecolor < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingInterfacecolor, must be a value greater than or equal to 0.", new [] { "IBrandingInterfacecolor" });
            }

            if (this.SBrandingName != null) {
                // SBrandingName (string) pattern
                Regex regexSBrandingName = new Regex(@"^.{0,55}$", RegexOptions.CultureInvariant);
                if (!regexSBrandingName.Match(this.SBrandingName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBrandingName, must match a pattern of " + regexSBrandingName, new [] { "SBrandingName" });
                }
            }

            if (this.SEmailAddress != null) {
                // SEmailAddress (string) pattern
                Regex regexSEmailAddress = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddress.Match(this.SEmailAddress).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddress, must match a pattern of " + regexSEmailAddress, new [] { "SEmailAddress" });
                }
            }

            yield break;
        }
    }

}
