/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /1/object/ezsigndocument/{pkiEzsigndocumentID}
    /// </summary>
    [DataContract(Name = "ezsigndocument-getObject-v1-Response-mPayload")]
    public partial class EzsigndocumentGetObjectV1ResponseMPayload : IEquatable<EzsigndocumentGetObjectV1ResponseMPayload>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigndocumentStep
        /// </summary>
        [DataMember(Name = "eEzsigndocumentStep", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigndocumentStep EEzsigndocumentStep { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigndocumentSteptype
        /// </summary>
        [DataMember(Name = "eEzsigndocumentSteptype", IsRequired = true, EmitDefaultValue = true)]
        public ComputedEEzsigndocumentSteptype EEzsigndocumentSteptype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentGetObjectV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigndocumentGetObjectV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentGetObjectV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="fkiEzsignfoldersignerassociationIDDeclinedtosign">The unique ID of the Ezsignfoldersignerassociation.</param>
        /// <param name="dtEzsigndocumentDuedate">The maximum date and time at which the Ezsigndocument can be signed. (required).</param>
        /// <param name="dtEzsignformCompleted">The date and time at which the Ezsignform has been completed..</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|.</param>
        /// <param name="sEzsigndocumentName">The name of the document that will be presented to Ezsignfoldersignerassociations (required).</param>
        /// <param name="eEzsigndocumentStep">eEzsigndocumentStep (required).</param>
        /// <param name="dtEzsigndocumentFirstsend">The date and time when the Ezsigndocument was first sent..</param>
        /// <param name="dtEzsigndocumentLastsend">The date and time when the Ezsigndocument was sent the last time..</param>
        /// <param name="iEzsigndocumentOrder">The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder. (required).</param>
        /// <param name="iEzsigndocumentPagetotal">The number of pages in the Ezsigndocument. (required).</param>
        /// <param name="iEzsigndocumentSignaturesigned">The number of signatures that were signed in the document. (required).</param>
        /// <param name="iEzsigndocumentSignaturetotal">The number of total signatures that were requested in the Ezsigndocument. (required).</param>
        /// <param name="sEzsigndocumentMD5initial">MD5 Hash of the initial PDF Document before signatures were applied to it..</param>
        /// <param name="tEzsigndocumentDeclinedtosignreason">A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign.</param>
        /// <param name="sEzsigndocumentMD5signed">MD5 Hash of the final PDF Document after all signatures were applied to it..</param>
        /// <param name="bEzsigndocumentEzsignform">If the Ezsigndocument contains an Ezsignform or not.</param>
        /// <param name="bEzsigndocumentHassignedsignatures">If the Ezsigndocument contains signed signatures (From internal or external sources).</param>
        /// <param name="objAudit">objAudit.</param>
        /// <param name="sEzsigndocumentExternalid">This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. .</param>
        /// <param name="eEzsigndocumentSteptype">eEzsigndocumentSteptype (required).</param>
        /// <param name="iEzsigndocumentStepformtotal">The total number of steps in the form filling phase (required).</param>
        /// <param name="iEzsigndocumentStepformcurrent">The current step in the form filling phase (required).</param>
        /// <param name="iEzsigndocumentStepsignaturetotal">The total number of steps in the signature filling phase (required).</param>
        /// <param name="iEzsigndocumentStepsignatureCurrent">The current step in the signature phase (required).</param>
        /// <param name="aObjEzsignfoldersignerassociationstatus">aObjEzsignfoldersignerassociationstatus (required).</param>
        public EzsigndocumentGetObjectV1ResponseMPayload(int pkiEzsigndocumentID = default(int), int fkiEzsignfolderID = default(int), int fkiEzsignfoldersignerassociationIDDeclinedtosign = default(int), string dtEzsigndocumentDuedate = default(string), string dtEzsignformCompleted = default(string), int fkiLanguageID = default(int), string sEzsigndocumentName = default(string), FieldEEzsigndocumentStep eEzsigndocumentStep = default(FieldEEzsigndocumentStep), string dtEzsigndocumentFirstsend = default(string), string dtEzsigndocumentLastsend = default(string), int iEzsigndocumentOrder = default(int), int iEzsigndocumentPagetotal = default(int), int iEzsigndocumentSignaturesigned = default(int), int iEzsigndocumentSignaturetotal = default(int), string sEzsigndocumentMD5initial = default(string), string tEzsigndocumentDeclinedtosignreason = default(string), string sEzsigndocumentMD5signed = default(string), bool bEzsigndocumentEzsignform = default(bool), bool bEzsigndocumentHassignedsignatures = default(bool), CommonAudit objAudit = default(CommonAudit), string sEzsigndocumentExternalid = default(string), ComputedEEzsigndocumentSteptype eEzsigndocumentSteptype = default(ComputedEEzsigndocumentSteptype), int iEzsigndocumentStepformtotal = default(int), int iEzsigndocumentStepformcurrent = default(int), int iEzsigndocumentStepsignaturetotal = default(int), int iEzsigndocumentStepsignatureCurrent = default(int), List<CustomEzsignfoldersignerassociationstatusResponse> aObjEzsignfoldersignerassociationstatus = default(List<CustomEzsignfoldersignerassociationstatusResponse>))
        {
            this.PkiEzsigndocumentID = pkiEzsigndocumentID;
            this.FkiEzsignfolderID = fkiEzsignfolderID;
            // to ensure "dtEzsigndocumentDuedate" is required (not null)
            if (dtEzsigndocumentDuedate == null)
            {
                throw new ArgumentNullException("dtEzsigndocumentDuedate is a required property for EzsigndocumentGetObjectV1ResponseMPayload and cannot be null");
            }
            this.DtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
            // to ensure "sEzsigndocumentName" is required (not null)
            if (sEzsigndocumentName == null)
            {
                throw new ArgumentNullException("sEzsigndocumentName is a required property for EzsigndocumentGetObjectV1ResponseMPayload and cannot be null");
            }
            this.SEzsigndocumentName = sEzsigndocumentName;
            this.EEzsigndocumentStep = eEzsigndocumentStep;
            this.IEzsigndocumentOrder = iEzsigndocumentOrder;
            this.IEzsigndocumentPagetotal = iEzsigndocumentPagetotal;
            this.IEzsigndocumentSignaturesigned = iEzsigndocumentSignaturesigned;
            this.IEzsigndocumentSignaturetotal = iEzsigndocumentSignaturetotal;
            this.EEzsigndocumentSteptype = eEzsigndocumentSteptype;
            this.IEzsigndocumentStepformtotal = iEzsigndocumentStepformtotal;
            this.IEzsigndocumentStepformcurrent = iEzsigndocumentStepformcurrent;
            this.IEzsigndocumentStepsignaturetotal = iEzsigndocumentStepsignaturetotal;
            this.IEzsigndocumentStepsignatureCurrent = iEzsigndocumentStepsignatureCurrent;
            // to ensure "aObjEzsignfoldersignerassociationstatus" is required (not null)
            if (aObjEzsignfoldersignerassociationstatus == null)
            {
                throw new ArgumentNullException("aObjEzsignfoldersignerassociationstatus is a required property for EzsigndocumentGetObjectV1ResponseMPayload and cannot be null");
            }
            this.AObjEzsignfoldersignerassociationstatus = aObjEzsignfoldersignerassociationstatus;
            this.FkiEzsignfoldersignerassociationIDDeclinedtosign = fkiEzsignfoldersignerassociationIDDeclinedtosign;
            this.DtEzsignformCompleted = dtEzsignformCompleted;
            this.FkiLanguageID = fkiLanguageID;
            this.DtEzsigndocumentFirstsend = dtEzsigndocumentFirstsend;
            this.DtEzsigndocumentLastsend = dtEzsigndocumentLastsend;
            this.SEzsigndocumentMD5initial = sEzsigndocumentMD5initial;
            this.TEzsigndocumentDeclinedtosignreason = tEzsigndocumentDeclinedtosignreason;
            this.SEzsigndocumentMD5signed = sEzsigndocumentMD5signed;
            this.BEzsigndocumentEzsignform = bEzsigndocumentEzsignform;
            this.BEzsigndocumentHassignedsignatures = bEzsigndocumentHassignedsignatures;
            this.ObjAudit = objAudit;
            this.SEzsigndocumentExternalid = sEzsigndocumentExternalid;
        }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        /* <example>97</example>*/
        [DataMember(Name = "pkiEzsigndocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        /* <example>20</example>*/
        [DataMember(Name = "fkiEzsignfoldersignerassociationIDDeclinedtosign", EmitDefaultValue = false)]
        public int FkiEzsignfoldersignerassociationIDDeclinedtosign { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsigndocument can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsigndocument can be signed.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsigndocumentDuedate", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzsigndocumentDuedate { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignform has been completed.
        /// </summary>
        /// <value>The date and time at which the Ezsignform has been completed.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignformCompleted", EmitDefaultValue = false)]
        public string DtEzsignformCompleted { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", EmitDefaultValue = false)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The name of the document that will be presented to Ezsignfoldersignerassociations
        /// </summary>
        /// <value>The name of the document that will be presented to Ezsignfoldersignerassociations</value>
        /* <example>Contract #123</example>*/
        [DataMember(Name = "sEzsigndocumentName", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentName { get; set; }

        /// <summary>
        /// The date and time when the Ezsigndocument was first sent.
        /// </summary>
        /// <value>The date and time when the Ezsigndocument was first sent.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsigndocumentFirstsend", EmitDefaultValue = false)]
        public string DtEzsigndocumentFirstsend { get; set; }

        /// <summary>
        /// The date and time when the Ezsigndocument was sent the last time.
        /// </summary>
        /// <value>The date and time when the Ezsigndocument was sent the last time.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsigndocumentLastsend", EmitDefaultValue = false)]
        public string DtEzsigndocumentLastsend { get; set; }

        /// <summary>
        /// The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.
        /// </summary>
        /// <value>The order in which the Ezsigndocument will be presented to the signatory in the Ezsignfolder.</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsigndocumentOrder", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentOrder { get; set; }

        /// <summary>
        /// The number of pages in the Ezsigndocument.
        /// </summary>
        /// <value>The number of pages in the Ezsigndocument.</value>
        /* <example>4</example>*/
        [DataMember(Name = "iEzsigndocumentPagetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentPagetotal { get; set; }

        /// <summary>
        /// The number of signatures that were signed in the document.
        /// </summary>
        /// <value>The number of signatures that were signed in the document.</value>
        /* <example>3</example>*/
        [DataMember(Name = "iEzsigndocumentSignaturesigned", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentSignaturesigned { get; set; }

        /// <summary>
        /// The number of total signatures that were requested in the Ezsigndocument.
        /// </summary>
        /// <value>The number of total signatures that were requested in the Ezsigndocument.</value>
        /* <example>4</example>*/
        [DataMember(Name = "iEzsigndocumentSignaturetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentSignaturetotal { get; set; }

        /// <summary>
        /// MD5 Hash of the initial PDF Document before signatures were applied to it.
        /// </summary>
        /// <value>MD5 Hash of the initial PDF Document before signatures were applied to it.</value>
        /* <example>012345678901234567890123456789AB</example>*/
        [DataMember(Name = "sEzsigndocumentMD5initial", EmitDefaultValue = false)]
        public string SEzsigndocumentMD5initial { get; set; }

        /// <summary>
        /// A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign
        /// </summary>
        /// <value>A custom text message that will contain the refusal message if the Ezsigndocument is declined to sign</value>
        /* <example>The conditions in the contract are different than those discuted</example>*/
        [DataMember(Name = "tEzsigndocumentDeclinedtosignreason", EmitDefaultValue = false)]
        public string TEzsigndocumentDeclinedtosignreason { get; set; }

        /// <summary>
        /// MD5 Hash of the final PDF Document after all signatures were applied to it.
        /// </summary>
        /// <value>MD5 Hash of the final PDF Document after all signatures were applied to it.</value>
        /* <example>012345678901234567890123456789AB</example>*/
        [DataMember(Name = "sEzsigndocumentMD5signed", EmitDefaultValue = false)]
        public string SEzsigndocumentMD5signed { get; set; }

        /// <summary>
        /// If the Ezsigndocument contains an Ezsignform or not
        /// </summary>
        /// <value>If the Ezsigndocument contains an Ezsignform or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsigndocumentEzsignform", EmitDefaultValue = true)]
        public bool BEzsigndocumentEzsignform { get; set; }

        /// <summary>
        /// If the Ezsigndocument contains signed signatures (From internal or external sources)
        /// </summary>
        /// <value>If the Ezsigndocument contains signed signatures (From internal or external sources)</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsigndocumentHassignedsignatures", EmitDefaultValue = true)]
        public bool BEzsigndocumentHassignedsignatures { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", EmitDefaultValue = false)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
        /// </summary>
        /// <value>This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. </value>
        /* <example>{&quot;ID&quot;: 1234, &quot;TAGS&quot;: [&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;]}</example>*/
        [DataMember(Name = "sEzsigndocumentExternalid", EmitDefaultValue = false)]
        public string SEzsigndocumentExternalid { get; set; }

        /// <summary>
        /// The total number of steps in the form filling phase
        /// </summary>
        /// <value>The total number of steps in the form filling phase</value>
        /* <example>2</example>*/
        [DataMember(Name = "iEzsigndocumentStepformtotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentStepformtotal { get; set; }

        /// <summary>
        /// The current step in the form filling phase
        /// </summary>
        /// <value>The current step in the form filling phase</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsigndocumentStepformcurrent", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentStepformcurrent { get; set; }

        /// <summary>
        /// The total number of steps in the signature filling phase
        /// </summary>
        /// <value>The total number of steps in the signature filling phase</value>
        /* <example>2</example>*/
        [DataMember(Name = "iEzsigndocumentStepsignaturetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentStepsignaturetotal { get; set; }

        /// <summary>
        /// The current step in the signature phase
        /// </summary>
        /// <value>The current step in the signature phase</value>
        /* <example>0</example>*/
        [DataMember(Name = "iEzsigndocumentStepsignatureCurrent", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentStepsignatureCurrent { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignfoldersignerassociationstatus
        /// </summary>
        [DataMember(Name = "a_objEzsignfoldersignerassociationstatus", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomEzsignfoldersignerassociationstatusResponse> AObjEzsignfoldersignerassociationstatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigndocumentGetObjectV1ResponseMPayload {\n");
            sb.Append("  PkiEzsigndocumentID: ").Append(PkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationIDDeclinedtosign: ").Append(FkiEzsignfoldersignerassociationIDDeclinedtosign).Append("\n");
            sb.Append("  DtEzsigndocumentDuedate: ").Append(DtEzsigndocumentDuedate).Append("\n");
            sb.Append("  DtEzsignformCompleted: ").Append(DtEzsignformCompleted).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SEzsigndocumentName: ").Append(SEzsigndocumentName).Append("\n");
            sb.Append("  EEzsigndocumentStep: ").Append(EEzsigndocumentStep).Append("\n");
            sb.Append("  DtEzsigndocumentFirstsend: ").Append(DtEzsigndocumentFirstsend).Append("\n");
            sb.Append("  DtEzsigndocumentLastsend: ").Append(DtEzsigndocumentLastsend).Append("\n");
            sb.Append("  IEzsigndocumentOrder: ").Append(IEzsigndocumentOrder).Append("\n");
            sb.Append("  IEzsigndocumentPagetotal: ").Append(IEzsigndocumentPagetotal).Append("\n");
            sb.Append("  IEzsigndocumentSignaturesigned: ").Append(IEzsigndocumentSignaturesigned).Append("\n");
            sb.Append("  IEzsigndocumentSignaturetotal: ").Append(IEzsigndocumentSignaturetotal).Append("\n");
            sb.Append("  SEzsigndocumentMD5initial: ").Append(SEzsigndocumentMD5initial).Append("\n");
            sb.Append("  TEzsigndocumentDeclinedtosignreason: ").Append(TEzsigndocumentDeclinedtosignreason).Append("\n");
            sb.Append("  SEzsigndocumentMD5signed: ").Append(SEzsigndocumentMD5signed).Append("\n");
            sb.Append("  BEzsigndocumentEzsignform: ").Append(BEzsigndocumentEzsignform).Append("\n");
            sb.Append("  BEzsigndocumentHassignedsignatures: ").Append(BEzsigndocumentHassignedsignatures).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  SEzsigndocumentExternalid: ").Append(SEzsigndocumentExternalid).Append("\n");
            sb.Append("  EEzsigndocumentSteptype: ").Append(EEzsigndocumentSteptype).Append("\n");
            sb.Append("  IEzsigndocumentStepformtotal: ").Append(IEzsigndocumentStepformtotal).Append("\n");
            sb.Append("  IEzsigndocumentStepformcurrent: ").Append(IEzsigndocumentStepformcurrent).Append("\n");
            sb.Append("  IEzsigndocumentStepsignaturetotal: ").Append(IEzsigndocumentStepsignaturetotal).Append("\n");
            sb.Append("  IEzsigndocumentStepsignatureCurrent: ").Append(IEzsigndocumentStepsignatureCurrent).Append("\n");
            sb.Append("  AObjEzsignfoldersignerassociationstatus: ").Append(AObjEzsignfoldersignerassociationstatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigndocumentGetObjectV1ResponseMPayload);
        }

        /// <summary>
        /// Returns true if EzsigndocumentGetObjectV1ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigndocumentGetObjectV1ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigndocumentGetObjectV1ResponseMPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigndocumentID == input.PkiEzsigndocumentID ||
                    this.PkiEzsigndocumentID.Equals(input.PkiEzsigndocumentID)
                ) && 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID)
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationIDDeclinedtosign == input.FkiEzsignfoldersignerassociationIDDeclinedtosign ||
                    this.FkiEzsignfoldersignerassociationIDDeclinedtosign.Equals(input.FkiEzsignfoldersignerassociationIDDeclinedtosign)
                ) && 
                (
                    this.DtEzsigndocumentDuedate == input.DtEzsigndocumentDuedate ||
                    (this.DtEzsigndocumentDuedate != null &&
                    this.DtEzsigndocumentDuedate.Equals(input.DtEzsigndocumentDuedate))
                ) && 
                (
                    this.DtEzsignformCompleted == input.DtEzsignformCompleted ||
                    (this.DtEzsignformCompleted != null &&
                    this.DtEzsignformCompleted.Equals(input.DtEzsignformCompleted))
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    this.FkiLanguageID.Equals(input.FkiLanguageID)
                ) && 
                (
                    this.SEzsigndocumentName == input.SEzsigndocumentName ||
                    (this.SEzsigndocumentName != null &&
                    this.SEzsigndocumentName.Equals(input.SEzsigndocumentName))
                ) && 
                (
                    this.EEzsigndocumentStep == input.EEzsigndocumentStep ||
                    this.EEzsigndocumentStep.Equals(input.EEzsigndocumentStep)
                ) && 
                (
                    this.DtEzsigndocumentFirstsend == input.DtEzsigndocumentFirstsend ||
                    (this.DtEzsigndocumentFirstsend != null &&
                    this.DtEzsigndocumentFirstsend.Equals(input.DtEzsigndocumentFirstsend))
                ) && 
                (
                    this.DtEzsigndocumentLastsend == input.DtEzsigndocumentLastsend ||
                    (this.DtEzsigndocumentLastsend != null &&
                    this.DtEzsigndocumentLastsend.Equals(input.DtEzsigndocumentLastsend))
                ) && 
                (
                    this.IEzsigndocumentOrder == input.IEzsigndocumentOrder ||
                    this.IEzsigndocumentOrder.Equals(input.IEzsigndocumentOrder)
                ) && 
                (
                    this.IEzsigndocumentPagetotal == input.IEzsigndocumentPagetotal ||
                    this.IEzsigndocumentPagetotal.Equals(input.IEzsigndocumentPagetotal)
                ) && 
                (
                    this.IEzsigndocumentSignaturesigned == input.IEzsigndocumentSignaturesigned ||
                    this.IEzsigndocumentSignaturesigned.Equals(input.IEzsigndocumentSignaturesigned)
                ) && 
                (
                    this.IEzsigndocumentSignaturetotal == input.IEzsigndocumentSignaturetotal ||
                    this.IEzsigndocumentSignaturetotal.Equals(input.IEzsigndocumentSignaturetotal)
                ) && 
                (
                    this.SEzsigndocumentMD5initial == input.SEzsigndocumentMD5initial ||
                    (this.SEzsigndocumentMD5initial != null &&
                    this.SEzsigndocumentMD5initial.Equals(input.SEzsigndocumentMD5initial))
                ) && 
                (
                    this.TEzsigndocumentDeclinedtosignreason == input.TEzsigndocumentDeclinedtosignreason ||
                    (this.TEzsigndocumentDeclinedtosignreason != null &&
                    this.TEzsigndocumentDeclinedtosignreason.Equals(input.TEzsigndocumentDeclinedtosignreason))
                ) && 
                (
                    this.SEzsigndocumentMD5signed == input.SEzsigndocumentMD5signed ||
                    (this.SEzsigndocumentMD5signed != null &&
                    this.SEzsigndocumentMD5signed.Equals(input.SEzsigndocumentMD5signed))
                ) && 
                (
                    this.BEzsigndocumentEzsignform == input.BEzsigndocumentEzsignform ||
                    this.BEzsigndocumentEzsignform.Equals(input.BEzsigndocumentEzsignform)
                ) && 
                (
                    this.BEzsigndocumentHassignedsignatures == input.BEzsigndocumentHassignedsignatures ||
                    this.BEzsigndocumentHassignedsignatures.Equals(input.BEzsigndocumentHassignedsignatures)
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                ) && 
                (
                    this.SEzsigndocumentExternalid == input.SEzsigndocumentExternalid ||
                    (this.SEzsigndocumentExternalid != null &&
                    this.SEzsigndocumentExternalid.Equals(input.SEzsigndocumentExternalid))
                ) && 
                (
                    this.EEzsigndocumentSteptype == input.EEzsigndocumentSteptype ||
                    this.EEzsigndocumentSteptype.Equals(input.EEzsigndocumentSteptype)
                ) && 
                (
                    this.IEzsigndocumentStepformtotal == input.IEzsigndocumentStepformtotal ||
                    this.IEzsigndocumentStepformtotal.Equals(input.IEzsigndocumentStepformtotal)
                ) && 
                (
                    this.IEzsigndocumentStepformcurrent == input.IEzsigndocumentStepformcurrent ||
                    this.IEzsigndocumentStepformcurrent.Equals(input.IEzsigndocumentStepformcurrent)
                ) && 
                (
                    this.IEzsigndocumentStepsignaturetotal == input.IEzsigndocumentStepsignaturetotal ||
                    this.IEzsigndocumentStepsignaturetotal.Equals(input.IEzsigndocumentStepsignaturetotal)
                ) && 
                (
                    this.IEzsigndocumentStepsignatureCurrent == input.IEzsigndocumentStepsignatureCurrent ||
                    this.IEzsigndocumentStepsignatureCurrent.Equals(input.IEzsigndocumentStepsignatureCurrent)
                ) && 
                (
                    this.AObjEzsignfoldersignerassociationstatus == input.AObjEzsignfoldersignerassociationstatus ||
                    this.AObjEzsignfoldersignerassociationstatus != null &&
                    input.AObjEzsignfoldersignerassociationstatus != null &&
                    this.AObjEzsignfoldersignerassociationstatus.SequenceEqual(input.AObjEzsignfoldersignerassociationstatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigndocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfolderID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfoldersignerassociationIDDeclinedtosign.GetHashCode();
                if (this.DtEzsigndocumentDuedate != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsigndocumentDuedate.GetHashCode();
                }
                if (this.DtEzsignformCompleted != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignformCompleted.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiLanguageID.GetHashCode();
                if (this.SEzsigndocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsigndocumentStep.GetHashCode();
                if (this.DtEzsigndocumentFirstsend != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsigndocumentFirstsend.GetHashCode();
                }
                if (this.DtEzsigndocumentLastsend != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsigndocumentLastsend.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IEzsigndocumentOrder.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentPagetotal.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentSignaturesigned.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentSignaturetotal.GetHashCode();
                if (this.SEzsigndocumentMD5initial != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentMD5initial.GetHashCode();
                }
                if (this.TEzsigndocumentDeclinedtosignreason != null)
                {
                    hashCode = (hashCode * 59) + this.TEzsigndocumentDeclinedtosignreason.GetHashCode();
                }
                if (this.SEzsigndocumentMD5signed != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentMD5signed.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzsigndocumentEzsignform.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsigndocumentHassignedsignatures.GetHashCode();
                if (this.ObjAudit != null)
                {
                    hashCode = (hashCode * 59) + this.ObjAudit.GetHashCode();
                }
                if (this.SEzsigndocumentExternalid != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentExternalid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsigndocumentSteptype.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentStepformtotal.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentStepformcurrent.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentStepsignaturetotal.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsigndocumentStepsignatureCurrent.GetHashCode();
                if (this.AObjEzsignfoldersignerassociationstatus != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignfoldersignerassociationstatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigndocumentID (int) minimum
            if (this.PkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzsigndocumentID" });
            }

            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            // FkiEzsignfoldersignerassociationIDDeclinedtosign (int) minimum
            if (this.FkiEzsignfoldersignerassociationIDDeclinedtosign < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationIDDeclinedtosign, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationIDDeclinedtosign" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            // IEzsigndocumentOrder (int) minimum
            if (this.IEzsigndocumentOrder < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndocumentOrder, must be a value greater than or equal to 1.", new [] { "IEzsigndocumentOrder" });
            }

            // IEzsigndocumentPagetotal (int) minimum
            if (this.IEzsigndocumentPagetotal < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndocumentPagetotal, must be a value greater than or equal to 1.", new [] { "IEzsigndocumentPagetotal" });
            }

            // IEzsigndocumentSignaturesigned (int) minimum
            if (this.IEzsigndocumentSignaturesigned < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndocumentSignaturesigned, must be a value greater than or equal to 0.", new [] { "IEzsigndocumentSignaturesigned" });
            }

            // IEzsigndocumentSignaturetotal (int) minimum
            if (this.IEzsigndocumentSignaturetotal < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndocumentSignaturetotal, must be a value greater than or equal to 0.", new [] { "IEzsigndocumentSignaturetotal" });
            }

            if (this.SEzsigndocumentExternalid != null) {
                // SEzsigndocumentExternalid (string) pattern
                Regex regexSEzsigndocumentExternalid = new Regex(@"^.{0,64}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigndocumentExternalid.Match(this.SEzsigndocumentExternalid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigndocumentExternalid, must match a pattern of " + regexSEzsigndocumentExternalid, new [] { "SEzsigndocumentExternalid" });
                }
            }

            yield break;
        }
    }

}
