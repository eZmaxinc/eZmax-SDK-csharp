/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A User Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class UserResponseCompound :  IEquatable<UserResponseCompound>
    {
        /// <summary>
        /// Gets or Sets EUserOrigin
        /// </summary>
        [DataMember(Name="eUserOrigin", EmitDefaultValue=true)]
        public FieldEUserOrigin EUserOrigin { get; set; }
        /// <summary>
        /// Gets or Sets EUserType
        /// </summary>
        [DataMember(Name="eUserType", EmitDefaultValue=true)]
        public FieldEUserType EUserType { get; set; }
        /// <summary>
        /// Gets or Sets EUserLogintype
        /// </summary>
        [DataMember(Name="eUserLogintype", EmitDefaultValue=true)]
        public FieldEUserLogintype EUserLogintype { get; set; }
        /// <summary>
        /// Gets or Sets EUserEzsignaccess
        /// </summary>
        [DataMember(Name="eUserEzsignaccess", EmitDefaultValue=true)]
        public FieldEUserEzsignaccess EUserEzsignaccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiAgentID">The unique ID of the Agent..</param>
        /// <param name="fkiBrokerID">The unique ID of the Broker..</param>
        /// <param name="fkiAssistantID">The unique ID of the Assistant..</param>
        /// <param name="fkiEmployeeID">The unique ID of the Employee..</param>
        /// <param name="fkiCompanyIDDefault">The unique ID of the Company (required).</param>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="fkiDepartmentIDDefault">The unique ID of the Department (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="fkiTimezoneID">The unique ID of the Timezone (required).</param>
        /// <param name="sTimezoneName">The description of the Timezone (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="objEmail">objEmail (required).</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal. (required).</param>
        /// <param name="sBillingentityinternalDescriptionX">The description of the Billingentityinternal in the language of the requester (required).</param>
        /// <param name="objPhoneHome">objPhoneHome.</param>
        /// <param name="objPhoneSMS">objPhoneSMS.</param>
        /// <param name="fkiSecretquestionID">The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)|.</param>
        /// <param name="fkiModuleIDForm">The unique ID of the Module.</param>
        /// <param name="sModuleNameX">The Name of the Module in the language of the requester.</param>
        /// <param name="eUserOrigin">eUserOrigin (required).</param>
        /// <param name="eUserType">eUserType (required).</param>
        /// <param name="eUserLogintype">eUserLogintype (required).</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sUserLoginname">The login name of the User. (required).</param>
        /// <param name="eUserEzsignaccess">eUserEzsignaccess (required).</param>
        /// <param name="dtUserLastlogondate">The last logon date of the User.</param>
        /// <param name="dtUserPasswordchanged">The date at which the User&#39;s password was last changed.</param>
        /// <param name="dtUserEzsignprepaidexpiration">The eZsign prepaid expiration date.</param>
        /// <param name="bUserIsactive">Whether the User is active or not (required).</param>
        /// <param name="bUserValidatebyadministration">Whether if the transactions in which the User is implicated must be validated by administrative personnel or not.</param>
        /// <param name="bUserValidatebydirector">Whether if the transactions in which the User is implicated must be validated by a director or not.</param>
        /// <param name="bUserAttachmentautoverified">Whether if Attachments uploaded by the User must be validated or not.</param>
        /// <param name="bUserChangepassword">Whether if the User is forced to change its password (required).</param>
        /// <param name="objAudit">objAudit (required).</param>
        public UserResponseCompound(int pkiUserID = default(int), int fkiAgentID = default(int), int fkiBrokerID = default(int), int fkiAssistantID = default(int), int fkiEmployeeID = default(int), int fkiCompanyIDDefault = default(int), string sCompanyNameX = default(string), int fkiDepartmentIDDefault = default(int), string sDepartmentNameX = default(string), int fkiTimezoneID = default(int), string sTimezoneName = default(string), int fkiLanguageID = default(int), string sLanguageNameX = default(string), EmailResponseCompound objEmail = default(EmailResponseCompound), int fkiBillingentityinternalID = default(int), string sBillingentityinternalDescriptionX = default(string), PhoneResponseCompound objPhoneHome = default(PhoneResponseCompound), PhoneResponseCompound objPhoneSMS = default(PhoneResponseCompound), int fkiSecretquestionID = default(int), int fkiModuleIDForm = default(int), string sModuleNameX = default(string), FieldEUserOrigin eUserOrigin = default(FieldEUserOrigin), FieldEUserType eUserType = default(FieldEUserType), FieldEUserLogintype eUserLogintype = default(FieldEUserLogintype), string sUserFirstname = default(string), string sUserLastname = default(string), string sUserLoginname = default(string), FieldEUserEzsignaccess eUserEzsignaccess = default(FieldEUserEzsignaccess), string dtUserLastlogondate = default(string), string dtUserPasswordchanged = default(string), string dtUserEzsignprepaidexpiration = default(string), bool bUserIsactive = default(bool), bool bUserValidatebyadministration = default(bool), bool bUserValidatebydirector = default(bool), bool bUserAttachmentautoverified = default(bool), bool bUserChangepassword = default(bool), CommonAudit objAudit = default(CommonAudit))
        {
            // to ensure "pkiUserID" is required (not null)
            if (pkiUserID == null)
            {
                throw new InvalidDataException("pkiUserID is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.PkiUserID = pkiUserID;
            }

            // to ensure "fkiCompanyIDDefault" is required (not null)
            if (fkiCompanyIDDefault == null)
            {
                throw new InvalidDataException("fkiCompanyIDDefault is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiCompanyIDDefault = fkiCompanyIDDefault;
            }

            // to ensure "sCompanyNameX" is required (not null)
            if (sCompanyNameX == null)
            {
                throw new InvalidDataException("sCompanyNameX is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SCompanyNameX = sCompanyNameX;
            }

            // to ensure "fkiDepartmentIDDefault" is required (not null)
            if (fkiDepartmentIDDefault == null)
            {
                throw new InvalidDataException("fkiDepartmentIDDefault is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiDepartmentIDDefault = fkiDepartmentIDDefault;
            }

            // to ensure "sDepartmentNameX" is required (not null)
            if (sDepartmentNameX == null)
            {
                throw new InvalidDataException("sDepartmentNameX is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SDepartmentNameX = sDepartmentNameX;
            }

            // to ensure "fkiTimezoneID" is required (not null)
            if (fkiTimezoneID == null)
            {
                throw new InvalidDataException("fkiTimezoneID is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiTimezoneID = fkiTimezoneID;
            }

            // to ensure "sTimezoneName" is required (not null)
            if (sTimezoneName == null)
            {
                throw new InvalidDataException("sTimezoneName is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.STimezoneName = sTimezoneName;
            }

            // to ensure "fkiLanguageID" is required (not null)
            if (fkiLanguageID == null)
            {
                throw new InvalidDataException("fkiLanguageID is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiLanguageID = fkiLanguageID;
            }

            // to ensure "sLanguageNameX" is required (not null)
            if (sLanguageNameX == null)
            {
                throw new InvalidDataException("sLanguageNameX is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SLanguageNameX = sLanguageNameX;
            }

            // to ensure "objEmail" is required (not null)
            if (objEmail == null)
            {
                throw new InvalidDataException("objEmail is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.ObjEmail = objEmail;
            }

            // to ensure "fkiBillingentityinternalID" is required (not null)
            if (fkiBillingentityinternalID == null)
            {
                throw new InvalidDataException("fkiBillingentityinternalID is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiBillingentityinternalID = fkiBillingentityinternalID;
            }

            // to ensure "sBillingentityinternalDescriptionX" is required (not null)
            if (sBillingentityinternalDescriptionX == null)
            {
                throw new InvalidDataException("sBillingentityinternalDescriptionX is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SBillingentityinternalDescriptionX = sBillingentityinternalDescriptionX;
            }

            // to ensure "eUserOrigin" is required (not null)
            if (eUserOrigin == null)
            {
                throw new InvalidDataException("eUserOrigin is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.EUserOrigin = eUserOrigin;
            }

            // to ensure "eUserType" is required (not null)
            if (eUserType == null)
            {
                throw new InvalidDataException("eUserType is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.EUserType = eUserType;
            }

            // to ensure "eUserLogintype" is required (not null)
            if (eUserLogintype == null)
            {
                throw new InvalidDataException("eUserLogintype is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.EUserLogintype = eUserLogintype;
            }

            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new InvalidDataException("sUserFirstname is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SUserFirstname = sUserFirstname;
            }

            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new InvalidDataException("sUserLastname is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SUserLastname = sUserLastname;
            }

            // to ensure "sUserLoginname" is required (not null)
            if (sUserLoginname == null)
            {
                throw new InvalidDataException("sUserLoginname is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.SUserLoginname = sUserLoginname;
            }

            // to ensure "eUserEzsignaccess" is required (not null)
            if (eUserEzsignaccess == null)
            {
                throw new InvalidDataException("eUserEzsignaccess is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.EUserEzsignaccess = eUserEzsignaccess;
            }

            // to ensure "bUserIsactive" is required (not null)
            if (bUserIsactive == null)
            {
                throw new InvalidDataException("bUserIsactive is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.BUserIsactive = bUserIsactive;
            }

            // to ensure "bUserChangepassword" is required (not null)
            if (bUserChangepassword == null)
            {
                throw new InvalidDataException("bUserChangepassword is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.BUserChangepassword = bUserChangepassword;
            }

            // to ensure "objAudit" is required (not null)
            if (objAudit == null)
            {
                throw new InvalidDataException("objAudit is a required property for UserResponseCompound and cannot be null");
            }
            else
            {
                this.ObjAudit = objAudit;
            }

            this.FkiAgentID = fkiAgentID;
            this.FkiBrokerID = fkiBrokerID;
            this.FkiAssistantID = fkiAssistantID;
            this.FkiEmployeeID = fkiEmployeeID;
            this.ObjPhoneHome = objPhoneHome;
            this.ObjPhoneSMS = objPhoneSMS;
            this.FkiSecretquestionID = fkiSecretquestionID;
            this.FkiModuleIDForm = fkiModuleIDForm;
            this.SModuleNameX = sModuleNameX;
            this.DtUserLastlogondate = dtUserLastlogondate;
            this.DtUserPasswordchanged = dtUserPasswordchanged;
            this.DtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration;
            this.BUserValidatebyadministration = bUserValidatebyadministration;
            this.BUserValidatebydirector = bUserValidatebydirector;
            this.BUserAttachmentautoverified = bUserAttachmentautoverified;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="pkiUserID", EmitDefaultValue=true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Agent.
        /// </summary>
        /// <value>The unique ID of the Agent.</value>
        [DataMember(Name="fkiAgentID", EmitDefaultValue=false)]
        public int FkiAgentID { get; set; }

        /// <summary>
        /// The unique ID of the Broker.
        /// </summary>
        /// <value>The unique ID of the Broker.</value>
        [DataMember(Name="fkiBrokerID", EmitDefaultValue=false)]
        public int FkiBrokerID { get; set; }

        /// <summary>
        /// The unique ID of the Assistant.
        /// </summary>
        /// <value>The unique ID of the Assistant.</value>
        [DataMember(Name="fkiAssistantID", EmitDefaultValue=false)]
        public int FkiAssistantID { get; set; }

        /// <summary>
        /// The unique ID of the Employee.
        /// </summary>
        /// <value>The unique ID of the Employee.</value>
        [DataMember(Name="fkiEmployeeID", EmitDefaultValue=false)]
        public int FkiEmployeeID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        [DataMember(Name="fkiCompanyIDDefault", EmitDefaultValue=true)]
        public int FkiCompanyIDDefault { get; set; }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        [DataMember(Name="sCompanyNameX", EmitDefaultValue=true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        [DataMember(Name="fkiDepartmentIDDefault", EmitDefaultValue=true)]
        public int FkiDepartmentIDDefault { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        [DataMember(Name="sDepartmentNameX", EmitDefaultValue=true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// The unique ID of the Timezone
        /// </summary>
        /// <value>The unique ID of the Timezone</value>
        [DataMember(Name="fkiTimezoneID", EmitDefaultValue=true)]
        public int FkiTimezoneID { get; set; }

        /// <summary>
        /// The description of the Timezone
        /// </summary>
        /// <value>The description of the Timezone</value>
        [DataMember(Name="sTimezoneName", EmitDefaultValue=true)]
        public string STimezoneName { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        [DataMember(Name="fkiLanguageID", EmitDefaultValue=true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        [DataMember(Name="sLanguageNameX", EmitDefaultValue=true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// Gets or Sets ObjEmail
        /// </summary>
        [DataMember(Name="objEmail", EmitDefaultValue=true)]
        public EmailResponseCompound ObjEmail { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        [DataMember(Name="fkiBillingentityinternalID", EmitDefaultValue=true)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in the language of the requester
        /// </summary>
        /// <value>The description of the Billingentityinternal in the language of the requester</value>
        [DataMember(Name="sBillingentityinternalDescriptionX", EmitDefaultValue=true)]
        public string SBillingentityinternalDescriptionX { get; set; }

        /// <summary>
        /// Gets or Sets ObjPhoneHome
        /// </summary>
        [DataMember(Name="objPhoneHome", EmitDefaultValue=false)]
        public PhoneResponseCompound ObjPhoneHome { get; set; }

        /// <summary>
        /// Gets or Sets ObjPhoneSMS
        /// </summary>
        [DataMember(Name="objPhoneSMS", EmitDefaultValue=false)]
        public PhoneResponseCompound ObjPhoneSMS { get; set; }

        /// <summary>
        /// The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)|
        /// </summary>
        /// <value>The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)|</value>
        [DataMember(Name="fkiSecretquestionID", EmitDefaultValue=false)]
        public int FkiSecretquestionID { get; set; }

        /// <summary>
        /// The unique ID of the Module
        /// </summary>
        /// <value>The unique ID of the Module</value>
        [DataMember(Name="fkiModuleIDForm", EmitDefaultValue=false)]
        public int FkiModuleIDForm { get; set; }

        /// <summary>
        /// The Name of the Module in the language of the requester
        /// </summary>
        /// <value>The Name of the Module in the language of the requester</value>
        [DataMember(Name="sModuleNameX", EmitDefaultValue=false)]
        public string SModuleNameX { get; set; }




        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        [DataMember(Name="sUserFirstname", EmitDefaultValue=true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        [DataMember(Name="sUserLastname", EmitDefaultValue=true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        [DataMember(Name="sUserLoginname", EmitDefaultValue=true)]
        public string SUserLoginname { get; set; }


        /// <summary>
        /// The last logon date of the User
        /// </summary>
        /// <value>The last logon date of the User</value>
        [DataMember(Name="dtUserLastlogondate", EmitDefaultValue=false)]
        public string DtUserLastlogondate { get; set; }

        /// <summary>
        /// The date at which the User&#39;s password was last changed
        /// </summary>
        /// <value>The date at which the User&#39;s password was last changed</value>
        [DataMember(Name="dtUserPasswordchanged", EmitDefaultValue=false)]
        public string DtUserPasswordchanged { get; set; }

        /// <summary>
        /// The eZsign prepaid expiration date
        /// </summary>
        /// <value>The eZsign prepaid expiration date</value>
        [DataMember(Name="dtUserEzsignprepaidexpiration", EmitDefaultValue=false)]
        public string DtUserEzsignprepaidexpiration { get; set; }

        /// <summary>
        /// Whether the User is active or not
        /// </summary>
        /// <value>Whether the User is active or not</value>
        [DataMember(Name="bUserIsactive", EmitDefaultValue=true)]
        public bool BUserIsactive { get; set; }

        /// <summary>
        /// Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
        /// </summary>
        /// <value>Whether if the transactions in which the User is implicated must be validated by administrative personnel or not</value>
        [DataMember(Name="bUserValidatebyadministration", EmitDefaultValue=false)]
        public bool BUserValidatebyadministration { get; set; }

        /// <summary>
        /// Whether if the transactions in which the User is implicated must be validated by a director or not
        /// </summary>
        /// <value>Whether if the transactions in which the User is implicated must be validated by a director or not</value>
        [DataMember(Name="bUserValidatebydirector", EmitDefaultValue=false)]
        public bool BUserValidatebydirector { get; set; }

        /// <summary>
        /// Whether if Attachments uploaded by the User must be validated or not
        /// </summary>
        /// <value>Whether if Attachments uploaded by the User must be validated or not</value>
        [DataMember(Name="bUserAttachmentautoverified", EmitDefaultValue=false)]
        public bool BUserAttachmentautoverified { get; set; }

        /// <summary>
        /// Whether if the User is forced to change its password
        /// </summary>
        /// <value>Whether if the User is forced to change its password</value>
        [DataMember(Name="bUserChangepassword", EmitDefaultValue=true)]
        public bool BUserChangepassword { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name="objAudit", EmitDefaultValue=true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserResponseCompound {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  FkiAgentID: ").Append(FkiAgentID).Append("\n");
            sb.Append("  FkiBrokerID: ").Append(FkiBrokerID).Append("\n");
            sb.Append("  FkiAssistantID: ").Append(FkiAssistantID).Append("\n");
            sb.Append("  FkiEmployeeID: ").Append(FkiEmployeeID).Append("\n");
            sb.Append("  FkiCompanyIDDefault: ").Append(FkiCompanyIDDefault).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  FkiDepartmentIDDefault: ").Append(FkiDepartmentIDDefault).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  FkiTimezoneID: ").Append(FkiTimezoneID).Append("\n");
            sb.Append("  STimezoneName: ").Append(STimezoneName).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  ObjEmail: ").Append(ObjEmail).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  SBillingentityinternalDescriptionX: ").Append(SBillingentityinternalDescriptionX).Append("\n");
            sb.Append("  ObjPhoneHome: ").Append(ObjPhoneHome).Append("\n");
            sb.Append("  ObjPhoneSMS: ").Append(ObjPhoneSMS).Append("\n");
            sb.Append("  FkiSecretquestionID: ").Append(FkiSecretquestionID).Append("\n");
            sb.Append("  FkiModuleIDForm: ").Append(FkiModuleIDForm).Append("\n");
            sb.Append("  SModuleNameX: ").Append(SModuleNameX).Append("\n");
            sb.Append("  EUserOrigin: ").Append(EUserOrigin).Append("\n");
            sb.Append("  EUserType: ").Append(EUserType).Append("\n");
            sb.Append("  EUserLogintype: ").Append(EUserLogintype).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("  EUserEzsignaccess: ").Append(EUserEzsignaccess).Append("\n");
            sb.Append("  DtUserLastlogondate: ").Append(DtUserLastlogondate).Append("\n");
            sb.Append("  DtUserPasswordchanged: ").Append(DtUserPasswordchanged).Append("\n");
            sb.Append("  DtUserEzsignprepaidexpiration: ").Append(DtUserEzsignprepaidexpiration).Append("\n");
            sb.Append("  BUserIsactive: ").Append(BUserIsactive).Append("\n");
            sb.Append("  BUserValidatebyadministration: ").Append(BUserValidatebyadministration).Append("\n");
            sb.Append("  BUserValidatebydirector: ").Append(BUserValidatebydirector).Append("\n");
            sb.Append("  BUserAttachmentautoverified: ").Append(BUserAttachmentautoverified).Append("\n");
            sb.Append("  BUserChangepassword: ").Append(BUserChangepassword).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResponseCompound);
        }

        /// <summary>
        /// Returns true if UserResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUserID == input.PkiUserID ||
                    (this.PkiUserID != null &&
                    this.PkiUserID.Equals(input.PkiUserID))
                ) && 
                (
                    this.FkiAgentID == input.FkiAgentID ||
                    (this.FkiAgentID != null &&
                    this.FkiAgentID.Equals(input.FkiAgentID))
                ) && 
                (
                    this.FkiBrokerID == input.FkiBrokerID ||
                    (this.FkiBrokerID != null &&
                    this.FkiBrokerID.Equals(input.FkiBrokerID))
                ) && 
                (
                    this.FkiAssistantID == input.FkiAssistantID ||
                    (this.FkiAssistantID != null &&
                    this.FkiAssistantID.Equals(input.FkiAssistantID))
                ) && 
                (
                    this.FkiEmployeeID == input.FkiEmployeeID ||
                    (this.FkiEmployeeID != null &&
                    this.FkiEmployeeID.Equals(input.FkiEmployeeID))
                ) && 
                (
                    this.FkiCompanyIDDefault == input.FkiCompanyIDDefault ||
                    (this.FkiCompanyIDDefault != null &&
                    this.FkiCompanyIDDefault.Equals(input.FkiCompanyIDDefault))
                ) && 
                (
                    this.SCompanyNameX == input.SCompanyNameX ||
                    (this.SCompanyNameX != null &&
                    this.SCompanyNameX.Equals(input.SCompanyNameX))
                ) && 
                (
                    this.FkiDepartmentIDDefault == input.FkiDepartmentIDDefault ||
                    (this.FkiDepartmentIDDefault != null &&
                    this.FkiDepartmentIDDefault.Equals(input.FkiDepartmentIDDefault))
                ) && 
                (
                    this.SDepartmentNameX == input.SDepartmentNameX ||
                    (this.SDepartmentNameX != null &&
                    this.SDepartmentNameX.Equals(input.SDepartmentNameX))
                ) && 
                (
                    this.FkiTimezoneID == input.FkiTimezoneID ||
                    (this.FkiTimezoneID != null &&
                    this.FkiTimezoneID.Equals(input.FkiTimezoneID))
                ) && 
                (
                    this.STimezoneName == input.STimezoneName ||
                    (this.STimezoneName != null &&
                    this.STimezoneName.Equals(input.STimezoneName))
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    (this.FkiLanguageID != null &&
                    this.FkiLanguageID.Equals(input.FkiLanguageID))
                ) && 
                (
                    this.SLanguageNameX == input.SLanguageNameX ||
                    (this.SLanguageNameX != null &&
                    this.SLanguageNameX.Equals(input.SLanguageNameX))
                ) && 
                (
                    this.ObjEmail == input.ObjEmail ||
                    (this.ObjEmail != null &&
                    this.ObjEmail.Equals(input.ObjEmail))
                ) && 
                (
                    this.FkiBillingentityinternalID == input.FkiBillingentityinternalID ||
                    (this.FkiBillingentityinternalID != null &&
                    this.FkiBillingentityinternalID.Equals(input.FkiBillingentityinternalID))
                ) && 
                (
                    this.SBillingentityinternalDescriptionX == input.SBillingentityinternalDescriptionX ||
                    (this.SBillingentityinternalDescriptionX != null &&
                    this.SBillingentityinternalDescriptionX.Equals(input.SBillingentityinternalDescriptionX))
                ) && 
                (
                    this.ObjPhoneHome == input.ObjPhoneHome ||
                    (this.ObjPhoneHome != null &&
                    this.ObjPhoneHome.Equals(input.ObjPhoneHome))
                ) && 
                (
                    this.ObjPhoneSMS == input.ObjPhoneSMS ||
                    (this.ObjPhoneSMS != null &&
                    this.ObjPhoneSMS.Equals(input.ObjPhoneSMS))
                ) && 
                (
                    this.FkiSecretquestionID == input.FkiSecretquestionID ||
                    (this.FkiSecretquestionID != null &&
                    this.FkiSecretquestionID.Equals(input.FkiSecretquestionID))
                ) && 
                (
                    this.FkiModuleIDForm == input.FkiModuleIDForm ||
                    (this.FkiModuleIDForm != null &&
                    this.FkiModuleIDForm.Equals(input.FkiModuleIDForm))
                ) && 
                (
                    this.SModuleNameX == input.SModuleNameX ||
                    (this.SModuleNameX != null &&
                    this.SModuleNameX.Equals(input.SModuleNameX))
                ) && 
                (
                    this.EUserOrigin == input.EUserOrigin ||
                    (this.EUserOrigin != null &&
                    this.EUserOrigin.Equals(input.EUserOrigin))
                ) && 
                (
                    this.EUserType == input.EUserType ||
                    (this.EUserType != null &&
                    this.EUserType.Equals(input.EUserType))
                ) && 
                (
                    this.EUserLogintype == input.EUserLogintype ||
                    (this.EUserLogintype != null &&
                    this.EUserLogintype.Equals(input.EUserLogintype))
                ) && 
                (
                    this.SUserFirstname == input.SUserFirstname ||
                    (this.SUserFirstname != null &&
                    this.SUserFirstname.Equals(input.SUserFirstname))
                ) && 
                (
                    this.SUserLastname == input.SUserLastname ||
                    (this.SUserLastname != null &&
                    this.SUserLastname.Equals(input.SUserLastname))
                ) && 
                (
                    this.SUserLoginname == input.SUserLoginname ||
                    (this.SUserLoginname != null &&
                    this.SUserLoginname.Equals(input.SUserLoginname))
                ) && 
                (
                    this.EUserEzsignaccess == input.EUserEzsignaccess ||
                    (this.EUserEzsignaccess != null &&
                    this.EUserEzsignaccess.Equals(input.EUserEzsignaccess))
                ) && 
                (
                    this.DtUserLastlogondate == input.DtUserLastlogondate ||
                    (this.DtUserLastlogondate != null &&
                    this.DtUserLastlogondate.Equals(input.DtUserLastlogondate))
                ) && 
                (
                    this.DtUserPasswordchanged == input.DtUserPasswordchanged ||
                    (this.DtUserPasswordchanged != null &&
                    this.DtUserPasswordchanged.Equals(input.DtUserPasswordchanged))
                ) && 
                (
                    this.DtUserEzsignprepaidexpiration == input.DtUserEzsignprepaidexpiration ||
                    (this.DtUserEzsignprepaidexpiration != null &&
                    this.DtUserEzsignprepaidexpiration.Equals(input.DtUserEzsignprepaidexpiration))
                ) && 
                (
                    this.BUserIsactive == input.BUserIsactive ||
                    (this.BUserIsactive != null &&
                    this.BUserIsactive.Equals(input.BUserIsactive))
                ) && 
                (
                    this.BUserValidatebyadministration == input.BUserValidatebyadministration ||
                    (this.BUserValidatebyadministration != null &&
                    this.BUserValidatebyadministration.Equals(input.BUserValidatebyadministration))
                ) && 
                (
                    this.BUserValidatebydirector == input.BUserValidatebydirector ||
                    (this.BUserValidatebydirector != null &&
                    this.BUserValidatebydirector.Equals(input.BUserValidatebydirector))
                ) && 
                (
                    this.BUserAttachmentautoverified == input.BUserAttachmentautoverified ||
                    (this.BUserAttachmentautoverified != null &&
                    this.BUserAttachmentautoverified.Equals(input.BUserAttachmentautoverified))
                ) && 
                (
                    this.BUserChangepassword == input.BUserChangepassword ||
                    (this.BUserChangepassword != null &&
                    this.BUserChangepassword.Equals(input.BUserChangepassword))
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUserID != null)
                    hashCode = hashCode * 59 + this.PkiUserID.GetHashCode();
                if (this.FkiAgentID != null)
                    hashCode = hashCode * 59 + this.FkiAgentID.GetHashCode();
                if (this.FkiBrokerID != null)
                    hashCode = hashCode * 59 + this.FkiBrokerID.GetHashCode();
                if (this.FkiAssistantID != null)
                    hashCode = hashCode * 59 + this.FkiAssistantID.GetHashCode();
                if (this.FkiEmployeeID != null)
                    hashCode = hashCode * 59 + this.FkiEmployeeID.GetHashCode();
                if (this.FkiCompanyIDDefault != null)
                    hashCode = hashCode * 59 + this.FkiCompanyIDDefault.GetHashCode();
                if (this.SCompanyNameX != null)
                    hashCode = hashCode * 59 + this.SCompanyNameX.GetHashCode();
                if (this.FkiDepartmentIDDefault != null)
                    hashCode = hashCode * 59 + this.FkiDepartmentIDDefault.GetHashCode();
                if (this.SDepartmentNameX != null)
                    hashCode = hashCode * 59 + this.SDepartmentNameX.GetHashCode();
                if (this.FkiTimezoneID != null)
                    hashCode = hashCode * 59 + this.FkiTimezoneID.GetHashCode();
                if (this.STimezoneName != null)
                    hashCode = hashCode * 59 + this.STimezoneName.GetHashCode();
                if (this.FkiLanguageID != null)
                    hashCode = hashCode * 59 + this.FkiLanguageID.GetHashCode();
                if (this.SLanguageNameX != null)
                    hashCode = hashCode * 59 + this.SLanguageNameX.GetHashCode();
                if (this.ObjEmail != null)
                    hashCode = hashCode * 59 + this.ObjEmail.GetHashCode();
                if (this.FkiBillingentityinternalID != null)
                    hashCode = hashCode * 59 + this.FkiBillingentityinternalID.GetHashCode();
                if (this.SBillingentityinternalDescriptionX != null)
                    hashCode = hashCode * 59 + this.SBillingentityinternalDescriptionX.GetHashCode();
                if (this.ObjPhoneHome != null)
                    hashCode = hashCode * 59 + this.ObjPhoneHome.GetHashCode();
                if (this.ObjPhoneSMS != null)
                    hashCode = hashCode * 59 + this.ObjPhoneSMS.GetHashCode();
                if (this.FkiSecretquestionID != null)
                    hashCode = hashCode * 59 + this.FkiSecretquestionID.GetHashCode();
                if (this.FkiModuleIDForm != null)
                    hashCode = hashCode * 59 + this.FkiModuleIDForm.GetHashCode();
                if (this.SModuleNameX != null)
                    hashCode = hashCode * 59 + this.SModuleNameX.GetHashCode();
                if (this.EUserOrigin != null)
                    hashCode = hashCode * 59 + this.EUserOrigin.GetHashCode();
                if (this.EUserType != null)
                    hashCode = hashCode * 59 + this.EUserType.GetHashCode();
                if (this.EUserLogintype != null)
                    hashCode = hashCode * 59 + this.EUserLogintype.GetHashCode();
                if (this.SUserFirstname != null)
                    hashCode = hashCode * 59 + this.SUserFirstname.GetHashCode();
                if (this.SUserLastname != null)
                    hashCode = hashCode * 59 + this.SUserLastname.GetHashCode();
                if (this.SUserLoginname != null)
                    hashCode = hashCode * 59 + this.SUserLoginname.GetHashCode();
                if (this.EUserEzsignaccess != null)
                    hashCode = hashCode * 59 + this.EUserEzsignaccess.GetHashCode();
                if (this.DtUserLastlogondate != null)
                    hashCode = hashCode * 59 + this.DtUserLastlogondate.GetHashCode();
                if (this.DtUserPasswordchanged != null)
                    hashCode = hashCode * 59 + this.DtUserPasswordchanged.GetHashCode();
                if (this.DtUserEzsignprepaidexpiration != null)
                    hashCode = hashCode * 59 + this.DtUserEzsignprepaidexpiration.GetHashCode();
                if (this.BUserIsactive != null)
                    hashCode = hashCode * 59 + this.BUserIsactive.GetHashCode();
                if (this.BUserValidatebyadministration != null)
                    hashCode = hashCode * 59 + this.BUserValidatebyadministration.GetHashCode();
                if (this.BUserValidatebydirector != null)
                    hashCode = hashCode * 59 + this.BUserValidatebydirector.GetHashCode();
                if (this.BUserAttachmentautoverified != null)
                    hashCode = hashCode * 59 + this.BUserAttachmentautoverified.GetHashCode();
                if (this.BUserChangepassword != null)
                    hashCode = hashCode * 59 + this.BUserChangepassword.GetHashCode();
                if (this.ObjAudit != null)
                    hashCode = hashCode * 59 + this.ObjAudit.GetHashCode();
                return hashCode;
            }
        }
    }

}
