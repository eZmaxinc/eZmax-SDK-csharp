/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Usergroupexternal Object and children
    /// </summary>
    [DataContract(Name = "usergroupexternal-RequestCompound")]
    public partial class UsergroupexternalRequestCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupexternalRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UsergroupexternalRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupexternalRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiUsergroupexternalID">The unique ID of the Usergroupexternal.</param>
        /// <param name="sUsergroupexternalName">The name of the Usergroupexternal (required).</param>
        /// <param name="sUsergroupexternalID">The id of the Usergroupexternal (required).</param>
        public UsergroupexternalRequestCompound(int pkiUsergroupexternalID = default(int), string sUsergroupexternalName = default(string), string sUsergroupexternalID = default(string))
        {
            // to ensure "sUsergroupexternalName" is required (not null)
            if (sUsergroupexternalName == null)
            {
                throw new ArgumentNullException("sUsergroupexternalName is a required property for UsergroupexternalRequestCompound and cannot be null");
            }
            this.SUsergroupexternalName = sUsergroupexternalName;
            // to ensure "sUsergroupexternalID" is required (not null)
            if (sUsergroupexternalID == null)
            {
                throw new ArgumentNullException("sUsergroupexternalID is a required property for UsergroupexternalRequestCompound and cannot be null");
            }
            this.SUsergroupexternalID = sUsergroupexternalID;
            this.PkiUsergroupexternalID = pkiUsergroupexternalID;
        }

        /// <summary>
        /// The unique ID of the Usergroupexternal
        /// </summary>
        /// <value>The unique ID of the Usergroupexternal</value>
        /* <example>16</example>*/
        [DataMember(Name = "pkiUsergroupexternalID", EmitDefaultValue = false)]
        public int PkiUsergroupexternalID { get; set; }

        /// <summary>
        /// The name of the Usergroupexternal
        /// </summary>
        /// <value>The name of the Usergroupexternal</value>
        /* <example>Administrators</example>*/
        [DataMember(Name = "sUsergroupexternalName", IsRequired = true, EmitDefaultValue = true)]
        public string SUsergroupexternalName { get; set; }

        /// <summary>
        /// The id of the Usergroupexternal
        /// </summary>
        /// <value>The id of the Usergroupexternal</value>
        /* <example>5140-1542</example>*/
        [DataMember(Name = "sUsergroupexternalID", IsRequired = true, EmitDefaultValue = true)]
        public string SUsergroupexternalID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsergroupexternalRequestCompound {\n");
            sb.Append("  PkiUsergroupexternalID: ").Append(PkiUsergroupexternalID).Append("\n");
            sb.Append("  SUsergroupexternalName: ").Append(SUsergroupexternalName).Append("\n");
            sb.Append("  SUsergroupexternalID: ").Append(SUsergroupexternalID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUsergroupexternalID (int) maximum
            if (this.PkiUsergroupexternalID > (int)255)
            {
                yield return new ValidationResult("Invalid value for PkiUsergroupexternalID, must be a value less than or equal to 255.", new [] { "PkiUsergroupexternalID" });
            }

            // PkiUsergroupexternalID (int) minimum
            if (this.PkiUsergroupexternalID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiUsergroupexternalID, must be a value greater than or equal to 0.", new [] { "PkiUsergroupexternalID" });
            }

            if (this.SUsergroupexternalName != null) {
                // SUsergroupexternalName (string) pattern
                Regex regexSUsergroupexternalName = new Regex(@"^.{0,64}$", RegexOptions.CultureInvariant);
                if (!regexSUsergroupexternalName.Match(this.SUsergroupexternalName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUsergroupexternalName, must match a pattern of " + regexSUsergroupexternalName, new [] { "SUsergroupexternalName" });
                }
            }

            if (this.SUsergroupexternalID != null) {
                // SUsergroupexternalID (string) pattern
                Regex regexSUsergroupexternalID = new Regex(@"^.{0,64}$", RegexOptions.CultureInvariant);
                if (!regexSUsergroupexternalID.Match(this.SUsergroupexternalID).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUsergroupexternalID, must match a pattern of " + regexSUsergroupexternalID, new [] { "SUsergroupexternalID" });
                }
            }

            yield break;
        }
    }

}
