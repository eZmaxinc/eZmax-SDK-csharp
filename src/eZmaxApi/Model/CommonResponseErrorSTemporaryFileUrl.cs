/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Generic Error Message
    /// </summary>
    [DataContract]
    public partial class CommonResponseErrorSTemporaryFileUrl :  IEquatable<CommonResponseErrorSTemporaryFileUrl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseErrorSTemporaryFileUrl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonResponseErrorSTemporaryFileUrl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseErrorSTemporaryFileUrl" /> class.
        /// </summary>
        /// <param name="sTemporaryFileUrl">The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again..</param>
        /// <param name="sErrorMessage">More detail about the error (required).</param>
        /// <param name="eErrorCode">The error code. See documentation for valid values (required).</param>
        public CommonResponseErrorSTemporaryFileUrl(string sTemporaryFileUrl = default(string), string sErrorMessage = default(string), string eErrorCode = default(string))
        {
            // to ensure "sErrorMessage" is required (not null)
            if (sErrorMessage == null)
            {
                throw new InvalidDataException("sErrorMessage is a required property for CommonResponseErrorSTemporaryFileUrl and cannot be null");
            }
            else
            {
                this.SErrorMessage = sErrorMessage;
            }

            // to ensure "eErrorCode" is required (not null)
            if (eErrorCode == null)
            {
                throw new InvalidDataException("eErrorCode is a required property for CommonResponseErrorSTemporaryFileUrl and cannot be null");
            }
            else
            {
                this.EErrorCode = eErrorCode;
            }

            this.STemporaryFileUrl = sTemporaryFileUrl;
        }

        /// <summary>
        /// The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again.
        /// </summary>
        /// <value>The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again.</value>
        [DataMember(Name="sTemporaryFileUrl", EmitDefaultValue=false)]
        public string STemporaryFileUrl { get; set; }

        /// <summary>
        /// More detail about the error
        /// </summary>
        /// <value>More detail about the error</value>
        [DataMember(Name="sErrorMessage", EmitDefaultValue=true)]
        public string SErrorMessage { get; set; }

        /// <summary>
        /// The error code. See documentation for valid values
        /// </summary>
        /// <value>The error code. See documentation for valid values</value>
        [DataMember(Name="eErrorCode", EmitDefaultValue=true)]
        public string EErrorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonResponseErrorSTemporaryFileUrl {\n");
            sb.Append("  STemporaryFileUrl: ").Append(STemporaryFileUrl).Append("\n");
            sb.Append("  SErrorMessage: ").Append(SErrorMessage).Append("\n");
            sb.Append("  EErrorCode: ").Append(EErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonResponseErrorSTemporaryFileUrl);
        }

        /// <summary>
        /// Returns true if CommonResponseErrorSTemporaryFileUrl instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonResponseErrorSTemporaryFileUrl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonResponseErrorSTemporaryFileUrl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.STemporaryFileUrl == input.STemporaryFileUrl ||
                    (this.STemporaryFileUrl != null &&
                    this.STemporaryFileUrl.Equals(input.STemporaryFileUrl))
                ) && 
                (
                    this.SErrorMessage == input.SErrorMessage ||
                    (this.SErrorMessage != null &&
                    this.SErrorMessage.Equals(input.SErrorMessage))
                ) && 
                (
                    this.EErrorCode == input.EErrorCode ||
                    (this.EErrorCode != null &&
                    this.EErrorCode.Equals(input.EErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.STemporaryFileUrl != null)
                    hashCode = hashCode * 59 + this.STemporaryFileUrl.GetHashCode();
                if (this.SErrorMessage != null)
                    hashCode = hashCode * 59 + this.SErrorMessage.GetHashCode();
                if (this.EErrorCode != null)
                    hashCode = hashCode * 59 + this.EErrorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
