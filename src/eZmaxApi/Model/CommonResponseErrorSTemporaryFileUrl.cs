/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Generic Error Message
    /// </summary>
    [DataContract(Name = "Common-Response-Error-sTemporaryFileUrl")]
    public partial class CommonResponseErrorSTemporaryFileUrl : CommonResponseError, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseErrorSTemporaryFileUrl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonResponseErrorSTemporaryFileUrl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseErrorSTemporaryFileUrl" /> class.
        /// </summary>
        /// <param name="sTemporaryFileUrl">The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again..</param>
        /// <param name="sErrorMessage">The message giving details about the error (required).</param>
        /// <param name="eErrorCode">eErrorCode (required).</param>
        /// <param name="aSErrorMessagedetail">More error message detail.</param>
        public CommonResponseErrorSTemporaryFileUrl(string sTemporaryFileUrl = default(string), string sErrorMessage = default(string), FieldEErrorCode eErrorCode = default(FieldEErrorCode), List<string> aSErrorMessagedetail = default(List<string>)) : base()
        {
            this.STemporaryFileUrl = sTemporaryFileUrl;
        }

        /// <summary>
        /// The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again.
        /// </summary>
        /// <value>The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again.</value>
        /* <example>http://www.example.com/document.pdf</example>*/
        [DataMember(Name = "sTemporaryFileUrl", EmitDefaultValue = false)]
        public string STemporaryFileUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonResponseErrorSTemporaryFileUrl {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  STemporaryFileUrl: ").Append(STemporaryFileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            if (this.STemporaryFileUrl != null) {
                // STemporaryFileUrl (string) pattern
                Regex regexSTemporaryFileUrl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSTemporaryFileUrl.Match(this.STemporaryFileUrl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for STemporaryFileUrl, must match a pattern of " + regexSTemporaryFileUrl, new [] { "STemporaryFileUrl" });
                }
            }

            yield break;
        }
    }

}
