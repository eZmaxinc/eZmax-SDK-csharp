/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A User Object
    /// </summary>
    [DataContract(Name = "user-Request")]
    public partial class UserRequest : IEquatable<UserRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EUserType
        /// </summary>
        [DataMember(Name = "eUserType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserType EUserType { get; set; }

        /// <summary>
        /// Gets or Sets EUserLogintype
        /// </summary>
        [DataMember(Name = "eUserLogintype", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserLogintype EUserLogintype { get; set; }

        /// <summary>
        /// Gets or Sets EUserEzsignaccess
        /// </summary>
        [DataMember(Name = "eUserEzsignaccess", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserEzsignaccess EUserEzsignaccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRequest" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User.</param>
        /// <param name="fkiAgentID">The unique ID of the Agent..</param>
        /// <param name="fkiBrokerID">The unique ID of the Broker..</param>
        /// <param name="fkiAssistantID">The unique ID of the Assistant..</param>
        /// <param name="fkiEmployeeID">The unique ID of the Employee..</param>
        /// <param name="fkiCompanyIDDefault">The unique ID of the Company (required).</param>
        /// <param name="fkiDepartmentIDDefault">The unique ID of the Department (required).</param>
        /// <param name="fkiTimezoneID">The unique ID of the Timezone (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="objEmail">objEmail (required).</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal. (required).</param>
        /// <param name="objPhoneHome">objPhoneHome.</param>
        /// <param name="objPhoneSMS">objPhoneSMS.</param>
        /// <param name="fkiSecretquestionID">The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|.</param>
        /// <param name="sUserSecretresponse">The answer to the Secretquestion.</param>
        /// <param name="fkiModuleIDForm">The unique ID of the Module.</param>
        /// <param name="eUserType">eUserType (required).</param>
        /// <param name="eUserLogintype">eUserLogintype (required).</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sUserLoginname">The login name of the User. (required).</param>
        /// <param name="eUserEzsignaccess">eUserEzsignaccess (required).</param>
        /// <param name="bUserIsactive">Whether the User is active or not (required).</param>
        /// <param name="bUserValidatebyadministration">Whether if the transactions in which the User is implicated must be validated by administrative personnel or not.</param>
        /// <param name="bUserValidatebydirector">Whether if the transactions in which the User is implicated must be validated by a director or not.</param>
        /// <param name="bUserAttachmentautoverified">Whether if Attachments uploaded by the User must be validated or not.</param>
        /// <param name="bUserChangepassword">Whether if the User is forced to change its password.</param>
        public UserRequest(int pkiUserID = default(int), int fkiAgentID = default(int), int fkiBrokerID = default(int), int fkiAssistantID = default(int), int fkiEmployeeID = default(int), int fkiCompanyIDDefault = default(int), int fkiDepartmentIDDefault = default(int), int fkiTimezoneID = default(int), int fkiLanguageID = default(int), EmailRequestCompound objEmail = default(EmailRequestCompound), int fkiBillingentityinternalID = default(int), PhoneRequestCompound objPhoneHome = default(PhoneRequestCompound), PhoneRequestCompound objPhoneSMS = default(PhoneRequestCompound), int fkiSecretquestionID = default(int), string sUserSecretresponse = default(string), int fkiModuleIDForm = default(int), FieldEUserType eUserType = default(FieldEUserType), FieldEUserLogintype eUserLogintype = default(FieldEUserLogintype), string sUserFirstname = default(string), string sUserLastname = default(string), string sUserLoginname = default(string), FieldEUserEzsignaccess eUserEzsignaccess = default(FieldEUserEzsignaccess), bool bUserIsactive = default(bool), bool bUserValidatebyadministration = default(bool), bool bUserValidatebydirector = default(bool), bool bUserAttachmentautoverified = default(bool), bool bUserChangepassword = default(bool))
        {
            this.FkiCompanyIDDefault = fkiCompanyIDDefault;
            this.FkiDepartmentIDDefault = fkiDepartmentIDDefault;
            this.FkiTimezoneID = fkiTimezoneID;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "objEmail" is required (not null)
            if (objEmail == null)
            {
                throw new ArgumentNullException("objEmail is a required property for UserRequest and cannot be null");
            }
            this.ObjEmail = objEmail;
            this.FkiBillingentityinternalID = fkiBillingentityinternalID;
            this.EUserType = eUserType;
            this.EUserLogintype = eUserLogintype;
            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new ArgumentNullException("sUserFirstname is a required property for UserRequest and cannot be null");
            }
            this.SUserFirstname = sUserFirstname;
            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new ArgumentNullException("sUserLastname is a required property for UserRequest and cannot be null");
            }
            this.SUserLastname = sUserLastname;
            // to ensure "sUserLoginname" is required (not null)
            if (sUserLoginname == null)
            {
                throw new ArgumentNullException("sUserLoginname is a required property for UserRequest and cannot be null");
            }
            this.SUserLoginname = sUserLoginname;
            this.EUserEzsignaccess = eUserEzsignaccess;
            this.BUserIsactive = bUserIsactive;
            this.PkiUserID = pkiUserID;
            this.FkiAgentID = fkiAgentID;
            this.FkiBrokerID = fkiBrokerID;
            this.FkiAssistantID = fkiAssistantID;
            this.FkiEmployeeID = fkiEmployeeID;
            this.ObjPhoneHome = objPhoneHome;
            this.ObjPhoneSMS = objPhoneSMS;
            this.FkiSecretquestionID = fkiSecretquestionID;
            this.SUserSecretresponse = sUserSecretresponse;
            this.FkiModuleIDForm = fkiModuleIDForm;
            this.BUserValidatebyadministration = bUserValidatebyadministration;
            this.BUserValidatebydirector = bUserValidatebydirector;
            this.BUserAttachmentautoverified = bUserAttachmentautoverified;
            this.BUserChangepassword = bUserChangepassword;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "pkiUserID", EmitDefaultValue = false)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Agent.
        /// </summary>
        /// <value>The unique ID of the Agent.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAgentID", EmitDefaultValue = false)]
        public int FkiAgentID { get; set; }

        /// <summary>
        /// The unique ID of the Broker.
        /// </summary>
        /// <value>The unique ID of the Broker.</value>
        /* <example>26</example>*/
        [DataMember(Name = "fkiBrokerID", EmitDefaultValue = false)]
        public int FkiBrokerID { get; set; }

        /// <summary>
        /// The unique ID of the Assistant.
        /// </summary>
        /// <value>The unique ID of the Assistant.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAssistantID", EmitDefaultValue = false)]
        public int FkiAssistantID { get; set; }

        /// <summary>
        /// The unique ID of the Employee.
        /// </summary>
        /// <value>The unique ID of the Employee.</value>
        /* <example>31</example>*/
        [DataMember(Name = "fkiEmployeeID", EmitDefaultValue = false)]
        public int FkiEmployeeID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiCompanyIDDefault", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCompanyIDDefault { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        /* <example>21</example>*/
        [DataMember(Name = "fkiDepartmentIDDefault", IsRequired = true, EmitDefaultValue = true)]
        public int FkiDepartmentIDDefault { get; set; }

        /// <summary>
        /// The unique ID of the Timezone
        /// </summary>
        /// <value>The unique ID of the Timezone</value>
        /* <example>247</example>*/
        [DataMember(Name = "fkiTimezoneID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiTimezoneID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEmail
        /// </summary>
        [DataMember(Name = "objEmail", IsRequired = true, EmitDefaultValue = true)]
        public EmailRequestCompound ObjEmail { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiBillingentityinternalID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// Gets or Sets ObjPhoneHome
        /// </summary>
        [DataMember(Name = "objPhoneHome", EmitDefaultValue = false)]
        public PhoneRequestCompound ObjPhoneHome { get; set; }

        /// <summary>
        /// Gets or Sets ObjPhoneSMS
        /// </summary>
        [DataMember(Name = "objPhoneSMS", EmitDefaultValue = false)]
        public PhoneRequestCompound ObjPhoneSMS { get; set; }

        /// <summary>
        /// The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
        /// </summary>
        /// <value>The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|</value>
        /* <example>7</example>*/
        [DataMember(Name = "fkiSecretquestionID", EmitDefaultValue = false)]
        public int FkiSecretquestionID { get; set; }

        /// <summary>
        /// The answer to the Secretquestion
        /// </summary>
        /// <value>The answer to the Secretquestion</value>
        /* <example>Montreal General Hospital</example>*/
        [DataMember(Name = "sUserSecretresponse", EmitDefaultValue = false)]
        public string SUserSecretresponse { get; set; }

        /// <summary>
        /// The unique ID of the Module
        /// </summary>
        /// <value>The unique ID of the Module</value>
        /* <example>40</example>*/
        [DataMember(Name = "fkiModuleIDForm", EmitDefaultValue = false)]
        public int FkiModuleIDForm { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        /* <example>John</example>*/
        [DataMember(Name = "sUserFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sUserLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        /* <example>JohnDoe</example>*/
        [DataMember(Name = "sUserLoginname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLoginname { get; set; }

        /// <summary>
        /// Whether the User is active or not
        /// </summary>
        /// <value>Whether the User is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bUserIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BUserIsactive { get; set; }

        /// <summary>
        /// Whether if the transactions in which the User is implicated must be validated by administrative personnel or not
        /// </summary>
        /// <value>Whether if the transactions in which the User is implicated must be validated by administrative personnel or not</value>
        /* <example>false</example>*/
        [DataMember(Name = "bUserValidatebyadministration", EmitDefaultValue = true)]
        public bool BUserValidatebyadministration { get; set; }

        /// <summary>
        /// Whether if the transactions in which the User is implicated must be validated by a director or not
        /// </summary>
        /// <value>Whether if the transactions in which the User is implicated must be validated by a director or not</value>
        /* <example>false</example>*/
        [DataMember(Name = "bUserValidatebydirector", EmitDefaultValue = true)]
        public bool BUserValidatebydirector { get; set; }

        /// <summary>
        /// Whether if Attachments uploaded by the User must be validated or not
        /// </summary>
        /// <value>Whether if Attachments uploaded by the User must be validated or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bUserAttachmentautoverified", EmitDefaultValue = true)]
        public bool BUserAttachmentautoverified { get; set; }

        /// <summary>
        /// Whether if the User is forced to change its password
        /// </summary>
        /// <value>Whether if the User is forced to change its password</value>
        /* <example>true</example>*/
        [DataMember(Name = "bUserChangepassword", EmitDefaultValue = true)]
        public bool BUserChangepassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserRequest {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  FkiAgentID: ").Append(FkiAgentID).Append("\n");
            sb.Append("  FkiBrokerID: ").Append(FkiBrokerID).Append("\n");
            sb.Append("  FkiAssistantID: ").Append(FkiAssistantID).Append("\n");
            sb.Append("  FkiEmployeeID: ").Append(FkiEmployeeID).Append("\n");
            sb.Append("  FkiCompanyIDDefault: ").Append(FkiCompanyIDDefault).Append("\n");
            sb.Append("  FkiDepartmentIDDefault: ").Append(FkiDepartmentIDDefault).Append("\n");
            sb.Append("  FkiTimezoneID: ").Append(FkiTimezoneID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  ObjEmail: ").Append(ObjEmail).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  ObjPhoneHome: ").Append(ObjPhoneHome).Append("\n");
            sb.Append("  ObjPhoneSMS: ").Append(ObjPhoneSMS).Append("\n");
            sb.Append("  FkiSecretquestionID: ").Append(FkiSecretquestionID).Append("\n");
            sb.Append("  SUserSecretresponse: ").Append(SUserSecretresponse).Append("\n");
            sb.Append("  FkiModuleIDForm: ").Append(FkiModuleIDForm).Append("\n");
            sb.Append("  EUserType: ").Append(EUserType).Append("\n");
            sb.Append("  EUserLogintype: ").Append(EUserLogintype).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("  EUserEzsignaccess: ").Append(EUserEzsignaccess).Append("\n");
            sb.Append("  BUserIsactive: ").Append(BUserIsactive).Append("\n");
            sb.Append("  BUserValidatebyadministration: ").Append(BUserValidatebyadministration).Append("\n");
            sb.Append("  BUserValidatebydirector: ").Append(BUserValidatebydirector).Append("\n");
            sb.Append("  BUserAttachmentautoverified: ").Append(BUserAttachmentautoverified).Append("\n");
            sb.Append("  BUserChangepassword: ").Append(BUserChangepassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRequest);
        }

        /// <summary>
        /// Returns true if UserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiUserID == input.PkiUserID ||
                    this.PkiUserID.Equals(input.PkiUserID)
                ) && 
                (
                    this.FkiAgentID == input.FkiAgentID ||
                    this.FkiAgentID.Equals(input.FkiAgentID)
                ) && 
                (
                    this.FkiBrokerID == input.FkiBrokerID ||
                    this.FkiBrokerID.Equals(input.FkiBrokerID)
                ) && 
                (
                    this.FkiAssistantID == input.FkiAssistantID ||
                    this.FkiAssistantID.Equals(input.FkiAssistantID)
                ) && 
                (
                    this.FkiEmployeeID == input.FkiEmployeeID ||
                    this.FkiEmployeeID.Equals(input.FkiEmployeeID)
                ) && 
                (
                    this.FkiCompanyIDDefault == input.FkiCompanyIDDefault ||
                    this.FkiCompanyIDDefault.Equals(input.FkiCompanyIDDefault)
                ) && 
                (
                    this.FkiDepartmentIDDefault == input.FkiDepartmentIDDefault ||
                    this.FkiDepartmentIDDefault.Equals(input.FkiDepartmentIDDefault)
                ) && 
                (
                    this.FkiTimezoneID == input.FkiTimezoneID ||
                    this.FkiTimezoneID.Equals(input.FkiTimezoneID)
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    this.FkiLanguageID.Equals(input.FkiLanguageID)
                ) && 
                (
                    this.ObjEmail == input.ObjEmail ||
                    (this.ObjEmail != null &&
                    this.ObjEmail.Equals(input.ObjEmail))
                ) && 
                (
                    this.FkiBillingentityinternalID == input.FkiBillingentityinternalID ||
                    this.FkiBillingentityinternalID.Equals(input.FkiBillingentityinternalID)
                ) && 
                (
                    this.ObjPhoneHome == input.ObjPhoneHome ||
                    (this.ObjPhoneHome != null &&
                    this.ObjPhoneHome.Equals(input.ObjPhoneHome))
                ) && 
                (
                    this.ObjPhoneSMS == input.ObjPhoneSMS ||
                    (this.ObjPhoneSMS != null &&
                    this.ObjPhoneSMS.Equals(input.ObjPhoneSMS))
                ) && 
                (
                    this.FkiSecretquestionID == input.FkiSecretquestionID ||
                    this.FkiSecretquestionID.Equals(input.FkiSecretquestionID)
                ) && 
                (
                    this.SUserSecretresponse == input.SUserSecretresponse ||
                    (this.SUserSecretresponse != null &&
                    this.SUserSecretresponse.Equals(input.SUserSecretresponse))
                ) && 
                (
                    this.FkiModuleIDForm == input.FkiModuleIDForm ||
                    this.FkiModuleIDForm.Equals(input.FkiModuleIDForm)
                ) && 
                (
                    this.EUserType == input.EUserType ||
                    this.EUserType.Equals(input.EUserType)
                ) && 
                (
                    this.EUserLogintype == input.EUserLogintype ||
                    this.EUserLogintype.Equals(input.EUserLogintype)
                ) && 
                (
                    this.SUserFirstname == input.SUserFirstname ||
                    (this.SUserFirstname != null &&
                    this.SUserFirstname.Equals(input.SUserFirstname))
                ) && 
                (
                    this.SUserLastname == input.SUserLastname ||
                    (this.SUserLastname != null &&
                    this.SUserLastname.Equals(input.SUserLastname))
                ) && 
                (
                    this.SUserLoginname == input.SUserLoginname ||
                    (this.SUserLoginname != null &&
                    this.SUserLoginname.Equals(input.SUserLoginname))
                ) && 
                (
                    this.EUserEzsignaccess == input.EUserEzsignaccess ||
                    this.EUserEzsignaccess.Equals(input.EUserEzsignaccess)
                ) && 
                (
                    this.BUserIsactive == input.BUserIsactive ||
                    this.BUserIsactive.Equals(input.BUserIsactive)
                ) && 
                (
                    this.BUserValidatebyadministration == input.BUserValidatebyadministration ||
                    this.BUserValidatebyadministration.Equals(input.BUserValidatebyadministration)
                ) && 
                (
                    this.BUserValidatebydirector == input.BUserValidatebydirector ||
                    this.BUserValidatebydirector.Equals(input.BUserValidatebydirector)
                ) && 
                (
                    this.BUserAttachmentautoverified == input.BUserAttachmentautoverified ||
                    this.BUserAttachmentautoverified.Equals(input.BUserAttachmentautoverified)
                ) && 
                (
                    this.BUserChangepassword == input.BUserChangepassword ||
                    this.BUserChangepassword.Equals(input.BUserChangepassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiUserID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiAgentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiBrokerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiAssistantID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEmployeeID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiCompanyIDDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiDepartmentIDDefault.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiTimezoneID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiLanguageID.GetHashCode();
                if (this.ObjEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ObjEmail.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiBillingentityinternalID.GetHashCode();
                if (this.ObjPhoneHome != null)
                {
                    hashCode = (hashCode * 59) + this.ObjPhoneHome.GetHashCode();
                }
                if (this.ObjPhoneSMS != null)
                {
                    hashCode = (hashCode * 59) + this.ObjPhoneSMS.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiSecretquestionID.GetHashCode();
                if (this.SUserSecretresponse != null)
                {
                    hashCode = (hashCode * 59) + this.SUserSecretresponse.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiModuleIDForm.GetHashCode();
                hashCode = (hashCode * 59) + this.EUserType.GetHashCode();
                hashCode = (hashCode * 59) + this.EUserLogintype.GetHashCode();
                if (this.SUserFirstname != null)
                {
                    hashCode = (hashCode * 59) + this.SUserFirstname.GetHashCode();
                }
                if (this.SUserLastname != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLastname.GetHashCode();
                }
                if (this.SUserLoginname != null)
                {
                    hashCode = (hashCode * 59) + this.SUserLoginname.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EUserEzsignaccess.GetHashCode();
                hashCode = (hashCode * 59) + this.BUserIsactive.GetHashCode();
                hashCode = (hashCode * 59) + this.BUserValidatebyadministration.GetHashCode();
                hashCode = (hashCode * 59) + this.BUserValidatebydirector.GetHashCode();
                hashCode = (hashCode * 59) + this.BUserAttachmentautoverified.GetHashCode();
                hashCode = (hashCode * 59) + this.BUserChangepassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUserID (int) minimum
            if (this.PkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserID, must be a value greater than or equal to 0.", new [] { "PkiUserID" });
            }

            // FkiAgentID (int) minimum
            if (this.FkiAgentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiAgentID, must be a value greater than or equal to 0.", new [] { "FkiAgentID" });
            }

            // FkiBrokerID (int) minimum
            if (this.FkiBrokerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBrokerID, must be a value greater than or equal to 0.", new [] { "FkiBrokerID" });
            }

            // FkiAssistantID (int) minimum
            if (this.FkiAssistantID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiAssistantID, must be a value greater than or equal to 0.", new [] { "FkiAssistantID" });
            }

            // FkiEmployeeID (int) minimum
            if (this.FkiEmployeeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEmployeeID, must be a value greater than or equal to 0.", new [] { "FkiEmployeeID" });
            }

            // FkiCompanyIDDefault (int) maximum
            if (this.FkiCompanyIDDefault > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyIDDefault, must be a value less than or equal to 255.", new [] { "FkiCompanyIDDefault" });
            }

            // FkiCompanyIDDefault (int) minimum
            if (this.FkiCompanyIDDefault < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyIDDefault, must be a value greater than or equal to 1.", new [] { "FkiCompanyIDDefault" });
            }

            // FkiDepartmentIDDefault (int) minimum
            if (this.FkiDepartmentIDDefault < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiDepartmentIDDefault, must be a value greater than or equal to 0.", new [] { "FkiDepartmentIDDefault" });
            }

            // FkiTimezoneID (int) minimum
            if (this.FkiTimezoneID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiTimezoneID, must be a value greater than or equal to 0.", new [] { "FkiTimezoneID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            // FkiBillingentityinternalID (int) minimum
            if (this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }

            // FkiSecretquestionID (int) minimum
            if (this.FkiSecretquestionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiSecretquestionID, must be a value greater than or equal to 0.", new [] { "FkiSecretquestionID" });
            }

            // FkiModuleIDForm (int) minimum
            if (this.FkiModuleIDForm < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModuleIDForm, must be a value greater than or equal to 0.", new [] { "FkiModuleIDForm" });
            }

            if (this.SUserLoginname != null) {
                // SUserLoginname (string) pattern
                Regex regexSUserLoginname = new Regex(@"^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$", RegexOptions.CultureInvariant);
                if (!regexSUserLoginname.Match(this.SUserLoginname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserLoginname, must match a pattern of " + regexSUserLoginname, new [] { "SUserLoginname" });
                }
            }

            yield break;
        }
    }

}
