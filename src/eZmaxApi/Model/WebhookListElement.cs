/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.12
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Webhook List Element
    /// </summary>
    [DataContract]
    public partial class WebhookListElement :  IEquatable<WebhookListElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookListElement" /> class.
        /// </summary>
        /// <param name="pkiWebhookID">The unique ID of the Webhook (required).</param>
        /// <param name="sWebhookDescription">The description of the Webhook (required).</param>
        /// <param name="sWebhookUrl">The URL of the Webhook callback (required).</param>
        /// <param name="sWebhookEvent">The concatenated string to describe the Webhook event (required).</param>
        /// <param name="sWebhookEmailfailed">The email that will receive the Webhook in case all attempts fail (required).</param>
        /// <param name="eWebhookModule">eWebhookModule (required).</param>
        /// <param name="eWebhookEzsignevent">eWebhookEzsignevent.</param>
        /// <param name="eWebhookManagementevent">eWebhookManagementevent.</param>
        /// <param name="bWebhookIsactive">Whether the Webhook is active or not (required).</param>
        public WebhookListElement(int pkiWebhookID = default(int), string sWebhookDescription = default(string), string sWebhookUrl = default(string), string sWebhookEvent = default(string), string sWebhookEmailfailed = default(string), FieldEWebhookModule eWebhookModule = default(FieldEWebhookModule), FieldEWebhookEzsignevent eWebhookEzsignevent = default(FieldEWebhookEzsignevent), FieldEWebhookManagementevent eWebhookManagementevent = default(FieldEWebhookManagementevent), bool bWebhookIsactive = default(bool))
        {
            // to ensure "pkiWebhookID" is required (not null)
            if (pkiWebhookID == null)
            {
                throw new InvalidDataException("pkiWebhookID is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.PkiWebhookID = pkiWebhookID;
            }

            // to ensure "sWebhookDescription" is required (not null)
            if (sWebhookDescription == null)
            {
                throw new InvalidDataException("sWebhookDescription is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.SWebhookDescription = sWebhookDescription;
            }

            // to ensure "sWebhookUrl" is required (not null)
            if (sWebhookUrl == null)
            {
                throw new InvalidDataException("sWebhookUrl is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.SWebhookUrl = sWebhookUrl;
            }

            // to ensure "sWebhookEvent" is required (not null)
            if (sWebhookEvent == null)
            {
                throw new InvalidDataException("sWebhookEvent is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.SWebhookEvent = sWebhookEvent;
            }

            // to ensure "sWebhookEmailfailed" is required (not null)
            if (sWebhookEmailfailed == null)
            {
                throw new InvalidDataException("sWebhookEmailfailed is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.SWebhookEmailfailed = sWebhookEmailfailed;
            }

            // to ensure "eWebhookModule" is required (not null)
            if (eWebhookModule == null)
            {
                throw new InvalidDataException("eWebhookModule is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.EWebhookModule = eWebhookModule;
            }

            // to ensure "bWebhookIsactive" is required (not null)
            if (bWebhookIsactive == null)
            {
                throw new InvalidDataException("bWebhookIsactive is a required property for WebhookListElement and cannot be null");
            }
            else
            {
                this.BWebhookIsactive = bWebhookIsactive;
            }

            this.EWebhookEzsignevent = eWebhookEzsignevent;
            this.EWebhookManagementevent = eWebhookManagementevent;
        }

        /// <summary>
        /// The unique ID of the Webhook
        /// </summary>
        /// <value>The unique ID of the Webhook</value>
        [DataMember(Name="pkiWebhookID", EmitDefaultValue=true)]
        public int PkiWebhookID { get; set; }

        /// <summary>
        /// The description of the Webhook
        /// </summary>
        /// <value>The description of the Webhook</value>
        [DataMember(Name="sWebhookDescription", EmitDefaultValue=true)]
        public string SWebhookDescription { get; set; }

        /// <summary>
        /// The URL of the Webhook callback
        /// </summary>
        /// <value>The URL of the Webhook callback</value>
        [DataMember(Name="sWebhookUrl", EmitDefaultValue=true)]
        public string SWebhookUrl { get; set; }

        /// <summary>
        /// The concatenated string to describe the Webhook event
        /// </summary>
        /// <value>The concatenated string to describe the Webhook event</value>
        [DataMember(Name="sWebhookEvent", EmitDefaultValue=true)]
        public string SWebhookEvent { get; set; }

        /// <summary>
        /// The email that will receive the Webhook in case all attempts fail
        /// </summary>
        /// <value>The email that will receive the Webhook in case all attempts fail</value>
        [DataMember(Name="sWebhookEmailfailed", EmitDefaultValue=true)]
        public string SWebhookEmailfailed { get; set; }

        /// <summary>
        /// Gets or Sets EWebhookModule
        /// </summary>
        [DataMember(Name="eWebhookModule", EmitDefaultValue=true)]
        public FieldEWebhookModule EWebhookModule { get; set; }

        /// <summary>
        /// Gets or Sets EWebhookEzsignevent
        /// </summary>
        [DataMember(Name="eWebhookEzsignevent", EmitDefaultValue=false)]
        public FieldEWebhookEzsignevent EWebhookEzsignevent { get; set; }

        /// <summary>
        /// Gets or Sets EWebhookManagementevent
        /// </summary>
        [DataMember(Name="eWebhookManagementevent", EmitDefaultValue=false)]
        public FieldEWebhookManagementevent EWebhookManagementevent { get; set; }

        /// <summary>
        /// Whether the Webhook is active or not
        /// </summary>
        /// <value>Whether the Webhook is active or not</value>
        [DataMember(Name="bWebhookIsactive", EmitDefaultValue=true)]
        public bool BWebhookIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookListElement {\n");
            sb.Append("  PkiWebhookID: ").Append(PkiWebhookID).Append("\n");
            sb.Append("  SWebhookDescription: ").Append(SWebhookDescription).Append("\n");
            sb.Append("  SWebhookUrl: ").Append(SWebhookUrl).Append("\n");
            sb.Append("  SWebhookEvent: ").Append(SWebhookEvent).Append("\n");
            sb.Append("  SWebhookEmailfailed: ").Append(SWebhookEmailfailed).Append("\n");
            sb.Append("  EWebhookModule: ").Append(EWebhookModule).Append("\n");
            sb.Append("  EWebhookEzsignevent: ").Append(EWebhookEzsignevent).Append("\n");
            sb.Append("  EWebhookManagementevent: ").Append(EWebhookManagementevent).Append("\n");
            sb.Append("  BWebhookIsactive: ").Append(BWebhookIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookListElement);
        }

        /// <summary>
        /// Returns true if WebhookListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookListElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiWebhookID == input.PkiWebhookID ||
                    (this.PkiWebhookID != null &&
                    this.PkiWebhookID.Equals(input.PkiWebhookID))
                ) && 
                (
                    this.SWebhookDescription == input.SWebhookDescription ||
                    (this.SWebhookDescription != null &&
                    this.SWebhookDescription.Equals(input.SWebhookDescription))
                ) && 
                (
                    this.SWebhookUrl == input.SWebhookUrl ||
                    (this.SWebhookUrl != null &&
                    this.SWebhookUrl.Equals(input.SWebhookUrl))
                ) && 
                (
                    this.SWebhookEvent == input.SWebhookEvent ||
                    (this.SWebhookEvent != null &&
                    this.SWebhookEvent.Equals(input.SWebhookEvent))
                ) && 
                (
                    this.SWebhookEmailfailed == input.SWebhookEmailfailed ||
                    (this.SWebhookEmailfailed != null &&
                    this.SWebhookEmailfailed.Equals(input.SWebhookEmailfailed))
                ) && 
                (
                    this.EWebhookModule == input.EWebhookModule ||
                    (this.EWebhookModule != null &&
                    this.EWebhookModule.Equals(input.EWebhookModule))
                ) && 
                (
                    this.EWebhookEzsignevent == input.EWebhookEzsignevent ||
                    (this.EWebhookEzsignevent != null &&
                    this.EWebhookEzsignevent.Equals(input.EWebhookEzsignevent))
                ) && 
                (
                    this.EWebhookManagementevent == input.EWebhookManagementevent ||
                    (this.EWebhookManagementevent != null &&
                    this.EWebhookManagementevent.Equals(input.EWebhookManagementevent))
                ) && 
                (
                    this.BWebhookIsactive == input.BWebhookIsactive ||
                    (this.BWebhookIsactive != null &&
                    this.BWebhookIsactive.Equals(input.BWebhookIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiWebhookID != null)
                    hashCode = hashCode * 59 + this.PkiWebhookID.GetHashCode();
                if (this.SWebhookDescription != null)
                    hashCode = hashCode * 59 + this.SWebhookDescription.GetHashCode();
                if (this.SWebhookUrl != null)
                    hashCode = hashCode * 59 + this.SWebhookUrl.GetHashCode();
                if (this.SWebhookEvent != null)
                    hashCode = hashCode * 59 + this.SWebhookEvent.GetHashCode();
                if (this.SWebhookEmailfailed != null)
                    hashCode = hashCode * 59 + this.SWebhookEmailfailed.GetHashCode();
                if (this.EWebhookModule != null)
                    hashCode = hashCode * 59 + this.EWebhookModule.GetHashCode();
                if (this.EWebhookEzsignevent != null)
                    hashCode = hashCode * 59 + this.EWebhookEzsignevent.GetHashCode();
                if (this.EWebhookManagementevent != null)
                    hashCode = hashCode * 59 + this.EWebhookManagementevent.GetHashCode();
                if (this.BWebhookIsactive != null)
                    hashCode = hashCode * 59 + this.BWebhookIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
