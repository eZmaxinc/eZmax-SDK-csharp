/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A User Object
    /// </summary>
    [DataContract]
    public partial class CustomUserResponse :  IEquatable<CustomUserResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomUserResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomUserResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomUserResponse" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="sUserLastname">The Last name of the user (required).</param>
        /// <param name="sUserFirstname">The First name of the user (required).</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        public CustomUserResponse(int pkiUserID = default(int), string sUserLastname = default(string), string sUserFirstname = default(string), string sEmailAddress = default(string))
        {
            // to ensure "pkiUserID" is required (not null)
            if (pkiUserID == null)
            {
                throw new InvalidDataException("pkiUserID is a required property for CustomUserResponse and cannot be null");
            }
            else
            {
                this.PkiUserID = pkiUserID;
            }

            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new InvalidDataException("sUserLastname is a required property for CustomUserResponse and cannot be null");
            }
            else
            {
                this.SUserLastname = sUserLastname;
            }

            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new InvalidDataException("sUserFirstname is a required property for CustomUserResponse and cannot be null");
            }
            else
            {
                this.SUserFirstname = sUserFirstname;
            }

            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new InvalidDataException("sEmailAddress is a required property for CustomUserResponse and cannot be null");
            }
            else
            {
                this.SEmailAddress = sEmailAddress;
            }

        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="pkiUserID", EmitDefaultValue=true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The Last name of the user
        /// </summary>
        /// <value>The Last name of the user</value>
        [DataMember(Name="sUserLastname", EmitDefaultValue=true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The First name of the user
        /// </summary>
        /// <value>The First name of the user</value>
        [DataMember(Name="sUserFirstname", EmitDefaultValue=true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=true)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomUserResponse {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomUserResponse);
        }

        /// <summary>
        /// Returns true if CustomUserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomUserResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUserID == input.PkiUserID ||
                    (this.PkiUserID != null &&
                    this.PkiUserID.Equals(input.PkiUserID))
                ) && 
                (
                    this.SUserLastname == input.SUserLastname ||
                    (this.SUserLastname != null &&
                    this.SUserLastname.Equals(input.SUserLastname))
                ) && 
                (
                    this.SUserFirstname == input.SUserFirstname ||
                    (this.SUserFirstname != null &&
                    this.SUserFirstname.Equals(input.SUserFirstname))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUserID != null)
                    hashCode = hashCode * 59 + this.PkiUserID.GetHashCode();
                if (this.SUserLastname != null)
                    hashCode = hashCode * 59 + this.SUserLastname.GetHashCode();
                if (this.SUserFirstname != null)
                    hashCode = hashCode * 59 + this.SUserFirstname.GetHashCode();
                if (this.SEmailAddress != null)
                    hashCode = hashCode * 59 + this.SEmailAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiUserID (int) minimum
            if(this.PkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserID, must be a value greater than or equal to 0.", new [] { "PkiUserID" });
            }

            yield break;
        }
    }

}
