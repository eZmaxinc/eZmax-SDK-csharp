/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Customer Object
    /// </summary>
    [DataContract(Name = "customer-ResponseCompound")]
    public partial class CustomerResponseCompound : CustomerResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiCustomerID">The unique ID of the Customer. (required).</param>
        /// <param name="fkiCompanyID">The unique ID of the Company (required).</param>
        /// <param name="fkiCustomergroupID">The unique ID of the Customergroup (required).</param>
        /// <param name="sCustomerName">The name of the Customer (required).</param>
        /// <param name="fkiContactinformationsID">The unique ID of the Contactinformations (required).</param>
        /// <param name="fkiContactcontainerID">The unique ID of the Contactcontainer (required).</param>
        /// <param name="fkiImageID">The unique ID of the Image (required).</param>
        /// <param name="fkiGlaccountcontainerID">The unique ID of the Glaccountcontainer (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="fkiDepartmentID">The unique ID of the Department (required).</param>
        /// <param name="fkiPaymentmethodID">The unique ID of the Paymentmethod (required).</param>
        /// <param name="fkiElectronicfundstransferbankaccountID">The unique ID of the Electronicfundstransferbankaccount (required).</param>
        /// <param name="fkiElectronicfundstransferbankaccountIDDirectdebit">The unique ID of the Electronicfundstransferbankaccount (required).</param>
        /// <param name="fkiSendingmethodID">The unique ID of the Sendingmethod (required).</param>
        /// <param name="fkiTaxassignmentID">The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable| (required).</param>
        /// <param name="fkiAttendancestatusID">The unique ID of the Attendancestatus (required).</param>
        /// <param name="fkiAgentIDVariableexpensechargeto">The unique ID of the Agent. (required).</param>
        /// <param name="fkiBrokerIDVariableexpensechargeto">The unique ID of the Broker. (required).</param>
        /// <param name="fkiCustomerIDVariableexpensechargeto">The unique ID of the Customer. (required).</param>
        /// <param name="fkiGlaccountcontainerIDVariableexpensechargeto">The unique ID of the Glaccountcontainer (required).</param>
        /// <param name="fkiAgentIDSupplychargechargeto">The unique ID of the Agent. (required).</param>
        /// <param name="fkiBrokerIDSupplychargechargeto">The unique ID of the Broker. (required).</param>
        /// <param name="fkiCustomerIDSupplychargechargeto">The unique ID of the Customer. (required).</param>
        /// <param name="fkiGlaccountcontainerIDSupplychargechargeto">The unique ID of the Glaccountcontainer (required).</param>
        /// <param name="fkiInvoicealternatelogoID">The unique ID of the Invoicealternatelogo (required).</param>
        /// <param name="fkiSynchronizationlinkserverID">The unique ID of the Synchronizationlinkserver (required).</param>
        /// <param name="efkiUserID">The unique ID of the User.</param>
        /// <param name="efksCustomerCode">The code of the Customer.</param>
        /// <param name="sCustomerCode">The code of the Customer (required).</param>
        /// <param name="dCustomerFulltimeequivalent">The fulltimeequivalent of the Customer (required).</param>
        /// <param name="iCustomerPhotocopiercode">The photocopiercode of the Customer (required).</param>
        /// <param name="iCustomerLongdistancecode">The longdistancecode of the Customer (required).</param>
        /// <param name="iCustomerTimewindowstart">The timewindowstart of the Customer (required).</param>
        /// <param name="iCustomerTimewindowend">The timewindowend of the Customer (required).</param>
        /// <param name="dCustomerMinimumchargeableinterests">The minimumchargeableinterests of the Customer (required).</param>
        /// <param name="dtCustomerBirthdate">The birthdate of the Customer (required).</param>
        /// <param name="dtCustomerTransfer">The transfer of the Customer (required).</param>
        /// <param name="dtCustomerTransferappointment">The transferappointment of the Customer (required).</param>
        /// <param name="dtCustomerTransfersurvey">The transfersurvey of the Customer (required).</param>
        /// <param name="bCustomerIsactive">Whether the customer is active or not (required).</param>
        /// <param name="bCustomerVariableexpensefinanced">Whether if it&#39;s an variableexpensefinanced (required).</param>
        /// <param name="bCustomerVariableexpensefinancedtaxes">Whether if it&#39;s an variableexpensefinancedtaxes (required).</param>
        /// <param name="bCustomerSupplychargefinanced">Whether if it&#39;s an supplychargefinanced (required).</param>
        /// <param name="bCustomerSupplychargefinancedtaxes">Whether if it&#39;s an supplychargefinancedtaxes (required).</param>
        /// <param name="bCustomerAttendance">Whether if it&#39;s an attendance (required).</param>
        /// <param name="eCustomerType">eCustomerType (required).</param>
        /// <param name="eCustomerMarketingcorrespondence">eCustomerMarketingcorrespondence (required).</param>
        /// <param name="bCustomerBlackcopycarbon">Whether if it&#39;s an blackcopycarbon (required).</param>
        /// <param name="bCustomerUnsubscribeinfo">Whether if it&#39;s an unsubscribeinfo (required).</param>
        /// <param name="tCustomerComment">The comment of the Customer (required).</param>
        /// <param name="iMPORTID">iMPORTID.</param>
        public CustomerResponseCompound(int pkiCustomerID = default(int), int fkiCompanyID = default(int), int fkiCustomergroupID = default(int), string sCustomerName = default(string), int fkiContactinformationsID = default(int), int fkiContactcontainerID = default(int), int fkiImageID = default(int), int fkiGlaccountcontainerID = default(int), int fkiLanguageID = default(int), int fkiDepartmentID = default(int), int fkiPaymentmethodID = default(int), int fkiElectronicfundstransferbankaccountID = default(int), int fkiElectronicfundstransferbankaccountIDDirectdebit = default(int), int fkiSendingmethodID = default(int), int fkiTaxassignmentID = default(int), int fkiAttendancestatusID = default(int), int fkiAgentIDVariableexpensechargeto = default(int), int fkiBrokerIDVariableexpensechargeto = default(int), int fkiCustomerIDVariableexpensechargeto = default(int), int fkiGlaccountcontainerIDVariableexpensechargeto = default(int), int fkiAgentIDSupplychargechargeto = default(int), int fkiBrokerIDSupplychargechargeto = default(int), int fkiCustomerIDSupplychargechargeto = default(int), int fkiGlaccountcontainerIDSupplychargechargeto = default(int), int fkiInvoicealternatelogoID = default(int), int fkiSynchronizationlinkserverID = default(int), int efkiUserID = default(int), string efksCustomerCode = default(string), string sCustomerCode = default(string), string dCustomerFulltimeequivalent = default(string), int iCustomerPhotocopiercode = default(int), int iCustomerLongdistancecode = default(int), int iCustomerTimewindowstart = default(int), int iCustomerTimewindowend = default(int), string dCustomerMinimumchargeableinterests = default(string), string dtCustomerBirthdate = default(string), string dtCustomerTransfer = default(string), string dtCustomerTransferappointment = default(string), string dtCustomerTransfersurvey = default(string), bool bCustomerIsactive = default(bool), bool bCustomerVariableexpensefinanced = default(bool), bool bCustomerVariableexpensefinancedtaxes = default(bool), bool bCustomerSupplychargefinanced = default(bool), bool bCustomerSupplychargefinancedtaxes = default(bool), bool bCustomerAttendance = default(bool), FieldECustomerType eCustomerType = default(FieldECustomerType), FieldECustomerMarketingcorrespondence eCustomerMarketingcorrespondence = default(FieldECustomerMarketingcorrespondence), bool bCustomerBlackcopycarbon = default(bool), bool bCustomerUnsubscribeinfo = default(bool), string tCustomerComment = default(string), string iMPORTID = default(string)) : base()
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
