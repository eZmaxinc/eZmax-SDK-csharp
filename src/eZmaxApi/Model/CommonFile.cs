/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Object representing a file used in a request or response context 
    /// </summary>
    [DataContract(Name = "Common-File")]
    public partial class CommonFile : IValidatableObject
    {
        /// <summary>
        /// The source of the File
        /// </summary>
        /// <value>The source of the File</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EFileSourceEnum
        {
            /// <summary>
            /// Enum Base64 for value: Base64
            /// </summary>
            [EnumMember(Value = "Base64")]
            Base64 = 1,

            /// <summary>
            /// Enum Url for value: Url
            /// </summary>
            [EnumMember(Value = "Url")]
            Url = 2
        }


        /// <summary>
        /// The source of the File
        /// </summary>
        /// <value>The source of the File</value>
        [DataMember(Name = "eFileSource", IsRequired = true, EmitDefaultValue = true)]
        public EFileSourceEnum EFileSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonFile" /> class.
        /// </summary>
        /// <param name="">The name of the file (required).</param>
        /// <param name="">The URL used to reach the File.</param>
        /// <param name="">The Base64 encoded binary content of the File.</param>
        /// <param name="">The source of the File (required).</param>
        public CommonFile(string  = default(string), string  = default(string), byte[]  = default(byte[]), EFileSourceEnum  = default(EFileSourceEnum))
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CommonFile and cannot be null");
            }
            this.SFileName = ;
            this.EFileSource = ;
            this.SFileUrl = ;
            this.SFileBase64 = ;
        }

        /// <summary>
        /// The name of the file
        /// </summary>
        /// <value>The name of the file</value>
        /* <example>example.pdf</example>*/
        [DataMember(Name = "sFileName", IsRequired = true, EmitDefaultValue = true)]
        public string SFileName { get; set; }

        /// <summary>
        /// The URL used to reach the File
        /// </summary>
        /// <value>The URL used to reach the File</value>
        [DataMember(Name = "sFileUrl", EmitDefaultValue = false)]
        public string SFileUrl { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the File
        /// </summary>
        /// <value>The Base64 encoded binary content of the File</value>
        /* <example>[B@2c95ac9e</example>*/
        [DataMember(Name = "sFileBase64", EmitDefaultValue = false)]
        public byte[] SFileBase64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonFile {\n");
            sb.Append("  SFileName: ").Append(SFileName).Append("\n");
            sb.Append("  SFileUrl: ").Append(SFileUrl).Append("\n");
            sb.Append("  SFileBase64: ").Append(SFileBase64).Append("\n");
            sb.Append("  EFileSource: ").Append(EFileSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
