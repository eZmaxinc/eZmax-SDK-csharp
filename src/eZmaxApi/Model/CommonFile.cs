/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Object representing a file used in a request or response context 
    /// </summary>
    [DataContract]
    public partial class CommonFile :  IEquatable<CommonFile>, IValidatableObject
    {
        /// <summary>
        /// The source of the File
        /// </summary>
        /// <value>The source of the File</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EFileSourceEnum
        {
            /// <summary>
            /// Enum Base64 for value: Base64
            /// </summary>
            [EnumMember(Value = "Base64")]
            Base64 = 1,

            /// <summary>
            /// Enum Url for value: Url
            /// </summary>
            [EnumMember(Value = "Url")]
            Url = 2

        }

        /// <summary>
        /// The source of the File
        /// </summary>
        /// <value>The source of the File</value>
        [DataMember(Name="eFileSource", EmitDefaultValue=true)]
        public EFileSourceEnum EFileSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonFile" /> class.
        /// </summary>
        /// <param name="sFileName">The name of the file (required).</param>
        /// <param name="sFileUrl">The URL used to reach the File.</param>
        /// <param name="sFileBase64">The Base64 encoded binary content of the File.</param>
        /// <param name="eFileSource">The source of the File (required).</param>
        public CommonFile(string sFileName = default(string), string sFileUrl = default(string), byte[] sFileBase64 = default(byte[]), EFileSourceEnum eFileSource = default(EFileSourceEnum))
        {
            // to ensure "sFileName" is required (not null)
            if (sFileName == null)
            {
                throw new InvalidDataException("sFileName is a required property for CommonFile and cannot be null");
            }
            else
            {
                this.SFileName = sFileName;
            }

            // to ensure "eFileSource" is required (not null)
            if (eFileSource == null)
            {
                throw new InvalidDataException("eFileSource is a required property for CommonFile and cannot be null");
            }
            else
            {
                this.EFileSource = eFileSource;
            }

            this.SFileUrl = sFileUrl;
            this.SFileBase64 = sFileBase64;
        }

        /// <summary>
        /// The name of the file
        /// </summary>
        /// <value>The name of the file</value>
        [DataMember(Name="sFileName", EmitDefaultValue=true)]
        public string SFileName { get; set; }

        /// <summary>
        /// The URL used to reach the File
        /// </summary>
        /// <value>The URL used to reach the File</value>
        [DataMember(Name="sFileUrl", EmitDefaultValue=false)]
        public string SFileUrl { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the File
        /// </summary>
        /// <value>The Base64 encoded binary content of the File</value>
        [DataMember(Name="sFileBase64", EmitDefaultValue=false)]
        public byte[] SFileBase64 { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonFile {\n");
            sb.Append("  SFileName: ").Append(SFileName).Append("\n");
            sb.Append("  SFileUrl: ").Append(SFileUrl).Append("\n");
            sb.Append("  SFileBase64: ").Append(SFileBase64).Append("\n");
            sb.Append("  EFileSource: ").Append(EFileSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonFile);
        }

        /// <summary>
        /// Returns true if CommonFile instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SFileName == input.SFileName ||
                    (this.SFileName != null &&
                    this.SFileName.Equals(input.SFileName))
                ) && 
                (
                    this.SFileUrl == input.SFileUrl ||
                    (this.SFileUrl != null &&
                    this.SFileUrl.Equals(input.SFileUrl))
                ) && 
                (
                    this.SFileBase64 == input.SFileBase64 ||
                    (this.SFileBase64 != null &&
                    this.SFileBase64.Equals(input.SFileBase64))
                ) && 
                (
                    this.EFileSource == input.EFileSource ||
                    (this.EFileSource != null &&
                    this.EFileSource.Equals(input.EFileSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SFileName != null)
                    hashCode = hashCode * 59 + this.SFileName.GetHashCode();
                if (this.SFileUrl != null)
                    hashCode = hashCode * 59 + this.SFileUrl.GetHashCode();
                if (this.SFileBase64 != null)
                    hashCode = hashCode * 59 + this.SFileBase64.GetHashCode();
                if (this.EFileSource != null)
                    hashCode = hashCode * 59 + this.EFileSource.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
