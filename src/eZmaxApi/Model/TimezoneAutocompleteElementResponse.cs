/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Timezone AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class TimezoneAutocompleteElementResponse :  IEquatable<TimezoneAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimezoneAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TimezoneAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimezoneAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sTimezoneName">The description of the Timezone in the language of the requester (required).</param>
        /// <param name="pkiTimezoneID">The unique ID of the Timezone (required).</param>
        /// <param name="bTimezoneIsactive">Whether the Timezone is active or not (required).</param>
        public TimezoneAutocompleteElementResponse(string sTimezoneName = default(string), int pkiTimezoneID = default(int), bool bTimezoneIsactive = default(bool))
        {
            // to ensure "sTimezoneName" is required (not null)
            if (sTimezoneName == null)
            {
                throw new InvalidDataException("sTimezoneName is a required property for TimezoneAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.STimezoneName = sTimezoneName;
            }

            // to ensure "pkiTimezoneID" is required (not null)
            if (pkiTimezoneID == null)
            {
                throw new InvalidDataException("pkiTimezoneID is a required property for TimezoneAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiTimezoneID = pkiTimezoneID;
            }

            // to ensure "bTimezoneIsactive" is required (not null)
            if (bTimezoneIsactive == null)
            {
                throw new InvalidDataException("bTimezoneIsactive is a required property for TimezoneAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BTimezoneIsactive = bTimezoneIsactive;
            }

        }

        /// <summary>
        /// The description of the Timezone in the language of the requester
        /// </summary>
        /// <value>The description of the Timezone in the language of the requester</value>
        [DataMember(Name="sTimezoneName", EmitDefaultValue=true)]
        public string STimezoneName { get; set; }

        /// <summary>
        /// The unique ID of the Timezone
        /// </summary>
        /// <value>The unique ID of the Timezone</value>
        [DataMember(Name="pkiTimezoneID", EmitDefaultValue=true)]
        public int PkiTimezoneID { get; set; }

        /// <summary>
        /// Whether the Timezone is active or not
        /// </summary>
        /// <value>Whether the Timezone is active or not</value>
        [DataMember(Name="bTimezoneIsactive", EmitDefaultValue=true)]
        public bool BTimezoneIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimezoneAutocompleteElementResponse {\n");
            sb.Append("  STimezoneName: ").Append(STimezoneName).Append("\n");
            sb.Append("  PkiTimezoneID: ").Append(PkiTimezoneID).Append("\n");
            sb.Append("  BTimezoneIsactive: ").Append(BTimezoneIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimezoneAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if TimezoneAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TimezoneAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimezoneAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.STimezoneName == input.STimezoneName ||
                    (this.STimezoneName != null &&
                    this.STimezoneName.Equals(input.STimezoneName))
                ) && 
                (
                    this.PkiTimezoneID == input.PkiTimezoneID ||
                    (this.PkiTimezoneID != null &&
                    this.PkiTimezoneID.Equals(input.PkiTimezoneID))
                ) && 
                (
                    this.BTimezoneIsactive == input.BTimezoneIsactive ||
                    (this.BTimezoneIsactive != null &&
                    this.BTimezoneIsactive.Equals(input.BTimezoneIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.STimezoneName != null)
                    hashCode = hashCode * 59 + this.STimezoneName.GetHashCode();
                if (this.PkiTimezoneID != null)
                    hashCode = hashCode * 59 + this.PkiTimezoneID.GetHashCode();
                if (this.BTimezoneIsactive != null)
                    hashCode = hashCode * 59 + this.BTimezoneIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiTimezoneID (int) minimum
            if(this.PkiTimezoneID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiTimezoneID, must be a value greater than or equal to 0.", new [] { "PkiTimezoneID" });
            }

            yield break;
        }
    }

}
