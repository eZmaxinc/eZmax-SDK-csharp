/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Creditcardclient List Element
    /// </summary>
    [DataContract(Name = "creditcardclient-ListElement")]
    public partial class CreditcardclientListElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardclientListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditcardclientListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardclientListElement" /> class.
        /// </summary>
        /// <param name="pkiCreditcardclientID">The unique ID of the Creditcardclient (required).</param>
        /// <param name="fkiCreditcarddetailID">The unique ID of the Creditcarddetail (required).</param>
        /// <param name="bCreditcardclientrelationIsdefault">Whether if it&#39;s an relationisdefault (required).</param>
        /// <param name="sCreditcardclientDescription">The description of the Creditcardclient (required).</param>
        /// <param name="bCreditcardclientIsactive">Whether the creditcardclient is active or not (required).</param>
        /// <param name="bCreditcardclientAllowedagencypayment">Whether if it&#39;s an allowedagencypayment (required).</param>
        /// <param name="bCreditcardclientAllowedroyallepageprotection">Whether if it&#39;s an allowedroyallepageprotection (required).</param>
        /// <param name="bCreditcardclientAllowedtranquillit">Whether if it&#39;s an allowedtranquillit (required).</param>
        /// <param name="iCreditcarddetailExpirationmonth">The expirationmonth of the Creditcarddetail (required).</param>
        /// <param name="iCreditcarddetailExpirationyear">The expirationyear of the Creditcarddetail (required).</param>
        /// <param name="sCreditcarddetailNumbermasked">The numbermasked of the Creditcarddetail (required).</param>
        public CreditcardclientListElement(int pkiCreditcardclientID = default(int), int fkiCreditcarddetailID = default(int), bool bCreditcardclientrelationIsdefault = default(bool), string sCreditcardclientDescription = default(string), bool bCreditcardclientIsactive = default(bool), bool bCreditcardclientAllowedagencypayment = default(bool), bool bCreditcardclientAllowedroyallepageprotection = default(bool), bool bCreditcardclientAllowedtranquillit = default(bool), int iCreditcarddetailExpirationmonth = default(int), int iCreditcarddetailExpirationyear = default(int), string sCreditcarddetailNumbermasked = default(string))
        {
            this.PkiCreditcardclientID = pkiCreditcardclientID;
            this.FkiCreditcarddetailID = fkiCreditcarddetailID;
            this.BCreditcardclientrelationIsdefault = bCreditcardclientrelationIsdefault;
            // to ensure "sCreditcardclientDescription" is required (not null)
            if (sCreditcardclientDescription == null)
            {
                throw new ArgumentNullException("sCreditcardclientDescription is a required property for CreditcardclientListElement and cannot be null");
            }
            this.SCreditcardclientDescription = sCreditcardclientDescription;
            this.BCreditcardclientIsactive = bCreditcardclientIsactive;
            this.BCreditcardclientAllowedagencypayment = bCreditcardclientAllowedagencypayment;
            this.BCreditcardclientAllowedroyallepageprotection = bCreditcardclientAllowedroyallepageprotection;
            this.BCreditcardclientAllowedtranquillit = bCreditcardclientAllowedtranquillit;
            this.ICreditcarddetailExpirationmonth = iCreditcarddetailExpirationmonth;
            this.ICreditcarddetailExpirationyear = iCreditcarddetailExpirationyear;
            // to ensure "sCreditcarddetailNumbermasked" is required (not null)
            if (sCreditcarddetailNumbermasked == null)
            {
                throw new ArgumentNullException("sCreditcarddetailNumbermasked is a required property for CreditcardclientListElement and cannot be null");
            }
            this.SCreditcarddetailNumbermasked = sCreditcarddetailNumbermasked;
        }

        /// <summary>
        /// The unique ID of the Creditcardclient
        /// </summary>
        /// <value>The unique ID of the Creditcardclient</value>
        /* <example>114</example>*/
        [DataMember(Name = "pkiCreditcardclientID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCreditcardclientID { get; set; }

        /// <summary>
        /// The unique ID of the Creditcarddetail
        /// </summary>
        /// <value>The unique ID of the Creditcarddetail</value>
        /* <example>53</example>*/
        [DataMember(Name = "fkiCreditcarddetailID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCreditcarddetailID { get; set; }

        /// <summary>
        /// Whether if it&#39;s an relationisdefault
        /// </summary>
        /// <value>Whether if it&#39;s an relationisdefault</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardclientrelationIsdefault", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardclientrelationIsdefault { get; set; }

        /// <summary>
        /// The description of the Creditcardclient
        /// </summary>
        /// <value>The description of the Creditcardclient</value>
        /* <example>Visa</example>*/
        [DataMember(Name = "sCreditcardclientDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcardclientDescription { get; set; }

        /// <summary>
        /// Whether the creditcardclient is active or not
        /// </summary>
        /// <value>Whether the creditcardclient is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardclientIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardclientIsactive { get; set; }

        /// <summary>
        /// Whether if it&#39;s an allowedagencypayment
        /// </summary>
        /// <value>Whether if it&#39;s an allowedagencypayment</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardclientAllowedagencypayment", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardclientAllowedagencypayment { get; set; }

        /// <summary>
        /// Whether if it&#39;s an allowedroyallepageprotection
        /// </summary>
        /// <value>Whether if it&#39;s an allowedroyallepageprotection</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardclientAllowedroyallepageprotection", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardclientAllowedroyallepageprotection { get; set; }

        /// <summary>
        /// Whether if it&#39;s an allowedtranquillit
        /// </summary>
        /// <value>Whether if it&#39;s an allowedtranquillit</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardclientAllowedtranquillit", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardclientAllowedtranquillit { get; set; }

        /// <summary>
        /// The expirationmonth of the Creditcarddetail
        /// </summary>
        /// <value>The expirationmonth of the Creditcarddetail</value>
        /* <example>10</example>*/
        [DataMember(Name = "iCreditcarddetailExpirationmonth", IsRequired = true, EmitDefaultValue = true)]
        public int ICreditcarddetailExpirationmonth { get; set; }

        /// <summary>
        /// The expirationyear of the Creditcarddetail
        /// </summary>
        /// <value>The expirationyear of the Creditcarddetail</value>
        /* <example>2024</example>*/
        [DataMember(Name = "iCreditcarddetailExpirationyear", IsRequired = true, EmitDefaultValue = true)]
        public int ICreditcarddetailExpirationyear { get; set; }

        /// <summary>
        /// The numbermasked of the Creditcarddetail
        /// </summary>
        /// <value>The numbermasked of the Creditcarddetail</value>
        /* <example>XXXX XXXX XXXX 4242</example>*/
        [DataMember(Name = "sCreditcarddetailNumbermasked", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcarddetailNumbermasked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditcardclientListElement {\n");
            sb.Append("  PkiCreditcardclientID: ").Append(PkiCreditcardclientID).Append("\n");
            sb.Append("  FkiCreditcarddetailID: ").Append(FkiCreditcarddetailID).Append("\n");
            sb.Append("  BCreditcardclientrelationIsdefault: ").Append(BCreditcardclientrelationIsdefault).Append("\n");
            sb.Append("  SCreditcardclientDescription: ").Append(SCreditcardclientDescription).Append("\n");
            sb.Append("  BCreditcardclientIsactive: ").Append(BCreditcardclientIsactive).Append("\n");
            sb.Append("  BCreditcardclientAllowedagencypayment: ").Append(BCreditcardclientAllowedagencypayment).Append("\n");
            sb.Append("  BCreditcardclientAllowedroyallepageprotection: ").Append(BCreditcardclientAllowedroyallepageprotection).Append("\n");
            sb.Append("  BCreditcardclientAllowedtranquillit: ").Append(BCreditcardclientAllowedtranquillit).Append("\n");
            sb.Append("  ICreditcarddetailExpirationmonth: ").Append(ICreditcarddetailExpirationmonth).Append("\n");
            sb.Append("  ICreditcarddetailExpirationyear: ").Append(ICreditcarddetailExpirationyear).Append("\n");
            sb.Append("  SCreditcarddetailNumbermasked: ").Append(SCreditcarddetailNumbermasked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCreditcardclientID (int) maximum
            if (this.PkiCreditcardclientID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCreditcardclientID, must be a value less than or equal to 65535.", new [] { "PkiCreditcardclientID" });
            }

            // PkiCreditcardclientID (int) minimum
            if (this.PkiCreditcardclientID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCreditcardclientID, must be a value greater than or equal to 0.", new [] { "PkiCreditcardclientID" });
            }

            // FkiCreditcarddetailID (int) maximum
            if (this.FkiCreditcarddetailID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCreditcarddetailID, must be a value less than or equal to 65535.", new [] { "FkiCreditcarddetailID" });
            }

            // FkiCreditcarddetailID (int) minimum
            if (this.FkiCreditcarddetailID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCreditcarddetailID, must be a value greater than or equal to 0.", new [] { "FkiCreditcarddetailID" });
            }

            if (this.SCreditcardclientDescription != null) {
                // SCreditcardclientDescription (string) pattern
                Regex regexSCreditcardclientDescription = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcardclientDescription.Match(this.SCreditcardclientDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcardclientDescription, must match a pattern of " + regexSCreditcardclientDescription, new [] { "SCreditcardclientDescription" });
                }
            }

            // ICreditcarddetailExpirationmonth (int) maximum
            if (this.ICreditcarddetailExpirationmonth > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationmonth, must be a value less than or equal to 12.", new [] { "ICreditcarddetailExpirationmonth" });
            }

            // ICreditcarddetailExpirationmonth (int) minimum
            if (this.ICreditcarddetailExpirationmonth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationmonth, must be a value greater than or equal to 0.", new [] { "ICreditcarddetailExpirationmonth" });
            }

            // ICreditcarddetailExpirationyear (int) maximum
            if (this.ICreditcarddetailExpirationyear > (int)2200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationyear, must be a value less than or equal to 2200.", new [] { "ICreditcarddetailExpirationyear" });
            }

            // ICreditcarddetailExpirationyear (int) minimum
            if (this.ICreditcarddetailExpirationyear < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationyear, must be a value greater than or equal to 0.", new [] { "ICreditcarddetailExpirationyear" });
            }

            if (this.SCreditcarddetailNumbermasked != null) {
                // SCreditcarddetailNumbermasked (string) pattern
                Regex regexSCreditcarddetailNumbermasked = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcarddetailNumbermasked.Match(this.SCreditcarddetailNumbermasked).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcarddetailNumbermasked, must match a pattern of " + regexSCreditcarddetailNumbermasked, new [] { "SCreditcarddetailNumbermasked" });
                }
            }

            yield break;
        }
    }

}
