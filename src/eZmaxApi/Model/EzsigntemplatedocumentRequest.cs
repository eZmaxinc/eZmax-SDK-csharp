/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatedocument Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatedocument-Request")]
    public partial class EzsigntemplatedocumentRequest : IEquatable<EzsigntemplatedocumentRequest>, IValidatableObject
    {
        /// <summary>
        /// Indicates where to look for the document binary content.
        /// </summary>
        /// <value>Indicates where to look for the document binary content.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsigntemplatedocumentSourceEnum
        {
            /// <summary>
            /// Enum Base64 for value: Base64
            /// </summary>
            [EnumMember(Value = "Base64")]
            Base64 = 1,

            /// <summary>
            /// Enum Url for value: Url
            /// </summary>
            [EnumMember(Value = "Url")]
            Url = 2,

            /// <summary>
            /// Enum Ezsigndocument for value: Ezsigndocument
            /// </summary>
            [EnumMember(Value = "Ezsigndocument")]
            Ezsigndocument = 3
        }


        /// <summary>
        /// Indicates where to look for the document binary content.
        /// </summary>
        /// <value>Indicates where to look for the document binary content.</value>
        [DataMember(Name = "eEzsigntemplatedocumentSource", IsRequired = true, EmitDefaultValue = true)]
        public EEzsigntemplatedocumentSourceEnum EEzsigntemplatedocumentSource { get; set; }
        /// <summary>
        /// Indicates the format of the template.
        /// </summary>
        /// <value>Indicates the format of the template.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsigntemplatedocumentFormatEnum
        {
            /// <summary>
            /// Enum Pdf for value: Pdf
            /// </summary>
            [EnumMember(Value = "Pdf")]
            Pdf = 1,

            /// <summary>
            /// Enum Doc for value: Doc
            /// </summary>
            [EnumMember(Value = "Doc")]
            Doc = 2,

            /// <summary>
            /// Enum Docx for value: Docx
            /// </summary>
            [EnumMember(Value = "Docx")]
            Docx = 3,

            /// <summary>
            /// Enum Xls for value: Xls
            /// </summary>
            [EnumMember(Value = "Xls")]
            Xls = 4,

            /// <summary>
            /// Enum Xlsx for value: Xlsx
            /// </summary>
            [EnumMember(Value = "Xlsx")]
            Xlsx = 5,

            /// <summary>
            /// Enum Ppt for value: Ppt
            /// </summary>
            [EnumMember(Value = "Ppt")]
            Ppt = 6,

            /// <summary>
            /// Enum Pptx for value: Pptx
            /// </summary>
            [EnumMember(Value = "Pptx")]
            Pptx = 7
        }


        /// <summary>
        /// Indicates the format of the template.
        /// </summary>
        /// <value>Indicates the format of the template.</value>
        [DataMember(Name = "eEzsigntemplatedocumentFormat", EmitDefaultValue = false)]
        public EEzsigntemplatedocumentFormatEnum? EEzsigntemplatedocumentFormat { get; set; }
        /// <summary>
        /// If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**
        /// </summary>
        /// <value>If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzsigntemplatedocumentFormEnum
        {
            /// <summary>
            /// Enum Keep for value: Keep
            /// </summary>
            [EnumMember(Value = "Keep")]
            Keep = 1,

            /// <summary>
            /// Enum Convert for value: Convert
            /// </summary>
            [EnumMember(Value = "Convert")]
            Convert = 2
        }


        /// <summary>
        /// If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**
        /// </summary>
        /// <value>If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**</value>
        [DataMember(Name = "eEzsigntemplatedocumentForm", EmitDefaultValue = false)]
        public EEzsigntemplatedocumentFormEnum? EEzsigntemplatedocumentForm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentRequest" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument.</param>
        /// <param name="fkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument.</param>
        /// <param name="fkiEzsigntemplatesignerID">The unique ID of the Ezsigntemplatesigner.</param>
        /// <param name="sEzsigntemplatedocumentName">The name of the Ezsigntemplatedocument. (required).</param>
        /// <param name="eEzsigntemplatedocumentSource">Indicates where to look for the document binary content. (required).</param>
        /// <param name="eEzsigntemplatedocumentFormat">Indicates the format of the template..</param>
        /// <param name="sEzsigntemplatedocumentBase64">The Base64 encoded binary content of the document.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Base64..</param>
        /// <param name="sEzsigntemplatedocumentUrl">The url where the document content resides.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Url..</param>
        /// <param name="bEzsigntemplatedocumentForcerepair">Try to repair the document or flatten it if it cannot be used for electronic signature..</param>
        /// <param name="eEzsigntemplatedocumentForm">If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**.</param>
        /// <param name="sEzsigntemplatedocumentPassword">If the source template is password protected, the password to open/modify it. (default to &quot;&quot;).</param>
        public EzsigntemplatedocumentRequest(int pkiEzsigntemplatedocumentID = default(int), int fkiEzsigntemplateID = default(int), int fkiEzsigndocumentID = default(int), int fkiEzsigntemplatesignerID = default(int), string sEzsigntemplatedocumentName = default(string), EEzsigntemplatedocumentSourceEnum eEzsigntemplatedocumentSource = default(EEzsigntemplatedocumentSourceEnum), EEzsigntemplatedocumentFormatEnum? eEzsigntemplatedocumentFormat = default(EEzsigntemplatedocumentFormatEnum?), byte[] sEzsigntemplatedocumentBase64 = default(byte[]), string sEzsigntemplatedocumentUrl = default(string), bool bEzsigntemplatedocumentForcerepair = default(bool), EEzsigntemplatedocumentFormEnum? eEzsigntemplatedocumentForm = default(EEzsigntemplatedocumentFormEnum?), string sEzsigntemplatedocumentPassword = @"")
        {
            this.FkiEzsigntemplateID = fkiEzsigntemplateID;
            // to ensure "sEzsigntemplatedocumentName" is required (not null)
            if (sEzsigntemplatedocumentName == null)
            {
                throw new ArgumentNullException("sEzsigntemplatedocumentName is a required property for EzsigntemplatedocumentRequest and cannot be null");
            }
            this.SEzsigntemplatedocumentName = sEzsigntemplatedocumentName;
            this.EEzsigntemplatedocumentSource = eEzsigntemplatedocumentSource;
            this.PkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID;
            this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            this.FkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
            this.EEzsigntemplatedocumentFormat = eEzsigntemplatedocumentFormat;
            this.SEzsigntemplatedocumentBase64 = sEzsigntemplatedocumentBase64;
            this.SEzsigntemplatedocumentUrl = sEzsigntemplatedocumentUrl;
            this.BEzsigntemplatedocumentForcerepair = bEzsigntemplatedocumentForcerepair;
            this.EEzsigntemplatedocumentForm = eEzsigntemplatedocumentForm;
            // use default value if no "sEzsigntemplatedocumentPassword" provided
            this.SEzsigntemplatedocumentPassword = sEzsigntemplatedocumentPassword ?? @"";
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
        /* <example>133</example>*/
        [DataMember(Name = "pkiEzsigntemplatedocumentID", EmitDefaultValue = false)]
        public int PkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        /* <example>36</example>*/
        [DataMember(Name = "fkiEzsigntemplateID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        /* <example>97</example>*/
        [DataMember(Name = "fkiEzsigndocumentID", EmitDefaultValue = false)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesigner</value>
        /* <example>9</example>*/
        [DataMember(Name = "fkiEzsigntemplatesignerID", EmitDefaultValue = false)]
        public int FkiEzsigntemplatesignerID { get; set; }

        /// <summary>
        /// The name of the Ezsigntemplatedocument.
        /// </summary>
        /// <value>The name of the Ezsigntemplatedocument.</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzsigntemplatedocumentName", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatedocumentName { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the document.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Base64.
        /// </summary>
        /// <value>The Base64 encoded binary content of the document.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Base64.</value>
        /* <example>[B@72f46e16</example>*/
        [DataMember(Name = "sEzsigntemplatedocumentBase64", EmitDefaultValue = false)]
        public byte[] SEzsigntemplatedocumentBase64 { get; set; }

        /// <summary>
        /// The url where the document content resides.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Url.
        /// </summary>
        /// <value>The url where the document content resides.  This field is Required when eEzsigntemplatedocumentSource &#x3D; Url.</value>
        /* <example>http://www.example.com/template.pdf</example>*/
        [DataMember(Name = "sEzsigntemplatedocumentUrl", EmitDefaultValue = false)]
        public string SEzsigntemplatedocumentUrl { get; set; }

        /// <summary>
        /// Try to repair the document or flatten it if it cannot be used for electronic signature.
        /// </summary>
        /// <value>Try to repair the document or flatten it if it cannot be used for electronic signature.</value>
        [DataMember(Name = "bEzsigntemplatedocumentForcerepair", EmitDefaultValue = true)]
        public bool BEzsigntemplatedocumentForcerepair { get; set; }

        /// <summary>
        /// If the source template is password protected, the password to open/modify it.
        /// </summary>
        /// <value>If the source template is password protected, the password to open/modify it.</value>
        /* <example>SecretPassword123</example>*/
        [DataMember(Name = "sEzsigntemplatedocumentPassword", EmitDefaultValue = false)]
        public string SEzsigntemplatedocumentPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentRequest {\n");
            sb.Append("  PkiEzsigntemplatedocumentID: ").Append(PkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  FkiEzsigntemplateID: ").Append(FkiEzsigntemplateID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsigntemplatesignerID: ").Append(FkiEzsigntemplatesignerID).Append("\n");
            sb.Append("  SEzsigntemplatedocumentName: ").Append(SEzsigntemplatedocumentName).Append("\n");
            sb.Append("  EEzsigntemplatedocumentSource: ").Append(EEzsigntemplatedocumentSource).Append("\n");
            sb.Append("  EEzsigntemplatedocumentFormat: ").Append(EEzsigntemplatedocumentFormat).Append("\n");
            sb.Append("  SEzsigntemplatedocumentBase64: ").Append(SEzsigntemplatedocumentBase64).Append("\n");
            sb.Append("  SEzsigntemplatedocumentUrl: ").Append(SEzsigntemplatedocumentUrl).Append("\n");
            sb.Append("  BEzsigntemplatedocumentForcerepair: ").Append(BEzsigntemplatedocumentForcerepair).Append("\n");
            sb.Append("  EEzsigntemplatedocumentForm: ").Append(EEzsigntemplatedocumentForm).Append("\n");
            sb.Append("  SEzsigntemplatedocumentPassword: ").Append(SEzsigntemplatedocumentPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatedocumentRequest);
        }

        /// <summary>
        /// Returns true if EzsigntemplatedocumentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatedocumentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatedocumentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigntemplatedocumentID == input.PkiEzsigntemplatedocumentID ||
                    this.PkiEzsigntemplatedocumentID.Equals(input.PkiEzsigntemplatedocumentID)
                ) && 
                (
                    this.FkiEzsigntemplateID == input.FkiEzsigntemplateID ||
                    this.FkiEzsigntemplateID.Equals(input.FkiEzsigntemplateID)
                ) && 
                (
                    this.FkiEzsigndocumentID == input.FkiEzsigndocumentID ||
                    this.FkiEzsigndocumentID.Equals(input.FkiEzsigndocumentID)
                ) && 
                (
                    this.FkiEzsigntemplatesignerID == input.FkiEzsigntemplatesignerID ||
                    this.FkiEzsigntemplatesignerID.Equals(input.FkiEzsigntemplatesignerID)
                ) && 
                (
                    this.SEzsigntemplatedocumentName == input.SEzsigntemplatedocumentName ||
                    (this.SEzsigntemplatedocumentName != null &&
                    this.SEzsigntemplatedocumentName.Equals(input.SEzsigntemplatedocumentName))
                ) && 
                (
                    this.EEzsigntemplatedocumentSource == input.EEzsigntemplatedocumentSource ||
                    this.EEzsigntemplatedocumentSource.Equals(input.EEzsigntemplatedocumentSource)
                ) && 
                (
                    this.EEzsigntemplatedocumentFormat == input.EEzsigntemplatedocumentFormat ||
                    this.EEzsigntemplatedocumentFormat.Equals(input.EEzsigntemplatedocumentFormat)
                ) && 
                (
                    this.SEzsigntemplatedocumentBase64 == input.SEzsigntemplatedocumentBase64 ||
                    (this.SEzsigntemplatedocumentBase64 != null &&
                    this.SEzsigntemplatedocumentBase64.Equals(input.SEzsigntemplatedocumentBase64))
                ) && 
                (
                    this.SEzsigntemplatedocumentUrl == input.SEzsigntemplatedocumentUrl ||
                    (this.SEzsigntemplatedocumentUrl != null &&
                    this.SEzsigntemplatedocumentUrl.Equals(input.SEzsigntemplatedocumentUrl))
                ) && 
                (
                    this.BEzsigntemplatedocumentForcerepair == input.BEzsigntemplatedocumentForcerepair ||
                    this.BEzsigntemplatedocumentForcerepair.Equals(input.BEzsigntemplatedocumentForcerepair)
                ) && 
                (
                    this.EEzsigntemplatedocumentForm == input.EEzsigntemplatedocumentForm ||
                    this.EEzsigntemplatedocumentForm.Equals(input.EEzsigntemplatedocumentForm)
                ) && 
                (
                    this.SEzsigntemplatedocumentPassword == input.SEzsigntemplatedocumentPassword ||
                    (this.SEzsigntemplatedocumentPassword != null &&
                    this.SEzsigntemplatedocumentPassword.Equals(input.SEzsigntemplatedocumentPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigntemplatedocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigndocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplatesignerID.GetHashCode();
                if (this.SEzsigntemplatedocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatedocumentName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsigntemplatedocumentSource.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsigntemplatedocumentFormat.GetHashCode();
                if (this.SEzsigntemplatedocumentBase64 != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatedocumentBase64.GetHashCode();
                }
                if (this.SEzsigntemplatedocumentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatedocumentUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzsigntemplatedocumentForcerepair.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsigntemplatedocumentForm.GetHashCode();
                if (this.SEzsigntemplatedocumentPassword != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatedocumentPassword.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatedocumentID (int) minimum
            if (this.PkiEzsigntemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatedocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatedocumentID" });
            }

            // FkiEzsigntemplateID (int) minimum
            if (this.FkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateID" });
            }

            // FkiEzsigndocumentID (int) minimum
            if (this.FkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigndocumentID" });
            }

            // FkiEzsigntemplatesignerID (int) minimum
            if (this.FkiEzsigntemplatesignerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatesignerID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatesignerID" });
            }

            yield break;
        }
    }

}
