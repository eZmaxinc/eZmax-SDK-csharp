/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigntemplatedocumentpage Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsigntemplatedocumentpage-ResponseCompound")]
    public partial class EzsigntemplatedocumentpageResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentpageResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentpageResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentpageResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatedocumentpageID">The unique ID of the Ezsigntemplatedocumentpage (required).</param>
        /// <param name="iEzsigntemplatedocumentpageWidthimage">The Width of the page&#39;s image in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsigntemplatedocumentpageHeightimage">The Height of the page&#39;s image in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsigntemplatedocumentpageWidthpdf">The Width of the page in points calculated at 72 DPI (required).</param>
        /// <param name="iEzsigntemplatedocumentpageHeightpdf">The Height of the page in points calculated at 72 DPI (required).</param>
        /// <param name="iEzsigntemplatedocumentpagePagenumber">The page number in the Ezsigntemplatedocument (required).</param>
        /// <param name="sComputedImageurl">The Url to the Ezsigntemplatedocumentpage&#39;s rasterized image.  Url will expire after 5 minutes. (required).</param>
        public EzsigntemplatedocumentpageResponseCompound(int pkiEzsigntemplatedocumentpageID = default(int), int iEzsigntemplatedocumentpageWidthimage = default(int), int iEzsigntemplatedocumentpageHeightimage = default(int), int iEzsigntemplatedocumentpageWidthpdf = default(int), int iEzsigntemplatedocumentpageHeightpdf = default(int), int iEzsigntemplatedocumentpagePagenumber = default(int), string sComputedImageurl = default(string))
        {
            this.PkiEzsigntemplatedocumentpageID = pkiEzsigntemplatedocumentpageID;
            this.IEzsigntemplatedocumentpageWidthimage = iEzsigntemplatedocumentpageWidthimage;
            this.IEzsigntemplatedocumentpageHeightimage = iEzsigntemplatedocumentpageHeightimage;
            this.IEzsigntemplatedocumentpageWidthpdf = iEzsigntemplatedocumentpageWidthpdf;
            this.IEzsigntemplatedocumentpageHeightpdf = iEzsigntemplatedocumentpageHeightpdf;
            this.IEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
            // to ensure "sComputedImageurl" is required (not null)
            if (sComputedImageurl == null)
            {
                throw new ArgumentNullException("sComputedImageurl is a required property for EzsigntemplatedocumentpageResponseCompound and cannot be null");
            }
            this.SComputedImageurl = sComputedImageurl;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocumentpage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocumentpage</value>
        /* <example>85</example>*/
        [DataMember(Name = "pkiEzsigntemplatedocumentpageID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplatedocumentpageID { get; set; }

        /// <summary>
        /// The Width of the page&#39;s image in pixels calculated at 100 DPI
        /// </summary>
        /// <value>The Width of the page&#39;s image in pixels calculated at 100 DPI</value>
        /* <example>850</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentpageWidthimage", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentpageWidthimage { get; set; }

        /// <summary>
        /// The Height of the page&#39;s image in pixels calculated at 100 DPI
        /// </summary>
        /// <value>The Height of the page&#39;s image in pixels calculated at 100 DPI</value>
        /* <example>1100</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentpageHeightimage", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentpageHeightimage { get; set; }

        /// <summary>
        /// The Width of the page in points calculated at 72 DPI
        /// </summary>
        /// <value>The Width of the page in points calculated at 72 DPI</value>
        /* <example>612</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentpageWidthpdf", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentpageWidthpdf { get; set; }

        /// <summary>
        /// The Height of the page in points calculated at 72 DPI
        /// </summary>
        /// <value>The Height of the page in points calculated at 72 DPI</value>
        /* <example>792</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentpageHeightpdf", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentpageHeightpdf { get; set; }

        /// <summary>
        /// The page number in the Ezsigntemplatedocument
        /// </summary>
        /// <value>The page number in the Ezsigntemplatedocument</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentpagePagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatedocumentpagePagenumber { get; set; }

        /// <summary>
        /// The Url to the Ezsigntemplatedocumentpage&#39;s rasterized image.  Url will expire after 5 minutes.
        /// </summary>
        /// <value>The Url to the Ezsigntemplatedocumentpage&#39;s rasterized image.  Url will expire after 5 minutes.</value>
        [DataMember(Name = "sComputedImageurl", IsRequired = true, EmitDefaultValue = true)]
        public string SComputedImageurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentpageResponseCompound {\n");
            sb.Append("  PkiEzsigntemplatedocumentpageID: ").Append(PkiEzsigntemplatedocumentpageID).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpageWidthimage: ").Append(IEzsigntemplatedocumentpageWidthimage).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpageHeightimage: ").Append(IEzsigntemplatedocumentpageHeightimage).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpageWidthpdf: ").Append(IEzsigntemplatedocumentpageWidthpdf).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpageHeightpdf: ").Append(IEzsigntemplatedocumentpageHeightpdf).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpagePagenumber: ").Append(IEzsigntemplatedocumentpagePagenumber).Append("\n");
            sb.Append("  SComputedImageurl: ").Append(SComputedImageurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatedocumentpageID (int) minimum
            if (this.PkiEzsigntemplatedocumentpageID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsigntemplatedocumentpageID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatedocumentpageID" });
            }

            // IEzsigntemplatedocumentpageWidthimage (int) minimum
            if (this.IEzsigntemplatedocumentpageWidthimage < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplatedocumentpageWidthimage, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatedocumentpageWidthimage" });
            }

            // IEzsigntemplatedocumentpageHeightimage (int) minimum
            if (this.IEzsigntemplatedocumentpageHeightimage < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplatedocumentpageHeightimage, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatedocumentpageHeightimage" });
            }

            // IEzsigntemplatedocumentpageWidthpdf (int) minimum
            if (this.IEzsigntemplatedocumentpageWidthpdf < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplatedocumentpageWidthpdf, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatedocumentpageWidthpdf" });
            }

            // IEzsigntemplatedocumentpageHeightpdf (int) minimum
            if (this.IEzsigntemplatedocumentpageHeightpdf < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplatedocumentpageHeightpdf, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatedocumentpageHeightpdf" });
            }

            // IEzsigntemplatedocumentpagePagenumber (int) minimum
            if (this.IEzsigntemplatedocumentpagePagenumber < (int)1)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplatedocumentpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsigntemplatedocumentpagePagenumber" });
            }

            yield break;
        }
    }

}
