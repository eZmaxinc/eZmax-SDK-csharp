/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.16
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// CustomAutocompleteElementDisabledResponseAllOf
    /// </summary>
    [DataContract]
    public partial class CustomAutocompleteElementDisabledResponseAllOf :  IEquatable<CustomAutocompleteElementDisabledResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAutocompleteElementDisabledResponseAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAutocompleteElementDisabledResponseAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAutocompleteElementDisabledResponseAllOf" /> class.
        /// </summary>
        /// <param name="bDisabled">Indicates if the element is disabled in the context (required).</param>
        public CustomAutocompleteElementDisabledResponseAllOf(bool bDisabled = default(bool))
        {
            // to ensure "bDisabled" is required (not null)
            if (bDisabled == null)
            {
                throw new InvalidDataException("bDisabled is a required property for CustomAutocompleteElementDisabledResponseAllOf and cannot be null");
            }
            else
            {
                this.BDisabled = bDisabled;
            }

        }

        /// <summary>
        /// Indicates if the element is disabled in the context
        /// </summary>
        /// <value>Indicates if the element is disabled in the context</value>
        [DataMember(Name="bDisabled", EmitDefaultValue=true)]
        public bool BDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAutocompleteElementDisabledResponseAllOf {\n");
            sb.Append("  BDisabled: ").Append(BDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAutocompleteElementDisabledResponseAllOf);
        }

        /// <summary>
        /// Returns true if CustomAutocompleteElementDisabledResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAutocompleteElementDisabledResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAutocompleteElementDisabledResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BDisabled == input.BDisabled ||
                    (this.BDisabled != null &&
                    this.BDisabled.Equals(input.BDisabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BDisabled != null)
                    hashCode = hashCode * 59 + this.BDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
