/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Phone Object
    /// </summary>
    [DataContract(Name = "phone-Response")]
    public partial class PhoneResponse : IEquatable<PhoneResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EPhoneType
        /// </summary>
        [DataMember(Name = "ePhoneType", EmitDefaultValue = false)]
        [Obsolete]
        public FieldEPhoneType? EPhoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneResponse" /> class.
        /// </summary>
        /// <param name="pkiPhoneID">The unique ID of the Phone. (required).</param>
        /// <param name="fkiPhonetypeID">The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| (required).</param>
        /// <param name="ePhoneType">ePhoneType.</param>
        /// <param name="sPhoneE164">A phone number in E.164 Format.</param>
        /// <param name="sPhoneExtension">The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers.</param>
        public PhoneResponse(int pkiPhoneID = default(int), int fkiPhonetypeID = default(int), FieldEPhoneType? ePhoneType = default(FieldEPhoneType?), string sPhoneE164 = default(string), string sPhoneExtension = default(string))
        {
            this.PkiPhoneID = pkiPhoneID;
            this.FkiPhonetypeID = fkiPhonetypeID;
            this.EPhoneType = ePhoneType;
            this.SPhoneE164 = sPhoneE164;
            this.SPhoneExtension = sPhoneExtension;
        }

        /// <summary>
        /// The unique ID of the Phone.
        /// </summary>
        /// <value>The unique ID of the Phone.</value>
        </example> }}
		/* <example>1</example>*/
        [DataMember(Name = "pkiPhoneID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiPhoneID { get; set; }

        /// <summary>
        /// The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
        /// </summary>
        /// <value>The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|</value>
        </example> }}
		/* <example>1</example>*/
        [DataMember(Name = "fkiPhonetypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiPhonetypeID { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        </example> }}
		/* <example>+15149901516</example>*/
        [DataMember(Name = "sPhoneE164", EmitDefaultValue = false)]
        public string SPhoneE164 { get; set; }

        /// <summary>
        /// The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
        /// </summary>
        /// <value>The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers</value>
        </example> }}
		/* <example>123</example>*/
        [DataMember(Name = "sPhoneExtension", EmitDefaultValue = false)]
        public string SPhoneExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneResponse {\n");
            sb.Append("  PkiPhoneID: ").Append(PkiPhoneID).Append("\n");
            sb.Append("  FkiPhonetypeID: ").Append(FkiPhonetypeID).Append("\n");
            sb.Append("  EPhoneType: ").Append(EPhoneType).Append("\n");
            sb.Append("  SPhoneE164: ").Append(SPhoneE164).Append("\n");
            sb.Append("  SPhoneExtension: ").Append(SPhoneExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneResponse);
        }

        /// <summary>
        /// Returns true if PhoneResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiPhoneID == input.PkiPhoneID ||
                    this.PkiPhoneID.Equals(input.PkiPhoneID)
                ) && 
                (
                    this.FkiPhonetypeID == input.FkiPhonetypeID ||
                    this.FkiPhonetypeID.Equals(input.FkiPhonetypeID)
                ) && 
                (
                    this.EPhoneType == input.EPhoneType ||
                    this.EPhoneType.Equals(input.EPhoneType)
                ) && 
                (
                    this.SPhoneE164 == input.SPhoneE164 ||
                    (this.SPhoneE164 != null &&
                    this.SPhoneE164.Equals(input.SPhoneE164))
                ) && 
                (
                    this.SPhoneExtension == input.SPhoneExtension ||
                    (this.SPhoneExtension != null &&
                    this.SPhoneExtension.Equals(input.SPhoneExtension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiPhoneID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiPhonetypeID.GetHashCode();
                hashCode = (hashCode * 59) + this.EPhoneType.GetHashCode();
                if (this.SPhoneE164 != null)
                {
                    hashCode = (hashCode * 59) + this.SPhoneE164.GetHashCode();
                }
                if (this.SPhoneExtension != null)
                {
                    hashCode = (hashCode * 59) + this.SPhoneExtension.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiPhoneID (int) minimum
            if (this.PkiPhoneID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPhoneID, must be a value greater than or equal to 0.", new [] { "PkiPhoneID" });
            }

            // FkiPhonetypeID (int) minimum
            if (this.FkiPhonetypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiPhonetypeID, must be a value greater than or equal to 0.", new [] { "FkiPhonetypeID" });
            }

            if (this.SPhoneE164 != null) {
                // SPhoneE164 (string) pattern
                Regex regexSPhoneE164 = new Regex(@"^\+[1-9]\d{1,14}$", RegexOptions.CultureInvariant);
                if (!regexSPhoneE164.Match(this.SPhoneE164).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPhoneE164, must match a pattern of " + regexSPhoneE164, new [] { "SPhoneE164" });
                }
            }

            yield break;
        }
    }

}
