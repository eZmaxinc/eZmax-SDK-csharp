/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// The Type of the Sessionhistory
    /// </summary>
    /// <value>The Type of the Sessionhistory</value>
    
    [JsonConverter(typeof(StringEnumConverter))]
    
    public enum FieldESessionhistoryEndby
    {
        /// <summary>
        /// Enum Decryption for value: Decryption
        /// </summary>
        [EnumMember(Value = "Decryption")]
        Decryption = 1,

        /// <summary>
        /// Enum Hack for value: Hack
        /// </summary>
        [EnumMember(Value = "Hack")]
        Hack = 2,

        /// <summary>
        /// Enum Expired for value: Expired
        /// </summary>
        [EnumMember(Value = "Expired")]
        Expired = 3,

        /// <summary>
        /// Enum Hijack for value: Hijack
        /// </summary>
        [EnumMember(Value = "Hijack")]
        Hijack = 4,

        /// <summary>
        /// Enum DoubleLogon for value: DoubleLogon
        /// </summary>
        [EnumMember(Value = "DoubleLogon")]
        DoubleLogon = 5,

        /// <summary>
        /// Enum Garbage for value: Garbage
        /// </summary>
        [EnumMember(Value = "Garbage")]
        Garbage = 6,

        /// <summary>
        /// Enum Logoff for value: Logoff
        /// </summary>
        [EnumMember(Value = "Logoff")]
        Logoff = 7,

        /// <summary>
        /// Enum BadAuth for value: BadAuth
        /// </summary>
        [EnumMember(Value = "BadAuth")]
        BadAuth = 8,

        /// <summary>
        /// Enum Locked for value: Locked
        /// </summary>
        [EnumMember(Value = "Locked")]
        Locked = 9,

        /// <summary>
        /// Enum Inactive for value: Inactive
        /// </summary>
        [EnumMember(Value = "Inactive")]
        Inactive = 10,

        /// <summary>
        /// Enum InvalidUser for value: InvalidUser
        /// </summary>
        [EnumMember(Value = "InvalidUser")]
        InvalidUser = 11,

        /// <summary>
        /// Enum BadUserType for value: BadUserType
        /// </summary>
        [EnumMember(Value = "BadUserType")]
        BadUserType = 12,

        /// <summary>
        /// Enum BadIP for value: BadIP
        /// </summary>
        [EnumMember(Value = "BadIP")]
        BadIP = 13,

        /// <summary>
        /// Enum ForcedLogoff for value: ForcedLogoff
        /// </summary>
        [EnumMember(Value = "ForcedLogoff")]
        ForcedLogoff = 14

    }

}
