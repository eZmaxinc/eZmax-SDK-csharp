/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Activesession List Element
    /// </summary>
    [DataContract(Name = "activesession-ListElement")]
    public partial class ActivesessionListElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionListElement" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Activesession (required).</param>
        /// <param name="">The unique ID of the User (required).</param>
        /// <param name="">The unique ID of the Computer (required).</param>
        /// <param name="">The unique ID of the Company (required).</param>
        /// <param name="">The unique ID of the Department (required).</param>
        /// <param name="">The Name of the Company in the language of the requester (required).</param>
        /// <param name="">The Name of the Department in the language of the requester (required).</param>
        /// <param name="">The loginname of the Activesession (required).</param>
        /// <param name="">The description of the Computer (required).</param>
        /// <param name="">The first hit of the Activesession (required).</param>
        /// <param name="">The last hit of the Activesession (required).</param>
        /// <param name="">Represent an IP address. (required).</param>
        public ActivesessionListElement(int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string))
        {
            this.PkiActivesessionID = ;
            this.FkiUserID = ;
            this.FkiComputerID = ;
            this.FkiCompanyID = ;
            this.FkiDepartmentID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.SCompanyNameX = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.SDepartmentNameX = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.SActivesessionLoginname = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.SComputerDescription = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.DtActivesessionFirsthit = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.DtActivesessionLasthit = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ActivesessionListElement and cannot be null");
            }
            this.SActivesessionIP = ;
        }

        /// <summary>
        /// The unique ID of the Activesession
        /// </summary>
        /// <value>The unique ID of the Activesession</value>
        /* <example>16</example>*/
        [DataMember(Name = "pkiActivesessionID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiActivesessionID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Computer
        /// </summary>
        /// <value>The unique ID of the Computer</value>
        /* <example>249</example>*/
        [DataMember(Name = "fkiComputerID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiComputerID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiCompanyID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCompanyID { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        /* <example>21</example>*/
        [DataMember(Name = "fkiDepartmentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiDepartmentID { get; set; }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        /* <example>Acme inc.</example>*/
        [DataMember(Name = "sCompanyNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        /* <example>Head Office</example>*/
        [DataMember(Name = "sDepartmentNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// The loginname of the Activesession
        /// </summary>
        /// <value>The loginname of the Activesession</value>
        /* <example>doej</example>*/
        [DataMember(Name = "sActivesessionLoginname", IsRequired = true, EmitDefaultValue = true)]
        public string SActivesessionLoginname { get; set; }

        /// <summary>
        /// The description of the Computer
        /// </summary>
        /// <value>The description of the Computer</value>
        /* <example>PC001</example>*/
        [DataMember(Name = "sComputerDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SComputerDescription { get; set; }

        /// <summary>
        /// The first hit of the Activesession
        /// </summary>
        /// <value>The first hit of the Activesession</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtActivesessionFirsthit", IsRequired = true, EmitDefaultValue = true)]
        public string DtActivesessionFirsthit { get; set; }

        /// <summary>
        /// The last hit of the Activesession
        /// </summary>
        /// <value>The last hit of the Activesession</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtActivesessionLasthit", IsRequired = true, EmitDefaultValue = true)]
        public string DtActivesessionLasthit { get; set; }

        /// <summary>
        /// Represent an IP address.
        /// </summary>
        /// <value>Represent an IP address.</value>
        /* <example>127.0.0.1</example>*/
        [DataMember(Name = "sActivesessionIP", IsRequired = true, EmitDefaultValue = true)]
        public string SActivesessionIP { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivesessionListElement {\n");
            sb.Append("  PkiActivesessionID: ").Append(PkiActivesessionID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiComputerID: ").Append(FkiComputerID).Append("\n");
            sb.Append("  FkiCompanyID: ").Append(FkiCompanyID).Append("\n");
            sb.Append("  FkiDepartmentID: ").Append(FkiDepartmentID).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  SActivesessionLoginname: ").Append(SActivesessionLoginname).Append("\n");
            sb.Append("  SComputerDescription: ").Append(SComputerDescription).Append("\n");
            sb.Append("  DtActivesessionFirsthit: ").Append(DtActivesessionFirsthit).Append("\n");
            sb.Append("  DtActivesessionLasthit: ").Append(DtActivesessionLasthit).Append("\n");
            sb.Append("  SActivesessionIP: ").Append(SActivesessionIP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiComputerID (int) maximum
            if (this.FkiComputerID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiComputerID, must be a value less than or equal to 65535.", new [] { "FkiComputerID" });
            }

            // FkiComputerID (int) minimum
            if (this.FkiComputerID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiComputerID, must be a value greater than or equal to 1.", new [] { "FkiComputerID" });
            }

            // FkiCompanyID (int) maximum
            if (this.FkiCompanyID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyID, must be a value less than or equal to 255.", new [] { "FkiCompanyID" });
            }

            // FkiCompanyID (int) minimum
            if (this.FkiCompanyID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyID, must be a value greater than or equal to 1.", new [] { "FkiCompanyID" });
            }

            // FkiDepartmentID (int) minimum
            if (this.FkiDepartmentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiDepartmentID, must be a value greater than or equal to 0.", new [] { "FkiDepartmentID" });
            }

            if (this.SActivesessionLoginname != null) {
                // SActivesessionLoginname (string) pattern
                Regex regexSActivesessionLoginname = new Regex(@"^.{0,32}$", RegexOptions.CultureInvariant);
                if (!regexSActivesessionLoginname.Match(this.SActivesessionLoginname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SActivesessionLoginname, must match a pattern of " + regexSActivesessionLoginname, new [] { "SActivesessionLoginname" });
                }
            }

            if (this.SComputerDescription != null) {
                // SComputerDescription (string) pattern
                Regex regexSComputerDescription = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSComputerDescription.Match(this.SComputerDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SComputerDescription, must match a pattern of " + regexSComputerDescription, new [] { "SComputerDescription" });
                }
            }

            if (this.DtActivesessionFirsthit != null) {
                // DtActivesessionFirsthit (string) pattern
                Regex regexDtActivesessionFirsthit = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtActivesessionFirsthit.Match(this.DtActivesessionFirsthit).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtActivesessionFirsthit, must match a pattern of " + regexDtActivesessionFirsthit, new [] { "DtActivesessionFirsthit" });
                }
            }

            if (this.DtActivesessionLasthit != null) {
                // DtActivesessionLasthit (string) pattern
                Regex regexDtActivesessionLasthit = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtActivesessionLasthit.Match(this.DtActivesessionLasthit).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtActivesessionLasthit, must match a pattern of " + regexDtActivesessionLasthit, new [] { "DtActivesessionLasthit" });
                }
            }

            yield break;
        }
    }

}
