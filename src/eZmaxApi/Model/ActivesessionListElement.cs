/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Activesession List Element
    /// </summary>
    [DataContract]
    public partial class ActivesessionListElement :  IEquatable<ActivesessionListElement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionListElement" /> class.
        /// </summary>
        /// <param name="pkiActivesessionID">The unique ID of the Activesession (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiComputerID">The unique ID of the Computer (required).</param>
        /// <param name="fkiCompanyID">The unique ID of the Company (required).</param>
        /// <param name="fkiDepartmentID">The unique ID of the Department (required).</param>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="sActivesessionLoginname">The loginname of the Activesession (required).</param>
        /// <param name="sComputerDescription">The description of the Computer (required).</param>
        /// <param name="dtActivesessionFirsthit">The first hit of the Activesession (required).</param>
        /// <param name="dtActivesessionLasthit">The last hit of the Activesession (required).</param>
        /// <param name="sActivesessionIP">Represent an IP address. (required).</param>
        public ActivesessionListElement(int pkiActivesessionID = default(int), int fkiUserID = default(int), int fkiComputerID = default(int), int fkiCompanyID = default(int), int fkiDepartmentID = default(int), string sCompanyNameX = default(string), string sDepartmentNameX = default(string), string sActivesessionLoginname = default(string), string sComputerDescription = default(string), string dtActivesessionFirsthit = default(string), string dtActivesessionLasthit = default(string), string sActivesessionIP = default(string))
        {
            // to ensure "pkiActivesessionID" is required (not null)
            if (pkiActivesessionID == null)
            {
                throw new InvalidDataException("pkiActivesessionID is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.PkiActivesessionID = pkiActivesessionID;
            }

            // to ensure "fkiUserID" is required (not null)
            if (fkiUserID == null)
            {
                throw new InvalidDataException("fkiUserID is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.FkiUserID = fkiUserID;
            }

            // to ensure "fkiComputerID" is required (not null)
            if (fkiComputerID == null)
            {
                throw new InvalidDataException("fkiComputerID is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.FkiComputerID = fkiComputerID;
            }

            // to ensure "fkiCompanyID" is required (not null)
            if (fkiCompanyID == null)
            {
                throw new InvalidDataException("fkiCompanyID is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.FkiCompanyID = fkiCompanyID;
            }

            // to ensure "fkiDepartmentID" is required (not null)
            if (fkiDepartmentID == null)
            {
                throw new InvalidDataException("fkiDepartmentID is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.FkiDepartmentID = fkiDepartmentID;
            }

            // to ensure "sCompanyNameX" is required (not null)
            if (sCompanyNameX == null)
            {
                throw new InvalidDataException("sCompanyNameX is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.SCompanyNameX = sCompanyNameX;
            }

            // to ensure "sDepartmentNameX" is required (not null)
            if (sDepartmentNameX == null)
            {
                throw new InvalidDataException("sDepartmentNameX is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.SDepartmentNameX = sDepartmentNameX;
            }

            // to ensure "sActivesessionLoginname" is required (not null)
            if (sActivesessionLoginname == null)
            {
                throw new InvalidDataException("sActivesessionLoginname is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.SActivesessionLoginname = sActivesessionLoginname;
            }

            // to ensure "sComputerDescription" is required (not null)
            if (sComputerDescription == null)
            {
                throw new InvalidDataException("sComputerDescription is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.SComputerDescription = sComputerDescription;
            }

            // to ensure "dtActivesessionFirsthit" is required (not null)
            if (dtActivesessionFirsthit == null)
            {
                throw new InvalidDataException("dtActivesessionFirsthit is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.DtActivesessionFirsthit = dtActivesessionFirsthit;
            }

            // to ensure "dtActivesessionLasthit" is required (not null)
            if (dtActivesessionLasthit == null)
            {
                throw new InvalidDataException("dtActivesessionLasthit is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.DtActivesessionLasthit = dtActivesessionLasthit;
            }

            // to ensure "sActivesessionIP" is required (not null)
            if (sActivesessionIP == null)
            {
                throw new InvalidDataException("sActivesessionIP is a required property for ActivesessionListElement and cannot be null");
            }
            else
            {
                this.SActivesessionIP = sActivesessionIP;
            }

        }

        /// <summary>
        /// The unique ID of the Activesession
        /// </summary>
        /// <value>The unique ID of the Activesession</value>
        [DataMember(Name="pkiActivesessionID", EmitDefaultValue=true)]
        public int PkiActivesessionID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Computer
        /// </summary>
        /// <value>The unique ID of the Computer</value>
        [DataMember(Name="fkiComputerID", EmitDefaultValue=true)]
        public int FkiComputerID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        [DataMember(Name="fkiCompanyID", EmitDefaultValue=true)]
        public int FkiCompanyID { get; set; }

        /// <summary>
        /// The unique ID of the Department
        /// </summary>
        /// <value>The unique ID of the Department</value>
        [DataMember(Name="fkiDepartmentID", EmitDefaultValue=true)]
        public int FkiDepartmentID { get; set; }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        [DataMember(Name="sCompanyNameX", EmitDefaultValue=true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        [DataMember(Name="sDepartmentNameX", EmitDefaultValue=true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// The loginname of the Activesession
        /// </summary>
        /// <value>The loginname of the Activesession</value>
        [DataMember(Name="sActivesessionLoginname", EmitDefaultValue=true)]
        public string SActivesessionLoginname { get; set; }

        /// <summary>
        /// The description of the Computer
        /// </summary>
        /// <value>The description of the Computer</value>
        [DataMember(Name="sComputerDescription", EmitDefaultValue=true)]
        public string SComputerDescription { get; set; }

        /// <summary>
        /// The first hit of the Activesession
        /// </summary>
        /// <value>The first hit of the Activesession</value>
        [DataMember(Name="dtActivesessionFirsthit", EmitDefaultValue=true)]
        public string DtActivesessionFirsthit { get; set; }

        /// <summary>
        /// The last hit of the Activesession
        /// </summary>
        /// <value>The last hit of the Activesession</value>
        [DataMember(Name="dtActivesessionLasthit", EmitDefaultValue=true)]
        public string DtActivesessionLasthit { get; set; }

        /// <summary>
        /// Represent an IP address.
        /// </summary>
        /// <value>Represent an IP address.</value>
        [DataMember(Name="sActivesessionIP", EmitDefaultValue=true)]
        public string SActivesessionIP { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivesessionListElement {\n");
            sb.Append("  PkiActivesessionID: ").Append(PkiActivesessionID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiComputerID: ").Append(FkiComputerID).Append("\n");
            sb.Append("  FkiCompanyID: ").Append(FkiCompanyID).Append("\n");
            sb.Append("  FkiDepartmentID: ").Append(FkiDepartmentID).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  SActivesessionLoginname: ").Append(SActivesessionLoginname).Append("\n");
            sb.Append("  SComputerDescription: ").Append(SComputerDescription).Append("\n");
            sb.Append("  DtActivesessionFirsthit: ").Append(DtActivesessionFirsthit).Append("\n");
            sb.Append("  DtActivesessionLasthit: ").Append(DtActivesessionLasthit).Append("\n");
            sb.Append("  SActivesessionIP: ").Append(SActivesessionIP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivesessionListElement);
        }

        /// <summary>
        /// Returns true if ActivesessionListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivesessionListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivesessionListElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiActivesessionID == input.PkiActivesessionID ||
                    (this.PkiActivesessionID != null &&
                    this.PkiActivesessionID.Equals(input.PkiActivesessionID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.FkiComputerID == input.FkiComputerID ||
                    (this.FkiComputerID != null &&
                    this.FkiComputerID.Equals(input.FkiComputerID))
                ) && 
                (
                    this.FkiCompanyID == input.FkiCompanyID ||
                    (this.FkiCompanyID != null &&
                    this.FkiCompanyID.Equals(input.FkiCompanyID))
                ) && 
                (
                    this.FkiDepartmentID == input.FkiDepartmentID ||
                    (this.FkiDepartmentID != null &&
                    this.FkiDepartmentID.Equals(input.FkiDepartmentID))
                ) && 
                (
                    this.SCompanyNameX == input.SCompanyNameX ||
                    (this.SCompanyNameX != null &&
                    this.SCompanyNameX.Equals(input.SCompanyNameX))
                ) && 
                (
                    this.SDepartmentNameX == input.SDepartmentNameX ||
                    (this.SDepartmentNameX != null &&
                    this.SDepartmentNameX.Equals(input.SDepartmentNameX))
                ) && 
                (
                    this.SActivesessionLoginname == input.SActivesessionLoginname ||
                    (this.SActivesessionLoginname != null &&
                    this.SActivesessionLoginname.Equals(input.SActivesessionLoginname))
                ) && 
                (
                    this.SComputerDescription == input.SComputerDescription ||
                    (this.SComputerDescription != null &&
                    this.SComputerDescription.Equals(input.SComputerDescription))
                ) && 
                (
                    this.DtActivesessionFirsthit == input.DtActivesessionFirsthit ||
                    (this.DtActivesessionFirsthit != null &&
                    this.DtActivesessionFirsthit.Equals(input.DtActivesessionFirsthit))
                ) && 
                (
                    this.DtActivesessionLasthit == input.DtActivesessionLasthit ||
                    (this.DtActivesessionLasthit != null &&
                    this.DtActivesessionLasthit.Equals(input.DtActivesessionLasthit))
                ) && 
                (
                    this.SActivesessionIP == input.SActivesessionIP ||
                    (this.SActivesessionIP != null &&
                    this.SActivesessionIP.Equals(input.SActivesessionIP))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiActivesessionID != null)
                    hashCode = hashCode * 59 + this.PkiActivesessionID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.FkiComputerID != null)
                    hashCode = hashCode * 59 + this.FkiComputerID.GetHashCode();
                if (this.FkiCompanyID != null)
                    hashCode = hashCode * 59 + this.FkiCompanyID.GetHashCode();
                if (this.FkiDepartmentID != null)
                    hashCode = hashCode * 59 + this.FkiDepartmentID.GetHashCode();
                if (this.SCompanyNameX != null)
                    hashCode = hashCode * 59 + this.SCompanyNameX.GetHashCode();
                if (this.SDepartmentNameX != null)
                    hashCode = hashCode * 59 + this.SDepartmentNameX.GetHashCode();
                if (this.SActivesessionLoginname != null)
                    hashCode = hashCode * 59 + this.SActivesessionLoginname.GetHashCode();
                if (this.SComputerDescription != null)
                    hashCode = hashCode * 59 + this.SComputerDescription.GetHashCode();
                if (this.DtActivesessionFirsthit != null)
                    hashCode = hashCode * 59 + this.DtActivesessionFirsthit.GetHashCode();
                if (this.DtActivesessionLasthit != null)
                    hashCode = hashCode * 59 + this.DtActivesessionLasthit.GetHashCode();
                if (this.SActivesessionIP != null)
                    hashCode = hashCode * 59 + this.SActivesessionIP.GetHashCode();
                return hashCode;
            }
        }
    }

}
