/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Gives informations about the user that created the object or the last user to have modified it.  If the object was never modified after creation, both Created and Modified informations will be the same. 
    /// </summary>
    [DataContract(Name = "Common-Auditdetail")]
    public partial class CommonAuditdetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonAuditdetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonAuditdetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonAuditdetail" /> class.
        /// </summary>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey.</param>
        /// <param name="sUserLoginname">The login name of the User. (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sApikeyDescriptionX">The description of the Apikey in the language of the requester.</param>
        /// <param name="dtAuditdetailDate">Represent a Date Time. The timezone is the one configured in the User&#39;s profile. (required).</param>
        public CommonAuditdetail(int fkiUserID = default(int), int fkiApikeyID = default(int), string sUserLoginname = default(string), string sUserLastname = default(string), string sUserFirstname = default(string), string sApikeyDescriptionX = default(string), string dtAuditdetailDate = default(string))
        {
            this.FkiUserID = fkiUserID;
            // to ensure "sUserLoginname" is required (not null)
            if (sUserLoginname == null)
            {
                throw new ArgumentNullException("sUserLoginname is a required property for CommonAuditdetail and cannot be null");
            }
            this.SUserLoginname = sUserLoginname;
            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new ArgumentNullException("sUserLastname is a required property for CommonAuditdetail and cannot be null");
            }
            this.SUserLastname = sUserLastname;
            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new ArgumentNullException("sUserFirstname is a required property for CommonAuditdetail and cannot be null");
            }
            this.SUserFirstname = sUserFirstname;
            // to ensure "dtAuditdetailDate" is required (not null)
            if (dtAuditdetailDate == null)
            {
                throw new ArgumentNullException("dtAuditdetailDate is a required property for CommonAuditdetail and cannot be null");
            }
            this.DtAuditdetailDate = dtAuditdetailDate;
            this.FkiApikeyID = fkiApikeyID;
            this.SApikeyDescriptionX = sApikeyDescriptionX;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiApikeyID", EmitDefaultValue = false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        /* <example>JohnDoe</example>*/
        [DataMember(Name = "sUserLoginname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLoginname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sUserLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        /* <example>John</example>*/
        [DataMember(Name = "sUserFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The description of the Apikey in the language of the requester
        /// </summary>
        /// <value>The description of the Apikey in the language of the requester</value>
        /* <example>Project X</example>*/
        [DataMember(Name = "sApikeyDescriptionX", EmitDefaultValue = false)]
        public string SApikeyDescriptionX { get; set; }

        /// <summary>
        /// Represent a Date Time. The timezone is the one configured in the User&#39;s profile.
        /// </summary>
        /// <value>Represent a Date Time. The timezone is the one configured in the User&#39;s profile.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtAuditdetailDate", IsRequired = true, EmitDefaultValue = true)]
        public string DtAuditdetailDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonAuditdetail {\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SApikeyDescriptionX: ").Append(SApikeyDescriptionX).Append("\n");
            sb.Append("  DtAuditdetailDate: ").Append(DtAuditdetailDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiApikeyID (int) minimum
            if (this.FkiApikeyID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiApikeyID, must be a value greater than or equal to 0.", new [] { "FkiApikeyID" });
            }

            if (this.SUserLoginname != null) {
                // SUserLoginname (string) pattern
                Regex regexSUserLoginname = new Regex(@"^(?:([\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20})|([a-zA-Z0-9]){1,32})$", RegexOptions.CultureInvariant);
                if (!regexSUserLoginname.Match(this.SUserLoginname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserLoginname, must match a pattern of " + regexSUserLoginname, new [] { "SUserLoginname" });
                }
            }

            yield break;
        }
    }

}
