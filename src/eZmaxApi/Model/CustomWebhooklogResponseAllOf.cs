/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.10
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// CustomWebhooklogResponseAllOf
    /// </summary>
    [DataContract]
    public partial class CustomWebhooklogResponseAllOf :  IEquatable<CustomWebhooklogResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomWebhooklogResponseAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomWebhooklogResponseAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomWebhooklogResponseAllOf" /> class.
        /// </summary>
        /// <param name="dtWebhooklogDate">The date and time at which the Webhooklog happened. (required).</param>
        /// <param name="tWebhooklogJson">The Json containing the Webhook call and return (required).</param>
        public CustomWebhooklogResponseAllOf(string dtWebhooklogDate = default(string), string tWebhooklogJson = default(string))
        {
            // to ensure "dtWebhooklogDate" is required (not null)
            if (dtWebhooklogDate == null)
            {
                throw new InvalidDataException("dtWebhooklogDate is a required property for CustomWebhooklogResponseAllOf and cannot be null");
            }
            else
            {
                this.DtWebhooklogDate = dtWebhooklogDate;
            }

            // to ensure "tWebhooklogJson" is required (not null)
            if (tWebhooklogJson == null)
            {
                throw new InvalidDataException("tWebhooklogJson is a required property for CustomWebhooklogResponseAllOf and cannot be null");
            }
            else
            {
                this.TWebhooklogJson = tWebhooklogJson;
            }

        }

        /// <summary>
        /// The date and time at which the Webhooklog happened.
        /// </summary>
        /// <value>The date and time at which the Webhooklog happened.</value>
        [DataMember(Name="dtWebhooklogDate", EmitDefaultValue=true)]
        public string DtWebhooklogDate { get; set; }

        /// <summary>
        /// The Json containing the Webhook call and return
        /// </summary>
        /// <value>The Json containing the Webhook call and return</value>
        [DataMember(Name="tWebhooklogJson", EmitDefaultValue=true)]
        public string TWebhooklogJson { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomWebhooklogResponseAllOf {\n");
            sb.Append("  DtWebhooklogDate: ").Append(DtWebhooklogDate).Append("\n");
            sb.Append("  TWebhooklogJson: ").Append(TWebhooklogJson).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomWebhooklogResponseAllOf);
        }

        /// <summary>
        /// Returns true if CustomWebhooklogResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomWebhooklogResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomWebhooklogResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DtWebhooklogDate == input.DtWebhooklogDate ||
                    (this.DtWebhooklogDate != null &&
                    this.DtWebhooklogDate.Equals(input.DtWebhooklogDate))
                ) && 
                (
                    this.TWebhooklogJson == input.TWebhooklogJson ||
                    (this.TWebhooklogJson != null &&
                    this.TWebhooklogJson.Equals(input.TWebhooklogJson))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DtWebhooklogDate != null)
                    hashCode = hashCode * 59 + this.DtWebhooklogDate.GetHashCode();
                if (this.TWebhooklogJson != null)
                    hashCode = hashCode * 59 + this.TWebhooklogJson.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
