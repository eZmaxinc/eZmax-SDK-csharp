/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A complex type that specifies bulk configuration options.
    /// </summary>
    [DataContract(Name = "Scim_ServiceProviderConfig_bulk")]
    public partial class ScimServiceProviderConfigBulk : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimServiceProviderConfigBulk" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScimServiceProviderConfigBulk() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimServiceProviderConfigBulk" /> class.
        /// </summary>
        /// <param name="supported">A Boolean value specifying whether or not the operation is supported. (required).</param>
        /// <param name="maxOperations">An integer value specifying the maximum number of operations. (required).</param>
        /// <param name="maxPayloadSize">An integer value specifying the maximum payload size in bytes. (required).</param>
        public ScimServiceProviderConfigBulk(bool supported = default(bool), int maxOperations = default(int), int maxPayloadSize = default(int))
        {
            this.Supported = supported;
            this.MaxOperations = maxOperations;
            this.MaxPayloadSize = maxPayloadSize;
        }

        /// <summary>
        /// A Boolean value specifying whether or not the operation is supported.
        /// </summary>
        /// <value>A Boolean value specifying whether or not the operation is supported.</value>
        /* <example>false</example>*/
        [DataMember(Name = "supported", IsRequired = true, EmitDefaultValue = true)]
        public bool Supported { get; set; }

        /// <summary>
        /// An integer value specifying the maximum number of operations.
        /// </summary>
        /// <value>An integer value specifying the maximum number of operations.</value>
        /* <example>0</example>*/
        [DataMember(Name = "maxOperations", IsRequired = true, EmitDefaultValue = true)]
        public int MaxOperations { get; set; }

        /// <summary>
        /// An integer value specifying the maximum payload size in bytes.
        /// </summary>
        /// <value>An integer value specifying the maximum payload size in bytes.</value>
        /* <example>0</example>*/
        [DataMember(Name = "maxPayloadSize", IsRequired = true, EmitDefaultValue = true)]
        public int MaxPayloadSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScimServiceProviderConfigBulk {\n");
            sb.Append("  Supported: ").Append(Supported).Append("\n");
            sb.Append("  MaxOperations: ").Append(MaxOperations).Append("\n");
            sb.Append("  MaxPayloadSize: ").Append(MaxPayloadSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
