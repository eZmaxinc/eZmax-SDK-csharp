/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Contactinformations Object
    /// </summary>
    [DataContract(Name = "contactinformations-ResponseCompound")]
    public partial class ContactinformationsResponseCompound : ContactinformationsResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactinformationsResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactinformationsResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactinformationsResponseCompound" /> class.
        /// </summary>
        /// <param name="aObjAddress">aObjAddress (required).</param>
        /// <param name="aObjPhone">aObjPhone (required).</param>
        /// <param name="aObjEmail">aObjEmail (required).</param>
        /// <param name="aObjWebsite">aObjWebsite (required).</param>
        /// <param name="pkiContactinformationsID">The unique ID of the Contactinformations (required).</param>
        /// <param name="fkiAddressIDDefault">The unique ID of the Address.</param>
        /// <param name="fkiPhoneIDDefault">The unique ID of the Phone..</param>
        /// <param name="fkiEmailIDDefault">The unique ID of the Email.</param>
        /// <param name="fkiWebsiteIDDefault">The unique ID of the Website Default.</param>
        /// <param name="eContactinformationsType">eContactinformationsType (required).</param>
        /// <param name="sContactinformationsUrl">The url of the Contactinformations.</param>
        /// <param name="objAddressDefault">An Address Object and children to create a complete structure.</param>
        /// <param name="objPhoneDefault">objPhoneDefault.</param>
        /// <param name="objEmailDefault">An Email Object and children to create a complete structure.</param>
        /// <param name="objWebsiteDefault">A Website Object and children to create a complete structure.</param>
        public ContactinformationsResponseCompound(List<AddressResponseCompound> aObjAddress = default(List<AddressResponseCompound>), List<PhoneResponseCompound> aObjPhone = default(List<PhoneResponseCompound>), List<EmailResponseCompound> aObjEmail = default(List<EmailResponseCompound>), List<WebsiteResponseCompound> aObjWebsite = default(List<WebsiteResponseCompound>), int pkiContactinformationsID = default(int), int fkiAddressIDDefault = default(int), int fkiPhoneIDDefault = default(int), int fkiEmailIDDefault = default(int), int fkiWebsiteIDDefault = default(int), FieldEContactinformationsType eContactinformationsType = default(FieldEContactinformationsType), string sContactinformationsUrl = default(string), AddressResponse objAddressDefault = default(AddressResponse), PhoneResponseCompound objPhoneDefault = default(PhoneResponseCompound), EmailResponse objEmailDefault = default(EmailResponse), WebsiteResponse objWebsiteDefault = default(WebsiteResponse)) : base()
        {
            // to ensure "aObjAddress" is required (not null)
            if (aObjAddress == null)
            {
                throw new ArgumentNullException("aObjAddress is a required property for ContactinformationsResponseCompound and cannot be null");
            }
            this.AObjAddress = aObjAddress;
            // to ensure "aObjPhone" is required (not null)
            if (aObjPhone == null)
            {
                throw new ArgumentNullException("aObjPhone is a required property for ContactinformationsResponseCompound and cannot be null");
            }
            this.AObjPhone = aObjPhone;
            // to ensure "aObjEmail" is required (not null)
            if (aObjEmail == null)
            {
                throw new ArgumentNullException("aObjEmail is a required property for ContactinformationsResponseCompound and cannot be null");
            }
            this.AObjEmail = aObjEmail;
            // to ensure "aObjWebsite" is required (not null)
            if (aObjWebsite == null)
            {
                throw new ArgumentNullException("aObjWebsite is a required property for ContactinformationsResponseCompound and cannot be null");
            }
            this.AObjWebsite = aObjWebsite;
        }

        /// <summary>
        /// Gets or Sets AObjAddress
        /// </summary>
        [DataMember(Name = "a_objAddress", IsRequired = true, EmitDefaultValue = true)]
        public List<AddressResponseCompound> AObjAddress { get; set; }

        /// <summary>
        /// Gets or Sets AObjPhone
        /// </summary>
        [DataMember(Name = "a_objPhone", IsRequired = true, EmitDefaultValue = true)]
        public List<PhoneResponseCompound> AObjPhone { get; set; }

        /// <summary>
        /// Gets or Sets AObjEmail
        /// </summary>
        [DataMember(Name = "a_objEmail", IsRequired = true, EmitDefaultValue = true)]
        public List<EmailResponseCompound> AObjEmail { get; set; }

        /// <summary>
        /// Gets or Sets AObjWebsite
        /// </summary>
        [DataMember(Name = "a_objWebsite", IsRequired = true, EmitDefaultValue = true)]
        public List<WebsiteResponseCompound> AObjWebsite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactinformationsResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AObjAddress: ").Append(AObjAddress).Append("\n");
            sb.Append("  AObjPhone: ").Append(AObjPhone).Append("\n");
            sb.Append("  AObjEmail: ").Append(AObjEmail).Append("\n");
            sb.Append("  AObjWebsite: ").Append(AObjWebsite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
