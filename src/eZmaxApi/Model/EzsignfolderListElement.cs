/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfolder List Element
    /// </summary>
    [DataContract(Name = "ezsignfolder-ListElement")]
    public partial class EzsignfolderListElement : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfolderStep
        /// </summary>
        [DataMember(Name = "eEzsignfolderStep", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfolderStep EEzsignfolderStep { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfolderListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderListElement" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="">The description of the Ezsignfolder (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The date and time at which the object was created (required).</param>
        /// <param name="">The date and time at which the Ezsignfolder will be sent in the future..</param>
        /// <param name="">The date and time at which the Ezsignfolder was sent the last time..</param>
        /// <param name="">The maximum date and time at which the Ezsignfolder can be signed..</param>
        /// <param name="">The total number of Ezsigndocument in the folder (required).</param>
        /// <param name="">The total number of Ezsigndocument in the folder that were saved in the edm system (required).</param>
        /// <param name="">The total number of signature blocks in all Ezsigndocuments in the folder (required).</param>
        /// <param name="">The total number of already signed signature blocks in all Ezsigndocuments in the folder (required).</param>
        /// <param name="">The total number of Ezsignformfieldgroup in all Ezsigndocuments in the folder (required).</param>
        /// <param name="">The total number of completed Ezsignformfieldgroup in all Ezsigndocuments in the folder (required).</param>
        /// <param name="">Whether the Ezsignform/Ezsignsignatures has dependencies or not.</param>
        /// <param name="">Percentage of Ezsignform/Ezsignsignatures has completed (required).</param>
        /// <param name="">Percentage of Ezsignform has completed (required).</param>
        /// <param name="">Percentage of Ezsignsignatures has signed (required).</param>
        /// <param name="">Whether the Ezsignfolder has an Ezsignsignatures that need to be signed or an Ezsignformfieldgroups that need to be filled by the current user.</param>
        public EzsignfolderListElement(int  = default(int), int  = default(int), FieldEEzsignfoldertypePrivacylevel  = default(FieldEEzsignfoldertypePrivacylevel), string  = default(string), string  = default(string), FieldEEzsignfolderStep  = default(FieldEEzsignfolderStep), string  = default(string), string  = default(string), string  = default(string), string  = default(string), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), bool  = default(bool), string  = default(string), string  = default(string), string  = default(string), bool  = default(bool))
        {
            this.PkiEzsignfolderID = ;
            this.FkiEzsignfoldertypeID = ;
            this.EEzsignfoldertypePrivacylevel = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfolderListElement and cannot be null");
            }
            this.SEzsignfoldertypeNameX = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfolderListElement and cannot be null");
            }
            this.SEzsignfolderDescription = ;
            this.EEzsignfolderStep = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfolderListElement and cannot be null");
            }
            this.DtCreatedDate = ;
            this.IEzsigndocument = ;
            this.IEzsigndocumentEdm = ;
            this.IEzsignsignature = ;
            this.IEzsignsignatureSigned = ;
            this.IEzsignformfieldgroup = ;
            this.IEzsignformfieldgroupCompleted = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfolderListElement and cannot be null");
            }
            this.DEzsignfolderCompletedpercentage = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfolderListElement and cannot be null");
            }
            this.DEzsignfolderFormcompletedpercentage = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfolderListElement and cannot be null");
            }
            this.DEzsignfolderSignaturecompletedpercentage = ;
            this.DtEzsignfolderDelayedsenddate = ;
            this.DtEzsignfolderSentdate = ;
            this.DtEzsignfolderDuedate = ;
            this.BEzsignformHasdependencies = ;
            this.BEzsignfolderSigner = ;
        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "pkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfolderID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// The description of the Ezsignfolder
        /// </summary>
        /// <value>The description of the Ezsignfolder</value>
        /* <example>Test eZsign Folder</example>*/
        [DataMember(Name = "sEzsignfolderDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfolderDescription { get; set; }

        /// <summary>
        /// The date and time at which the object was created
        /// </summary>
        /// <value>The date and time at which the object was created</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtCreatedDate", IsRequired = true, EmitDefaultValue = true)]
        public string DtCreatedDate { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignfolder will be sent in the future.
        /// </summary>
        /// <value>The date and time at which the Ezsignfolder will be sent in the future.</value>
        /* <example>2020-12-31T23:59:59.000Z</example>*/
        [DataMember(Name = "dtEzsignfolderDelayedsenddate", EmitDefaultValue = false)]
        public string DtEzsignfolderDelayedsenddate { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignfolder was sent the last time.
        /// </summary>
        /// <value>The date and time at which the Ezsignfolder was sent the last time.</value>
        /* <example>2020-12-31T23:59:59.000Z</example>*/
        [DataMember(Name = "dtEzsignfolderSentdate", EmitDefaultValue = false)]
        public string DtEzsignfolderSentdate { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsignfolder can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsignfolder can be signed.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignfolderDuedate", EmitDefaultValue = false)]
        public string DtEzsignfolderDuedate { get; set; }

        /// <summary>
        /// The total number of Ezsigndocument in the folder
        /// </summary>
        /// <value>The total number of Ezsigndocument in the folder</value>
        [DataMember(Name = "iEzsigndocument", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocument { get; set; }

        /// <summary>
        /// The total number of Ezsigndocument in the folder that were saved in the edm system
        /// </summary>
        /// <value>The total number of Ezsigndocument in the folder that were saved in the edm system</value>
        [DataMember(Name = "iEzsigndocumentEdm", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndocumentEdm { get; set; }

        /// <summary>
        /// The total number of signature blocks in all Ezsigndocuments in the folder
        /// </summary>
        /// <value>The total number of signature blocks in all Ezsigndocuments in the folder</value>
        [DataMember(Name = "iEzsignsignature", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignsignature { get; set; }

        /// <summary>
        /// The total number of already signed signature blocks in all Ezsigndocuments in the folder
        /// </summary>
        /// <value>The total number of already signed signature blocks in all Ezsigndocuments in the folder</value>
        [DataMember(Name = "iEzsignsignatureSigned", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignsignatureSigned { get; set; }

        /// <summary>
        /// The total number of Ezsignformfieldgroup in all Ezsigndocuments in the folder
        /// </summary>
        /// <value>The total number of Ezsignformfieldgroup in all Ezsigndocuments in the folder</value>
        [DataMember(Name = "iEzsignformfieldgroup", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldgroup { get; set; }

        /// <summary>
        /// The total number of completed Ezsignformfieldgroup in all Ezsigndocuments in the folder
        /// </summary>
        /// <value>The total number of completed Ezsignformfieldgroup in all Ezsigndocuments in the folder</value>
        [DataMember(Name = "iEzsignformfieldgroupCompleted", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldgroupCompleted { get; set; }

        /// <summary>
        /// Whether the Ezsignform/Ezsignsignatures has dependencies or not
        /// </summary>
        /// <value>Whether the Ezsignform/Ezsignsignatures has dependencies or not</value>
        [DataMember(Name = "bEzsignformHasdependencies", EmitDefaultValue = true)]
        public bool BEzsignformHasdependencies { get; set; }

        /// <summary>
        /// Percentage of Ezsignform/Ezsignsignatures has completed
        /// </summary>
        /// <value>Percentage of Ezsignform/Ezsignsignatures has completed</value>
        [DataMember(Name = "dEzsignfolderCompletedpercentage", IsRequired = true, EmitDefaultValue = true)]
        public string DEzsignfolderCompletedpercentage { get; set; }

        /// <summary>
        /// Percentage of Ezsignform has completed
        /// </summary>
        /// <value>Percentage of Ezsignform has completed</value>
        [DataMember(Name = "dEzsignfolderFormcompletedpercentage", IsRequired = true, EmitDefaultValue = true)]
        public string DEzsignfolderFormcompletedpercentage { get; set; }

        /// <summary>
        /// Percentage of Ezsignsignatures has signed
        /// </summary>
        /// <value>Percentage of Ezsignsignatures has signed</value>
        [DataMember(Name = "dEzsignfolderSignaturecompletedpercentage", IsRequired = true, EmitDefaultValue = true)]
        public string DEzsignfolderSignaturecompletedpercentage { get; set; }

        /// <summary>
        /// Whether the Ezsignfolder has an Ezsignsignatures that need to be signed or an Ezsignformfieldgroups that need to be filled by the current user
        /// </summary>
        /// <value>Whether the Ezsignfolder has an Ezsignsignatures that need to be signed or an Ezsignformfieldgroups that need to be filled by the current user</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfolderSigner", EmitDefaultValue = true)]
        public bool BEzsignfolderSigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfolderListElement {\n");
            sb.Append("  PkiEzsignfolderID: ").Append(PkiEzsignfolderID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  SEzsignfolderDescription: ").Append(SEzsignfolderDescription).Append("\n");
            sb.Append("  EEzsignfolderStep: ").Append(EEzsignfolderStep).Append("\n");
            sb.Append("  DtCreatedDate: ").Append(DtCreatedDate).Append("\n");
            sb.Append("  DtEzsignfolderDelayedsenddate: ").Append(DtEzsignfolderDelayedsenddate).Append("\n");
            sb.Append("  DtEzsignfolderSentdate: ").Append(DtEzsignfolderSentdate).Append("\n");
            sb.Append("  DtEzsignfolderDuedate: ").Append(DtEzsignfolderDuedate).Append("\n");
            sb.Append("  IEzsigndocument: ").Append(IEzsigndocument).Append("\n");
            sb.Append("  IEzsigndocumentEdm: ").Append(IEzsigndocumentEdm).Append("\n");
            sb.Append("  IEzsignsignature: ").Append(IEzsignsignature).Append("\n");
            sb.Append("  IEzsignsignatureSigned: ").Append(IEzsignsignatureSigned).Append("\n");
            sb.Append("  IEzsignformfieldgroup: ").Append(IEzsignformfieldgroup).Append("\n");
            sb.Append("  IEzsignformfieldgroupCompleted: ").Append(IEzsignformfieldgroupCompleted).Append("\n");
            sb.Append("  BEzsignformHasdependencies: ").Append(BEzsignformHasdependencies).Append("\n");
            sb.Append("  DEzsignfolderCompletedpercentage: ").Append(DEzsignfolderCompletedpercentage).Append("\n");
            sb.Append("  DEzsignfolderFormcompletedpercentage: ").Append(DEzsignfolderFormcompletedpercentage).Append("\n");
            sb.Append("  DEzsignfolderSignaturecompletedpercentage: ").Append(DEzsignfolderSignaturecompletedpercentage).Append("\n");
            sb.Append("  BEzsignfolderSigner: ").Append(BEzsignfolderSigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfolderID (int) minimum
            if (this.PkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfolderID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            if (this.SEzsignfolderDescription != null) {
                // SEzsignfolderDescription (string) pattern
                Regex regexSEzsignfolderDescription = new Regex(@"^.{0,75}$", RegexOptions.CultureInvariant);
                if (!regexSEzsignfolderDescription.Match(this.SEzsignfolderDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignfolderDescription, must match a pattern of " + regexSEzsignfolderDescription, new [] { "SEzsignfolderDescription" });
                }
            }

            if (this.DEzsignfolderCompletedpercentage != null) {
                // DEzsignfolderCompletedpercentage (string) pattern
                Regex regexDEzsignfolderCompletedpercentage = new Regex(@"^-{0,1}[\d]{1,3}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDEzsignfolderCompletedpercentage.Match(this.DEzsignfolderCompletedpercentage).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzsignfolderCompletedpercentage, must match a pattern of " + regexDEzsignfolderCompletedpercentage, new [] { "DEzsignfolderCompletedpercentage" });
                }
            }

            if (this.DEzsignfolderFormcompletedpercentage != null) {
                // DEzsignfolderFormcompletedpercentage (string) pattern
                Regex regexDEzsignfolderFormcompletedpercentage = new Regex(@"^-{0,1}[\d]{1,3}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDEzsignfolderFormcompletedpercentage.Match(this.DEzsignfolderFormcompletedpercentage).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzsignfolderFormcompletedpercentage, must match a pattern of " + regexDEzsignfolderFormcompletedpercentage, new [] { "DEzsignfolderFormcompletedpercentage" });
                }
            }

            if (this.DEzsignfolderSignaturecompletedpercentage != null) {
                // DEzsignfolderSignaturecompletedpercentage (string) pattern
                Regex regexDEzsignfolderSignaturecompletedpercentage = new Regex(@"^-{0,1}[\d]{1,3}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDEzsignfolderSignaturecompletedpercentage.Match(this.DEzsignfolderSignaturecompletedpercentage).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzsignfolderSignaturecompletedpercentage, must match a pattern of " + regexDEzsignfolderSignaturecompletedpercentage, new [] { "DEzsignfolderSignaturecompletedpercentage" });
                }
            }

            yield break;
        }
    }

}
