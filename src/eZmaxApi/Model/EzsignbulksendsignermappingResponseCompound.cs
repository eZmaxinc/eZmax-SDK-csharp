/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignbulksendsignermapping Object
    /// </summary>
    [DataContract]
    public partial class EzsignbulksendsignermappingResponseCompound :  IEquatable<EzsignbulksendsignermappingResponseCompound>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendsignermappingResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignbulksendsignermappingResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendsignermappingResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignbulksendsignermappingID">The unique ID of the Ezsignbulksendsignermapping (required).</param>
        /// <param name="fkiEzsignbulksendID">The unique ID of the Ezsignbulksend (required).</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="sEzsignbulksendsignermappingDescription">The description of the Ezsignbulksendsignermapping (required).</param>
        public EzsignbulksendsignermappingResponseCompound(int pkiEzsignbulksendsignermappingID = default(int), int fkiEzsignbulksendID = default(int), int fkiUserID = default(int), string sEzsignbulksendsignermappingDescription = default(string))
        {
            // to ensure "pkiEzsignbulksendsignermappingID" is required (not null)
            if (pkiEzsignbulksendsignermappingID == null)
            {
                throw new InvalidDataException("pkiEzsignbulksendsignermappingID is a required property for EzsignbulksendsignermappingResponseCompound and cannot be null");
            }
            else
            {
                this.PkiEzsignbulksendsignermappingID = pkiEzsignbulksendsignermappingID;
            }

            // to ensure "fkiEzsignbulksendID" is required (not null)
            if (fkiEzsignbulksendID == null)
            {
                throw new InvalidDataException("fkiEzsignbulksendID is a required property for EzsignbulksendsignermappingResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsignbulksendID = fkiEzsignbulksendID;
            }

            // to ensure "sEzsignbulksendsignermappingDescription" is required (not null)
            if (sEzsignbulksendsignermappingDescription == null)
            {
                throw new InvalidDataException("sEzsignbulksendsignermappingDescription is a required property for EzsignbulksendsignermappingResponseCompound and cannot be null");
            }
            else
            {
                this.SEzsignbulksendsignermappingDescription = sEzsignbulksendsignermappingDescription;
            }

            this.FkiUserID = fkiUserID;
        }

        /// <summary>
        /// The unique ID of the Ezsignbulksendsignermapping
        /// </summary>
        /// <value>The unique ID of the Ezsignbulksendsignermapping</value>
        [DataMember(Name="pkiEzsignbulksendsignermappingID", EmitDefaultValue=true)]
        public int PkiEzsignbulksendsignermappingID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignbulksend
        /// </summary>
        /// <value>The unique ID of the Ezsignbulksend</value>
        [DataMember(Name="fkiEzsignbulksendID", EmitDefaultValue=true)]
        public int FkiEzsignbulksendID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The description of the Ezsignbulksendsignermapping
        /// </summary>
        /// <value>The description of the Ezsignbulksendsignermapping</value>
        [DataMember(Name="sEzsignbulksendsignermappingDescription", EmitDefaultValue=true)]
        public string SEzsignbulksendsignermappingDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignbulksendsignermappingResponseCompound {\n");
            sb.Append("  PkiEzsignbulksendsignermappingID: ").Append(PkiEzsignbulksendsignermappingID).Append("\n");
            sb.Append("  FkiEzsignbulksendID: ").Append(FkiEzsignbulksendID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  SEzsignbulksendsignermappingDescription: ").Append(SEzsignbulksendsignermappingDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignbulksendsignermappingResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsignbulksendsignermappingResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignbulksendsignermappingResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignbulksendsignermappingResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignbulksendsignermappingID == input.PkiEzsignbulksendsignermappingID ||
                    (this.PkiEzsignbulksendsignermappingID != null &&
                    this.PkiEzsignbulksendsignermappingID.Equals(input.PkiEzsignbulksendsignermappingID))
                ) && 
                (
                    this.FkiEzsignbulksendID == input.FkiEzsignbulksendID ||
                    (this.FkiEzsignbulksendID != null &&
                    this.FkiEzsignbulksendID.Equals(input.FkiEzsignbulksendID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.SEzsignbulksendsignermappingDescription == input.SEzsignbulksendsignermappingDescription ||
                    (this.SEzsignbulksendsignermappingDescription != null &&
                    this.SEzsignbulksendsignermappingDescription.Equals(input.SEzsignbulksendsignermappingDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignbulksendsignermappingID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignbulksendsignermappingID.GetHashCode();
                if (this.FkiEzsignbulksendID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignbulksendID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.SEzsignbulksendsignermappingDescription != null)
                    hashCode = hashCode * 59 + this.SEzsignbulksendsignermappingDescription.GetHashCode();
                return hashCode;
            }
        }
    }

}
