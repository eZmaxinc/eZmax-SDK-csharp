/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplateformfieldgroup Object
    /// </summary>
    [DataContract(Name = "ezsigntemplateformfieldgroup-Response")]
    public partial class EzsigntemplateformfieldgroupResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupType
        /// </summary>
        [DataMember(Name = "eEzsigntemplateformfieldgroupType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplateformfieldgroupType EEzsigntemplateformfieldgroupType { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupSignerrequirement
        /// </summary>
        [DataMember(Name = "eEzsigntemplateformfieldgroupSignerrequirement", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplateformfieldgroupSignerrequirement EEzsigntemplateformfieldgroupSignerrequirement { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupTextvalidation
        /// </summary>
        [DataMember(Name = "eEzsigntemplateformfieldgroupTextvalidation", EmitDefaultValue = false)]
        public EnumTextvalidation? EEzsigntemplateformfieldgroupTextvalidation { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupTooltipposition
        /// </summary>
        [DataMember(Name = "eEzsigntemplateformfieldgroupTooltipposition", EmitDefaultValue = false)]
        public FieldEEzsigntemplateformfieldgroupTooltipposition? EEzsigntemplateformfieldgroupTooltipposition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldgroupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateformfieldgroupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldgroupResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateformfieldgroupID">The unique ID of the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="fkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument (required).</param>
        /// <param name="eEzsigntemplateformfieldgroupType">eEzsigntemplateformfieldgroupType (required).</param>
        /// <param name="eEzsigntemplateformfieldgroupSignerrequirement">eEzsigntemplateformfieldgroupSignerrequirement (required).</param>
        /// <param name="sEzsigntemplateformfieldgroupLabel">The Label for the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupStep">The step when the Ezsigntemplatesigner will be invited to fill the form fields (required).</param>
        /// <param name="sEzsigntemplateformfieldgroupDefaultvalue">The default value for the Ezsigntemplateformfieldgroup.</param>
        /// <param name="iEzsigntemplateformfieldgroupFilledmin">The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupFilledmax">The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="bEzsigntemplateformfieldgroupReadonly">Whether the Ezsigntemplateformfieldgroup is read only or not. (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupMaxlength">The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="bEzsigntemplateformfieldgroupEncrypted">Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="sEzsigntemplateformfieldgroupRegexp">A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="eEzsigntemplateformfieldgroupTextvalidation">eEzsigntemplateformfieldgroupTextvalidation.</param>
        /// <param name="tEzsigntemplateformfieldgroupTooltip">A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup.</param>
        /// <param name="eEzsigntemplateformfieldgroupTooltipposition">eEzsigntemplateformfieldgroupTooltipposition.</param>
        public EzsigntemplateformfieldgroupResponse(int pkiEzsigntemplateformfieldgroupID = default(int), int fkiEzsigntemplatedocumentID = default(int), FieldEEzsigntemplateformfieldgroupType eEzsigntemplateformfieldgroupType = default(FieldEEzsigntemplateformfieldgroupType), FieldEEzsigntemplateformfieldgroupSignerrequirement eEzsigntemplateformfieldgroupSignerrequirement = default(FieldEEzsigntemplateformfieldgroupSignerrequirement), string sEzsigntemplateformfieldgroupLabel = default(string), int iEzsigntemplateformfieldgroupStep = default(int), string sEzsigntemplateformfieldgroupDefaultvalue = default(string), int iEzsigntemplateformfieldgroupFilledmin = default(int), int iEzsigntemplateformfieldgroupFilledmax = default(int), bool bEzsigntemplateformfieldgroupReadonly = default(bool), int iEzsigntemplateformfieldgroupMaxlength = default(int), bool bEzsigntemplateformfieldgroupEncrypted = default(bool), string sEzsigntemplateformfieldgroupRegexp = default(string), EnumTextvalidation? eEzsigntemplateformfieldgroupTextvalidation = default(EnumTextvalidation?), string tEzsigntemplateformfieldgroupTooltip = default(string), FieldEEzsigntemplateformfieldgroupTooltipposition? eEzsigntemplateformfieldgroupTooltipposition = default(FieldEEzsigntemplateformfieldgroupTooltipposition?))
        {
            this.PkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID;
            this.FkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
            this.EEzsigntemplateformfieldgroupType = eEzsigntemplateformfieldgroupType;
            this.EEzsigntemplateformfieldgroupSignerrequirement = eEzsigntemplateformfieldgroupSignerrequirement;
            // to ensure "sEzsigntemplateformfieldgroupLabel" is required (not null)
            if (sEzsigntemplateformfieldgroupLabel == null)
            {
                throw new ArgumentNullException("sEzsigntemplateformfieldgroupLabel is a required property for EzsigntemplateformfieldgroupResponse and cannot be null");
            }
            this.SEzsigntemplateformfieldgroupLabel = sEzsigntemplateformfieldgroupLabel;
            this.IEzsigntemplateformfieldgroupStep = iEzsigntemplateformfieldgroupStep;
            this.IEzsigntemplateformfieldgroupFilledmin = iEzsigntemplateformfieldgroupFilledmin;
            this.IEzsigntemplateformfieldgroupFilledmax = iEzsigntemplateformfieldgroupFilledmax;
            this.BEzsigntemplateformfieldgroupReadonly = bEzsigntemplateformfieldgroupReadonly;
            this.SEzsigntemplateformfieldgroupDefaultvalue = sEzsigntemplateformfieldgroupDefaultvalue;
            this.IEzsigntemplateformfieldgroupMaxlength = iEzsigntemplateformfieldgroupMaxlength;
            this.BEzsigntemplateformfieldgroupEncrypted = bEzsigntemplateformfieldgroupEncrypted;
            this.SEzsigntemplateformfieldgroupRegexp = sEzsigntemplateformfieldgroupRegexp;
            this.EEzsigntemplateformfieldgroupTextvalidation = eEzsigntemplateformfieldgroupTextvalidation;
            this.TEzsigntemplateformfieldgroupTooltip = tEzsigntemplateformfieldgroupTooltip;
            this.EEzsigntemplateformfieldgroupTooltipposition = eEzsigntemplateformfieldgroupTooltipposition;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfieldgroup</value>
        /* <example>64</example>*/
        [DataMember(Name = "pkiEzsigntemplateformfieldgroupID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplateformfieldgroupID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
        /* <example>133</example>*/
        [DataMember(Name = "fkiEzsigntemplatedocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// The Label for the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The Label for the Ezsigntemplateformfieldgroup</value>
        /* <example>Allergies</example>*/
        [DataMember(Name = "sEzsigntemplateformfieldgroupLabel", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplateformfieldgroupLabel { get; set; }

        /// <summary>
        /// The step when the Ezsigntemplatesigner will be invited to fill the form fields
        /// </summary>
        /// <value>The step when the Ezsigntemplatesigner will be invited to fill the form fields</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsigntemplateformfieldgroupStep", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplateformfieldgroupStep { get; set; }

        /// <summary>
        /// The default value for the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The default value for the Ezsigntemplateformfieldgroup</value>
        /* <example>Foo</example>*/
        [DataMember(Name = "sEzsigntemplateformfieldgroupDefaultvalue", EmitDefaultValue = false)]
        public string SEzsigntemplateformfieldgroupDefaultvalue { get; set; }

        /// <summary>
        /// The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsigntemplateformfieldgroupFilledmin", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplateformfieldgroupFilledmin { get; set; }

        /// <summary>
        /// The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup</value>
        /* <example>2</example>*/
        [DataMember(Name = "iEzsigntemplateformfieldgroupFilledmax", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplateformfieldgroupFilledmax { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplateformfieldgroup is read only or not.
        /// </summary>
        /// <value>Whether the Ezsigntemplateformfieldgroup is read only or not.</value>
        [DataMember(Name = "bEzsigntemplateformfieldgroupReadonly", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplateformfieldgroupReadonly { get; set; }

        /// <summary>
        /// The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**</value>
        /* <example>75</example>*/
        [DataMember(Name = "iEzsigntemplateformfieldgroupMaxlength", EmitDefaultValue = false)]
        public int IEzsigntemplateformfieldgroupMaxlength { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**</value>
        [DataMember(Name = "bEzsigntemplateformfieldgroupEncrypted", EmitDefaultValue = true)]
        public bool BEzsigntemplateformfieldgroupEncrypted { get; set; }

        /// <summary>
        /// A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**</value>
        /* <example>/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/</example>*/
        [DataMember(Name = "sEzsigntemplateformfieldgroupRegexp", EmitDefaultValue = false)]
        public string SEzsigntemplateformfieldgroupRegexp { get; set; }

        /// <summary>
        /// A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup</value>
        /* <example>Please enter a valid email address</example>*/
        [DataMember(Name = "tEzsigntemplateformfieldgroupTooltip", EmitDefaultValue = false)]
        public string TEzsigntemplateformfieldgroupTooltip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateformfieldgroupResponse {\n");
            sb.Append("  PkiEzsigntemplateformfieldgroupID: ").Append(PkiEzsigntemplateformfieldgroupID).Append("\n");
            sb.Append("  FkiEzsigntemplatedocumentID: ").Append(FkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupType: ").Append(EEzsigntemplateformfieldgroupType).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupSignerrequirement: ").Append(EEzsigntemplateformfieldgroupSignerrequirement).Append("\n");
            sb.Append("  SEzsigntemplateformfieldgroupLabel: ").Append(SEzsigntemplateformfieldgroupLabel).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupStep: ").Append(IEzsigntemplateformfieldgroupStep).Append("\n");
            sb.Append("  SEzsigntemplateformfieldgroupDefaultvalue: ").Append(SEzsigntemplateformfieldgroupDefaultvalue).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupFilledmin: ").Append(IEzsigntemplateformfieldgroupFilledmin).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupFilledmax: ").Append(IEzsigntemplateformfieldgroupFilledmax).Append("\n");
            sb.Append("  BEzsigntemplateformfieldgroupReadonly: ").Append(BEzsigntemplateformfieldgroupReadonly).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupMaxlength: ").Append(IEzsigntemplateformfieldgroupMaxlength).Append("\n");
            sb.Append("  BEzsigntemplateformfieldgroupEncrypted: ").Append(BEzsigntemplateformfieldgroupEncrypted).Append("\n");
            sb.Append("  SEzsigntemplateformfieldgroupRegexp: ").Append(SEzsigntemplateformfieldgroupRegexp).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupTextvalidation: ").Append(EEzsigntemplateformfieldgroupTextvalidation).Append("\n");
            sb.Append("  TEzsigntemplateformfieldgroupTooltip: ").Append(TEzsigntemplateformfieldgroupTooltip).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupTooltipposition: ").Append(EEzsigntemplateformfieldgroupTooltipposition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplateformfieldgroupID (int) minimum
            if (this.PkiEzsigntemplateformfieldgroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateformfieldgroupID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateformfieldgroupID" });
            }

            // FkiEzsigntemplatedocumentID (int) minimum
            if (this.FkiEzsigntemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatedocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatedocumentID" });
            }

            // SEzsigntemplateformfieldgroupLabel (string) maxLength
            if (this.SEzsigntemplateformfieldgroupLabel != null && this.SEzsigntemplateformfieldgroupLabel.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateformfieldgroupLabel, length must be less than 50.", new [] { "SEzsigntemplateformfieldgroupLabel" });
            }

            // SEzsigntemplateformfieldgroupLabel (string) minLength
            if (this.SEzsigntemplateformfieldgroupLabel != null && this.SEzsigntemplateformfieldgroupLabel.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateformfieldgroupLabel, length must be greater than 1.", new [] { "SEzsigntemplateformfieldgroupLabel" });
            }

            // IEzsigntemplateformfieldgroupStep (int) minimum
            if (this.IEzsigntemplateformfieldgroupStep < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupStep, must be a value greater than or equal to 1.", new [] { "IEzsigntemplateformfieldgroupStep" });
            }

            // IEzsigntemplateformfieldgroupFilledmin (int) minimum
            if (this.IEzsigntemplateformfieldgroupFilledmin < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupFilledmin, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldgroupFilledmin" });
            }

            // IEzsigntemplateformfieldgroupFilledmax (int) minimum
            if (this.IEzsigntemplateformfieldgroupFilledmax < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupFilledmax, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldgroupFilledmax" });
            }

            // IEzsigntemplateformfieldgroupMaxlength (int) maximum
            if (this.IEzsigntemplateformfieldgroupMaxlength > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupMaxlength, must be a value less than or equal to 65535.", new [] { "IEzsigntemplateformfieldgroupMaxlength" });
            }

            // IEzsigntemplateformfieldgroupMaxlength (int) minimum
            if (this.IEzsigntemplateformfieldgroupMaxlength < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupMaxlength, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldgroupMaxlength" });
            }

            if (this.SEzsigntemplateformfieldgroupRegexp != null) {
                // SEzsigntemplateformfieldgroupRegexp (string) pattern
                Regex regexSEzsigntemplateformfieldgroupRegexp = new Regex(@"^\^.*\$$|^$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplateformfieldgroupRegexp.Match(this.SEzsigntemplateformfieldgroupRegexp).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateformfieldgroupRegexp, must match a pattern of " + regexSEzsigntemplateformfieldgroupRegexp, new [] { "SEzsigntemplateformfieldgroupRegexp" });
                }
            }

            yield break;
        }
    }

}
