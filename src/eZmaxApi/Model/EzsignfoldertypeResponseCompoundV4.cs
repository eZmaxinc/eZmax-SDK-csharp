/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignfoldertype Object
    /// </summary>
    [DataContract(Name = "ezsignfoldertype-ResponseCompoundV4")]
    public partial class EzsignfoldertypeResponseCompoundV4 : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeDocumentdependency
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypeDocumentdependency", EmitDefaultValue = false)]
        public FieldEEzsignfoldertypeDocumentdependency? EEzsignfoldertypeDocumentdependency { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePdfarequirement
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePdfarequirement", EmitDefaultValue = false)]
        public FieldEEzsignfoldertypePdfarequirement? EEzsignfoldertypePdfarequirement { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePdfanoncompliantaction
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePdfanoncompliantaction", EmitDefaultValue = false)]
        public FieldEEzsignfoldertypePdfanoncompliantaction? EEzsignfoldertypePdfanoncompliantaction { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeDisposal
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypeDisposal", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypeDisposal EEzsignfoldertypeDisposal { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeCompletion
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypeCompletion", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypeCompletion EEzsignfoldertypeCompletion { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypeSigneraccess
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypeSigneraccess", EmitDefaultValue = false)]
        public FieldEEzsignfoldertypeSigneraccess? EEzsignfoldertypeSigneraccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeResponseCompoundV4" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldertypeResponseCompoundV4() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeResponseCompoundV4" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The unique ID of the Branding (required).</param>
        /// <param name="">The unique ID of the Billingentityinternal..</param>
        /// <param name="">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="">The unique ID of the Font.</param>
        /// <param name="">The unique ID of the Font.</param>
        /// <param name="">The unique ID of the Font.</param>
        /// <param name="">The unique ID of the Pdfalevel.</param>
        /// <param name="">.</param>
        /// <param name="">The Description of the Branding in the language of the requester (required).</param>
        /// <param name="">The description of the Billingentityinternal in the language of the requester.</param>
        /// <param name="">The description of the Ezsigntsarequirement in the language of the requester.</param>
        /// <param name="">The email address..</param>
        /// <param name="">The email address..</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        /// <param name=""> (required).</param>
        /// <param name="">Font size for annotations.</param>
        /// <param name="">Font size for form fields.</param>
        /// <param name="">The number of days before the the first reminder sending.</param>
        /// <param name="">The number of days after the first reminder sending.</param>
        /// <param name="">The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The number of days after the archival before the disposal of the Ezsignfolder.</param>
        /// <param name="">The number of days to get all Ezsignsignatures (required).</param>
        /// <param name="">Wheter if document will be ended prematurely after Ezsignfolder expires..</param>
        /// <param name="">Number of days between Ezsignfolder expiration and automatic prematurely end of Ezsigndocuments..</param>
        /// <param name="">Whether we allow the automatic signature by an User.</param>
        /// <param name="">Wheter if delegation of signature is allowed to another user or not.</param>
        /// <param name="">Wheter if creating a new Discussion is allowed or not.</param>
        /// <param name="">Whether we log recipient of signed document in proof.</param>
        /// <param name="">Wheter if Reassignment of signature is allowed by a signatory to another signatory or not.</param>
        /// <param name="">Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not.</param>
        /// <param name="">Wheter if Reassignment of signatures of the groups to which the user belongs is authorized by a user to himself.</param>
        /// <param name="">Whether we send an email to Ezsignsigner  when document is completed.</param>
        /// <param name="">Whether we send an email to User who signed when document is completed.</param>
        /// <param name="">Whether we send the Ezsigndocument in the email to Ezsignsigner.</param>
        /// <param name="">Whether we send the proof in the email to Ezsignsigner.</param>
        /// <param name="">Whether we send the Ezsigndocument in the email to User.</param>
        /// <param name="">Whether we send the proof in the email to User.</param>
        /// <param name="">Whether we send the proof in the email to external recipient.</param>
        /// <param name="">Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner.</param>
        /// <param name="">Whether we allow the proof to be downloaded by an Ezsignsigner.</param>
        /// <param name="">Whether we send the proof to user and Ezsignsigner who receive all documents..</param>
        /// <param name="">Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="">Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="">Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="">THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="">Whether we send the signed Ezsigndocument to the colleagues (required).</param>
        /// <param name="">Whether we send the summary to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="">Whether we send the summary to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="">Whether we send the summary to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="">Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="">Whether we send the summary to the colleagues (required).</param>
        /// <param name="">.</param>
        /// <param name="">Whether the Ezsignfoldertype is active or not (required).</param>
        /// <param name="">.</param>
        /// <param name=""> (required).</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        /// <param name=""> (required).</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        public EzsignfoldertypeResponseCompoundV4(int  = default(int), MultilingualEzsignfoldertypeName  = default(MultilingualEzsignfoldertypeName), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), FieldEEzsignfoldertypeDocumentdependency?  = default(FieldEEzsignfoldertypeDocumentdependency?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), FieldEEzsignfoldertypePdfarequirement?  = default(FieldEEzsignfoldertypePdfarequirement?), FieldEEzsignfoldertypePdfanoncompliantaction?  = default(FieldEEzsignfoldertypePdfanoncompliantaction?), FieldEEzsignfoldertypePrivacylevel  = default(FieldEEzsignfoldertypePrivacylevel), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), FieldEEzsignfoldertypeDisposal  = default(FieldEEzsignfoldertypeDisposal), FieldEEzsignfoldertypeCompletion  = default(FieldEEzsignfoldertypeCompletion), int  = default(int), int  = default(int), bool  = default(bool), int  = default(int), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), FieldEEzsignfoldertypeSigneraccess?  = default(FieldEEzsignfoldertypeSigneraccess?), bool  = default(bool), List<int>  = default(List<int>), List<UserlogintypeResponse>  = default(List<UserlogintypeResponse>), List<UsergroupResponse>  = default(List<UsergroupResponse>), List<UsergroupResponse>  = default(List<UsergroupResponse>), List<UsergroupResponse>  = default(List<UsergroupResponse>), CommonAudit  = default(CommonAudit), List<int>  = default(List<int>), List<int>  = default(List<int>))
        {
            this.PkiEzsignfoldertypeID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfoldertypeResponseCompoundV4 and cannot be null");
            }
            this.ObjEzsignfoldertypeName = ;
            this.FkiBrandingID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfoldertypeResponseCompoundV4 and cannot be null");
            }
            this.SBrandingDescriptionX = ;
            this.EEzsignfoldertypePrivacylevel = ;
            this.IEzsignfoldertypeArchivaldays = ;
            this.EEzsignfoldertypeDisposal = ;
            this.EEzsignfoldertypeCompletion = ;
            this.IEzsignfoldertypeDeadlinedays = ;
            this.BEzsignfoldertypeSendsignedtodocumentowner = ;
            this.BEzsignfoldertypeSendsignedtofolderowner = ;
            this.BEzsignfoldertypeSendsignedtocolleague = ;
            this.BEzsignfoldertypeSendsummarytodocumentowner = ;
            this.BEzsignfoldertypeSendsummarytofolderowner = ;
            this.BEzsignfoldertypeSendsummarytocolleague = ;
            this.BEzsignfoldertypeIsactive = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfoldertypeResponseCompoundV4 and cannot be null");
            }
            this.AObjUserlogintype = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfoldertypeResponseCompoundV4 and cannot be null");
            }
            this.ObjAudit = ;
            this.FkiBillingentityinternalID = ;
            this.FkiEzsigntsarequirementID = ;
            this.FkiFontIDAnnotation = ;
            this.FkiFontIDFormfield = ;
            this.FkiFontIDSignature = ;
            this.FkiPdfalevelIDConvert = ;
            this.EEzsignfoldertypeDocumentdependency = ;
            this.SBillingentityinternalDescriptionX = ;
            this.SEzsigntsarequirementDescriptionX = ;
            this.SEmailAddressSigned = ;
            this.SEmailAddressSummary = ;
            this.EEzsignfoldertypePdfarequirement = ;
            this.EEzsignfoldertypePdfanoncompliantaction = ;
            this.IEzsignfoldertypeFontsizeannotation = ;
            this.IEzsignfoldertypeFontsizeformfield = ;
            this.IEzsignfoldertypeSendreminderfirstdays = ;
            this.IEzsignfoldertypeSendreminderotherdays = ;
            this.IEzsignfoldertypeDisposaldays = ;
            this.BEzsignfoldertypePrematurelyendautomatically = ;
            this.IEzsignfoldertypePrematurelyendautomaticallydays = ;
            this.BEzsignfoldertypeAutomaticsignature = ;
            this.BEzsignfoldertypeDelegate = ;
            this.BEzsignfoldertypeDiscussion = ;
            this.BEzsignfoldertypeLogrecipientinproof = ;
            this.BEzsignfoldertypeReassignezsignsigner = ;
            this.BEzsignfoldertypeReassignuser = ;
            this.BEzsignfoldertypeReassigngroup = ;
            this.BEzsignfoldertypeSendsignedtoezsignsigner = ;
            this.BEzsignfoldertypeSendsignedtouser = ;
            this.BEzsignfoldertypeSendattachmentezsignsigner = ;
            this.BEzsignfoldertypeSendproofezsignsigner = ;
            this.BEzsignfoldertypeSendattachmentuser = ;
            this.BEzsignfoldertypeSendproofuser = ;
            this.BEzsignfoldertypeSendproofemail = ;
            this.BEzsignfoldertypeAllowdownloadattachmentezsignsigner = ;
            this.BEzsignfoldertypeAllowdownloadproofezsignsigner = ;
            this.BEzsignfoldertypeSendproofreceivealldocument = ;
            this.BEzsignfoldertypeSendsignedtofullgroup = ;
            this.BEzsignfoldertypeSendsignedtolimitedgroup = ;
            this.BEzsignfoldertypeSendsummarytofullgroup = ;
            this.BEzsignfoldertypeSendsummarytolimitedgroup = ;
            this.EEzsignfoldertypeSigneraccess = ;
            this.AFkiPdfalevelID = ;
            this.AObjUsergroupAll = ;
            this.AObjUsergroupRestricted = ;
            this.AObjUsergroupTemplate = ;
            this.AFkiUserIDSigned = ;
            this.AFkiUserIDSummary = ;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "pkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignfoldertypeName
        /// </summary>
        [DataMember(Name = "objEzsignfoldertypeName", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualEzsignfoldertypeName ObjEzsignfoldertypeName { get; set; }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        /* <example>78</example>*/
        [DataMember(Name = "fkiBrandingID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBrandingID { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiBillingentityinternalID", EmitDefaultValue = false)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiEzsigntsarequirementID", EmitDefaultValue = false)]
        public int FkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// The unique ID of the Font
        /// </summary>
        /// <value>The unique ID of the Font</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiFontIDAnnotation", EmitDefaultValue = false)]
        public int FkiFontIDAnnotation { get; set; }

        /// <summary>
        /// The unique ID of the Font
        /// </summary>
        /// <value>The unique ID of the Font</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiFontIDFormfield", EmitDefaultValue = false)]
        public int FkiFontIDFormfield { get; set; }

        /// <summary>
        /// The unique ID of the Font
        /// </summary>
        /// <value>The unique ID of the Font</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiFontIDSignature", EmitDefaultValue = false)]
        public int FkiFontIDSignature { get; set; }

        /// <summary>
        /// The unique ID of the Pdfalevel
        /// </summary>
        /// <value>The unique ID of the Pdfalevel</value>
        /* <example>102</example>*/
        [DataMember(Name = "fkiPdfalevelIDConvert", EmitDefaultValue = false)]
        public int FkiPdfalevelIDConvert { get; set; }

        /// <summary>
        /// The Description of the Branding in the language of the requester
        /// </summary>
        /// <value>The Description of the Branding in the language of the requester</value>
        /* <example>Company X</example>*/
        [DataMember(Name = "sBrandingDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SBrandingDescriptionX { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in the language of the requester
        /// </summary>
        /// <value>The description of the Billingentityinternal in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sBillingentityinternalDescriptionX", EmitDefaultValue = false)]
        public string SBillingentityinternalDescriptionX { get; set; }

        /// <summary>
        /// The description of the Ezsigntsarequirement in the language of the requester
        /// </summary>
        /// <value>The description of the Ezsigntsarequirement in the language of the requester</value>
        /* <example>No</example>*/
        [DataMember(Name = "sEzsigntsarequirementDescriptionX", EmitDefaultValue = false)]
        public string SEzsigntsarequirementDescriptionX { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddressSigned", EmitDefaultValue = false)]
        public string SEmailAddressSigned { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddressSummary", EmitDefaultValue = false)]
        public string SEmailAddressSummary { get; set; }

        /// <summary>
        /// Font size for annotations
        /// </summary>
        /// <value>Font size for annotations</value>
        /* <example>10</example>*/
        [DataMember(Name = "iEzsignfoldertypeFontsizeannotation", EmitDefaultValue = false)]
        public int IEzsignfoldertypeFontsizeannotation { get; set; }

        /// <summary>
        /// Font size for form fields
        /// </summary>
        /// <value>Font size for form fields</value>
        /* <example>12</example>*/
        [DataMember(Name = "iEzsignfoldertypeFontsizeformfield", EmitDefaultValue = false)]
        public int IEzsignfoldertypeFontsizeformfield { get; set; }

        /// <summary>
        /// The number of days before the the first reminder sending
        /// </summary>
        /// <value>The number of days before the the first reminder sending</value>
        /* <example>30</example>*/
        [DataMember(Name = "iEzsignfoldertypeSendreminderfirstdays", EmitDefaultValue = false)]
        public int IEzsignfoldertypeSendreminderfirstdays { get; set; }

        /// <summary>
        /// The number of days after the first reminder sending
        /// </summary>
        /// <value>The number of days after the first reminder sending</value>
        /* <example>30</example>*/
        [DataMember(Name = "iEzsignfoldertypeSendreminderotherdays", EmitDefaultValue = false)]
        public int IEzsignfoldertypeSendreminderotherdays { get; set; }

        /// <summary>
        /// The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
        /// </summary>
        /// <value>The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype</value>
        /* <example>30</example>*/
        [DataMember(Name = "iEzsignfoldertypeArchivaldays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfoldertypeArchivaldays { get; set; }

        /// <summary>
        /// The number of days after the archival before the disposal of the Ezsignfolder
        /// </summary>
        /// <value>The number of days after the archival before the disposal of the Ezsignfolder</value>
        /* <example>365</example>*/
        [DataMember(Name = "iEzsignfoldertypeDisposaldays", EmitDefaultValue = false)]
        public int IEzsignfoldertypeDisposaldays { get; set; }

        /// <summary>
        /// The number of days to get all Ezsignsignatures
        /// </summary>
        /// <value>The number of days to get all Ezsignsignatures</value>
        /* <example>5</example>*/
        [DataMember(Name = "iEzsignfoldertypeDeadlinedays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfoldertypeDeadlinedays { get; set; }

        /// <summary>
        /// Wheter if document will be ended prematurely after Ezsignfolder expires.
        /// </summary>
        /// <value>Wheter if document will be ended prematurely after Ezsignfolder expires.</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypePrematurelyendautomatically", EmitDefaultValue = true)]
        public bool BEzsignfoldertypePrematurelyendautomatically { get; set; }

        /// <summary>
        /// Number of days between Ezsignfolder expiration and automatic prematurely end of Ezsigndocuments.
        /// </summary>
        /// <value>Number of days between Ezsignfolder expiration and automatic prematurely end of Ezsigndocuments.</value>
        /* <example>5</example>*/
        [DataMember(Name = "iEzsignfoldertypePrematurelyendautomaticallydays", EmitDefaultValue = false)]
        public int IEzsignfoldertypePrematurelyendautomaticallydays { get; set; }

        /// <summary>
        /// Whether we allow the automatic signature by an User
        /// </summary>
        /// <value>Whether we allow the automatic signature by an User</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeAutomaticsignature", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeAutomaticsignature { get; set; }

        /// <summary>
        /// Wheter if delegation of signature is allowed to another user or not
        /// </summary>
        /// <value>Wheter if delegation of signature is allowed to another user or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeDelegate", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeDelegate { get; set; }

        /// <summary>
        /// Wheter if creating a new Discussion is allowed or not
        /// </summary>
        /// <value>Wheter if creating a new Discussion is allowed or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeDiscussion", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeDiscussion { get; set; }

        /// <summary>
        /// Whether we log recipient of signed document in proof
        /// </summary>
        /// <value>Whether we log recipient of signed document in proof</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeLogrecipientinproof", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeLogrecipientinproof { get; set; }

        /// <summary>
        /// Wheter if Reassignment of signature is allowed by a signatory to another signatory or not
        /// </summary>
        /// <value>Wheter if Reassignment of signature is allowed by a signatory to another signatory or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeReassignezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeReassignezsignsigner { get; set; }

        /// <summary>
        /// Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not
        /// </summary>
        /// <value>Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeReassignuser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeReassignuser { get; set; }

        /// <summary>
        /// Wheter if Reassignment of signatures of the groups to which the user belongs is authorized by a user to himself
        /// </summary>
        /// <value>Wheter if Reassignment of signatures of the groups to which the user belongs is authorized by a user to himself</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeReassigngroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeReassigngroup { get; set; }

        /// <summary>
        /// Whether we send an email to Ezsignsigner  when document is completed
        /// </summary>
        /// <value>Whether we send an email to Ezsignsigner  when document is completed</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtoezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtoezsignsigner { get; set; }

        /// <summary>
        /// Whether we send an email to User who signed when document is completed
        /// </summary>
        /// <value>Whether we send an email to User who signed when document is completed</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtouser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtouser { get; set; }

        /// <summary>
        /// Whether we send the Ezsigndocument in the email to Ezsignsigner
        /// </summary>
        /// <value>Whether we send the Ezsigndocument in the email to Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendattachmentezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendattachmentezsignsigner { get; set; }

        /// <summary>
        /// Whether we send the proof in the email to Ezsignsigner
        /// </summary>
        /// <value>Whether we send the proof in the email to Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofezsignsigner { get; set; }

        /// <summary>
        /// Whether we send the Ezsigndocument in the email to User
        /// </summary>
        /// <value>Whether we send the Ezsigndocument in the email to User</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendattachmentuser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendattachmentuser { get; set; }

        /// <summary>
        /// Whether we send the proof in the email to User
        /// </summary>
        /// <value>Whether we send the proof in the email to User</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofuser", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofuser { get; set; }

        /// <summary>
        /// Whether we send the proof in the email to external recipient
        /// </summary>
        /// <value>Whether we send the proof in the email to external recipient</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofemail", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofemail { get; set; }

        /// <summary>
        /// Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner
        /// </summary>
        /// <value>Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeAllowdownloadattachmentezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeAllowdownloadattachmentezsignsigner { get; set; }

        /// <summary>
        /// Whether we allow the proof to be downloaded by an Ezsignsigner
        /// </summary>
        /// <value>Whether we allow the proof to be downloaded by an Ezsignsigner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeAllowdownloadproofezsignsigner", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeAllowdownloadproofezsignsigner { get; set; }

        /// <summary>
        /// Whether we send the proof to user and Ezsignsigner who receive all documents.
        /// </summary>
        /// <value>Whether we send the proof to user and Ezsignsigner who receive all documents.</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendproofreceivealldocument", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendproofreceivealldocument { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtodocumentowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtodocumentowner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtofolderowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtofolderowner { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtofullgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtofullgroup { get; set; }

        /// <summary>
        /// THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
        /// </summary>
        /// <value>THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtolimitedgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtolimitedgroup { get; set; }

        /// <summary>
        /// Whether we send the signed Ezsigndocument to the colleagues
        /// </summary>
        /// <value>Whether we send the signed Ezsigndocument to the colleagues</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsignedtocolleague", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsignedtocolleague { get; set; }

        /// <summary>
        /// Whether we send the summary to the Ezsigndocument&#39;s owner
        /// </summary>
        /// <value>Whether we send the summary to the Ezsigndocument&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytodocumentowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytodocumentowner { get; set; }

        /// <summary>
        /// Whether we send the summary to the Ezsignfolder&#39;s owner
        /// </summary>
        /// <value>Whether we send the summary to the Ezsignfolder&#39;s owner</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytofolderowner", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytofolderowner { get; set; }

        /// <summary>
        /// Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
        /// </summary>
        /// <value>Whether we send the summary to the Usergroup that has acces to all Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytofullgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytofullgroup { get; set; }

        /// <summary>
        /// Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
        /// </summary>
        /// <value>Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytolimitedgroup", EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytolimitedgroup { get; set; }

        /// <summary>
        /// Whether we send the summary to the colleagues
        /// </summary>
        /// <value>Whether we send the summary to the colleagues</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfoldertypeSendsummarytocolleague", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeSendsummarytocolleague { get; set; }

        /// <summary>
        /// Whether the Ezsignfoldertype is active or not
        /// </summary>
        /// <value>Whether the Ezsignfoldertype is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeIsactive { get; set; }

        /// <summary>
        /// Gets or Sets AFkiPdfalevelID
        /// </summary>
        [DataMember(Name = "a_fkiPdfalevelID", EmitDefaultValue = false)]
        public List<int> AFkiPdfalevelID { get; set; }

        /// <summary>
        /// Gets or Sets AObjUserlogintype
        /// </summary>
        [DataMember(Name = "a_objUserlogintype", IsRequired = true, EmitDefaultValue = true)]
        public List<UserlogintypeResponse> AObjUserlogintype { get; set; }

        /// <summary>
        /// Gets or Sets AObjUsergroupAll
        /// </summary>
        [DataMember(Name = "a_objUsergroupAll", EmitDefaultValue = false)]
        public List<UsergroupResponse> AObjUsergroupAll { get; set; }

        /// <summary>
        /// Gets or Sets AObjUsergroupRestricted
        /// </summary>
        [DataMember(Name = "a_objUsergroupRestricted", EmitDefaultValue = false)]
        public List<UsergroupResponse> AObjUsergroupRestricted { get; set; }

        /// <summary>
        /// Gets or Sets AObjUsergroupTemplate
        /// </summary>
        [DataMember(Name = "a_objUsergroupTemplate", EmitDefaultValue = false)]
        public List<UsergroupResponse> AObjUsergroupTemplate { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", IsRequired = true, EmitDefaultValue = true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSigned
        /// </summary>
        [DataMember(Name = "a_fkiUserIDSigned", EmitDefaultValue = false)]
        public List<int> AFkiUserIDSigned { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSummary
        /// </summary>
        [DataMember(Name = "a_fkiUserIDSummary", EmitDefaultValue = false)]
        public List<int> AFkiUserIDSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfoldertypeResponseCompoundV4 {\n");
            sb.Append("  PkiEzsignfoldertypeID: ").Append(PkiEzsignfoldertypeID).Append("\n");
            sb.Append("  ObjEzsignfoldertypeName: ").Append(ObjEzsignfoldertypeName).Append("\n");
            sb.Append("  FkiBrandingID: ").Append(FkiBrandingID).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  FkiEzsigntsarequirementID: ").Append(FkiEzsigntsarequirementID).Append("\n");
            sb.Append("  FkiFontIDAnnotation: ").Append(FkiFontIDAnnotation).Append("\n");
            sb.Append("  FkiFontIDFormfield: ").Append(FkiFontIDFormfield).Append("\n");
            sb.Append("  FkiFontIDSignature: ").Append(FkiFontIDSignature).Append("\n");
            sb.Append("  FkiPdfalevelIDConvert: ").Append(FkiPdfalevelIDConvert).Append("\n");
            sb.Append("  EEzsignfoldertypeDocumentdependency: ").Append(EEzsignfoldertypeDocumentdependency).Append("\n");
            sb.Append("  SBrandingDescriptionX: ").Append(SBrandingDescriptionX).Append("\n");
            sb.Append("  SBillingentityinternalDescriptionX: ").Append(SBillingentityinternalDescriptionX).Append("\n");
            sb.Append("  SEzsigntsarequirementDescriptionX: ").Append(SEzsigntsarequirementDescriptionX).Append("\n");
            sb.Append("  SEmailAddressSigned: ").Append(SEmailAddressSigned).Append("\n");
            sb.Append("  SEmailAddressSummary: ").Append(SEmailAddressSummary).Append("\n");
            sb.Append("  EEzsignfoldertypePdfarequirement: ").Append(EEzsignfoldertypePdfarequirement).Append("\n");
            sb.Append("  EEzsignfoldertypePdfanoncompliantaction: ").Append(EEzsignfoldertypePdfanoncompliantaction).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  IEzsignfoldertypeFontsizeannotation: ").Append(IEzsignfoldertypeFontsizeannotation).Append("\n");
            sb.Append("  IEzsignfoldertypeFontsizeformfield: ").Append(IEzsignfoldertypeFontsizeformfield).Append("\n");
            sb.Append("  IEzsignfoldertypeSendreminderfirstdays: ").Append(IEzsignfoldertypeSendreminderfirstdays).Append("\n");
            sb.Append("  IEzsignfoldertypeSendreminderotherdays: ").Append(IEzsignfoldertypeSendreminderotherdays).Append("\n");
            sb.Append("  IEzsignfoldertypeArchivaldays: ").Append(IEzsignfoldertypeArchivaldays).Append("\n");
            sb.Append("  EEzsignfoldertypeDisposal: ").Append(EEzsignfoldertypeDisposal).Append("\n");
            sb.Append("  EEzsignfoldertypeCompletion: ").Append(EEzsignfoldertypeCompletion).Append("\n");
            sb.Append("  IEzsignfoldertypeDisposaldays: ").Append(IEzsignfoldertypeDisposaldays).Append("\n");
            sb.Append("  IEzsignfoldertypeDeadlinedays: ").Append(IEzsignfoldertypeDeadlinedays).Append("\n");
            sb.Append("  BEzsignfoldertypePrematurelyendautomatically: ").Append(BEzsignfoldertypePrematurelyendautomatically).Append("\n");
            sb.Append("  IEzsignfoldertypePrematurelyendautomaticallydays: ").Append(IEzsignfoldertypePrematurelyendautomaticallydays).Append("\n");
            sb.Append("  BEzsignfoldertypeAutomaticsignature: ").Append(BEzsignfoldertypeAutomaticsignature).Append("\n");
            sb.Append("  BEzsignfoldertypeDelegate: ").Append(BEzsignfoldertypeDelegate).Append("\n");
            sb.Append("  BEzsignfoldertypeDiscussion: ").Append(BEzsignfoldertypeDiscussion).Append("\n");
            sb.Append("  BEzsignfoldertypeLogrecipientinproof: ").Append(BEzsignfoldertypeLogrecipientinproof).Append("\n");
            sb.Append("  BEzsignfoldertypeReassignezsignsigner: ").Append(BEzsignfoldertypeReassignezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeReassignuser: ").Append(BEzsignfoldertypeReassignuser).Append("\n");
            sb.Append("  BEzsignfoldertypeReassigngroup: ").Append(BEzsignfoldertypeReassigngroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtoezsignsigner: ").Append(BEzsignfoldertypeSendsignedtoezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtouser: ").Append(BEzsignfoldertypeSendsignedtouser).Append("\n");
            sb.Append("  BEzsignfoldertypeSendattachmentezsignsigner: ").Append(BEzsignfoldertypeSendattachmentezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofezsignsigner: ").Append(BEzsignfoldertypeSendproofezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendattachmentuser: ").Append(BEzsignfoldertypeSendattachmentuser).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofuser: ").Append(BEzsignfoldertypeSendproofuser).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofemail: ").Append(BEzsignfoldertypeSendproofemail).Append("\n");
            sb.Append("  BEzsignfoldertypeAllowdownloadattachmentezsignsigner: ").Append(BEzsignfoldertypeAllowdownloadattachmentezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeAllowdownloadproofezsignsigner: ").Append(BEzsignfoldertypeAllowdownloadproofezsignsigner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendproofreceivealldocument: ").Append(BEzsignfoldertypeSendproofreceivealldocument).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtodocumentowner: ").Append(BEzsignfoldertypeSendsignedtodocumentowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtofolderowner: ").Append(BEzsignfoldertypeSendsignedtofolderowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtofullgroup: ").Append(BEzsignfoldertypeSendsignedtofullgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtolimitedgroup: ").Append(BEzsignfoldertypeSendsignedtolimitedgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsignedtocolleague: ").Append(BEzsignfoldertypeSendsignedtocolleague).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytodocumentowner: ").Append(BEzsignfoldertypeSendsummarytodocumentowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytofolderowner: ").Append(BEzsignfoldertypeSendsummarytofolderowner).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytofullgroup: ").Append(BEzsignfoldertypeSendsummarytofullgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytolimitedgroup: ").Append(BEzsignfoldertypeSendsummarytolimitedgroup).Append("\n");
            sb.Append("  BEzsignfoldertypeSendsummarytocolleague: ").Append(BEzsignfoldertypeSendsummarytocolleague).Append("\n");
            sb.Append("  EEzsignfoldertypeSigneraccess: ").Append(EEzsignfoldertypeSigneraccess).Append("\n");
            sb.Append("  BEzsignfoldertypeIsactive: ").Append(BEzsignfoldertypeIsactive).Append("\n");
            sb.Append("  AFkiPdfalevelID: ").Append(AFkiPdfalevelID).Append("\n");
            sb.Append("  AObjUserlogintype: ").Append(AObjUserlogintype).Append("\n");
            sb.Append("  AObjUsergroupAll: ").Append(AObjUsergroupAll).Append("\n");
            sb.Append("  AObjUsergroupRestricted: ").Append(AObjUsergroupRestricted).Append("\n");
            sb.Append("  AObjUsergroupTemplate: ").Append(AObjUsergroupTemplate).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  AFkiUserIDSigned: ").Append(AFkiUserIDSigned).Append("\n");
            sb.Append("  AFkiUserIDSummary: ").Append(AFkiUserIDSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfoldertypeID (int) maximum
            if (this.PkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "PkiEzsignfoldertypeID" });
            }

            // PkiEzsignfoldertypeID (int) minimum
            if (this.PkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldertypeID" });
            }

            // FkiBrandingID (int) minimum
            if (this.FkiBrandingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBrandingID, must be a value greater than or equal to 0.", new [] { "FkiBrandingID" });
            }

            // FkiBillingentityinternalID (int) minimum
            if (this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }

            // FkiEzsigntsarequirementID (int) maximum
            if (this.FkiEzsigntsarequirementID > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiEzsigntsarequirementID (int) minimum
            if (this.FkiEzsigntsarequirementID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiFontIDAnnotation (int) minimum
            if (this.FkiFontIDAnnotation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiFontIDAnnotation, must be a value greater than or equal to 0.", new [] { "FkiFontIDAnnotation" });
            }

            // FkiFontIDFormfield (int) minimum
            if (this.FkiFontIDFormfield < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiFontIDFormfield, must be a value greater than or equal to 0.", new [] { "FkiFontIDFormfield" });
            }

            // FkiFontIDSignature (int) minimum
            if (this.FkiFontIDSignature < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiFontIDSignature, must be a value greater than or equal to 0.", new [] { "FkiFontIDSignature" });
            }

            // FkiPdfalevelIDConvert (int) maximum
            if (this.FkiPdfalevelIDConvert > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiPdfalevelIDConvert, must be a value less than or equal to 255.", new [] { "FkiPdfalevelIDConvert" });
            }

            // FkiPdfalevelIDConvert (int) minimum
            if (this.FkiPdfalevelIDConvert < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiPdfalevelIDConvert, must be a value greater than or equal to 0.", new [] { "FkiPdfalevelIDConvert" });
            }

            if (this.SEmailAddressSigned != null) {
                // SEmailAddressSigned (string) pattern
                Regex regexSEmailAddressSigned = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddressSigned.Match(this.SEmailAddressSigned).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddressSigned, must match a pattern of " + regexSEmailAddressSigned, new [] { "SEmailAddressSigned" });
                }
            }

            if (this.SEmailAddressSummary != null) {
                // SEmailAddressSummary (string) pattern
                Regex regexSEmailAddressSummary = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddressSummary.Match(this.SEmailAddressSummary).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddressSummary, must match a pattern of " + regexSEmailAddressSummary, new [] { "SEmailAddressSummary" });
                }
            }

            // IEzsignfoldertypeFontsizeannotation (int) maximum
            if (this.IEzsignfoldertypeFontsizeannotation > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeFontsizeannotation, must be a value less than or equal to 255.", new [] { "IEzsignfoldertypeFontsizeannotation" });
            }

            // IEzsignfoldertypeFontsizeannotation (int) minimum
            if (this.IEzsignfoldertypeFontsizeannotation < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeFontsizeannotation, must be a value greater than or equal to 1.", new [] { "IEzsignfoldertypeFontsizeannotation" });
            }

            // IEzsignfoldertypeFontsizeformfield (int) maximum
            if (this.IEzsignfoldertypeFontsizeformfield > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeFontsizeformfield, must be a value less than or equal to 255.", new [] { "IEzsignfoldertypeFontsizeformfield" });
            }

            // IEzsignfoldertypeFontsizeformfield (int) minimum
            if (this.IEzsignfoldertypeFontsizeformfield < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeFontsizeformfield, must be a value greater than or equal to 1.", new [] { "IEzsignfoldertypeFontsizeformfield" });
            }

            // IEzsignfoldertypeSendreminderfirstdays (int) maximum
            if (this.IEzsignfoldertypeSendreminderfirstdays > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeSendreminderfirstdays, must be a value less than or equal to 255.", new [] { "IEzsignfoldertypeSendreminderfirstdays" });
            }

            // IEzsignfoldertypeSendreminderfirstdays (int) minimum
            if (this.IEzsignfoldertypeSendreminderfirstdays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeSendreminderfirstdays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeSendreminderfirstdays" });
            }

            // IEzsignfoldertypeSendreminderotherdays (int) maximum
            if (this.IEzsignfoldertypeSendreminderotherdays > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeSendreminderotherdays, must be a value less than or equal to 255.", new [] { "IEzsignfoldertypeSendreminderotherdays" });
            }

            // IEzsignfoldertypeSendreminderotherdays (int) minimum
            if (this.IEzsignfoldertypeSendreminderotherdays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeSendreminderotherdays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeSendreminderotherdays" });
            }

            // IEzsignfoldertypeArchivaldays (int) maximum
            if (this.IEzsignfoldertypeArchivaldays > (int)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeArchivaldays, must be a value less than or equal to 180.", new [] { "IEzsignfoldertypeArchivaldays" });
            }

            // IEzsignfoldertypeArchivaldays (int) minimum
            if (this.IEzsignfoldertypeArchivaldays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeArchivaldays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeArchivaldays" });
            }

            // IEzsignfoldertypeDisposaldays (int) maximum
            if (this.IEzsignfoldertypeDisposaldays > (int)9999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDisposaldays, must be a value less than or equal to 9999.", new [] { "IEzsignfoldertypeDisposaldays" });
            }

            // IEzsignfoldertypeDisposaldays (int) minimum
            if (this.IEzsignfoldertypeDisposaldays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDisposaldays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypeDisposaldays" });
            }

            // IEzsignfoldertypeDeadlinedays (int) maximum
            if (this.IEzsignfoldertypeDeadlinedays > (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDeadlinedays, must be a value less than or equal to 60.", new [] { "IEzsignfoldertypeDeadlinedays" });
            }

            // IEzsignfoldertypeDeadlinedays (int) minimum
            if (this.IEzsignfoldertypeDeadlinedays < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypeDeadlinedays, must be a value greater than or equal to 1.", new [] { "IEzsignfoldertypeDeadlinedays" });
            }

            // IEzsignfoldertypePrematurelyendautomaticallydays (int) maximum
            if (this.IEzsignfoldertypePrematurelyendautomaticallydays > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypePrematurelyendautomaticallydays, must be a value less than or equal to 255.", new [] { "IEzsignfoldertypePrematurelyendautomaticallydays" });
            }

            // IEzsignfoldertypePrematurelyendautomaticallydays (int) minimum
            if (this.IEzsignfoldertypePrematurelyendautomaticallydays < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignfoldertypePrematurelyendautomaticallydays, must be a value greater than or equal to 0.", new [] { "IEzsignfoldertypePrematurelyendautomaticallydays" });
            }

            yield break;
        }
    }

}
