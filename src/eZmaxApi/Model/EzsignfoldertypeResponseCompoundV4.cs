/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignfoldertype Object
    /// </summary>
    [DataContract(Name = "ezsignfoldertype-ResponseCompoundV4")]
    public partial class EzsignfoldertypeResponseCompoundV4 : EzsignfoldertypeResponseV4, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeResponseCompoundV4" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldertypeResponseCompoundV4() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeResponseCompoundV4" /> class.
        /// </summary>
        /// <param name="aFkiUserIDSigned">aFkiUserIDSigned.</param>
        /// <param name="aFkiUserIDSummary">aFkiUserIDSummary.</param>
        /// <param name="pkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="objEzsignfoldertypeName">objEzsignfoldertypeName (required).</param>
        /// <param name="fkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal..</param>
        /// <param name="fkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="fkiFontIDAnnotation">The unique ID of the Font.</param>
        /// <param name="fkiFontIDFormfield">The unique ID of the Font.</param>
        /// <param name="fkiFontIDSignature">The unique ID of the Font.</param>
        /// <param name="fkiPdfalevelIDConvert">The unique ID of the Pdfalevel.</param>
        /// <param name="eEzsignfoldertypeDocumentdependency">eEzsignfoldertypeDocumentdependency.</param>
        /// <param name="sBrandingDescriptionX">The Description of the Branding in the language of the requester (required).</param>
        /// <param name="sBillingentityinternalDescriptionX">The description of the Billingentityinternal in the language of the requester.</param>
        /// <param name="sEzsigntsarequirementDescriptionX">The description of the Ezsigntsarequirement in the language of the requester.</param>
        /// <param name="sEmailAddressSigned">The email address..</param>
        /// <param name="sEmailAddressSummary">The email address..</param>
        /// <param name="eEzsignfoldertypePdfarequirement">eEzsignfoldertypePdfarequirement.</param>
        /// <param name="eEzsignfoldertypePdfanoncompliantaction">eEzsignfoldertypePdfanoncompliantaction.</param>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="iEzsignfoldertypeFontsizeannotation">Font size for annotations.</param>
        /// <param name="iEzsignfoldertypeFontsizeformfield">Font size for form fields.</param>
        /// <param name="iEzsignfoldertypeSendreminderfirstdays">The number of days before the the first reminder sending.</param>
        /// <param name="iEzsignfoldertypeSendreminderotherdays">The number of days after the first reminder sending.</param>
        /// <param name="iEzsignfoldertypeArchivaldays">The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype (required).</param>
        /// <param name="eEzsignfoldertypeDisposal">eEzsignfoldertypeDisposal (required).</param>
        /// <param name="eEzsignfoldertypeCompletion">eEzsignfoldertypeCompletion (required).</param>
        /// <param name="iEzsignfoldertypeDisposaldays">The number of days after the archival before the disposal of the Ezsignfolder.</param>
        /// <param name="iEzsignfoldertypeDeadlinedays">The number of days to get all Ezsignsignatures (required).</param>
        /// <param name="bEzsignfoldertypePrematurelyendautomatically">Wheter if document will be ended prematurely after Ezsignfolder expires..</param>
        /// <param name="iEzsignfoldertypePrematurelyendautomaticallydays">Number of days between Ezsignfolder expiration and automatic prematurely end of Ezsigndocuments..</param>
        /// <param name="bEzsignfoldertypeAutomaticsignature">Whether we allow the automatic signature by an User.</param>
        /// <param name="bEzsignfoldertypeDelegate">Wheter if delegation of signature is allowed to another user or not.</param>
        /// <param name="bEzsignfoldertypeDiscussion">Wheter if creating a new Discussion is allowed or not.</param>
        /// <param name="bEzsignfoldertypeLogrecipientinproof">Whether we log recipient of signed document in proof.</param>
        /// <param name="bEzsignfoldertypeReassignezsignsigner">Wheter if Reassignment of signature is allowed by a signatory to another signatory or not.</param>
        /// <param name="bEzsignfoldertypeReassignuser">Wheter if Reassignment of signature is allowed by a user to a signatory or another user or not.</param>
        /// <param name="bEzsignfoldertypeReassigngroup">Wheter if Reassignment of signatures of the groups to which the user belongs is authorized by a user to himself.</param>
        /// <param name="bEzsignfoldertypeSendsignedtoezsignsigner">Whether we send an email to Ezsignsigner  when document is completed.</param>
        /// <param name="bEzsignfoldertypeSendsignedtouser">Whether we send an email to User who signed when document is completed.</param>
        /// <param name="bEzsignfoldertypeSendattachmentezsignsigner">Whether we send the Ezsigndocument in the email to Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeSendproofezsignsigner">Whether we send the proof in the email to Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeSendattachmentuser">Whether we send the Ezsigndocument in the email to User.</param>
        /// <param name="bEzsignfoldertypeSendproofuser">Whether we send the proof in the email to User.</param>
        /// <param name="bEzsignfoldertypeSendproofemail">Whether we send the proof in the email to external recipient.</param>
        /// <param name="bEzsignfoldertypeAllowdownloadattachmentezsignsigner">Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeAllowdownloadproofezsignsigner">Whether we allow the proof to be downloaded by an Ezsignsigner.</param>
        /// <param name="bEzsignfoldertypeSendproofreceivealldocument">Whether we send the proof to user and Ezsignsigner who receive all documents..</param>
        /// <param name="bEzsignfoldertypeSendsignedtodocumentowner">Whether we send the signed Ezsigndocument to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtofolderowner">Whether we send the signed Ezsigndocument to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsignedtofullgroup">Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsignedtolimitedgroup">THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsignedtocolleague">Whether we send the signed Ezsigndocument to the colleagues (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytodocumentowner">Whether we send the summary to the Ezsigndocument&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytofolderowner">Whether we send the summary to the Ezsignfolder&#39;s owner (required).</param>
        /// <param name="bEzsignfoldertypeSendsummarytofullgroup">Whether we send the summary to the Usergroup that has acces to all Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsummarytolimitedgroup">Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders.</param>
        /// <param name="bEzsignfoldertypeSendsummarytocolleague">Whether we send the summary to the colleagues (required).</param>
        /// <param name="eEzsignfoldertypeSigneraccess">eEzsignfoldertypeSigneraccess.</param>
        /// <param name="bEzsignfoldertypeIsactive">Whether the Ezsignfoldertype is active or not (required).</param>
        /// <param name="aFkiPdfalevelID">aFkiPdfalevelID.</param>
        /// <param name="aObjUserlogintype">aObjUserlogintype (required).</param>
        /// <param name="aObjUsergroupAll">aObjUsergroupAll.</param>
        /// <param name="aObjUsergroupRestricted">aObjUsergroupRestricted.</param>
        /// <param name="aObjUsergroupTemplate">aObjUsergroupTemplate.</param>
        /// <param name="objAudit">objAudit (required).</param>
        public EzsignfoldertypeResponseCompoundV4(List<int> aFkiUserIDSigned = default(List<int>), List<int> aFkiUserIDSummary = default(List<int>), int pkiEzsignfoldertypeID = default(int), MultilingualEzsignfoldertypeName objEzsignfoldertypeName = default(MultilingualEzsignfoldertypeName), int fkiBrandingID = default(int), int fkiBillingentityinternalID = default(int), int fkiEzsigntsarequirementID = default(int), int fkiFontIDAnnotation = default(int), int fkiFontIDFormfield = default(int), int fkiFontIDSignature = default(int), int fkiPdfalevelIDConvert = default(int), FieldEEzsignfoldertypeDocumentdependency? eEzsignfoldertypeDocumentdependency = default(FieldEEzsignfoldertypeDocumentdependency?), string sBrandingDescriptionX = default(string), string sBillingentityinternalDescriptionX = default(string), string sEzsigntsarequirementDescriptionX = default(string), string sEmailAddressSigned = default(string), string sEmailAddressSummary = default(string), FieldEEzsignfoldertypePdfarequirement? eEzsignfoldertypePdfarequirement = default(FieldEEzsignfoldertypePdfarequirement?), FieldEEzsignfoldertypePdfanoncompliantaction? eEzsignfoldertypePdfanoncompliantaction = default(FieldEEzsignfoldertypePdfanoncompliantaction?), FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), int iEzsignfoldertypeFontsizeannotation = default(int), int iEzsignfoldertypeFontsizeformfield = default(int), int iEzsignfoldertypeSendreminderfirstdays = default(int), int iEzsignfoldertypeSendreminderotherdays = default(int), int iEzsignfoldertypeArchivaldays = default(int), FieldEEzsignfoldertypeDisposal eEzsignfoldertypeDisposal = default(FieldEEzsignfoldertypeDisposal), FieldEEzsignfoldertypeCompletion eEzsignfoldertypeCompletion = default(FieldEEzsignfoldertypeCompletion), int iEzsignfoldertypeDisposaldays = default(int), int iEzsignfoldertypeDeadlinedays = default(int), bool bEzsignfoldertypePrematurelyendautomatically = default(bool), int iEzsignfoldertypePrematurelyendautomaticallydays = default(int), bool bEzsignfoldertypeAutomaticsignature = default(bool), bool bEzsignfoldertypeDelegate = default(bool), bool bEzsignfoldertypeDiscussion = default(bool), bool bEzsignfoldertypeLogrecipientinproof = default(bool), bool bEzsignfoldertypeReassignezsignsigner = default(bool), bool bEzsignfoldertypeReassignuser = default(bool), bool bEzsignfoldertypeReassigngroup = default(bool), bool bEzsignfoldertypeSendsignedtoezsignsigner = default(bool), bool bEzsignfoldertypeSendsignedtouser = default(bool), bool bEzsignfoldertypeSendattachmentezsignsigner = default(bool), bool bEzsignfoldertypeSendproofezsignsigner = default(bool), bool bEzsignfoldertypeSendattachmentuser = default(bool), bool bEzsignfoldertypeSendproofuser = default(bool), bool bEzsignfoldertypeSendproofemail = default(bool), bool bEzsignfoldertypeAllowdownloadattachmentezsignsigner = default(bool), bool bEzsignfoldertypeAllowdownloadproofezsignsigner = default(bool), bool bEzsignfoldertypeSendproofreceivealldocument = default(bool), bool bEzsignfoldertypeSendsignedtodocumentowner = default(bool), bool bEzsignfoldertypeSendsignedtofolderowner = default(bool), bool bEzsignfoldertypeSendsignedtofullgroup = default(bool), bool bEzsignfoldertypeSendsignedtolimitedgroup = default(bool), bool bEzsignfoldertypeSendsignedtocolleague = default(bool), bool bEzsignfoldertypeSendsummarytodocumentowner = default(bool), bool bEzsignfoldertypeSendsummarytofolderowner = default(bool), bool bEzsignfoldertypeSendsummarytofullgroup = default(bool), bool bEzsignfoldertypeSendsummarytolimitedgroup = default(bool), bool bEzsignfoldertypeSendsummarytocolleague = default(bool), FieldEEzsignfoldertypeSigneraccess? eEzsignfoldertypeSigneraccess = default(FieldEEzsignfoldertypeSigneraccess?), bool bEzsignfoldertypeIsactive = default(bool), List<int> aFkiPdfalevelID = default(List<int>), List<UserlogintypeResponse> aObjUserlogintype = default(List<UserlogintypeResponse>), List<UsergroupResponse> aObjUsergroupAll = default(List<UsergroupResponse>), List<UsergroupResponse> aObjUsergroupRestricted = default(List<UsergroupResponse>), List<UsergroupResponse> aObjUsergroupTemplate = default(List<UsergroupResponse>), CommonAudit objAudit = default(CommonAudit)) : base()
        {
            this.AFkiUserIDSigned = aFkiUserIDSigned;
            this.AFkiUserIDSummary = aFkiUserIDSummary;
        }

        /// <summary>
        /// Gets or Sets AFkiUserIDSigned
        /// </summary>
        [DataMember(Name = "a_fkiUserIDSigned", EmitDefaultValue = false)]
        public List<int> AFkiUserIDSigned { get; set; }

        /// <summary>
        /// Gets or Sets AFkiUserIDSummary
        /// </summary>
        [DataMember(Name = "a_fkiUserIDSummary", EmitDefaultValue = false)]
        public List<int> AFkiUserIDSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfoldertypeResponseCompoundV4 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AFkiUserIDSigned: ").Append(AFkiUserIDSigned).Append("\n");
            sb.Append("  AFkiUserIDSummary: ").Append(AFkiUserIDSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
