/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Creditcardmerchant Object and children
    /// </summary>
    [DataContract(Name = "creditcardmerchant-RequestCompound")]
    public partial class CreditcardmerchantRequestCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardmerchantRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditcardmerchantRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardmerchantRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiCreditcardmerchantID">The unique ID of the Creditcardmerchant.</param>
        /// <param name="fkiBankaccountID">The unique ID of the Bankaccount (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|.</param>
        /// <param name="bCreditcardmerchantDenyvisa">Whether if visa are denied (required).</param>
        /// <param name="bCreditcardmerchantDenymastercard">Whether if mastercard are denied (required).</param>
        /// <param name="bCreditcardmerchantDenyamex">Whether if amex are denied (required).</param>
        /// <param name="bCreditcardmerchantIsactive">Whether the creditcardmerchant is active or not (required).</param>
        /// <param name="sCreditcardmerchantApitoken">The apitoken of the Creditcardmerchant.</param>
        /// <param name="sCreditcardmerchantDescription">The description of the Creditcardmerchant (required).</param>
        /// <param name="sCreditcardmerchantStoreid">The storeid of the Creditcardmerchant (required).</param>
        public CreditcardmerchantRequestCompound(int pkiCreditcardmerchantID = default(int), int fkiBankaccountID = default(int), int fkiLanguageID = default(int), bool bCreditcardmerchantDenyvisa = default(bool), bool bCreditcardmerchantDenymastercard = default(bool), bool bCreditcardmerchantDenyamex = default(bool), bool bCreditcardmerchantIsactive = default(bool), string sCreditcardmerchantApitoken = default(string), string sCreditcardmerchantDescription = default(string), string sCreditcardmerchantStoreid = default(string))
        {
            this.FkiBankaccountID = fkiBankaccountID;
            this.BCreditcardmerchantDenyvisa = bCreditcardmerchantDenyvisa;
            this.BCreditcardmerchantDenymastercard = bCreditcardmerchantDenymastercard;
            this.BCreditcardmerchantDenyamex = bCreditcardmerchantDenyamex;
            this.BCreditcardmerchantIsactive = bCreditcardmerchantIsactive;
            // to ensure "sCreditcardmerchantDescription" is required (not null)
            if (sCreditcardmerchantDescription == null)
            {
                throw new ArgumentNullException("sCreditcardmerchantDescription is a required property for CreditcardmerchantRequestCompound and cannot be null");
            }
            this.SCreditcardmerchantDescription = sCreditcardmerchantDescription;
            // to ensure "sCreditcardmerchantStoreid" is required (not null)
            if (sCreditcardmerchantStoreid == null)
            {
                throw new ArgumentNullException("sCreditcardmerchantStoreid is a required property for CreditcardmerchantRequestCompound and cannot be null");
            }
            this.SCreditcardmerchantStoreid = sCreditcardmerchantStoreid;
            this.PkiCreditcardmerchantID = pkiCreditcardmerchantID;
            this.FkiLanguageID = fkiLanguageID;
            this.SCreditcardmerchantApitoken = sCreditcardmerchantApitoken;
        }

        /// <summary>
        /// The unique ID of the Creditcardmerchant
        /// </summary>
        /// <value>The unique ID of the Creditcardmerchant</value>
        /* <example>30</example>*/
        [DataMember(Name = "pkiCreditcardmerchantID", EmitDefaultValue = false)]
        public int PkiCreditcardmerchantID { get; set; }

        /// <summary>
        /// The unique ID of the Bankaccount
        /// </summary>
        /// <value>The unique ID of the Bankaccount</value>
        /* <example>46</example>*/
        [DataMember(Name = "fkiBankaccountID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiBankaccountID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", EmitDefaultValue = false)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// Whether if visa are denied
        /// </summary>
        /// <value>Whether if visa are denied</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardmerchantDenyvisa", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardmerchantDenyvisa { get; set; }

        /// <summary>
        /// Whether if mastercard are denied
        /// </summary>
        /// <value>Whether if mastercard are denied</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardmerchantDenymastercard", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardmerchantDenymastercard { get; set; }

        /// <summary>
        /// Whether if amex are denied
        /// </summary>
        /// <value>Whether if amex are denied</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardmerchantDenyamex", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardmerchantDenyamex { get; set; }

        /// <summary>
        /// Whether the creditcardmerchant is active or not
        /// </summary>
        /// <value>Whether the creditcardmerchant is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardmerchantIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardmerchantIsactive { get; set; }

        /// <summary>
        /// The apitoken of the Creditcardmerchant
        /// </summary>
        /// <value>The apitoken of the Creditcardmerchant</value>
        /* <example>REPLACEME</example>*/
        [DataMember(Name = "sCreditcardmerchantApitoken", EmitDefaultValue = false)]
        public string SCreditcardmerchantApitoken { get; set; }

        /// <summary>
        /// The description of the Creditcardmerchant
        /// </summary>
        /// <value>The description of the Creditcardmerchant</value>
        /* <example>Moneris</example>*/
        [DataMember(Name = "sCreditcardmerchantDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcardmerchantDescription { get; set; }

        /// <summary>
        /// The storeid of the Creditcardmerchant
        /// </summary>
        /// <value>The storeid of the Creditcardmerchant</value>
        /* <example>REPLACEME</example>*/
        [DataMember(Name = "sCreditcardmerchantStoreid", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcardmerchantStoreid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditcardmerchantRequestCompound {\n");
            sb.Append("  PkiCreditcardmerchantID: ").Append(PkiCreditcardmerchantID).Append("\n");
            sb.Append("  FkiBankaccountID: ").Append(FkiBankaccountID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  BCreditcardmerchantDenyvisa: ").Append(BCreditcardmerchantDenyvisa).Append("\n");
            sb.Append("  BCreditcardmerchantDenymastercard: ").Append(BCreditcardmerchantDenymastercard).Append("\n");
            sb.Append("  BCreditcardmerchantDenyamex: ").Append(BCreditcardmerchantDenyamex).Append("\n");
            sb.Append("  BCreditcardmerchantIsactive: ").Append(BCreditcardmerchantIsactive).Append("\n");
            sb.Append("  SCreditcardmerchantApitoken: ").Append(SCreditcardmerchantApitoken).Append("\n");
            sb.Append("  SCreditcardmerchantDescription: ").Append(SCreditcardmerchantDescription).Append("\n");
            sb.Append("  SCreditcardmerchantStoreid: ").Append(SCreditcardmerchantStoreid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCreditcardmerchantID (int) maximum
            if (this.PkiCreditcardmerchantID > (int)255)
            {
                yield return new ValidationResult("Invalid value for PkiCreditcardmerchantID, must be a value less than or equal to 255.", new [] { "PkiCreditcardmerchantID" });
            }

            // PkiCreditcardmerchantID (int) minimum
            if (this.PkiCreditcardmerchantID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiCreditcardmerchantID, must be a value greater than or equal to 0.", new [] { "PkiCreditcardmerchantID" });
            }

            // FkiBankaccountID (int) maximum
            if (this.FkiBankaccountID > (int)255)
            {
                yield return new ValidationResult("Invalid value for FkiBankaccountID, must be a value less than or equal to 255.", new [] { "FkiBankaccountID" });
            }

            // FkiBankaccountID (int) minimum
            if (this.FkiBankaccountID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiBankaccountID, must be a value greater than or equal to 0.", new [] { "FkiBankaccountID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SCreditcardmerchantApitoken != null) {
                // SCreditcardmerchantApitoken (string) pattern
                Regex regexSCreditcardmerchantApitoken = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcardmerchantApitoken.Match(this.SCreditcardmerchantApitoken).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcardmerchantApitoken, must match a pattern of " + regexSCreditcardmerchantApitoken, new [] { "SCreditcardmerchantApitoken" });
                }
            }

            if (this.SCreditcardmerchantDescription != null) {
                // SCreditcardmerchantDescription (string) pattern
                Regex regexSCreditcardmerchantDescription = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcardmerchantDescription.Match(this.SCreditcardmerchantDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcardmerchantDescription, must match a pattern of " + regexSCreditcardmerchantDescription, new [] { "SCreditcardmerchantDescription" });
                }
            }

            if (this.SCreditcardmerchantStoreid != null) {
                // SCreditcardmerchantStoreid (string) pattern
                Regex regexSCreditcardmerchantStoreid = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcardmerchantStoreid.Match(this.SCreditcardmerchantStoreid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcardmerchantStoreid, must match a pattern of " + regexSCreditcardmerchantStoreid, new [] { "SCreditcardmerchantStoreid" });
                }
            }

            yield break;
        }
    }

}
