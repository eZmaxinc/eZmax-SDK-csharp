/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Signature Object and children
    /// </summary>
    [DataContract(Name = "signature-RequestCompound")]
    public partial class SignatureRequestCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiSignatureID">The unique ID of the Signature.</param>
        /// <param name="tSignatureSvg">The svg of the Signature (required).</param>
        public SignatureRequestCompound(int pkiSignatureID = default(int), string tSignatureSvg = default(string))
        {
            // to ensure "tSignatureSvg" is required (not null)
            if (tSignatureSvg == null)
            {
                throw new ArgumentNullException("tSignatureSvg is a required property for SignatureRequestCompound and cannot be null");
            }
            this.TSignatureSvg = tSignatureSvg;
            this.PkiSignatureID = pkiSignatureID;
        }

        /// <summary>
        /// The unique ID of the Signature
        /// </summary>
        /// <value>The unique ID of the Signature</value>
        /* <example>12</example>*/
        [DataMember(Name = "pkiSignatureID", EmitDefaultValue = false)]
        public int PkiSignatureID { get; set; }

        /// <summary>
        /// The svg of the Signature
        /// </summary>
        /// <value>The svg of the Signature</value>
        /* <example>{&quot;$ref&quot;:&quot;#/components/examples/Svg/value&quot;}</example>*/
        [DataMember(Name = "tSignatureSvg", IsRequired = true, EmitDefaultValue = true)]
        public string TSignatureSvg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SignatureRequestCompound {\n");
            sb.Append("  PkiSignatureID: ").Append(PkiSignatureID).Append("\n");
            sb.Append("  TSignatureSvg: ").Append(TSignatureSvg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSignatureID (int) maximum
            if (this.PkiSignatureID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSignatureID, must be a value less than or equal to 16777215.", new [] { "PkiSignatureID" });
            }

            // PkiSignatureID (int) minimum
            if (this.PkiSignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSignatureID, must be a value greater than or equal to 0.", new [] { "PkiSignatureID" });
            }

            if (this.TSignatureSvg != null) {
                // TSignatureSvg (string) pattern
                Regex regexTSignatureSvg = new Regex(@"^.{60,65535}$", RegexOptions.CultureInvariant);
                if (!regexTSignatureSvg.Match(this.TSignatureSvg).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TSignatureSvg, must match a pattern of " + regexTSignatureSvg, new [] { "TSignatureSvg" });
                }
            }

            yield break;
        }
    }

}
