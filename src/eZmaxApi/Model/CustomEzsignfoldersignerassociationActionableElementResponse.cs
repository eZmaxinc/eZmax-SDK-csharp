/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignfoldersignerassociation Object with actionable elements
    /// </summary>
    [DataContract]
    public partial class CustomEzsignfoldersignerassociationActionableElementResponse :  IEquatable<CustomEzsignfoldersignerassociationActionableElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationActionableElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignfoldersignerassociationActionableElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationActionableElementResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="bEzsignfoldersignerassociationDelayedsend">If this flag is true the signatory is part of a delayed send. (required).</param>
        /// <param name="bEzsignfoldersignerassociationReceivecopy">If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain&#39;t required to sign the document. (required).</param>
        /// <param name="tEzsignfoldersignerassociationMessage">A custom text message that will be added to the email sent. (required).</param>
        /// <param name="objEzsignsignergroup">objEzsignsignergroup.</param>
        /// <param name="objUser">objUser.</param>
        /// <param name="objEzsignsigner">objEzsignsigner.</param>
        /// <param name="bEzsignfoldersignerassociationHasactionableelementsCurrent">Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step (required).</param>
        /// <param name="bEzsignfoldersignerassociationHasactionableelementsFuture">Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step.</param>
        public CustomEzsignfoldersignerassociationActionableElementResponse(int pkiEzsignfoldersignerassociationID = default(int), int fkiEzsignfolderID = default(int), bool bEzsignfoldersignerassociationDelayedsend = default(bool), bool bEzsignfoldersignerassociationReceivecopy = default(bool), string tEzsignfoldersignerassociationMessage = default(string), EzsignsignergroupResponseCompound objEzsignsignergroup = default(EzsignsignergroupResponseCompound), EzsignfoldersignerassociationResponseCompoundUser objUser = default(EzsignfoldersignerassociationResponseCompoundUser), EzsignsignerResponseCompound objEzsignsigner = default(EzsignsignerResponseCompound), bool bEzsignfoldersignerassociationHasactionableelementsCurrent = default(bool), bool bEzsignfoldersignerassociationHasactionableelementsFuture = default(bool))
        {
            // to ensure "pkiEzsignfoldersignerassociationID" is required (not null)
            if (pkiEzsignfoldersignerassociationID == null)
            {
                throw new InvalidDataException("pkiEzsignfoldersignerassociationID is a required property for CustomEzsignfoldersignerassociationActionableElementResponse and cannot be null");
            }
            else
            {
                this.PkiEzsignfoldersignerassociationID = pkiEzsignfoldersignerassociationID;
            }

            // to ensure "fkiEzsignfolderID" is required (not null)
            if (fkiEzsignfolderID == null)
            {
                throw new InvalidDataException("fkiEzsignfolderID is a required property for CustomEzsignfoldersignerassociationActionableElementResponse and cannot be null");
            }
            else
            {
                this.FkiEzsignfolderID = fkiEzsignfolderID;
            }

            // to ensure "bEzsignfoldersignerassociationDelayedsend" is required (not null)
            if (bEzsignfoldersignerassociationDelayedsend == null)
            {
                throw new InvalidDataException("bEzsignfoldersignerassociationDelayedsend is a required property for CustomEzsignfoldersignerassociationActionableElementResponse and cannot be null");
            }
            else
            {
                this.BEzsignfoldersignerassociationDelayedsend = bEzsignfoldersignerassociationDelayedsend;
            }

            // to ensure "bEzsignfoldersignerassociationReceivecopy" is required (not null)
            if (bEzsignfoldersignerassociationReceivecopy == null)
            {
                throw new InvalidDataException("bEzsignfoldersignerassociationReceivecopy is a required property for CustomEzsignfoldersignerassociationActionableElementResponse and cannot be null");
            }
            else
            {
                this.BEzsignfoldersignerassociationReceivecopy = bEzsignfoldersignerassociationReceivecopy;
            }

            // to ensure "tEzsignfoldersignerassociationMessage" is required (not null)
            if (tEzsignfoldersignerassociationMessage == null)
            {
                throw new InvalidDataException("tEzsignfoldersignerassociationMessage is a required property for CustomEzsignfoldersignerassociationActionableElementResponse and cannot be null");
            }
            else
            {
                this.TEzsignfoldersignerassociationMessage = tEzsignfoldersignerassociationMessage;
            }

            // to ensure "bEzsignfoldersignerassociationHasactionableelementsCurrent" is required (not null)
            if (bEzsignfoldersignerassociationHasactionableelementsCurrent == null)
            {
                throw new InvalidDataException("bEzsignfoldersignerassociationHasactionableelementsCurrent is a required property for CustomEzsignfoldersignerassociationActionableElementResponse and cannot be null");
            }
            else
            {
                this.BEzsignfoldersignerassociationHasactionableelementsCurrent = bEzsignfoldersignerassociationHasactionableelementsCurrent;
            }

            this.ObjEzsignsignergroup = objEzsignsignergroup;
            this.ObjUser = objUser;
            this.ObjEzsignsigner = objEzsignsigner;
            this.BEzsignfoldersignerassociationHasactionableelementsFuture = bEzsignfoldersignerassociationHasactionableelementsFuture;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        [DataMember(Name="pkiEzsignfoldersignerassociationID", EmitDefaultValue=true)]
        public int PkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        [DataMember(Name="fkiEzsignfolderID", EmitDefaultValue=true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// If this flag is true the signatory is part of a delayed send.
        /// </summary>
        /// <value>If this flag is true the signatory is part of a delayed send.</value>
        [DataMember(Name="bEzsignfoldersignerassociationDelayedsend", EmitDefaultValue=true)]
        public bool BEzsignfoldersignerassociationDelayedsend { get; set; }

        /// <summary>
        /// If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain&#39;t required to sign the document.
        /// </summary>
        /// <value>If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain&#39;t required to sign the document.</value>
        [DataMember(Name="bEzsignfoldersignerassociationReceivecopy", EmitDefaultValue=true)]
        public bool BEzsignfoldersignerassociationReceivecopy { get; set; }

        /// <summary>
        /// A custom text message that will be added to the email sent.
        /// </summary>
        /// <value>A custom text message that will be added to the email sent.</value>
        [DataMember(Name="tEzsignfoldersignerassociationMessage", EmitDefaultValue=true)]
        public string TEzsignfoldersignerassociationMessage { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsignergroup
        /// </summary>
        [DataMember(Name="objEzsignsignergroup", EmitDefaultValue=false)]
        public EzsignsignergroupResponseCompound ObjEzsignsignergroup { get; set; }

        /// <summary>
        /// Gets or Sets ObjUser
        /// </summary>
        [DataMember(Name="objUser", EmitDefaultValue=false)]
        public EzsignfoldersignerassociationResponseCompoundUser ObjUser { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsigner
        /// </summary>
        [DataMember(Name="objEzsignsigner", EmitDefaultValue=false)]
        public EzsignsignerResponseCompound ObjEzsignsigner { get; set; }

        /// <summary>
        /// Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
        /// </summary>
        /// <value>Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step</value>
        [DataMember(Name="bEzsignfoldersignerassociationHasactionableelementsCurrent", EmitDefaultValue=true)]
        public bool BEzsignfoldersignerassociationHasactionableelementsCurrent { get; set; }

        /// <summary>
        /// Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step
        /// </summary>
        /// <value>Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step</value>
        [DataMember(Name="bEzsignfoldersignerassociationHasactionableelementsFuture", EmitDefaultValue=false)]
        public bool BEzsignfoldersignerassociationHasactionableelementsFuture { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomEzsignfoldersignerassociationActionableElementResponse {\n");
            sb.Append("  PkiEzsignfoldersignerassociationID: ").Append(PkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationDelayedsend: ").Append(BEzsignfoldersignerassociationDelayedsend).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationReceivecopy: ").Append(BEzsignfoldersignerassociationReceivecopy).Append("\n");
            sb.Append("  TEzsignfoldersignerassociationMessage: ").Append(TEzsignfoldersignerassociationMessage).Append("\n");
            sb.Append("  ObjEzsignsignergroup: ").Append(ObjEzsignsignergroup).Append("\n");
            sb.Append("  ObjUser: ").Append(ObjUser).Append("\n");
            sb.Append("  ObjEzsignsigner: ").Append(ObjEzsignsigner).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationHasactionableelementsCurrent: ").Append(BEzsignfoldersignerassociationHasactionableelementsCurrent).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationHasactionableelementsFuture: ").Append(BEzsignfoldersignerassociationHasactionableelementsFuture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignfoldersignerassociationActionableElementResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignfoldersignerassociationActionableElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignfoldersignerassociationActionableElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignfoldersignerassociationActionableElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignfoldersignerassociationID == input.PkiEzsignfoldersignerassociationID ||
                    (this.PkiEzsignfoldersignerassociationID != null &&
                    this.PkiEzsignfoldersignerassociationID.Equals(input.PkiEzsignfoldersignerassociationID))
                ) && 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    (this.FkiEzsignfolderID != null &&
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID))
                ) && 
                (
                    this.BEzsignfoldersignerassociationDelayedsend == input.BEzsignfoldersignerassociationDelayedsend ||
                    (this.BEzsignfoldersignerassociationDelayedsend != null &&
                    this.BEzsignfoldersignerassociationDelayedsend.Equals(input.BEzsignfoldersignerassociationDelayedsend))
                ) && 
                (
                    this.BEzsignfoldersignerassociationReceivecopy == input.BEzsignfoldersignerassociationReceivecopy ||
                    (this.BEzsignfoldersignerassociationReceivecopy != null &&
                    this.BEzsignfoldersignerassociationReceivecopy.Equals(input.BEzsignfoldersignerassociationReceivecopy))
                ) && 
                (
                    this.TEzsignfoldersignerassociationMessage == input.TEzsignfoldersignerassociationMessage ||
                    (this.TEzsignfoldersignerassociationMessage != null &&
                    this.TEzsignfoldersignerassociationMessage.Equals(input.TEzsignfoldersignerassociationMessage))
                ) && 
                (
                    this.ObjEzsignsignergroup == input.ObjEzsignsignergroup ||
                    (this.ObjEzsignsignergroup != null &&
                    this.ObjEzsignsignergroup.Equals(input.ObjEzsignsignergroup))
                ) && 
                (
                    this.ObjUser == input.ObjUser ||
                    (this.ObjUser != null &&
                    this.ObjUser.Equals(input.ObjUser))
                ) && 
                (
                    this.ObjEzsignsigner == input.ObjEzsignsigner ||
                    (this.ObjEzsignsigner != null &&
                    this.ObjEzsignsigner.Equals(input.ObjEzsignsigner))
                ) && 
                (
                    this.BEzsignfoldersignerassociationHasactionableelementsCurrent == input.BEzsignfoldersignerassociationHasactionableelementsCurrent ||
                    (this.BEzsignfoldersignerassociationHasactionableelementsCurrent != null &&
                    this.BEzsignfoldersignerassociationHasactionableelementsCurrent.Equals(input.BEzsignfoldersignerassociationHasactionableelementsCurrent))
                ) && 
                (
                    this.BEzsignfoldersignerassociationHasactionableelementsFuture == input.BEzsignfoldersignerassociationHasactionableelementsFuture ||
                    (this.BEzsignfoldersignerassociationHasactionableelementsFuture != null &&
                    this.BEzsignfoldersignerassociationHasactionableelementsFuture.Equals(input.BEzsignfoldersignerassociationHasactionableelementsFuture))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignfoldersignerassociationID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignfoldersignerassociationID.GetHashCode();
                if (this.FkiEzsignfolderID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfolderID.GetHashCode();
                if (this.BEzsignfoldersignerassociationDelayedsend != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldersignerassociationDelayedsend.GetHashCode();
                if (this.BEzsignfoldersignerassociationReceivecopy != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldersignerassociationReceivecopy.GetHashCode();
                if (this.TEzsignfoldersignerassociationMessage != null)
                    hashCode = hashCode * 59 + this.TEzsignfoldersignerassociationMessage.GetHashCode();
                if (this.ObjEzsignsignergroup != null)
                    hashCode = hashCode * 59 + this.ObjEzsignsignergroup.GetHashCode();
                if (this.ObjUser != null)
                    hashCode = hashCode * 59 + this.ObjUser.GetHashCode();
                if (this.ObjEzsignsigner != null)
                    hashCode = hashCode * 59 + this.ObjEzsignsigner.GetHashCode();
                if (this.BEzsignfoldersignerassociationHasactionableelementsCurrent != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldersignerassociationHasactionableelementsCurrent.GetHashCode();
                if (this.BEzsignfoldersignerassociationHasactionableelementsFuture != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldersignerassociationHasactionableelementsFuture.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsignfoldersignerassociationID (int) minimum
            if(this.PkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldersignerassociationID" });
            }



            // FkiEzsignfolderID (int) minimum
            if(this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
