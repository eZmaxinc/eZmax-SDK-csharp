/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom Apikeyfederation Object
    /// </summary>
    [DataContract(Name = "Custom-Apikeyfederation")]
    public partial class CustomApikeyfederation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomApikeyfederation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomApikeyfederation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomApikeyfederation" /> class.
        /// </summary>
        /// <param name="sApikeyfederationKey">The key of the Apikeyfederation (required).</param>
        /// <param name="sApikeyfederationSecret">The secret of the Apikeyfederation (required).</param>
        public CustomApikeyfederation(string sApikeyfederationKey = default(string), string sApikeyfederationSecret = default(string))
        {
            // to ensure "sApikeyfederationKey" is required (not null)
            if (sApikeyfederationKey == null)
            {
                throw new ArgumentNullException("sApikeyfederationKey is a required property for CustomApikeyfederation and cannot be null");
            }
            this.SApikeyfederationKey = sApikeyfederationKey;
            // to ensure "sApikeyfederationSecret" is required (not null)
            if (sApikeyfederationSecret == null)
            {
                throw new ArgumentNullException("sApikeyfederationSecret is a required property for CustomApikeyfederation and cannot be null");
            }
            this.SApikeyfederationSecret = sApikeyfederationSecret;
        }

        /// <summary>
        /// The key of the Apikeyfederation
        /// </summary>
        /// <value>The key of the Apikeyfederation</value>
        [DataMember(Name = "sApikeyfederationKey", IsRequired = true, EmitDefaultValue = true)]
        public string SApikeyfederationKey { get; set; }

        /// <summary>
        /// The secret of the Apikeyfederation
        /// </summary>
        /// <value>The secret of the Apikeyfederation</value>
        /* <example>f514d7a0008a9f6dee03e60734624d04</example>*/
        [DataMember(Name = "sApikeyfederationSecret", IsRequired = true, EmitDefaultValue = true)]
        public string SApikeyfederationSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomApikeyfederation {\n");
            sb.Append("  SApikeyfederationKey: ").Append(SApikeyfederationKey).Append("\n");
            sb.Append("  SApikeyfederationSecret: ").Append(SApikeyfederationSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SApikeyfederationKey != null) {
                // SApikeyfederationKey (string) pattern
                Regex regexSApikeyfederationKey = new Regex(@"^.{1,200}$", RegexOptions.CultureInvariant);
                if (!regexSApikeyfederationKey.Match(this.SApikeyfederationKey).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SApikeyfederationKey, must match a pattern of " + regexSApikeyfederationKey, new [] { "SApikeyfederationKey" });
                }
            }

            if (this.SApikeyfederationSecret != null) {
                // SApikeyfederationSecret (string) pattern
                Regex regexSApikeyfederationSecret = new Regex(@"^[0-9a-fA-F]{1,32}$", RegexOptions.CultureInvariant);
                if (!regexSApikeyfederationSecret.Match(this.SApikeyfederationSecret).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SApikeyfederationSecret, must match a pattern of " + regexSApikeyfederationSecret, new [] { "SApikeyfederationSecret" });
                }
            }

            yield break;
        }
    }

}
