/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Cors Object
    /// </summary>
    [DataContract(Name = "cors-Response")]
    public partial class CorsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorsResponse" /> class.
        /// </summary>
        /// <param name="pkiCorsID">The unique ID of the Cors (required).</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey (required).</param>
        /// <param name="sCorsEntryurl">The entryurl of the Cors (required).</param>
        public CorsResponse(int pkiCorsID = default(int), int fkiApikeyID = default(int), string sCorsEntryurl = default(string))
        {
            this.PkiCorsID = pkiCorsID;
            this.FkiApikeyID = fkiApikeyID;
            // to ensure "sCorsEntryurl" is required (not null)
            if (sCorsEntryurl == null)
            {
                throw new ArgumentNullException("sCorsEntryurl is a required property for CorsResponse and cannot be null");
            }
            this.SCorsEntryurl = sCorsEntryurl;
        }

        /// <summary>
        /// The unique ID of the Cors
        /// </summary>
        /// <value>The unique ID of the Cors</value>
        /* <example>228</example>*/
        [DataMember(Name = "pkiCorsID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCorsID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiApikeyID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// The entryurl of the Cors
        /// </summary>
        /// <value>The entryurl of the Cors</value>
        /* <example>Https://www.example.com</example>*/
        [DataMember(Name = "sCorsEntryurl", IsRequired = true, EmitDefaultValue = true)]
        public string SCorsEntryurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorsResponse {\n");
            sb.Append("  PkiCorsID: ").Append(PkiCorsID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  SCorsEntryurl: ").Append(SCorsEntryurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCorsID (int) maximum
            if (this.PkiCorsID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCorsID, must be a value less than or equal to 65535.", new [] { "PkiCorsID" });
            }

            // PkiCorsID (int) minimum
            if (this.PkiCorsID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCorsID, must be a value greater than or equal to 0.", new [] { "PkiCorsID" });
            }

            // FkiApikeyID (int) minimum
            if (this.FkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiApikeyID, must be a value greater than or equal to 0.", new [] { "FkiApikeyID" });
            }

            if (this.SCorsEntryurl != null) {
                // SCorsEntryurl (string) pattern
                Regex regexSCorsEntryurl = new Regex(@"^.{0,2048}$", RegexOptions.CultureInvariant);
                if (!regexSCorsEntryurl.Match(this.SCorsEntryurl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCorsEntryurl, must match a pattern of " + regexSCorsEntryurl, new [] { "SCorsEntryurl" });
                }
            }

            yield break;
        }
    }

}
