/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Userlogintype AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "userlogintype-AutocompleteElement-Response")]
    public partial class UserlogintypeAutocompleteElementResponse : IEquatable<UserlogintypeAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserlogintypeAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserlogintypeAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserlogintypeAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiUserlogintypeID">The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| (required).</param>
        /// <param name="sUserlogintypeDescriptionX">The description of the Userlogintype in the language of the requester (required).</param>
        /// <param name="bUserlogintypeIsactive">Whether the Userlogintype is active or not (required).</param>
        public UserlogintypeAutocompleteElementResponse(int pkiUserlogintypeID = default(int), string sUserlogintypeDescriptionX = default(string), bool bUserlogintypeIsactive = default(bool))
        {
            this.PkiUserlogintypeID = pkiUserlogintypeID;
            // to ensure "sUserlogintypeDescriptionX" is required (not null)
            if (sUserlogintypeDescriptionX == null)
            {
                throw new ArgumentNullException("sUserlogintypeDescriptionX is a required property for UserlogintypeAutocompleteElementResponse and cannot be null");
            }
            this.SUserlogintypeDescriptionX = sUserlogintypeDescriptionX;
            this.BUserlogintypeIsactive = bUserlogintypeIsactive;
        }

        /// <summary>
        /// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|</value>
        /* <example>2</example>*/
        [DataMember(Name = "pkiUserlogintypeID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiUserlogintypeID { get; set; }

        /// <summary>
        /// The description of the Userlogintype in the language of the requester
        /// </summary>
        /// <value>The description of the Userlogintype in the language of the requester</value>
        /* <example>Email and phone or SMS</example>*/
        [DataMember(Name = "sUserlogintypeDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SUserlogintypeDescriptionX { get; set; }

        /// <summary>
        /// Whether the Userlogintype is active or not
        /// </summary>
        /// <value>Whether the Userlogintype is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bUserlogintypeIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BUserlogintypeIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserlogintypeAutocompleteElementResponse {\n");
            sb.Append("  PkiUserlogintypeID: ").Append(PkiUserlogintypeID).Append("\n");
            sb.Append("  SUserlogintypeDescriptionX: ").Append(SUserlogintypeDescriptionX).Append("\n");
            sb.Append("  BUserlogintypeIsactive: ").Append(BUserlogintypeIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserlogintypeAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if UserlogintypeAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UserlogintypeAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserlogintypeAutocompleteElementResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiUserlogintypeID == input.PkiUserlogintypeID ||
                    this.PkiUserlogintypeID.Equals(input.PkiUserlogintypeID)
                ) && 
                (
                    this.SUserlogintypeDescriptionX == input.SUserlogintypeDescriptionX ||
                    (this.SUserlogintypeDescriptionX != null &&
                    this.SUserlogintypeDescriptionX.Equals(input.SUserlogintypeDescriptionX))
                ) && 
                (
                    this.BUserlogintypeIsactive == input.BUserlogintypeIsactive ||
                    this.BUserlogintypeIsactive.Equals(input.BUserlogintypeIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiUserlogintypeID.GetHashCode();
                if (this.SUserlogintypeDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SUserlogintypeDescriptionX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BUserlogintypeIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUserlogintypeID (int) minimum
            if (this.PkiUserlogintypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserlogintypeID, must be a value greater than or equal to 0.", new [] { "PkiUserlogintypeID" });
            }

            yield break;
        }
    }

}
