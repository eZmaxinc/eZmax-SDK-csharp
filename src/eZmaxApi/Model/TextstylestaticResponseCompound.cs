/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Textstylestatic Object
    /// </summary>
    [DataContract(Name = "textstylestatic-ResponseCompound")]
    public partial class TextstylestaticResponseCompound : TextstylestaticResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextstylestaticResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextstylestaticResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextstylestaticResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiTextstylestaticID">The unique ID of the Textstylestatic.</param>
        /// <param name="fkiFontID">The unique ID of the Font (required).</param>
        /// <param name="sFontName">The name of the Font (required).</param>
        /// <param name="bTextstylestaticBold">Whether the Textstylestatic is Bold or not (required).</param>
        /// <param name="bTextstylestaticUnderline">Whether the Textstylestatic is Underline or not (required).</param>
        /// <param name="bTextstylestaticItalic">Whether the Textstylestatic is Italic or not (required).</param>
        /// <param name="bTextstylestaticStrikethrough">Whether the Textstylestatic is Strikethrough or not (required).</param>
        /// <param name="iTextstylestaticFontcolor">The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795 (required).</param>
        /// <param name="iTextstylestaticSize">The Size for the Font of the Textstylestatic (required).</param>
        public TextstylestaticResponseCompound(int pkiTextstylestaticID = default(int), int fkiFontID = default(int), string sFontName = default(string), bool bTextstylestaticBold = default(bool), bool bTextstylestaticUnderline = default(bool), bool bTextstylestaticItalic = default(bool), bool bTextstylestaticStrikethrough = default(bool), int iTextstylestaticFontcolor = default(int), int iTextstylestaticSize = default(int)) : base()
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextstylestaticResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
