/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Word Position Object
    /// </summary>
    [DataContract(Name = "Custom-WordPositionOccurence-Response")]
    public partial class CustomWordPositionOccurenceResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomWordPositionOccurenceResponse" /> class.
        /// </summary>
        /// <param name="iPage">The page where the word occurence was found.</param>
        /// <param name="iX">The X coordinate (Horizontal) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch)..</param>
        /// <param name="iY">The Y coordinate (Vertical) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch)..</param>
        public CustomWordPositionOccurenceResponse(int iPage = default(int), int iX = default(int), int iY = default(int))
        {
            this.IPage = iPage;
            this.IX = iX;
            this.IY = iY;
        }

        /// <summary>
        /// The page where the word occurence was found
        /// </summary>
        /// <value>The page where the word occurence was found</value>
        [DataMember(Name = "iPage", EmitDefaultValue = false)]
        public int IPage { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch).
        /// </summary>
        /// <value>The X coordinate (Horizontal) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch).</value>
        [DataMember(Name = "iX", EmitDefaultValue = false)]
        public int IX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch).
        /// </summary>
        /// <value>The Y coordinate (Vertical) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch).</value>
        [DataMember(Name = "iY", EmitDefaultValue = false)]
        public int IY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomWordPositionOccurenceResponse {\n");
            sb.Append("  IPage: ").Append(IPage).Append("\n");
            sb.Append("  IX: ").Append(IX).Append("\n");
            sb.Append("  IY: ").Append(IY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IPage (int) minimum
            if (this.IPage < (int)1)
            {
                yield return new ValidationResult("Invalid value for IPage, must be a value greater than or equal to 1.", new [] { "IPage" });
            }

            // IX (int) minimum
            if (this.IX < (int)0)
            {
                yield return new ValidationResult("Invalid value for IX, must be a value greater than or equal to 0.", new [] { "IX" });
            }

            // IY (int) minimum
            if (this.IY < (int)0)
            {
                yield return new ValidationResult("Invalid value for IY, must be a value greater than or equal to 0.", new [] { "IY" });
            }

            yield break;
        }
    }

}
