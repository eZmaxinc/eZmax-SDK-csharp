/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Response for POST /1/object/ezsignsignature/{pkiEzsignsignatureID}/sign
    /// </summary>
    [DataContract(Name = "ezsignsignature-sign-v1-Response-mPayload")]
    public partial class EzsignsignatureSignV1ResponseMPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureSignV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureSignV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureSignV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="dtEzsignsignatureDateInFolderTimezone">The date the Ezsignsignature was signed in folder&#39;s timezone (required).</param>
        /// <param name="objTimezone">objTimezone.</param>
        public EzsignsignatureSignV1ResponseMPayload(string dtEzsignsignatureDateInFolderTimezone = default(string), CustomTimezoneWithCodeResponse objTimezone = default(CustomTimezoneWithCodeResponse))
        {
            // to ensure "dtEzsignsignatureDateInFolderTimezone" is required (not null)
            if (dtEzsignsignatureDateInFolderTimezone == null)
            {
                throw new ArgumentNullException("dtEzsignsignatureDateInFolderTimezone is a required property for EzsignsignatureSignV1ResponseMPayload and cannot be null");
            }
            this.DtEzsignsignatureDateInFolderTimezone = dtEzsignsignatureDateInFolderTimezone;
            this.ObjTimezone = objTimezone;
        }

        /// <summary>
        /// The date the Ezsignsignature was signed in folder&#39;s timezone
        /// </summary>
        /// <value>The date the Ezsignsignature was signed in folder&#39;s timezone</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignsignatureDateInFolderTimezone", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzsignsignatureDateInFolderTimezone { get; set; }

        /// <summary>
        /// Gets or Sets ObjTimezone
        /// </summary>
        [DataMember(Name = "objTimezone", EmitDefaultValue = false)]
        public CustomTimezoneWithCodeResponse ObjTimezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignsignatureSignV1ResponseMPayload {\n");
            sb.Append("  DtEzsignsignatureDateInFolderTimezone: ").Append(DtEzsignsignatureDateInFolderTimezone).Append("\n");
            sb.Append("  ObjTimezone: ").Append(ObjTimezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.DtEzsignsignatureDateInFolderTimezone != null) {
                // DtEzsignsignatureDateInFolderTimezone (string) pattern
                Regex regexDtEzsignsignatureDateInFolderTimezone = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtEzsignsignatureDateInFolderTimezone.Match(this.DtEzsignsignatureDateInFolderTimezone).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtEzsignsignatureDateInFolderTimezone, must match a pattern of " + regexDtEzsignsignatureDateInFolderTimezone, new [] { "DtEzsignsignatureDateInFolderTimezone" });
                }
            }

            yield break;
        }
    }

}
