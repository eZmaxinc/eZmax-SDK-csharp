/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Usergroupdelegation Object
    /// </summary>
    [DataContract]
    public partial class UsergroupdelegationRequest :  IEquatable<UsergroupdelegationRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupdelegationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UsergroupdelegationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsergroupdelegationRequest" /> class.
        /// </summary>
        /// <param name="pkiUsergroupdelegationID">The unique ID of the Usergroupdelegation.</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        public UsergroupdelegationRequest(int pkiUsergroupdelegationID = default(int), int fkiUsergroupID = default(int), int fkiUserID = default(int))
        {
            // to ensure "fkiUsergroupID" is required (not null)
            if (fkiUsergroupID == null)
            {
                throw new InvalidDataException("fkiUsergroupID is a required property for UsergroupdelegationRequest and cannot be null");
            }
            else
            {
                this.FkiUsergroupID = fkiUsergroupID;
            }

            // to ensure "fkiUserID" is required (not null)
            if (fkiUserID == null)
            {
                throw new InvalidDataException("fkiUserID is a required property for UsergroupdelegationRequest and cannot be null");
            }
            else
            {
                this.FkiUserID = fkiUserID;
            }

            this.PkiUsergroupdelegationID = pkiUsergroupdelegationID;
        }

        /// <summary>
        /// The unique ID of the Usergroupdelegation
        /// </summary>
        /// <value>The unique ID of the Usergroupdelegation</value>
        [DataMember(Name="pkiUsergroupdelegationID", EmitDefaultValue=false)]
        public int PkiUsergroupdelegationID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        [DataMember(Name="fkiUsergroupID", EmitDefaultValue=true)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsergroupdelegationRequest {\n");
            sb.Append("  PkiUsergroupdelegationID: ").Append(PkiUsergroupdelegationID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsergroupdelegationRequest);
        }

        /// <summary>
        /// Returns true if UsergroupdelegationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UsergroupdelegationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsergroupdelegationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUsergroupdelegationID == input.PkiUsergroupdelegationID ||
                    (this.PkiUsergroupdelegationID != null &&
                    this.PkiUsergroupdelegationID.Equals(input.PkiUsergroupdelegationID))
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    (this.FkiUsergroupID != null &&
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUsergroupdelegationID != null)
                    hashCode = hashCode * 59 + this.PkiUsergroupdelegationID.GetHashCode();
                if (this.FkiUsergroupID != null)
                    hashCode = hashCode * 59 + this.FkiUsergroupID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                return hashCode;
            }
        }
    }

}
