/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxinvoicinguser Object
    /// </summary>
    [DataContract]
    public partial class EzmaxinvoicinguserResponseCompound :  IEquatable<EzmaxinvoicinguserResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EEzmaxinvoicinguserVariationezsign
        /// </summary>
        [DataMember(Name="eEzmaxinvoicinguserVariationezsign", EmitDefaultValue=true)]
        public FieldEEzmaxinvoicinguserVariationezsign EEzmaxinvoicinguserVariationezsign { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicinguserResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxinvoicinguserResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicinguserResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzmaxinvoicinguserID">The unique ID of the Ezmaxinvoicinguser.</param>
        /// <param name="fkiEzmaxinvoicingID">The unique ID of the Ezmaxinvoicing.</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal. (required).</param>
        /// <param name="sBillingentityinternalDescriptionX">The description of the Billingentityinternal in the language of the requester (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="iEzmaxinvoicinguserEzsigndocument">The number of ezsign documents (required).</param>
        /// <param name="bEzmaxinvoicinguserEzsignaccount">Whether there is an eZsign account (required).</param>
        /// <param name="bEzmaxinvoicinguserBillableezsign">Whether it is billable for eZsign (required).</param>
        /// <param name="eEzmaxinvoicinguserVariationezsign">eEzmaxinvoicinguserVariationezsign (required).</param>
        /// <param name="objContactName">objContactName (required).</param>
        public EzmaxinvoicinguserResponseCompound(int pkiEzmaxinvoicinguserID = default(int), int fkiEzmaxinvoicingID = default(int), int fkiBillingentityinternalID = default(int), string sBillingentityinternalDescriptionX = default(string), int fkiUserID = default(int), int iEzmaxinvoicinguserEzsigndocument = default(int), bool bEzmaxinvoicinguserEzsignaccount = default(bool), bool bEzmaxinvoicinguserBillableezsign = default(bool), FieldEEzmaxinvoicinguserVariationezsign eEzmaxinvoicinguserVariationezsign = default(FieldEEzmaxinvoicinguserVariationezsign), CustomContactNameResponse objContactName = default(CustomContactNameResponse))
        {
            // to ensure "fkiBillingentityinternalID" is required (not null)
            if (fkiBillingentityinternalID == null)
            {
                throw new InvalidDataException("fkiBillingentityinternalID is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiBillingentityinternalID = fkiBillingentityinternalID;
            }

            // to ensure "sBillingentityinternalDescriptionX" is required (not null)
            if (sBillingentityinternalDescriptionX == null)
            {
                throw new InvalidDataException("sBillingentityinternalDescriptionX is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.SBillingentityinternalDescriptionX = sBillingentityinternalDescriptionX;
            }

            // to ensure "fkiUserID" is required (not null)
            if (fkiUserID == null)
            {
                throw new InvalidDataException("fkiUserID is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.FkiUserID = fkiUserID;
            }

            // to ensure "iEzmaxinvoicinguserEzsigndocument" is required (not null)
            if (iEzmaxinvoicinguserEzsigndocument == null)
            {
                throw new InvalidDataException("iEzmaxinvoicinguserEzsigndocument is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.IEzmaxinvoicinguserEzsigndocument = iEzmaxinvoicinguserEzsigndocument;
            }

            // to ensure "bEzmaxinvoicinguserEzsignaccount" is required (not null)
            if (bEzmaxinvoicinguserEzsignaccount == null)
            {
                throw new InvalidDataException("bEzmaxinvoicinguserEzsignaccount is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.BEzmaxinvoicinguserEzsignaccount = bEzmaxinvoicinguserEzsignaccount;
            }

            // to ensure "bEzmaxinvoicinguserBillableezsign" is required (not null)
            if (bEzmaxinvoicinguserBillableezsign == null)
            {
                throw new InvalidDataException("bEzmaxinvoicinguserBillableezsign is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.BEzmaxinvoicinguserBillableezsign = bEzmaxinvoicinguserBillableezsign;
            }

            // to ensure "eEzmaxinvoicinguserVariationezsign" is required (not null)
            if (eEzmaxinvoicinguserVariationezsign == null)
            {
                throw new InvalidDataException("eEzmaxinvoicinguserVariationezsign is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.EEzmaxinvoicinguserVariationezsign = eEzmaxinvoicinguserVariationezsign;
            }

            // to ensure "objContactName" is required (not null)
            if (objContactName == null)
            {
                throw new InvalidDataException("objContactName is a required property for EzmaxinvoicinguserResponseCompound and cannot be null");
            }
            else
            {
                this.ObjContactName = objContactName;
            }

            this.PkiEzmaxinvoicinguserID = pkiEzmaxinvoicinguserID;
            this.FkiEzmaxinvoicingID = fkiEzmaxinvoicingID;
        }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicinguser
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicinguser</value>
        [DataMember(Name="pkiEzmaxinvoicinguserID", EmitDefaultValue=false)]
        public int PkiEzmaxinvoicinguserID { get; set; }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicing
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicing</value>
        [DataMember(Name="fkiEzmaxinvoicingID", EmitDefaultValue=false)]
        public int FkiEzmaxinvoicingID { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        [DataMember(Name="fkiBillingentityinternalID", EmitDefaultValue=true)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in the language of the requester
        /// </summary>
        /// <value>The description of the Billingentityinternal in the language of the requester</value>
        [DataMember(Name="sBillingentityinternalDescriptionX", EmitDefaultValue=true)]
        public string SBillingentityinternalDescriptionX { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The number of ezsign documents
        /// </summary>
        /// <value>The number of ezsign documents</value>
        [DataMember(Name="iEzmaxinvoicinguserEzsigndocument", EmitDefaultValue=true)]
        public int IEzmaxinvoicinguserEzsigndocument { get; set; }

        /// <summary>
        /// Whether there is an eZsign account
        /// </summary>
        /// <value>Whether there is an eZsign account</value>
        [DataMember(Name="bEzmaxinvoicinguserEzsignaccount", EmitDefaultValue=true)]
        public bool BEzmaxinvoicinguserEzsignaccount { get; set; }

        /// <summary>
        /// Whether it is billable for eZsign
        /// </summary>
        /// <value>Whether it is billable for eZsign</value>
        [DataMember(Name="bEzmaxinvoicinguserBillableezsign", EmitDefaultValue=true)]
        public bool BEzmaxinvoicinguserBillableezsign { get; set; }


        /// <summary>
        /// Gets or Sets ObjContactName
        /// </summary>
        [DataMember(Name="objContactName", EmitDefaultValue=true)]
        public CustomContactNameResponse ObjContactName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzmaxinvoicinguserResponseCompound {\n");
            sb.Append("  PkiEzmaxinvoicinguserID: ").Append(PkiEzmaxinvoicinguserID).Append("\n");
            sb.Append("  FkiEzmaxinvoicingID: ").Append(FkiEzmaxinvoicingID).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  SBillingentityinternalDescriptionX: ").Append(SBillingentityinternalDescriptionX).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  IEzmaxinvoicinguserEzsigndocument: ").Append(IEzmaxinvoicinguserEzsigndocument).Append("\n");
            sb.Append("  BEzmaxinvoicinguserEzsignaccount: ").Append(BEzmaxinvoicinguserEzsignaccount).Append("\n");
            sb.Append("  BEzmaxinvoicinguserBillableezsign: ").Append(BEzmaxinvoicinguserBillableezsign).Append("\n");
            sb.Append("  EEzmaxinvoicinguserVariationezsign: ").Append(EEzmaxinvoicinguserVariationezsign).Append("\n");
            sb.Append("  ObjContactName: ").Append(ObjContactName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzmaxinvoicinguserResponseCompound);
        }

        /// <summary>
        /// Returns true if EzmaxinvoicinguserResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzmaxinvoicinguserResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzmaxinvoicinguserResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzmaxinvoicinguserID == input.PkiEzmaxinvoicinguserID ||
                    (this.PkiEzmaxinvoicinguserID != null &&
                    this.PkiEzmaxinvoicinguserID.Equals(input.PkiEzmaxinvoicinguserID))
                ) && 
                (
                    this.FkiEzmaxinvoicingID == input.FkiEzmaxinvoicingID ||
                    (this.FkiEzmaxinvoicingID != null &&
                    this.FkiEzmaxinvoicingID.Equals(input.FkiEzmaxinvoicingID))
                ) && 
                (
                    this.FkiBillingentityinternalID == input.FkiBillingentityinternalID ||
                    (this.FkiBillingentityinternalID != null &&
                    this.FkiBillingentityinternalID.Equals(input.FkiBillingentityinternalID))
                ) && 
                (
                    this.SBillingentityinternalDescriptionX == input.SBillingentityinternalDescriptionX ||
                    (this.SBillingentityinternalDescriptionX != null &&
                    this.SBillingentityinternalDescriptionX.Equals(input.SBillingentityinternalDescriptionX))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.IEzmaxinvoicinguserEzsigndocument == input.IEzmaxinvoicinguserEzsigndocument ||
                    (this.IEzmaxinvoicinguserEzsigndocument != null &&
                    this.IEzmaxinvoicinguserEzsigndocument.Equals(input.IEzmaxinvoicinguserEzsigndocument))
                ) && 
                (
                    this.BEzmaxinvoicinguserEzsignaccount == input.BEzmaxinvoicinguserEzsignaccount ||
                    (this.BEzmaxinvoicinguserEzsignaccount != null &&
                    this.BEzmaxinvoicinguserEzsignaccount.Equals(input.BEzmaxinvoicinguserEzsignaccount))
                ) && 
                (
                    this.BEzmaxinvoicinguserBillableezsign == input.BEzmaxinvoicinguserBillableezsign ||
                    (this.BEzmaxinvoicinguserBillableezsign != null &&
                    this.BEzmaxinvoicinguserBillableezsign.Equals(input.BEzmaxinvoicinguserBillableezsign))
                ) && 
                (
                    this.EEzmaxinvoicinguserVariationezsign == input.EEzmaxinvoicinguserVariationezsign ||
                    (this.EEzmaxinvoicinguserVariationezsign != null &&
                    this.EEzmaxinvoicinguserVariationezsign.Equals(input.EEzmaxinvoicinguserVariationezsign))
                ) && 
                (
                    this.ObjContactName == input.ObjContactName ||
                    (this.ObjContactName != null &&
                    this.ObjContactName.Equals(input.ObjContactName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzmaxinvoicinguserID != null)
                    hashCode = hashCode * 59 + this.PkiEzmaxinvoicinguserID.GetHashCode();
                if (this.FkiEzmaxinvoicingID != null)
                    hashCode = hashCode * 59 + this.FkiEzmaxinvoicingID.GetHashCode();
                if (this.FkiBillingentityinternalID != null)
                    hashCode = hashCode * 59 + this.FkiBillingentityinternalID.GetHashCode();
                if (this.SBillingentityinternalDescriptionX != null)
                    hashCode = hashCode * 59 + this.SBillingentityinternalDescriptionX.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.IEzmaxinvoicinguserEzsigndocument != null)
                    hashCode = hashCode * 59 + this.IEzmaxinvoicinguserEzsigndocument.GetHashCode();
                if (this.BEzmaxinvoicinguserEzsignaccount != null)
                    hashCode = hashCode * 59 + this.BEzmaxinvoicinguserEzsignaccount.GetHashCode();
                if (this.BEzmaxinvoicinguserBillableezsign != null)
                    hashCode = hashCode * 59 + this.BEzmaxinvoicinguserBillableezsign.GetHashCode();
                if (this.EEzmaxinvoicinguserVariationezsign != null)
                    hashCode = hashCode * 59 + this.EEzmaxinvoicinguserVariationezsign.GetHashCode();
                if (this.ObjContactName != null)
                    hashCode = hashCode * 59 + this.ObjContactName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzmaxinvoicinguserID (int) minimum
            if(this.PkiEzmaxinvoicinguserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzmaxinvoicinguserID, must be a value greater than or equal to 0.", new [] { "PkiEzmaxinvoicinguserID" });
            }



            // FkiEzmaxinvoicingID (int) minimum
            if(this.FkiEzmaxinvoicingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzmaxinvoicingID, must be a value greater than or equal to 0.", new [] { "FkiEzmaxinvoicingID" });
            }



            // FkiBillingentityinternalID (int) minimum
            if(this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }



            // FkiUserID (int) minimum
            if(this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }



            // IEzmaxinvoicinguserEzsigndocument (int) minimum
            if(this.IEzmaxinvoicinguserEzsigndocument < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzmaxinvoicinguserEzsigndocument, must be a value greater than or equal to 0.", new [] { "IEzmaxinvoicinguserEzsigndocument" });
            }

            yield break;
        }
    }

}
