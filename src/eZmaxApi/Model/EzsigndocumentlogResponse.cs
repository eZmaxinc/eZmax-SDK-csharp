/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigndocumentlog Object
    /// </summary>
    [DataContract(Name = "ezsigndocumentlog-Response")]
    public partial class EzsigndocumentlogResponse : IEquatable<EzsigndocumentlogResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigndocumentlogType
        /// </summary>
        [DataMember(Name = "eEzsigndocumentlogType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigndocumentlogType EEzsigndocumentlogType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentlogResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigndocumentlogResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndocumentlogResponse" /> class.
        /// </summary>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiEzsignsignerID">The unique ID of the Ezsignsigner.</param>
        /// <param name="dtEzsigndocumentlogDatetime">The date and time at which the event was logged (required).</param>
        /// <param name="eEzsigndocumentlogType">eEzsigndocumentlogType (required).</param>
        /// <param name="sEzsigndocumentlogDetail">The detail of the Ezsigndocumentlog (required).</param>
        /// <param name="sEzsigndocumentlogLastname">The last name of the User or Ezsignsigner (required).</param>
        /// <param name="sEzsigndocumentlogFirstname">The first name of the User or Ezsignsigner (required).</param>
        /// <param name="sEzsigndocumentlogIP">Represent an IP address. (required).</param>
        public EzsigndocumentlogResponse(int fkiUserID = default(int), int fkiEzsignsignerID = default(int), string dtEzsigndocumentlogDatetime = default(string), FieldEEzsigndocumentlogType eEzsigndocumentlogType = default(FieldEEzsigndocumentlogType), string sEzsigndocumentlogDetail = default(string), string sEzsigndocumentlogLastname = default(string), string sEzsigndocumentlogFirstname = default(string), string sEzsigndocumentlogIP = default(string))
        {
            // to ensure "dtEzsigndocumentlogDatetime" is required (not null)
            if (dtEzsigndocumentlogDatetime == null)
            {
                throw new ArgumentNullException("dtEzsigndocumentlogDatetime is a required property for EzsigndocumentlogResponse and cannot be null");
            }
            this.DtEzsigndocumentlogDatetime = dtEzsigndocumentlogDatetime;
            this.EEzsigndocumentlogType = eEzsigndocumentlogType;
            // to ensure "sEzsigndocumentlogDetail" is required (not null)
            if (sEzsigndocumentlogDetail == null)
            {
                throw new ArgumentNullException("sEzsigndocumentlogDetail is a required property for EzsigndocumentlogResponse and cannot be null");
            }
            this.SEzsigndocumentlogDetail = sEzsigndocumentlogDetail;
            // to ensure "sEzsigndocumentlogLastname" is required (not null)
            if (sEzsigndocumentlogLastname == null)
            {
                throw new ArgumentNullException("sEzsigndocumentlogLastname is a required property for EzsigndocumentlogResponse and cannot be null");
            }
            this.SEzsigndocumentlogLastname = sEzsigndocumentlogLastname;
            // to ensure "sEzsigndocumentlogFirstname" is required (not null)
            if (sEzsigndocumentlogFirstname == null)
            {
                throw new ArgumentNullException("sEzsigndocumentlogFirstname is a required property for EzsigndocumentlogResponse and cannot be null");
            }
            this.SEzsigndocumentlogFirstname = sEzsigndocumentlogFirstname;
            // to ensure "sEzsigndocumentlogIP" is required (not null)
            if (sEzsigndocumentlogIP == null)
            {
                throw new ArgumentNullException("sEzsigndocumentlogIP is a required property for EzsigndocumentlogResponse and cannot be null");
            }
            this.SEzsigndocumentlogIP = sEzsigndocumentlogIP;
            this.FkiUserID = fkiUserID;
            this.FkiEzsignsignerID = fkiEzsignsignerID;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignsigner
        /// </summary>
        /// <value>The unique ID of the Ezsignsigner</value>
        /* <example>89</example>*/
        [DataMember(Name = "fkiEzsignsignerID", EmitDefaultValue = false)]
        public int FkiEzsignsignerID { get; set; }

        /// <summary>
        /// The date and time at which the event was logged
        /// </summary>
        /// <value>The date and time at which the event was logged</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsigndocumentlogDatetime", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzsigndocumentlogDatetime { get; set; }

        /// <summary>
        /// The detail of the Ezsigndocumentlog
        /// </summary>
        /// <value>The detail of the Ezsigndocumentlog</value>
        /* <example>Page 1 MD5: a56bbc742ba2a4d074f2493550cf6ea5</example>*/
        [DataMember(Name = "sEzsigndocumentlogDetail", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentlogDetail { get; set; }

        /// <summary>
        /// The last name of the User or Ezsignsigner
        /// </summary>
        /// <value>The last name of the User or Ezsignsigner</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sEzsigndocumentlogLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentlogLastname { get; set; }

        /// <summary>
        /// The first name of the User or Ezsignsigner
        /// </summary>
        /// <value>The first name of the User or Ezsignsigner</value>
        /* <example>John</example>*/
        [DataMember(Name = "sEzsigndocumentlogFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentlogFirstname { get; set; }

        /// <summary>
        /// Represent an IP address.
        /// </summary>
        /// <value>Represent an IP address.</value>
        /* <example>127.0.0.1</example>*/
        [DataMember(Name = "sEzsigndocumentlogIP", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentlogIP { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigndocumentlogResponse {\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiEzsignsignerID: ").Append(FkiEzsignsignerID).Append("\n");
            sb.Append("  DtEzsigndocumentlogDatetime: ").Append(DtEzsigndocumentlogDatetime).Append("\n");
            sb.Append("  EEzsigndocumentlogType: ").Append(EEzsigndocumentlogType).Append("\n");
            sb.Append("  SEzsigndocumentlogDetail: ").Append(SEzsigndocumentlogDetail).Append("\n");
            sb.Append("  SEzsigndocumentlogLastname: ").Append(SEzsigndocumentlogLastname).Append("\n");
            sb.Append("  SEzsigndocumentlogFirstname: ").Append(SEzsigndocumentlogFirstname).Append("\n");
            sb.Append("  SEzsigndocumentlogIP: ").Append(SEzsigndocumentlogIP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigndocumentlogResponse);
        }

        /// <summary>
        /// Returns true if EzsigndocumentlogResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigndocumentlogResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigndocumentlogResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.FkiEzsignsignerID == input.FkiEzsignsignerID ||
                    this.FkiEzsignsignerID.Equals(input.FkiEzsignsignerID)
                ) && 
                (
                    this.DtEzsigndocumentlogDatetime == input.DtEzsigndocumentlogDatetime ||
                    (this.DtEzsigndocumentlogDatetime != null &&
                    this.DtEzsigndocumentlogDatetime.Equals(input.DtEzsigndocumentlogDatetime))
                ) && 
                (
                    this.EEzsigndocumentlogType == input.EEzsigndocumentlogType ||
                    this.EEzsigndocumentlogType.Equals(input.EEzsigndocumentlogType)
                ) && 
                (
                    this.SEzsigndocumentlogDetail == input.SEzsigndocumentlogDetail ||
                    (this.SEzsigndocumentlogDetail != null &&
                    this.SEzsigndocumentlogDetail.Equals(input.SEzsigndocumentlogDetail))
                ) && 
                (
                    this.SEzsigndocumentlogLastname == input.SEzsigndocumentlogLastname ||
                    (this.SEzsigndocumentlogLastname != null &&
                    this.SEzsigndocumentlogLastname.Equals(input.SEzsigndocumentlogLastname))
                ) && 
                (
                    this.SEzsigndocumentlogFirstname == input.SEzsigndocumentlogFirstname ||
                    (this.SEzsigndocumentlogFirstname != null &&
                    this.SEzsigndocumentlogFirstname.Equals(input.SEzsigndocumentlogFirstname))
                ) && 
                (
                    this.SEzsigndocumentlogIP == input.SEzsigndocumentlogIP ||
                    (this.SEzsigndocumentlogIP != null &&
                    this.SEzsigndocumentlogIP.Equals(input.SEzsigndocumentlogIP))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignsignerID.GetHashCode();
                if (this.DtEzsigndocumentlogDatetime != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsigndocumentlogDatetime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsigndocumentlogType.GetHashCode();
                if (this.SEzsigndocumentlogDetail != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentlogDetail.GetHashCode();
                }
                if (this.SEzsigndocumentlogLastname != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentlogLastname.GetHashCode();
                }
                if (this.SEzsigndocumentlogFirstname != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentlogFirstname.GetHashCode();
                }
                if (this.SEzsigndocumentlogIP != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentlogIP.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiEzsignsignerID (int) minimum
            if (this.FkiEzsignsignerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignsignerID, must be a value greater than or equal to 0.", new [] { "FkiEzsignsignerID" });
            }

            yield break;
        }
    }

}
