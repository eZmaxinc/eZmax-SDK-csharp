/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Creditcarddetail Object
    /// </summary>
    [DataContract(Name = "creditcarddetail-Response")]
    public partial class CreditcarddetailResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcarddetailResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditcarddetailResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcarddetailResponse" /> class.
        /// </summary>
        /// <param name="pkiCreditcarddetailID">The unique ID of the Creditcarddetail (required).</param>
        /// <param name="fkiCreditcardtypeID">The unique ID of the Creditcardtype (required).</param>
        /// <param name="sCreditcarddetailNumbermasked">The numbermasked of the Creditcarddetail (required).</param>
        /// <param name="iCreditcarddetailExpirationmonth">The expirationmonth of the Creditcarddetail (required).</param>
        /// <param name="iCreditcarddetailExpirationyear">The expirationyear of the Creditcarddetail (required).</param>
        /// <param name="sCreditcarddetailCivic">The civic of the Creditcarddetail (required).</param>
        /// <param name="sCreditcarddetailStreet">The street of the Creditcarddetail (required).</param>
        /// <param name="sCreditcarddetailZip">The zip of the Creditcarddetail (required).</param>
        public CreditcarddetailResponse(int pkiCreditcarddetailID = default(int), int fkiCreditcardtypeID = default(int), string sCreditcarddetailNumbermasked = default(string), int iCreditcarddetailExpirationmonth = default(int), int iCreditcarddetailExpirationyear = default(int), string sCreditcarddetailCivic = default(string), string sCreditcarddetailStreet = default(string), string sCreditcarddetailZip = default(string))
        {
            this.PkiCreditcarddetailID = pkiCreditcarddetailID;
            this.FkiCreditcardtypeID = fkiCreditcardtypeID;
            // to ensure "sCreditcarddetailNumbermasked" is required (not null)
            if (sCreditcarddetailNumbermasked == null)
            {
                throw new ArgumentNullException("sCreditcarddetailNumbermasked is a required property for CreditcarddetailResponse and cannot be null");
            }
            this.SCreditcarddetailNumbermasked = sCreditcarddetailNumbermasked;
            this.ICreditcarddetailExpirationmonth = iCreditcarddetailExpirationmonth;
            this.ICreditcarddetailExpirationyear = iCreditcarddetailExpirationyear;
            // to ensure "sCreditcarddetailCivic" is required (not null)
            if (sCreditcarddetailCivic == null)
            {
                throw new ArgumentNullException("sCreditcarddetailCivic is a required property for CreditcarddetailResponse and cannot be null");
            }
            this.SCreditcarddetailCivic = sCreditcarddetailCivic;
            // to ensure "sCreditcarddetailStreet" is required (not null)
            if (sCreditcarddetailStreet == null)
            {
                throw new ArgumentNullException("sCreditcarddetailStreet is a required property for CreditcarddetailResponse and cannot be null");
            }
            this.SCreditcarddetailStreet = sCreditcarddetailStreet;
            // to ensure "sCreditcarddetailZip" is required (not null)
            if (sCreditcarddetailZip == null)
            {
                throw new ArgumentNullException("sCreditcarddetailZip is a required property for CreditcarddetailResponse and cannot be null");
            }
            this.SCreditcarddetailZip = sCreditcarddetailZip;
        }

        /// <summary>
        /// The unique ID of the Creditcarddetail
        /// </summary>
        /// <value>The unique ID of the Creditcarddetail</value>
        /* <example>53</example>*/
        [DataMember(Name = "pkiCreditcarddetailID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCreditcarddetailID { get; set; }

        /// <summary>
        /// The unique ID of the Creditcardtype
        /// </summary>
        /// <value>The unique ID of the Creditcardtype</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiCreditcardtypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiCreditcardtypeID { get; set; }

        /// <summary>
        /// The numbermasked of the Creditcarddetail
        /// </summary>
        /// <value>The numbermasked of the Creditcarddetail</value>
        /* <example>XXXX XXXX XXXX 4242</example>*/
        [DataMember(Name = "sCreditcarddetailNumbermasked", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcarddetailNumbermasked { get; set; }

        /// <summary>
        /// The expirationmonth of the Creditcarddetail
        /// </summary>
        /// <value>The expirationmonth of the Creditcarddetail</value>
        /* <example>10</example>*/
        [DataMember(Name = "iCreditcarddetailExpirationmonth", IsRequired = true, EmitDefaultValue = true)]
        public int ICreditcarddetailExpirationmonth { get; set; }

        /// <summary>
        /// The expirationyear of the Creditcarddetail
        /// </summary>
        /// <value>The expirationyear of the Creditcarddetail</value>
        /* <example>2024</example>*/
        [DataMember(Name = "iCreditcarddetailExpirationyear", IsRequired = true, EmitDefaultValue = true)]
        public int ICreditcarddetailExpirationyear { get; set; }

        /// <summary>
        /// The civic of the Creditcarddetail
        /// </summary>
        /// <value>The civic of the Creditcarddetail</value>
        /* <example>2500</example>*/
        [DataMember(Name = "sCreditcarddetailCivic", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcarddetailCivic { get; set; }

        /// <summary>
        /// The street of the Creditcarddetail
        /// </summary>
        /// <value>The street of the Creditcarddetail</value>
        /* <example>Daniel-Johnson Blvd.</example>*/
        [DataMember(Name = "sCreditcarddetailStreet", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcarddetailStreet { get; set; }

        /// <summary>
        /// The zip of the Creditcarddetail
        /// </summary>
        /// <value>The zip of the Creditcarddetail</value>
        /* <example>H7T 2P6</example>*/
        [DataMember(Name = "sCreditcarddetailZip", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcarddetailZip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditcarddetailResponse {\n");
            sb.Append("  PkiCreditcarddetailID: ").Append(PkiCreditcarddetailID).Append("\n");
            sb.Append("  FkiCreditcardtypeID: ").Append(FkiCreditcardtypeID).Append("\n");
            sb.Append("  SCreditcarddetailNumbermasked: ").Append(SCreditcarddetailNumbermasked).Append("\n");
            sb.Append("  ICreditcarddetailExpirationmonth: ").Append(ICreditcarddetailExpirationmonth).Append("\n");
            sb.Append("  ICreditcarddetailExpirationyear: ").Append(ICreditcarddetailExpirationyear).Append("\n");
            sb.Append("  SCreditcarddetailCivic: ").Append(SCreditcarddetailCivic).Append("\n");
            sb.Append("  SCreditcarddetailStreet: ").Append(SCreditcarddetailStreet).Append("\n");
            sb.Append("  SCreditcarddetailZip: ").Append(SCreditcarddetailZip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCreditcarddetailID (int) maximum
            if (this.PkiCreditcarddetailID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCreditcarddetailID, must be a value less than or equal to 65535.", new [] { "PkiCreditcarddetailID" });
            }

            // PkiCreditcarddetailID (int) minimum
            if (this.PkiCreditcarddetailID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCreditcarddetailID, must be a value greater than or equal to 0.", new [] { "PkiCreditcarddetailID" });
            }

            // FkiCreditcardtypeID (int) maximum
            if (this.FkiCreditcardtypeID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCreditcardtypeID, must be a value less than or equal to 255.", new [] { "FkiCreditcardtypeID" });
            }

            // FkiCreditcardtypeID (int) minimum
            if (this.FkiCreditcardtypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCreditcardtypeID, must be a value greater than or equal to 0.", new [] { "FkiCreditcardtypeID" });
            }

            if (this.SCreditcarddetailNumbermasked != null) {
                // SCreditcarddetailNumbermasked (string) pattern
                Regex regexSCreditcarddetailNumbermasked = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcarddetailNumbermasked.Match(this.SCreditcarddetailNumbermasked).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcarddetailNumbermasked, must match a pattern of " + regexSCreditcarddetailNumbermasked, new [] { "SCreditcarddetailNumbermasked" });
                }
            }

            // ICreditcarddetailExpirationmonth (int) maximum
            if (this.ICreditcarddetailExpirationmonth > (int)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationmonth, must be a value less than or equal to 12.", new [] { "ICreditcarddetailExpirationmonth" });
            }

            // ICreditcarddetailExpirationmonth (int) minimum
            if (this.ICreditcarddetailExpirationmonth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationmonth, must be a value greater than or equal to 0.", new [] { "ICreditcarddetailExpirationmonth" });
            }

            // ICreditcarddetailExpirationyear (int) maximum
            if (this.ICreditcarddetailExpirationyear > (int)2200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationyear, must be a value less than or equal to 2200.", new [] { "ICreditcarddetailExpirationyear" });
            }

            // ICreditcarddetailExpirationyear (int) minimum
            if (this.ICreditcarddetailExpirationyear < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ICreditcarddetailExpirationyear, must be a value greater than or equal to 0.", new [] { "ICreditcarddetailExpirationyear" });
            }

            if (this.SCreditcarddetailCivic != null) {
                // SCreditcarddetailCivic (string) pattern
                Regex regexSCreditcarddetailCivic = new Regex(@"^.{0,8}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcarddetailCivic.Match(this.SCreditcarddetailCivic).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcarddetailCivic, must match a pattern of " + regexSCreditcarddetailCivic, new [] { "SCreditcarddetailCivic" });
                }
            }

            if (this.SCreditcarddetailStreet != null) {
                // SCreditcarddetailStreet (string) pattern
                Regex regexSCreditcarddetailStreet = new Regex(@"^.{0,40}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcarddetailStreet.Match(this.SCreditcarddetailStreet).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcarddetailStreet, must match a pattern of " + regexSCreditcarddetailStreet, new [] { "SCreditcarddetailStreet" });
                }
            }

            if (this.SCreditcarddetailZip != null) {
                // SCreditcarddetailZip (string) pattern
                Regex regexSCreditcarddetailZip = new Regex(@"^.{0,10}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcarddetailZip.Match(this.SCreditcarddetailZip).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcarddetailZip, must match a pattern of " + regexSCreditcarddetailZip, new [] { "SCreditcarddetailZip" });
                }
            }

            yield break;
        }
    }

}
