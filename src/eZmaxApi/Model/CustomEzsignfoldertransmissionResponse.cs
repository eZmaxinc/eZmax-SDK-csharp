/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfolder Object in the context of an Ezsignbulksendtransmission
    /// </summary>
    [DataContract(Name = "Custom-Ezsignfoldertransmission-Response")]
    public partial class CustomEzsignfoldertransmissionResponse : IEquatable<CustomEzsignfoldertransmissionResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfolderStep
        /// </summary>
        [DataMember(Name = "eEzsignfolderStep", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfolderStep EEzsignfolderStep { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldertransmissionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignfoldertransmissionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldertransmissionResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="sEzsignfolderDescription">The description of the Ezsignfolder (required).</param>
        /// <param name="eEzsignfolderStep">eEzsignfolderStep (required).</param>
        /// <param name="iEzsignfolderSignaturetotal">The number of total signatures that were requested in the Ezsignfolder (required).</param>
        /// <param name="iEzsignfolderSignaturesigned">The number of signatures that were signed in the Ezsignfolder. (required).</param>
        /// <param name="aObjEzsignfoldertransmissionSigner">aObjEzsignfoldertransmissionSigner (required).</param>
        public CustomEzsignfoldertransmissionResponse(int pkiEzsignfolderID = default(int), string sEzsignfolderDescription = default(string), FieldEEzsignfolderStep eEzsignfolderStep = default(FieldEEzsignfolderStep), int iEzsignfolderSignaturetotal = default(int), int iEzsignfolderSignaturesigned = default(int), List<CustomEzsignfoldertransmissionSignerResponse> aObjEzsignfoldertransmissionSigner = default(List<CustomEzsignfoldertransmissionSignerResponse>))
        {
            this.PkiEzsignfolderID = pkiEzsignfolderID;
            // to ensure "sEzsignfolderDescription" is required (not null)
            if (sEzsignfolderDescription == null)
            {
                throw new ArgumentNullException("sEzsignfolderDescription is a required property for CustomEzsignfoldertransmissionResponse and cannot be null");
            }
            this.SEzsignfolderDescription = sEzsignfolderDescription;
            this.EEzsignfolderStep = eEzsignfolderStep;
            this.IEzsignfolderSignaturetotal = iEzsignfolderSignaturetotal;
            this.IEzsignfolderSignaturesigned = iEzsignfolderSignaturesigned;
            // to ensure "aObjEzsignfoldertransmissionSigner" is required (not null)
            if (aObjEzsignfoldertransmissionSigner == null)
            {
                throw new ArgumentNullException("aObjEzsignfoldertransmissionSigner is a required property for CustomEzsignfoldertransmissionResponse and cannot be null");
            }
            this.AObjEzsignfoldertransmissionSigner = aObjEzsignfoldertransmissionSigner;
        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
		/* <example>33</example>*/
        [DataMember(Name = "pkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfolderID { get; set; }

        /// <summary>
        /// The description of the Ezsignfolder
        /// </summary>
        /// <value>The description of the Ezsignfolder</value>
		/* <example>Test eZsign Folder</example>*/
        [DataMember(Name = "sEzsignfolderDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfolderDescription { get; set; }

        /// <summary>
        /// The number of total signatures that were requested in the Ezsignfolder
        /// </summary>
        /// <value>The number of total signatures that were requested in the Ezsignfolder</value>
		/* <example>4</example>*/
        [DataMember(Name = "iEzsignfolderSignaturetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfolderSignaturetotal { get; set; }

        /// <summary>
        /// The number of signatures that were signed in the Ezsignfolder.
        /// </summary>
        /// <value>The number of signatures that were signed in the Ezsignfolder.</value>
		/* <example>3</example>*/
        [DataMember(Name = "iEzsignfolderSignaturesigned", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfolderSignaturesigned { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignfoldertransmissionSigner
        /// </summary>
        [DataMember(Name = "a_objEzsignfoldertransmissionSigner", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomEzsignfoldertransmissionSignerResponse> AObjEzsignfoldertransmissionSigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzsignfoldertransmissionResponse {\n");
            sb.Append("  PkiEzsignfolderID: ").Append(PkiEzsignfolderID).Append("\n");
            sb.Append("  SEzsignfolderDescription: ").Append(SEzsignfolderDescription).Append("\n");
            sb.Append("  EEzsignfolderStep: ").Append(EEzsignfolderStep).Append("\n");
            sb.Append("  IEzsignfolderSignaturetotal: ").Append(IEzsignfolderSignaturetotal).Append("\n");
            sb.Append("  IEzsignfolderSignaturesigned: ").Append(IEzsignfolderSignaturesigned).Append("\n");
            sb.Append("  AObjEzsignfoldertransmissionSigner: ").Append(AObjEzsignfoldertransmissionSigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignfoldertransmissionResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignfoldertransmissionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignfoldertransmissionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignfoldertransmissionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsignfolderID == input.PkiEzsignfolderID ||
                    this.PkiEzsignfolderID.Equals(input.PkiEzsignfolderID)
                ) && 
                (
                    this.SEzsignfolderDescription == input.SEzsignfolderDescription ||
                    (this.SEzsignfolderDescription != null &&
                    this.SEzsignfolderDescription.Equals(input.SEzsignfolderDescription))
                ) && 
                (
                    this.EEzsignfolderStep == input.EEzsignfolderStep ||
                    this.EEzsignfolderStep.Equals(input.EEzsignfolderStep)
                ) && 
                (
                    this.IEzsignfolderSignaturetotal == input.IEzsignfolderSignaturetotal ||
                    this.IEzsignfolderSignaturetotal.Equals(input.IEzsignfolderSignaturetotal)
                ) && 
                (
                    this.IEzsignfolderSignaturesigned == input.IEzsignfolderSignaturesigned ||
                    this.IEzsignfolderSignaturesigned.Equals(input.IEzsignfolderSignaturesigned)
                ) && 
                (
                    this.AObjEzsignfoldertransmissionSigner == input.AObjEzsignfoldertransmissionSigner ||
                    this.AObjEzsignfoldertransmissionSigner != null &&
                    input.AObjEzsignfoldertransmissionSigner != null &&
                    this.AObjEzsignfoldertransmissionSigner.SequenceEqual(input.AObjEzsignfoldertransmissionSigner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsignfolderID.GetHashCode();
                if (this.SEzsignfolderDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfolderDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsignfolderStep.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignfolderSignaturetotal.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignfolderSignaturesigned.GetHashCode();
                if (this.AObjEzsignfoldertransmissionSigner != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignfoldertransmissionSigner.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfolderID (int) minimum
            if (this.PkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
