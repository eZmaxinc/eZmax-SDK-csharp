/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for the /1/object/ezsignfolder/getList API Request
    /// </summary>
    [DataContract]
    public partial class EzsignfolderGetListV1ResponseMPayload :  IEquatable<EzsignfolderGetListV1ResponseMPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderGetListV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfolderGetListV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderGetListV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="aObjEzsignfolder">aObjEzsignfolder (required).</param>
        /// <param name="iRowReturned">The number of rows returned (required).</param>
        /// <param name="iRowFiltered">The number of rows matching your filters (if any) or the total number of rows (required).</param>
        public EzsignfolderGetListV1ResponseMPayload(List<EzsignfolderListElement> aObjEzsignfolder = default(List<EzsignfolderListElement>), int iRowReturned = default(int), int iRowFiltered = default(int))
        {
            // to ensure "aObjEzsignfolder" is required (not null)
            if (aObjEzsignfolder == null)
            {
                throw new InvalidDataException("aObjEzsignfolder is a required property for EzsignfolderGetListV1ResponseMPayload and cannot be null");
            }
            else
            {
                this.AObjEzsignfolder = aObjEzsignfolder;
            }

            // to ensure "iRowReturned" is required (not null)
            if (iRowReturned == null)
            {
                throw new InvalidDataException("iRowReturned is a required property for EzsignfolderGetListV1ResponseMPayload and cannot be null");
            }
            else
            {
                this.IRowReturned = iRowReturned;
            }

            // to ensure "iRowFiltered" is required (not null)
            if (iRowFiltered == null)
            {
                throw new InvalidDataException("iRowFiltered is a required property for EzsignfolderGetListV1ResponseMPayload and cannot be null");
            }
            else
            {
                this.IRowFiltered = iRowFiltered;
            }

        }

        /// <summary>
        /// Gets or Sets AObjEzsignfolder
        /// </summary>
        [DataMember(Name="a_objEzsignfolder", EmitDefaultValue=true)]
        public List<EzsignfolderListElement> AObjEzsignfolder { get; set; }

        /// <summary>
        /// The number of rows returned
        /// </summary>
        /// <value>The number of rows returned</value>
        [DataMember(Name="iRowReturned", EmitDefaultValue=true)]
        public int IRowReturned { get; set; }

        /// <summary>
        /// The number of rows matching your filters (if any) or the total number of rows
        /// </summary>
        /// <value>The number of rows matching your filters (if any) or the total number of rows</value>
        [DataMember(Name="iRowFiltered", EmitDefaultValue=true)]
        public int IRowFiltered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfolderGetListV1ResponseMPayload {\n");
            sb.Append("  AObjEzsignfolder: ").Append(AObjEzsignfolder).Append("\n");
            sb.Append("  IRowReturned: ").Append(IRowReturned).Append("\n");
            sb.Append("  IRowFiltered: ").Append(IRowFiltered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfolderGetListV1ResponseMPayload);
        }

        /// <summary>
        /// Returns true if EzsignfolderGetListV1ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfolderGetListV1ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfolderGetListV1ResponseMPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AObjEzsignfolder == input.AObjEzsignfolder ||
                    this.AObjEzsignfolder != null &&
                    input.AObjEzsignfolder != null &&
                    this.AObjEzsignfolder.SequenceEqual(input.AObjEzsignfolder)
                ) && 
                (
                    this.IRowReturned == input.IRowReturned ||
                    (this.IRowReturned != null &&
                    this.IRowReturned.Equals(input.IRowReturned))
                ) && 
                (
                    this.IRowFiltered == input.IRowFiltered ||
                    (this.IRowFiltered != null &&
                    this.IRowFiltered.Equals(input.IRowFiltered))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AObjEzsignfolder != null)
                    hashCode = hashCode * 59 + this.AObjEzsignfolder.GetHashCode();
                if (this.IRowReturned != null)
                    hashCode = hashCode * 59 + this.IRowReturned.GetHashCode();
                if (this.IRowFiltered != null)
                    hashCode = hashCode * 59 + this.IRowFiltered.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
