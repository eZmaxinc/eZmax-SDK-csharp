/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Description of the Paymentterm
    /// </summary>
    [DataContract]
    public partial class MultilingualPaymenttermDescription :  IEquatable<MultilingualPaymenttermDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultilingualPaymenttermDescription" /> class.
        /// </summary>
        /// <param name="sPaymenttermDescription1">The description of the Paymentterm in French.</param>
        /// <param name="sPaymenttermDescription2">The description of the Paymentterm in English.</param>
        public MultilingualPaymenttermDescription(string sPaymenttermDescription1 = default(string), string sPaymenttermDescription2 = default(string))
        {
            this.SPaymenttermDescription1 = sPaymenttermDescription1;
            this.SPaymenttermDescription2 = sPaymenttermDescription2;
        }

        /// <summary>
        /// The description of the Paymentterm in French
        /// </summary>
        /// <value>The description of the Paymentterm in French</value>
        [DataMember(Name="sPaymenttermDescription1", EmitDefaultValue=false)]
        public string SPaymenttermDescription1 { get; set; }

        /// <summary>
        /// The description of the Paymentterm in English
        /// </summary>
        /// <value>The description of the Paymentterm in English</value>
        [DataMember(Name="sPaymenttermDescription2", EmitDefaultValue=false)]
        public string SPaymenttermDescription2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultilingualPaymenttermDescription {\n");
            sb.Append("  SPaymenttermDescription1: ").Append(SPaymenttermDescription1).Append("\n");
            sb.Append("  SPaymenttermDescription2: ").Append(SPaymenttermDescription2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultilingualPaymenttermDescription);
        }

        /// <summary>
        /// Returns true if MultilingualPaymenttermDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of MultilingualPaymenttermDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultilingualPaymenttermDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SPaymenttermDescription1 == input.SPaymenttermDescription1 ||
                    (this.SPaymenttermDescription1 != null &&
                    this.SPaymenttermDescription1.Equals(input.SPaymenttermDescription1))
                ) && 
                (
                    this.SPaymenttermDescription2 == input.SPaymenttermDescription2 ||
                    (this.SPaymenttermDescription2 != null &&
                    this.SPaymenttermDescription2.Equals(input.SPaymenttermDescription2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SPaymenttermDescription1 != null)
                    hashCode = hashCode * 59 + this.SPaymenttermDescription1.GetHashCode();
                if (this.SPaymenttermDescription2 != null)
                    hashCode = hashCode * 59 + this.SPaymenttermDescription2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // SPaymenttermDescription1 (string) pattern
            Regex regexSPaymenttermDescription1 = new Regex(@"^.{1,40}$", RegexOptions.CultureInvariant);
            if (false == regexSPaymenttermDescription1.Match(this.SPaymenttermDescription1).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPaymenttermDescription1, must match a pattern of " + regexSPaymenttermDescription1, new [] { "SPaymenttermDescription1" });
            }



            // SPaymenttermDescription2 (string) pattern
            Regex regexSPaymenttermDescription2 = new Regex(@"^.{1,40}$", RegexOptions.CultureInvariant);
            if (false == regexSPaymenttermDescription2.Match(this.SPaymenttermDescription2).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPaymenttermDescription2, must match a pattern of " + regexSPaymenttermDescription2, new [] { "SPaymenttermDescription2" });
            }

            yield break;
        }
    }

}
