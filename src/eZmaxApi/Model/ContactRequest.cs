/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Contact Object
    /// </summary>
    [DataContract(Name = "contact-Request")]
    public partial class ContactRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRequest" /> class.
        /// </summary>
        /// <param name="fkiContacttitleID">The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)| (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sContactFirstname">The First name of the contact (required).</param>
        /// <param name="sContactLastname">The Last name of the contact (required).</param>
        /// <param name="sContactCompany">The Company name of the contact (required).</param>
        /// <param name="dtContactBirthdate">The Birth Date of the contact.</param>
        public ContactRequest(int fkiContacttitleID = default(int), int fkiLanguageID = default(int), string sContactFirstname = default(string), string sContactLastname = default(string), string sContactCompany = default(string), string dtContactBirthdate = default(string))
        {
            this.FkiContacttitleID = fkiContacttitleID;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sContactFirstname" is required (not null)
            if (sContactFirstname == null)
            {
                throw new ArgumentNullException("sContactFirstname is a required property for ContactRequest and cannot be null");
            }
            this.SContactFirstname = sContactFirstname;
            // to ensure "sContactLastname" is required (not null)
            if (sContactLastname == null)
            {
                throw new ArgumentNullException("sContactLastname is a required property for ContactRequest and cannot be null");
            }
            this.SContactLastname = sContactLastname;
            // to ensure "sContactCompany" is required (not null)
            if (sContactCompany == null)
            {
                throw new ArgumentNullException("sContactCompany is a required property for ContactRequest and cannot be null");
            }
            this.SContactCompany = sContactCompany;
            this.DtContactBirthdate = dtContactBirthdate;
        }

        /// <summary>
        /// The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
        /// </summary>
        /// <value>The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiContacttitleID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiContacttitleID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The First name of the contact
        /// </summary>
        /// <value>The First name of the contact</value>
        /* <example>John</example>*/
        [DataMember(Name = "sContactFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SContactFirstname { get; set; }

        /// <summary>
        /// The Last name of the contact
        /// </summary>
        /// <value>The Last name of the contact</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sContactLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SContactLastname { get; set; }

        /// <summary>
        /// The Company name of the contact
        /// </summary>
        /// <value>The Company name of the contact</value>
        /* <example>eZmax Solutions Inc.</example>*/
        [DataMember(Name = "sContactCompany", IsRequired = true, EmitDefaultValue = true)]
        public string SContactCompany { get; set; }

        /// <summary>
        /// The Birth Date of the contact
        /// </summary>
        /// <value>The Birth Date of the contact</value>
        /* <example>1980-01-01</example>*/
        [DataMember(Name = "dtContactBirthdate", EmitDefaultValue = false)]
        public string DtContactBirthdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactRequest {\n");
            sb.Append("  FkiContacttitleID: ").Append(FkiContacttitleID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SContactFirstname: ").Append(SContactFirstname).Append("\n");
            sb.Append("  SContactLastname: ").Append(SContactLastname).Append("\n");
            sb.Append("  SContactCompany: ").Append(SContactCompany).Append("\n");
            sb.Append("  DtContactBirthdate: ").Append(DtContactBirthdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiContacttitleID (int) minimum
            if (this.FkiContacttitleID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiContacttitleID, must be a value greater than or equal to 0.", new [] { "FkiContacttitleID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SContactFirstname != null) {
                // SContactFirstname (string) pattern
                Regex regexSContactFirstname = new Regex(@"^.{1,20}$", RegexOptions.CultureInvariant);
                if (!regexSContactFirstname.Match(this.SContactFirstname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SContactFirstname, must match a pattern of " + regexSContactFirstname, new [] { "SContactFirstname" });
                }
            }

            if (this.SContactLastname != null) {
                // SContactLastname (string) pattern
                Regex regexSContactLastname = new Regex(@"^.{1,25}$", RegexOptions.CultureInvariant);
                if (!regexSContactLastname.Match(this.SContactLastname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SContactLastname, must match a pattern of " + regexSContactLastname, new [] { "SContactLastname" });
                }
            }

            yield break;
        }
    }

}
