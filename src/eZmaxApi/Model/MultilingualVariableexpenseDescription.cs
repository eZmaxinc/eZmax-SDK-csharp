/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// The description of the Variableexpense
    /// </summary>
    [DataContract]
    public partial class MultilingualVariableexpenseDescription :  IEquatable<MultilingualVariableexpenseDescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultilingualVariableexpenseDescription" /> class.
        /// </summary>
        /// <param name="sVariableexpenseDescription1">The description of the Variableexpense in French.</param>
        /// <param name="sVariableexpenseDescription2">The description of the Variableexpense in English.</param>
        public MultilingualVariableexpenseDescription(string sVariableexpenseDescription1 = default(string), string sVariableexpenseDescription2 = default(string))
        {
            this.SVariableexpenseDescription1 = sVariableexpenseDescription1;
            this.SVariableexpenseDescription2 = sVariableexpenseDescription2;
        }

        /// <summary>
        /// The description of the Variableexpense in French
        /// </summary>
        /// <value>The description of the Variableexpense in French</value>
        [DataMember(Name="sVariableexpenseDescription1", EmitDefaultValue=false)]
        public string SVariableexpenseDescription1 { get; set; }

        /// <summary>
        /// The description of the Variableexpense in English
        /// </summary>
        /// <value>The description of the Variableexpense in English</value>
        [DataMember(Name="sVariableexpenseDescription2", EmitDefaultValue=false)]
        public string SVariableexpenseDescription2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultilingualVariableexpenseDescription {\n");
            sb.Append("  SVariableexpenseDescription1: ").Append(SVariableexpenseDescription1).Append("\n");
            sb.Append("  SVariableexpenseDescription2: ").Append(SVariableexpenseDescription2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultilingualVariableexpenseDescription);
        }

        /// <summary>
        /// Returns true if MultilingualVariableexpenseDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of MultilingualVariableexpenseDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultilingualVariableexpenseDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SVariableexpenseDescription1 == input.SVariableexpenseDescription1 ||
                    (this.SVariableexpenseDescription1 != null &&
                    this.SVariableexpenseDescription1.Equals(input.SVariableexpenseDescription1))
                ) && 
                (
                    this.SVariableexpenseDescription2 == input.SVariableexpenseDescription2 ||
                    (this.SVariableexpenseDescription2 != null &&
                    this.SVariableexpenseDescription2.Equals(input.SVariableexpenseDescription2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SVariableexpenseDescription1 != null)
                    hashCode = hashCode * 59 + this.SVariableexpenseDescription1.GetHashCode();
                if (this.SVariableexpenseDescription2 != null)
                    hashCode = hashCode * 59 + this.SVariableexpenseDescription2.GetHashCode();
                return hashCode;
            }
        }
    }

}
