/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezdoctemplatedocument Object and children
    /// </summary>
    [DataContract(Name = "ezdoctemplatedocument-RequestCompound")]
    public partial class EzdoctemplatedocumentRequestCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzdoctemplatedocumentPrivacylevel
        /// </summary>
        [DataMember(Name = "eEzdoctemplatedocumentPrivacylevel", EmitDefaultValue = false)]
        public FieldEEzdoctemplatedocumentPrivacylevel? EEzdoctemplatedocumentPrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatedocumentRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzdoctemplatedocumentRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatedocumentRequestCompound" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezdoctemplatedocument.</param>
        /// <param name="">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="">The unique ID of the Ezdoctemplatetype (required).</param>
        /// <param name="">The unique ID of the Ezdoctemplatefieldtypecategory (required).</param>
        /// <param name="">.</param>
        /// <param name="">Whether the ezdoctemplatedocument is active or not (required).</param>
        /// <param name=""> (required).</param>
        public EzdoctemplatedocumentRequestCompound(int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), FieldEEzdoctemplatedocumentPrivacylevel?  = default(FieldEEzdoctemplatedocumentPrivacylevel?), bool  = default(bool), MultilingualEzdoctemplatedocumentName  = default(MultilingualEzdoctemplatedocumentName))
        {
            this.FkiLanguageID = ;
            this.FkiEzdoctemplatetypeID = ;
            this.FkiEzdoctemplatefieldtypecategoryID = ;
            this.BEzdoctemplatedocumentIsactive = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzdoctemplatedocumentRequestCompound and cannot be null");
            }
            this.ObjEzdoctemplatedocumentName = ;
            this.PkiEzdoctemplatedocumentID = ;
            this.FkiEzsignfoldertypeID = ;
            this.EEzdoctemplatedocumentPrivacylevel = ;
        }

        /// <summary>
        /// The unique ID of the Ezdoctemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatedocument</value>
        /* <example>95</example>*/
        [DataMember(Name = "pkiEzdoctemplatedocumentID", EmitDefaultValue = false)]
        public int PkiEzdoctemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", EmitDefaultValue = false)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Ezdoctemplatetype
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatetype</value>
        /* <example>7</example>*/
        [DataMember(Name = "fkiEzdoctemplatetypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzdoctemplatetypeID { get; set; }

        /// <summary>
        /// The unique ID of the Ezdoctemplatefieldtypecategory
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatefieldtypecategory</value>
        /* <example>4</example>*/
        [DataMember(Name = "fkiEzdoctemplatefieldtypecategoryID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzdoctemplatefieldtypecategoryID { get; set; }

        /// <summary>
        /// Whether the ezdoctemplatedocument is active or not
        /// </summary>
        /// <value>Whether the ezdoctemplatedocument is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzdoctemplatedocumentIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzdoctemplatedocumentIsactive { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzdoctemplatedocumentName
        /// </summary>
        [DataMember(Name = "objEzdoctemplatedocumentName", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualEzdoctemplatedocumentName ObjEzdoctemplatedocumentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzdoctemplatedocumentRequestCompound {\n");
            sb.Append("  PkiEzdoctemplatedocumentID: ").Append(PkiEzdoctemplatedocumentID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiEzdoctemplatetypeID: ").Append(FkiEzdoctemplatetypeID).Append("\n");
            sb.Append("  FkiEzdoctemplatefieldtypecategoryID: ").Append(FkiEzdoctemplatefieldtypecategoryID).Append("\n");
            sb.Append("  EEzdoctemplatedocumentPrivacylevel: ").Append(EEzdoctemplatedocumentPrivacylevel).Append("\n");
            sb.Append("  BEzdoctemplatedocumentIsactive: ").Append(BEzdoctemplatedocumentIsactive).Append("\n");
            sb.Append("  ObjEzdoctemplatedocumentName: ").Append(ObjEzdoctemplatedocumentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzdoctemplatedocumentID (int) maximum
            if (this.PkiEzdoctemplatedocumentID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzdoctemplatedocumentID, must be a value less than or equal to 65535.", new [] { "PkiEzdoctemplatedocumentID" });
            }

            // PkiEzdoctemplatedocumentID (int) minimum
            if (this.PkiEzdoctemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzdoctemplatedocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzdoctemplatedocumentID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzdoctemplatetypeID (int) maximum
            if (this.FkiEzdoctemplatetypeID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatetypeID, must be a value less than or equal to 255.", new [] { "FkiEzdoctemplatetypeID" });
            }

            // FkiEzdoctemplatetypeID (int) minimum
            if (this.FkiEzdoctemplatetypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatetypeID, must be a value greater than or equal to 0.", new [] { "FkiEzdoctemplatetypeID" });
            }

            // FkiEzdoctemplatefieldtypecategoryID (int) maximum
            if (this.FkiEzdoctemplatefieldtypecategoryID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatefieldtypecategoryID, must be a value less than or equal to 255.", new [] { "FkiEzdoctemplatefieldtypecategoryID" });
            }

            // FkiEzdoctemplatefieldtypecategoryID (int) minimum
            if (this.FkiEzdoctemplatefieldtypecategoryID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatefieldtypecategoryID, must be a value greater than or equal to 0.", new [] { "FkiEzdoctemplatefieldtypecategoryID" });
            }

            yield break;
        }
    }

}
