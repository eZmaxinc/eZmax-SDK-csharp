/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfolder Object
    /// </summary>
    [DataContract(Name = "ezsignfolder-Response")]
    public partial class EzsignfolderResponse : IEquatable<EzsignfolderResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfolderSendreminderfrequency
        /// </summary>
        [DataMember(Name = "eEzsignfolderSendreminderfrequency", EmitDefaultValue = false)]
        public FieldEEzsignfolderSendreminderfrequency? EEzsignfolderSendreminderfrequency { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfolderStep
        /// </summary>
        [DataMember(Name = "eEzsignfolderStep", EmitDefaultValue = false)]
        public FieldEEzsignfolderStep? EEzsignfolderStep { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfolderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="objEzsignfoldertype">objEzsignfoldertype.</param>
        /// <param name="sEzsignfoldertypeNameX">sEzsignfoldertypeNameX.</param>
        /// <param name="fkiBillingentityinternalID">The unique ID of the Billingentityinternal..</param>
        /// <param name="sBillingentityinternalDescriptionX">The description of the Billingentityinternal in the language of the requester.</param>
        /// <param name="fkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="sEzsigntsarequirementDescriptionX">The description of the Ezsigntsarequirement in the language of the requester.</param>
        /// <param name="sEzsignfolderDescription">The description of the Ezsignfolder (required).</param>
        /// <param name="tEzsignfolderNote">Note about the Ezsignfolder.</param>
        /// <param name="bEzsignfolderIsdisposable">If the Ezsigndocument can be disposed.</param>
        /// <param name="eEzsignfolderSendreminderfrequency">eEzsignfolderSendreminderfrequency.</param>
        /// <param name="dtEzsignfolderDelayedsenddate">The date and time at which the Ezsignfolder will be sent in the future..</param>
        /// <param name="dtEzsignfolderDuedate">The maximum date and time at which the Ezsignfolder can be signed..</param>
        /// <param name="dtEzsignfolderSentdate">The date and time at which the Ezsignfolder was sent the last time..</param>
        /// <param name="dtEzsignfolderScheduledarchive">The scheduled date and time at which the Ezsignfolder should be archived..</param>
        /// <param name="dtEzsignfolderScheduleddispose">The scheduled date at which the Ezsignfolder should be Disposed..</param>
        /// <param name="eEzsignfolderStep">eEzsignfolderStep.</param>
        /// <param name="dtEzsignfolderClose">The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely..</param>
        /// <param name="tEzsignfolderMessage">A custom text message that will be added to the email sent..</param>
        /// <param name="objAudit">objAudit.</param>
        /// <param name="sEzsignfolderExternalid">This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. .</param>
        public EzsignfolderResponse(int pkiEzsignfolderID = default(int), int fkiEzsignfoldertypeID = default(int), CustomEzsignfoldertypeResponse objEzsignfoldertype = default(CustomEzsignfoldertypeResponse), string sEzsignfoldertypeNameX = default(string), int fkiBillingentityinternalID = default(int), string sBillingentityinternalDescriptionX = default(string), int fkiEzsigntsarequirementID = default(int), string sEzsigntsarequirementDescriptionX = default(string), string sEzsignfolderDescription = default(string), string tEzsignfolderNote = default(string), bool bEzsignfolderIsdisposable = default(bool), FieldEEzsignfolderSendreminderfrequency? eEzsignfolderSendreminderfrequency = default(FieldEEzsignfolderSendreminderfrequency?), string dtEzsignfolderDelayedsenddate = default(string), string dtEzsignfolderDuedate = default(string), string dtEzsignfolderSentdate = default(string), string dtEzsignfolderScheduledarchive = default(string), string dtEzsignfolderScheduleddispose = default(string), FieldEEzsignfolderStep? eEzsignfolderStep = default(FieldEEzsignfolderStep?), string dtEzsignfolderClose = default(string), string tEzsignfolderMessage = default(string), CommonAudit objAudit = default(CommonAudit), string sEzsignfolderExternalid = default(string))
        {
            this.PkiEzsignfolderID = pkiEzsignfolderID;
            // to ensure "sEzsignfolderDescription" is required (not null)
            if (sEzsignfolderDescription == null)
            {
                throw new ArgumentNullException("sEzsignfolderDescription is a required property for EzsignfolderResponse and cannot be null");
            }
            this.SEzsignfolderDescription = sEzsignfolderDescription;
            this.FkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
            this.ObjEzsignfoldertype = objEzsignfoldertype;
            this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
            this.FkiBillingentityinternalID = fkiBillingentityinternalID;
            this.SBillingentityinternalDescriptionX = sBillingentityinternalDescriptionX;
            this.FkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
            this.SEzsigntsarequirementDescriptionX = sEzsigntsarequirementDescriptionX;
            this.TEzsignfolderNote = tEzsignfolderNote;
            this.BEzsignfolderIsdisposable = bEzsignfolderIsdisposable;
            this.EEzsignfolderSendreminderfrequency = eEzsignfolderSendreminderfrequency;
            this.DtEzsignfolderDelayedsenddate = dtEzsignfolderDelayedsenddate;
            this.DtEzsignfolderDuedate = dtEzsignfolderDuedate;
            this.DtEzsignfolderSentdate = dtEzsignfolderSentdate;
            this.DtEzsignfolderScheduledarchive = dtEzsignfolderScheduledarchive;
            this.DtEzsignfolderScheduleddispose = dtEzsignfolderScheduleddispose;
            this.EEzsignfolderStep = eEzsignfolderStep;
            this.DtEzsignfolderClose = dtEzsignfolderClose;
            this.TEzsignfolderMessage = tEzsignfolderMessage;
            this.ObjAudit = objAudit;
            this.SEzsignfolderExternalid = sEzsignfolderExternalid;
        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "pkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfolderID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", EmitDefaultValue = false)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignfoldertype
        /// </summary>
        [DataMember(Name = "objEzsignfoldertype", EmitDefaultValue = false)]
        public CustomEzsignfoldertypeResponse ObjEzsignfoldertype { get; set; }

        /// <summary>
        /// Gets or Sets SEzsignfoldertypeNameX
        /// </summary>
        [DataMember(Name = "sEzsignfoldertypeNameX", EmitDefaultValue = false)]
        [Obsolete]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// The unique ID of the Billingentityinternal.
        /// </summary>
        /// <value>The unique ID of the Billingentityinternal.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiBillingentityinternalID", EmitDefaultValue = false)]
        public int FkiBillingentityinternalID { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in the language of the requester
        /// </summary>
        /// <value>The description of the Billingentityinternal in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sBillingentityinternalDescriptionX", EmitDefaultValue = false)]
        public string SBillingentityinternalDescriptionX { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiEzsigntsarequirementID", EmitDefaultValue = false)]
        public int FkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// The description of the Ezsigntsarequirement in the language of the requester
        /// </summary>
        /// <value>The description of the Ezsigntsarequirement in the language of the requester</value>
        /* <example>No</example>*/
        [DataMember(Name = "sEzsigntsarequirementDescriptionX", EmitDefaultValue = false)]
        public string SEzsigntsarequirementDescriptionX { get; set; }

        /// <summary>
        /// The description of the Ezsignfolder
        /// </summary>
        /// <value>The description of the Ezsignfolder</value>
        /* <example>Test eZsign Folder</example>*/
        [DataMember(Name = "sEzsignfolderDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfolderDescription { get; set; }

        /// <summary>
        /// Note about the Ezsignfolder
        /// </summary>
        /// <value>Note about the Ezsignfolder</value>
        /* <example>This is a note</example>*/
        [DataMember(Name = "tEzsignfolderNote", EmitDefaultValue = false)]
        public string TEzsignfolderNote { get; set; }

        /// <summary>
        /// If the Ezsigndocument can be disposed
        /// </summary>
        /// <value>If the Ezsigndocument can be disposed</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignfolderIsdisposable", EmitDefaultValue = true)]
        public bool BEzsignfolderIsdisposable { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignfolder will be sent in the future.
        /// </summary>
        /// <value>The date and time at which the Ezsignfolder will be sent in the future.</value>
        /* <example>2020-12-31T23:59:59.000Z</example>*/
        [DataMember(Name = "dtEzsignfolderDelayedsenddate", EmitDefaultValue = false)]
        public string DtEzsignfolderDelayedsenddate { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsignfolder can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsignfolder can be signed.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignfolderDuedate", EmitDefaultValue = false)]
        public string DtEzsignfolderDuedate { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignfolder was sent the last time.
        /// </summary>
        /// <value>The date and time at which the Ezsignfolder was sent the last time.</value>
        /* <example>2020-12-31T23:59:59.000Z</example>*/
        [DataMember(Name = "dtEzsignfolderSentdate", EmitDefaultValue = false)]
        public string DtEzsignfolderSentdate { get; set; }

        /// <summary>
        /// The scheduled date and time at which the Ezsignfolder should be archived.
        /// </summary>
        /// <value>The scheduled date and time at which the Ezsignfolder should be archived.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignfolderScheduledarchive", EmitDefaultValue = false)]
        public string DtEzsignfolderScheduledarchive { get; set; }

        /// <summary>
        /// The scheduled date at which the Ezsignfolder should be Disposed.
        /// </summary>
        /// <value>The scheduled date at which the Ezsignfolder should be Disposed.</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtEzsignfolderScheduleddispose", EmitDefaultValue = false)]
        public string DtEzsignfolderScheduleddispose { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.
        /// </summary>
        /// <value>The date and time at which the Ezsignfolder was closed. Either by applying the last signature or by completing it prematurely.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsignfolderClose", EmitDefaultValue = false)]
        public string DtEzsignfolderClose { get; set; }

        /// <summary>
        /// A custom text message that will be added to the email sent.
        /// </summary>
        /// <value>A custom text message that will be added to the email sent.</value>
        /* <example>Hi everyone,

This is the document I need you to review.

Could you sign it before Monday please.

Best Regards.

Mary</example>*/
        [DataMember(Name = "tEzsignfolderMessage", EmitDefaultValue = false)]
        public string TEzsignfolderMessage { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", EmitDefaultValue = false)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. 
        /// </summary>
        /// <value>This field can be used to store an External ID from the client&#39;s system.  Anything can be stored in this field, it will never be evaluated by the eZmax system and will be returned AS-IS.  To store multiple values, consider using a JSON formatted structure, a URL encoded string, a CSV or any other custom format. </value>
        /* <example>{&quot;ID&quot;: 1234, &quot;TAGS&quot;: [&quot;tag1&quot;, &quot;tag2&quot;, &quot;tag3&quot;]}</example>*/
        [DataMember(Name = "sEzsignfolderExternalid", EmitDefaultValue = false)]
        public string SEzsignfolderExternalid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfolderResponse {\n");
            sb.Append("  PkiEzsignfolderID: ").Append(PkiEzsignfolderID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  ObjEzsignfoldertype: ").Append(ObjEzsignfoldertype).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  FkiBillingentityinternalID: ").Append(FkiBillingentityinternalID).Append("\n");
            sb.Append("  SBillingentityinternalDescriptionX: ").Append(SBillingentityinternalDescriptionX).Append("\n");
            sb.Append("  FkiEzsigntsarequirementID: ").Append(FkiEzsigntsarequirementID).Append("\n");
            sb.Append("  SEzsigntsarequirementDescriptionX: ").Append(SEzsigntsarequirementDescriptionX).Append("\n");
            sb.Append("  SEzsignfolderDescription: ").Append(SEzsignfolderDescription).Append("\n");
            sb.Append("  TEzsignfolderNote: ").Append(TEzsignfolderNote).Append("\n");
            sb.Append("  BEzsignfolderIsdisposable: ").Append(BEzsignfolderIsdisposable).Append("\n");
            sb.Append("  EEzsignfolderSendreminderfrequency: ").Append(EEzsignfolderSendreminderfrequency).Append("\n");
            sb.Append("  DtEzsignfolderDelayedsenddate: ").Append(DtEzsignfolderDelayedsenddate).Append("\n");
            sb.Append("  DtEzsignfolderDuedate: ").Append(DtEzsignfolderDuedate).Append("\n");
            sb.Append("  DtEzsignfolderSentdate: ").Append(DtEzsignfolderSentdate).Append("\n");
            sb.Append("  DtEzsignfolderScheduledarchive: ").Append(DtEzsignfolderScheduledarchive).Append("\n");
            sb.Append("  DtEzsignfolderScheduleddispose: ").Append(DtEzsignfolderScheduleddispose).Append("\n");
            sb.Append("  EEzsignfolderStep: ").Append(EEzsignfolderStep).Append("\n");
            sb.Append("  DtEzsignfolderClose: ").Append(DtEzsignfolderClose).Append("\n");
            sb.Append("  TEzsignfolderMessage: ").Append(TEzsignfolderMessage).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  SEzsignfolderExternalid: ").Append(SEzsignfolderExternalid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfolderResponse);
        }

        /// <summary>
        /// Returns true if EzsignfolderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfolderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfolderResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsignfolderID == input.PkiEzsignfolderID ||
                    this.PkiEzsignfolderID.Equals(input.PkiEzsignfolderID)
                ) && 
                (
                    this.FkiEzsignfoldertypeID == input.FkiEzsignfoldertypeID ||
                    this.FkiEzsignfoldertypeID.Equals(input.FkiEzsignfoldertypeID)
                ) && 
                (
                    this.ObjEzsignfoldertype == input.ObjEzsignfoldertype ||
                    (this.ObjEzsignfoldertype != null &&
                    this.ObjEzsignfoldertype.Equals(input.ObjEzsignfoldertype))
                ) && 
                (
                    this.SEzsignfoldertypeNameX == input.SEzsignfoldertypeNameX ||
                    (this.SEzsignfoldertypeNameX != null &&
                    this.SEzsignfoldertypeNameX.Equals(input.SEzsignfoldertypeNameX))
                ) && 
                (
                    this.FkiBillingentityinternalID == input.FkiBillingentityinternalID ||
                    this.FkiBillingentityinternalID.Equals(input.FkiBillingentityinternalID)
                ) && 
                (
                    this.SBillingentityinternalDescriptionX == input.SBillingentityinternalDescriptionX ||
                    (this.SBillingentityinternalDescriptionX != null &&
                    this.SBillingentityinternalDescriptionX.Equals(input.SBillingentityinternalDescriptionX))
                ) && 
                (
                    this.FkiEzsigntsarequirementID == input.FkiEzsigntsarequirementID ||
                    this.FkiEzsigntsarequirementID.Equals(input.FkiEzsigntsarequirementID)
                ) && 
                (
                    this.SEzsigntsarequirementDescriptionX == input.SEzsigntsarequirementDescriptionX ||
                    (this.SEzsigntsarequirementDescriptionX != null &&
                    this.SEzsigntsarequirementDescriptionX.Equals(input.SEzsigntsarequirementDescriptionX))
                ) && 
                (
                    this.SEzsignfolderDescription == input.SEzsignfolderDescription ||
                    (this.SEzsignfolderDescription != null &&
                    this.SEzsignfolderDescription.Equals(input.SEzsignfolderDescription))
                ) && 
                (
                    this.TEzsignfolderNote == input.TEzsignfolderNote ||
                    (this.TEzsignfolderNote != null &&
                    this.TEzsignfolderNote.Equals(input.TEzsignfolderNote))
                ) && 
                (
                    this.BEzsignfolderIsdisposable == input.BEzsignfolderIsdisposable ||
                    this.BEzsignfolderIsdisposable.Equals(input.BEzsignfolderIsdisposable)
                ) && 
                (
                    this.EEzsignfolderSendreminderfrequency == input.EEzsignfolderSendreminderfrequency ||
                    this.EEzsignfolderSendreminderfrequency.Equals(input.EEzsignfolderSendreminderfrequency)
                ) && 
                (
                    this.DtEzsignfolderDelayedsenddate == input.DtEzsignfolderDelayedsenddate ||
                    (this.DtEzsignfolderDelayedsenddate != null &&
                    this.DtEzsignfolderDelayedsenddate.Equals(input.DtEzsignfolderDelayedsenddate))
                ) && 
                (
                    this.DtEzsignfolderDuedate == input.DtEzsignfolderDuedate ||
                    (this.DtEzsignfolderDuedate != null &&
                    this.DtEzsignfolderDuedate.Equals(input.DtEzsignfolderDuedate))
                ) && 
                (
                    this.DtEzsignfolderSentdate == input.DtEzsignfolderSentdate ||
                    (this.DtEzsignfolderSentdate != null &&
                    this.DtEzsignfolderSentdate.Equals(input.DtEzsignfolderSentdate))
                ) && 
                (
                    this.DtEzsignfolderScheduledarchive == input.DtEzsignfolderScheduledarchive ||
                    (this.DtEzsignfolderScheduledarchive != null &&
                    this.DtEzsignfolderScheduledarchive.Equals(input.DtEzsignfolderScheduledarchive))
                ) && 
                (
                    this.DtEzsignfolderScheduleddispose == input.DtEzsignfolderScheduleddispose ||
                    (this.DtEzsignfolderScheduleddispose != null &&
                    this.DtEzsignfolderScheduleddispose.Equals(input.DtEzsignfolderScheduleddispose))
                ) && 
                (
                    this.EEzsignfolderStep == input.EEzsignfolderStep ||
                    this.EEzsignfolderStep.Equals(input.EEzsignfolderStep)
                ) && 
                (
                    this.DtEzsignfolderClose == input.DtEzsignfolderClose ||
                    (this.DtEzsignfolderClose != null &&
                    this.DtEzsignfolderClose.Equals(input.DtEzsignfolderClose))
                ) && 
                (
                    this.TEzsignfolderMessage == input.TEzsignfolderMessage ||
                    (this.TEzsignfolderMessage != null &&
                    this.TEzsignfolderMessage.Equals(input.TEzsignfolderMessage))
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                ) && 
                (
                    this.SEzsignfolderExternalid == input.SEzsignfolderExternalid ||
                    (this.SEzsignfolderExternalid != null &&
                    this.SEzsignfolderExternalid.Equals(input.SEzsignfolderExternalid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsignfolderID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfoldertypeID.GetHashCode();
                if (this.ObjEzsignfoldertype != null)
                {
                    hashCode = (hashCode * 59) + this.ObjEzsignfoldertype.GetHashCode();
                }
                if (this.SEzsignfoldertypeNameX != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfoldertypeNameX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiBillingentityinternalID.GetHashCode();
                if (this.SBillingentityinternalDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SBillingentityinternalDescriptionX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiEzsigntsarequirementID.GetHashCode();
                if (this.SEzsigntsarequirementDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntsarequirementDescriptionX.GetHashCode();
                }
                if (this.SEzsignfolderDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfolderDescription.GetHashCode();
                }
                if (this.TEzsignfolderNote != null)
                {
                    hashCode = (hashCode * 59) + this.TEzsignfolderNote.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzsignfolderIsdisposable.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsignfolderSendreminderfrequency.GetHashCode();
                if (this.DtEzsignfolderDelayedsenddate != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignfolderDelayedsenddate.GetHashCode();
                }
                if (this.DtEzsignfolderDuedate != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignfolderDuedate.GetHashCode();
                }
                if (this.DtEzsignfolderSentdate != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignfolderSentdate.GetHashCode();
                }
                if (this.DtEzsignfolderScheduledarchive != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignfolderScheduledarchive.GetHashCode();
                }
                if (this.DtEzsignfolderScheduleddispose != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignfolderScheduleddispose.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsignfolderStep.GetHashCode();
                if (this.DtEzsignfolderClose != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzsignfolderClose.GetHashCode();
                }
                if (this.TEzsignfolderMessage != null)
                {
                    hashCode = (hashCode * 59) + this.TEzsignfolderMessage.GetHashCode();
                }
                if (this.ObjAudit != null)
                {
                    hashCode = (hashCode * 59) + this.ObjAudit.GetHashCode();
                }
                if (this.SEzsignfolderExternalid != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfolderExternalid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfolderID (int) minimum
            if (this.PkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfolderID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiBillingentityinternalID (int) minimum
            if (this.FkiBillingentityinternalID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBillingentityinternalID, must be a value greater than or equal to 0.", new [] { "FkiBillingentityinternalID" });
            }

            // FkiEzsigntsarequirementID (int) maximum
            if (this.FkiEzsigntsarequirementID > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiEzsigntsarequirementID (int) minimum
            if (this.FkiEzsigntsarequirementID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "FkiEzsigntsarequirementID" });
            }

            if (this.SEzsignfolderExternalid != null) {
                // SEzsignfolderExternalid (string) pattern
                Regex regexSEzsignfolderExternalid = new Regex(@"^.{0,64}$", RegexOptions.CultureInvariant);
                if (!regexSEzsignfolderExternalid.Match(this.SEzsignfolderExternalid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignfolderExternalid, must match a pattern of " + regexSEzsignfolderExternalid, new [] { "SEzsignfolderExternalid" });
                }
            }

            yield break;
        }
    }

}
