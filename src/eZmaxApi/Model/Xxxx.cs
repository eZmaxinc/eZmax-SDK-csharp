/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Test
    /// </summary>
    [DataContract]
    public partial class Xxxx :  IEquatable<Xxxx>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Xxxx" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Xxxx() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Xxxx" /> class.
        /// </summary>
        /// <param name="foo">foo (required).</param>
        /// <param name="bar">bar (required).</param>
        public Xxxx(int foo = default(int), int bar = default(int))
        {
            // to ensure "foo" is required (not null)
            if (foo == null)
            {
                throw new InvalidDataException("foo is a required property for Xxxx and cannot be null");
            }
            else
            {
                this.Foo = foo;
            }

            // to ensure "bar" is required (not null)
            if (bar == null)
            {
                throw new InvalidDataException("bar is a required property for Xxxx and cannot be null");
            }
            else
            {
                this.Bar = bar;
            }

        }

        /// <summary>
        /// Gets or Sets Foo
        /// </summary>
        [DataMember(Name="foo", EmitDefaultValue=true)]
        public int Foo { get; set; }

        /// <summary>
        /// Gets or Sets Bar
        /// </summary>
        [DataMember(Name="bar", EmitDefaultValue=true)]
        public int Bar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Xxxx {\n");
            sb.Append("  Foo: ").Append(Foo).Append("\n");
            sb.Append("  Bar: ").Append(Bar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Xxxx);
        }

        /// <summary>
        /// Returns true if Xxxx instances are equal
        /// </summary>
        /// <param name="input">Instance of Xxxx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Xxxx input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Foo == input.Foo ||
                    (this.Foo != null &&
                    this.Foo.Equals(input.Foo))
                ) && 
                (
                    this.Bar == input.Bar ||
                    (this.Bar != null &&
                    this.Bar.Equals(input.Bar))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Foo != null)
                    hashCode = hashCode * 59 + this.Foo.GetHashCode();
                if (this.Bar != null)
                    hashCode = hashCode * 59 + this.Bar.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
