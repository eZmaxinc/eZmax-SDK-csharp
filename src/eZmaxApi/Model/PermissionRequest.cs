/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Permission Object
    /// </summary>
    [DataContract(Name = "permission-Request")]
    public partial class PermissionRequest : IEquatable<PermissionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PermissionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionRequest" /> class.
        /// </summary>
        /// <param name="pkiPermissionID">The unique ID of the Permission.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey.</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup.</param>
        /// <param name="fkiCompanyID">The unique ID of the Company.</param>
        /// <param name="fkiModulesectionID">The unique ID of the Modulesection (required).</param>
        public PermissionRequest(int pkiPermissionID = default(int), int fkiUserID = default(int), int fkiApikeyID = default(int), int fkiUsergroupID = default(int), int fkiCompanyID = default(int), int fkiModulesectionID = default(int))
        {
            this.FkiModulesectionID = fkiModulesectionID;
            this.PkiPermissionID = pkiPermissionID;
            this.FkiUserID = fkiUserID;
            this.FkiApikeyID = fkiApikeyID;
            this.FkiUsergroupID = fkiUsergroupID;
            this.FkiCompanyID = fkiCompanyID;
        }

        /// <summary>
        /// The unique ID of the Permission
        /// </summary>
        /// <value>The unique ID of the Permission</value>
        </example> }}
		/* <example>31</example>*/
        [DataMember(Name = "pkiPermissionID", EmitDefaultValue = false)]
        public int PkiPermissionID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        </example> }}
		/* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        </example> }}
		/* <example>99</example>*/
        [DataMember(Name = "fkiApikeyID", EmitDefaultValue = false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        </example> }}
		/* <example>2</example>*/
        [DataMember(Name = "fkiUsergroupID", EmitDefaultValue = false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        </example> }}
		/* <example>1</example>*/
        [DataMember(Name = "fkiCompanyID", EmitDefaultValue = false)]
        public int FkiCompanyID { get; set; }

        /// <summary>
        /// The unique ID of the Modulesection
        /// </summary>
        /// <value>The unique ID of the Modulesection</value>
        </example> }}
		/* <example>53</example>*/
        [DataMember(Name = "fkiModulesectionID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiModulesectionID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermissionRequest {\n");
            sb.Append("  PkiPermissionID: ").Append(PkiPermissionID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiCompanyID: ").Append(FkiCompanyID).Append("\n");
            sb.Append("  FkiModulesectionID: ").Append(FkiModulesectionID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionRequest);
        }

        /// <summary>
        /// Returns true if PermissionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiPermissionID == input.PkiPermissionID ||
                    this.PkiPermissionID.Equals(input.PkiPermissionID)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.FkiApikeyID == input.FkiApikeyID ||
                    this.FkiApikeyID.Equals(input.FkiApikeyID)
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID)
                ) && 
                (
                    this.FkiCompanyID == input.FkiCompanyID ||
                    this.FkiCompanyID.Equals(input.FkiCompanyID)
                ) && 
                (
                    this.FkiModulesectionID == input.FkiModulesectionID ||
                    this.FkiModulesectionID.Equals(input.FkiModulesectionID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiPermissionID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiApikeyID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUsergroupID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiCompanyID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiModulesectionID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiPermissionID (int) maximum
            if (this.PkiPermissionID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPermissionID, must be a value less than or equal to 65535.", new [] { "PkiPermissionID" });
            }

            // PkiPermissionID (int) minimum
            if (this.PkiPermissionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPermissionID, must be a value greater than or equal to 0.", new [] { "PkiPermissionID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiApikeyID (int) minimum
            if (this.FkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiApikeyID, must be a value greater than or equal to 0.", new [] { "FkiApikeyID" });
            }

            // FkiUsergroupID (int) maximum
            if (this.FkiUsergroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value less than or equal to 255.", new [] { "FkiUsergroupID" });
            }

            // FkiUsergroupID (int) minimum
            if (this.FkiUsergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value greater than or equal to 0.", new [] { "FkiUsergroupID" });
            }

            // FkiCompanyID (int) maximum
            if (this.FkiCompanyID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyID, must be a value less than or equal to 255.", new [] { "FkiCompanyID" });
            }

            // FkiCompanyID (int) minimum
            if (this.FkiCompanyID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyID, must be a value greater than or equal to 1.", new [] { "FkiCompanyID" });
            }

            // FkiModulesectionID (int) minimum
            if (this.FkiModulesectionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModulesectionID, must be a value greater than or equal to 0.", new [] { "FkiModulesectionID" });
            }

            yield break;
        }
    }

}
