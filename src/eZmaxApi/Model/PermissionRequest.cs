/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Permission Object
    /// </summary>
    [DataContract]
    public partial class PermissionRequest :  IEquatable<PermissionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PermissionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionRequest" /> class.
        /// </summary>
        /// <param name="pkiPermissionID">The unique ID of the Permission.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey.</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup.</param>
        /// <param name="fkiCompanyID">The unique ID of the Company.</param>
        /// <param name="fkiModulesectionID">The unique ID of the Modulesection (required).</param>
        public PermissionRequest(int pkiPermissionID = default(int), int fkiUserID = default(int), int fkiApikeyID = default(int), int fkiUsergroupID = default(int), int fkiCompanyID = default(int), int fkiModulesectionID = default(int))
        {
            // to ensure "fkiModulesectionID" is required (not null)
            if (fkiModulesectionID == null)
            {
                throw new InvalidDataException("fkiModulesectionID is a required property for PermissionRequest and cannot be null");
            }
            else
            {
                this.FkiModulesectionID = fkiModulesectionID;
            }

            this.PkiPermissionID = pkiPermissionID;
            this.FkiUserID = fkiUserID;
            this.FkiApikeyID = fkiApikeyID;
            this.FkiUsergroupID = fkiUsergroupID;
            this.FkiCompanyID = fkiCompanyID;
        }

        /// <summary>
        /// The unique ID of the Permission
        /// </summary>
        /// <value>The unique ID of the Permission</value>
        [DataMember(Name="pkiPermissionID", EmitDefaultValue=false)]
        public int PkiPermissionID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        [DataMember(Name="fkiApikeyID", EmitDefaultValue=false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        [DataMember(Name="fkiUsergroupID", EmitDefaultValue=false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        [DataMember(Name="fkiCompanyID", EmitDefaultValue=false)]
        public int FkiCompanyID { get; set; }

        /// <summary>
        /// The unique ID of the Modulesection
        /// </summary>
        /// <value>The unique ID of the Modulesection</value>
        [DataMember(Name="fkiModulesectionID", EmitDefaultValue=true)]
        public int FkiModulesectionID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionRequest {\n");
            sb.Append("  PkiPermissionID: ").Append(PkiPermissionID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiCompanyID: ").Append(FkiCompanyID).Append("\n");
            sb.Append("  FkiModulesectionID: ").Append(FkiModulesectionID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionRequest);
        }

        /// <summary>
        /// Returns true if PermissionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiPermissionID == input.PkiPermissionID ||
                    (this.PkiPermissionID != null &&
                    this.PkiPermissionID.Equals(input.PkiPermissionID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.FkiApikeyID == input.FkiApikeyID ||
                    (this.FkiApikeyID != null &&
                    this.FkiApikeyID.Equals(input.FkiApikeyID))
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    (this.FkiUsergroupID != null &&
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID))
                ) && 
                (
                    this.FkiCompanyID == input.FkiCompanyID ||
                    (this.FkiCompanyID != null &&
                    this.FkiCompanyID.Equals(input.FkiCompanyID))
                ) && 
                (
                    this.FkiModulesectionID == input.FkiModulesectionID ||
                    (this.FkiModulesectionID != null &&
                    this.FkiModulesectionID.Equals(input.FkiModulesectionID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiPermissionID != null)
                    hashCode = hashCode * 59 + this.PkiPermissionID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.FkiApikeyID != null)
                    hashCode = hashCode * 59 + this.FkiApikeyID.GetHashCode();
                if (this.FkiUsergroupID != null)
                    hashCode = hashCode * 59 + this.FkiUsergroupID.GetHashCode();
                if (this.FkiCompanyID != null)
                    hashCode = hashCode * 59 + this.FkiCompanyID.GetHashCode();
                if (this.FkiModulesectionID != null)
                    hashCode = hashCode * 59 + this.FkiModulesectionID.GetHashCode();
                return hashCode;
            }
        }
    }

}
