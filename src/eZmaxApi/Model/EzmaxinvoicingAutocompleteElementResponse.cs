/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxinvoicing AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class EzmaxinvoicingAutocompleteElementResponse :  IEquatable<EzmaxinvoicingAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxinvoicingAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="yyyymmEzmaxinvoicing">The YYYYMM period of the Ezmaxinvoicing (required).</param>
        /// <param name="pkiEzmaxinvoicingID">The unique ID of the Ezmaxinvoicing (required).</param>
        /// <param name="bEzmaxinvoicingIsactive">Whether the Ezmaxinvoicing is active or not (required).</param>
        public EzmaxinvoicingAutocompleteElementResponse(string yyyymmEzmaxinvoicing = default(string), int pkiEzmaxinvoicingID = default(int), bool bEzmaxinvoicingIsactive = default(bool))
        {
            // to ensure "yyyymmEzmaxinvoicing" is required (not null)
            if (yyyymmEzmaxinvoicing == null)
            {
                throw new InvalidDataException("yyyymmEzmaxinvoicing is a required property for EzmaxinvoicingAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.YyyymmEzmaxinvoicing = yyyymmEzmaxinvoicing;
            }

            // to ensure "pkiEzmaxinvoicingID" is required (not null)
            if (pkiEzmaxinvoicingID == null)
            {
                throw new InvalidDataException("pkiEzmaxinvoicingID is a required property for EzmaxinvoicingAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiEzmaxinvoicingID = pkiEzmaxinvoicingID;
            }

            // to ensure "bEzmaxinvoicingIsactive" is required (not null)
            if (bEzmaxinvoicingIsactive == null)
            {
                throw new InvalidDataException("bEzmaxinvoicingIsactive is a required property for EzmaxinvoicingAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BEzmaxinvoicingIsactive = bEzmaxinvoicingIsactive;
            }

        }

        /// <summary>
        /// The YYYYMM period of the Ezmaxinvoicing
        /// </summary>
        /// <value>The YYYYMM period of the Ezmaxinvoicing</value>
        [DataMember(Name="yyyymmEzmaxinvoicing", EmitDefaultValue=true)]
        public string YyyymmEzmaxinvoicing { get; set; }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicing
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicing</value>
        [DataMember(Name="pkiEzmaxinvoicingID", EmitDefaultValue=true)]
        public int PkiEzmaxinvoicingID { get; set; }

        /// <summary>
        /// Whether the Ezmaxinvoicing is active or not
        /// </summary>
        /// <value>Whether the Ezmaxinvoicing is active or not</value>
        [DataMember(Name="bEzmaxinvoicingIsactive", EmitDefaultValue=true)]
        public bool BEzmaxinvoicingIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzmaxinvoicingAutocompleteElementResponse {\n");
            sb.Append("  YyyymmEzmaxinvoicing: ").Append(YyyymmEzmaxinvoicing).Append("\n");
            sb.Append("  PkiEzmaxinvoicingID: ").Append(PkiEzmaxinvoicingID).Append("\n");
            sb.Append("  BEzmaxinvoicingIsactive: ").Append(BEzmaxinvoicingIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzmaxinvoicingAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if EzmaxinvoicingAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzmaxinvoicingAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzmaxinvoicingAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.YyyymmEzmaxinvoicing == input.YyyymmEzmaxinvoicing ||
                    (this.YyyymmEzmaxinvoicing != null &&
                    this.YyyymmEzmaxinvoicing.Equals(input.YyyymmEzmaxinvoicing))
                ) && 
                (
                    this.PkiEzmaxinvoicingID == input.PkiEzmaxinvoicingID ||
                    (this.PkiEzmaxinvoicingID != null &&
                    this.PkiEzmaxinvoicingID.Equals(input.PkiEzmaxinvoicingID))
                ) && 
                (
                    this.BEzmaxinvoicingIsactive == input.BEzmaxinvoicingIsactive ||
                    (this.BEzmaxinvoicingIsactive != null &&
                    this.BEzmaxinvoicingIsactive.Equals(input.BEzmaxinvoicingIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.YyyymmEzmaxinvoicing != null)
                    hashCode = hashCode * 59 + this.YyyymmEzmaxinvoicing.GetHashCode();
                if (this.PkiEzmaxinvoicingID != null)
                    hashCode = hashCode * 59 + this.PkiEzmaxinvoicingID.GetHashCode();
                if (this.BEzmaxinvoicingIsactive != null)
                    hashCode = hashCode * 59 + this.BEzmaxinvoicingIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // YyyymmEzmaxinvoicing (string) maxLength
            if(this.YyyymmEzmaxinvoicing != null && this.YyyymmEzmaxinvoicing.Length > 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YyyymmEzmaxinvoicing, length must be less than 7.", new [] { "YyyymmEzmaxinvoicing" });
            }




            // PkiEzmaxinvoicingID (int) minimum
            if(this.PkiEzmaxinvoicingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzmaxinvoicingID, must be a value greater than or equal to 0.", new [] { "PkiEzmaxinvoicingID" });
            }

            yield break;
        }
    }

}
