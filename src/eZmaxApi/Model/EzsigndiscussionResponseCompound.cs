/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigndiscussion Object
    /// </summary>
    [DataContract(Name = "ezsigndiscussion-ResponseCompound")]
    public partial class EzsigndiscussionResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndiscussionResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigndiscussionResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigndiscussionResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsigndiscussionID">The unique ID of the Ezsigndiscussion (required).</param>
        /// <param name="fkiEzsignpageID">The unique ID of the Ezsignpage (required).</param>
        /// <param name="fkiDiscussionID">The unique ID of the Discussion (required).</param>
        /// <param name="iEzsigndiscussionX">The x of the Ezsigndiscussion (required).</param>
        /// <param name="iEzsigndiscussionY">The y of the Ezsigndiscussion (required).</param>
        /// <param name="iEzsigndiscussionPagenumber">The page number in the Ezsigndocument for the Ezsigndiscussion (required).</param>
        /// <param name="objDiscussion">objDiscussion (required).</param>
        public EzsigndiscussionResponseCompound(int pkiEzsigndiscussionID = default(int), int fkiEzsignpageID = default(int), int fkiDiscussionID = default(int), int iEzsigndiscussionX = default(int), int iEzsigndiscussionY = default(int), int iEzsigndiscussionPagenumber = default(int), DiscussionResponseCompound objDiscussion = default(DiscussionResponseCompound))
        {
            this.PkiEzsigndiscussionID = pkiEzsigndiscussionID;
            this.FkiEzsignpageID = fkiEzsignpageID;
            this.FkiDiscussionID = fkiDiscussionID;
            this.IEzsigndiscussionX = iEzsigndiscussionX;
            this.IEzsigndiscussionY = iEzsigndiscussionY;
            this.IEzsigndiscussionPagenumber = iEzsigndiscussionPagenumber;
            // to ensure "objDiscussion" is required (not null)
            if (objDiscussion == null)
            {
                throw new ArgumentNullException("objDiscussion is a required property for EzsigndiscussionResponseCompound and cannot be null");
            }
            this.ObjDiscussion = objDiscussion;
        }

        /// <summary>
        /// The unique ID of the Ezsigndiscussion
        /// </summary>
        /// <value>The unique ID of the Ezsigndiscussion</value>
        /* <example>194</example>*/
        [DataMember(Name = "pkiEzsigndiscussionID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigndiscussionID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignpage
        /// </summary>
        /// <value>The unique ID of the Ezsignpage</value>
        /* <example>64</example>*/
        [DataMember(Name = "fkiEzsignpageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignpageID { get; set; }

        /// <summary>
        /// The unique ID of the Discussion
        /// </summary>
        /// <value>The unique ID of the Discussion</value>
        /* <example>125</example>*/
        [DataMember(Name = "fkiDiscussionID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiDiscussionID { get; set; }

        /// <summary>
        /// The x of the Ezsigndiscussion
        /// </summary>
        /// <value>The x of the Ezsigndiscussion</value>
        /* <example>57208</example>*/
        [DataMember(Name = "iEzsigndiscussionX", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndiscussionX { get; set; }

        /// <summary>
        /// The y of the Ezsigndiscussion
        /// </summary>
        /// <value>The y of the Ezsigndiscussion</value>
        /* <example>57652</example>*/
        [DataMember(Name = "iEzsigndiscussionY", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndiscussionY { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument for the Ezsigndiscussion
        /// </summary>
        /// <value>The page number in the Ezsigndocument for the Ezsigndiscussion</value>
        /* <example>4</example>*/
        [DataMember(Name = "iEzsigndiscussionPagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigndiscussionPagenumber { get; set; }

        /// <summary>
        /// Gets or Sets ObjDiscussion
        /// </summary>
        [DataMember(Name = "objDiscussion", IsRequired = true, EmitDefaultValue = true)]
        public DiscussionResponseCompound ObjDiscussion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigndiscussionResponseCompound {\n");
            sb.Append("  PkiEzsigndiscussionID: ").Append(PkiEzsigndiscussionID).Append("\n");
            sb.Append("  FkiEzsignpageID: ").Append(FkiEzsignpageID).Append("\n");
            sb.Append("  FkiDiscussionID: ").Append(FkiDiscussionID).Append("\n");
            sb.Append("  IEzsigndiscussionX: ").Append(IEzsigndiscussionX).Append("\n");
            sb.Append("  IEzsigndiscussionY: ").Append(IEzsigndiscussionY).Append("\n");
            sb.Append("  IEzsigndiscussionPagenumber: ").Append(IEzsigndiscussionPagenumber).Append("\n");
            sb.Append("  ObjDiscussion: ").Append(ObjDiscussion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigndiscussionID (int) maximum
            if (this.PkiEzsigndiscussionID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigndiscussionID, must be a value less than or equal to 16777215.", new [] { "PkiEzsigndiscussionID" });
            }

            // PkiEzsigndiscussionID (int) minimum
            if (this.PkiEzsigndiscussionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigndiscussionID, must be a value greater than or equal to 0.", new [] { "PkiEzsigndiscussionID" });
            }

            // FkiEzsignpageID (int) minimum
            if (this.FkiEzsignpageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignpageID, must be a value greater than or equal to 0.", new [] { "FkiEzsignpageID" });
            }

            // FkiDiscussionID (int) maximum
            if (this.FkiDiscussionID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiDiscussionID, must be a value less than or equal to 16777215.", new [] { "FkiDiscussionID" });
            }

            // FkiDiscussionID (int) minimum
            if (this.FkiDiscussionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiDiscussionID, must be a value greater than or equal to 0.", new [] { "FkiDiscussionID" });
            }

            // IEzsigndiscussionX (int) maximum
            if (this.IEzsigndiscussionX > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndiscussionX, must be a value less than or equal to 65535.", new [] { "IEzsigndiscussionX" });
            }

            // IEzsigndiscussionX (int) minimum
            if (this.IEzsigndiscussionX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndiscussionX, must be a value greater than or equal to 0.", new [] { "IEzsigndiscussionX" });
            }

            // IEzsigndiscussionY (int) maximum
            if (this.IEzsigndiscussionY > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndiscussionY, must be a value less than or equal to 65535.", new [] { "IEzsigndiscussionY" });
            }

            // IEzsigndiscussionY (int) minimum
            if (this.IEzsigndiscussionY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigndiscussionY, must be a value greater than or equal to 0.", new [] { "IEzsigndiscussionY" });
            }

            yield break;
        }
    }

}
