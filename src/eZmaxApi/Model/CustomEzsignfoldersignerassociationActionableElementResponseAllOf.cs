/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// CustomEzsignfoldersignerassociationActionableElementResponseAllOf
    /// </summary>
    [DataContract]
    public partial class CustomEzsignfoldersignerassociationActionableElementResponseAllOf :  IEquatable<CustomEzsignfoldersignerassociationActionableElementResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationActionableElementResponseAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignfoldersignerassociationActionableElementResponseAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationActionableElementResponseAllOf" /> class.
        /// </summary>
        /// <param name="bEzsignfoldersignerassociationHasactionableelementsCurrent">Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step (required).</param>
        /// <param name="bEzsignfoldersignerassociationHasactionableelementsFuture">Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step.</param>
        public CustomEzsignfoldersignerassociationActionableElementResponseAllOf(bool bEzsignfoldersignerassociationHasactionableelementsCurrent = default(bool), bool bEzsignfoldersignerassociationHasactionableelementsFuture = default(bool))
        {
            // to ensure "bEzsignfoldersignerassociationHasactionableelementsCurrent" is required (not null)
            if (bEzsignfoldersignerassociationHasactionableelementsCurrent == null)
            {
                throw new InvalidDataException("bEzsignfoldersignerassociationHasactionableelementsCurrent is a required property for CustomEzsignfoldersignerassociationActionableElementResponseAllOf and cannot be null");
            }
            else
            {
                this.BEzsignfoldersignerassociationHasactionableelementsCurrent = bEzsignfoldersignerassociationHasactionableelementsCurrent;
            }

            this.BEzsignfoldersignerassociationHasactionableelementsFuture = bEzsignfoldersignerassociationHasactionableelementsFuture;
        }

        /// <summary>
        /// Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step
        /// </summary>
        /// <value>Indicates if the Ezsignfoldersignerassociation has actionable elements in the current step</value>
        [DataMember(Name="bEzsignfoldersignerassociationHasactionableelementsCurrent", EmitDefaultValue=true)]
        public bool BEzsignfoldersignerassociationHasactionableelementsCurrent { get; set; }

        /// <summary>
        /// Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step
        /// </summary>
        /// <value>Indicates if the Ezsignfoldersignerassociation has actionable elements in a future step</value>
        [DataMember(Name="bEzsignfoldersignerassociationHasactionableelementsFuture", EmitDefaultValue=false)]
        public bool BEzsignfoldersignerassociationHasactionableelementsFuture { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomEzsignfoldersignerassociationActionableElementResponseAllOf {\n");
            sb.Append("  BEzsignfoldersignerassociationHasactionableelementsCurrent: ").Append(BEzsignfoldersignerassociationHasactionableelementsCurrent).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationHasactionableelementsFuture: ").Append(BEzsignfoldersignerassociationHasactionableelementsFuture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignfoldersignerassociationActionableElementResponseAllOf);
        }

        /// <summary>
        /// Returns true if CustomEzsignfoldersignerassociationActionableElementResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignfoldersignerassociationActionableElementResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignfoldersignerassociationActionableElementResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BEzsignfoldersignerassociationHasactionableelementsCurrent == input.BEzsignfoldersignerassociationHasactionableelementsCurrent ||
                    (this.BEzsignfoldersignerassociationHasactionableelementsCurrent != null &&
                    this.BEzsignfoldersignerassociationHasactionableelementsCurrent.Equals(input.BEzsignfoldersignerassociationHasactionableelementsCurrent))
                ) && 
                (
                    this.BEzsignfoldersignerassociationHasactionableelementsFuture == input.BEzsignfoldersignerassociationHasactionableelementsFuture ||
                    (this.BEzsignfoldersignerassociationHasactionableelementsFuture != null &&
                    this.BEzsignfoldersignerassociationHasactionableelementsFuture.Equals(input.BEzsignfoldersignerassociationHasactionableelementsFuture))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BEzsignfoldersignerassociationHasactionableelementsCurrent != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldersignerassociationHasactionableelementsCurrent.GetHashCode();
                if (this.BEzsignfoldersignerassociationHasactionableelementsFuture != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldersignerassociationHasactionableelementsFuture.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
