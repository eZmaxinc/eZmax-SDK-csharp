/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communicationexternalrecipient Object
    /// </summary>
    [DataContract]
    public partial class CommunicationexternalrecipientResponseCompound :  IEquatable<CommunicationexternalrecipientResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ECommunicationexternalrecipientType
        /// </summary>
        [DataMember(Name="eCommunicationexternalrecipientType", EmitDefaultValue=true)]
        public FieldECommunicationexternalrecipientType ECommunicationexternalrecipientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationexternalrecipientResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationexternalrecipientResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationexternalrecipientResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiCommunicationexternalrecipientID">The unique ID of the Communicationexternalrecipient (required).</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="objPhoneSms">objPhoneSms.</param>
        /// <param name="eCommunicationexternalrecipientType">eCommunicationexternalrecipientType (required).</param>
        /// <param name="sCommunicationexternalrecipientName">The Name of the Communicationexternalrecipient (required).</param>
        public CommunicationexternalrecipientResponseCompound(int pkiCommunicationexternalrecipientID = default(int), string sEmailAddress = default(string), PhoneResponseCompound objPhoneSms = default(PhoneResponseCompound), FieldECommunicationexternalrecipientType eCommunicationexternalrecipientType = default(FieldECommunicationexternalrecipientType), string sCommunicationexternalrecipientName = default(string))
        {
            // to ensure "pkiCommunicationexternalrecipientID" is required (not null)
            if (pkiCommunicationexternalrecipientID == null)
            {
                throw new InvalidDataException("pkiCommunicationexternalrecipientID is a required property for CommunicationexternalrecipientResponseCompound and cannot be null");
            }
            else
            {
                this.PkiCommunicationexternalrecipientID = pkiCommunicationexternalrecipientID;
            }

            // to ensure "eCommunicationexternalrecipientType" is required (not null)
            if (eCommunicationexternalrecipientType == null)
            {
                throw new InvalidDataException("eCommunicationexternalrecipientType is a required property for CommunicationexternalrecipientResponseCompound and cannot be null");
            }
            else
            {
                this.ECommunicationexternalrecipientType = eCommunicationexternalrecipientType;
            }

            // to ensure "sCommunicationexternalrecipientName" is required (not null)
            if (sCommunicationexternalrecipientName == null)
            {
                throw new InvalidDataException("sCommunicationexternalrecipientName is a required property for CommunicationexternalrecipientResponseCompound and cannot be null");
            }
            else
            {
                this.SCommunicationexternalrecipientName = sCommunicationexternalrecipientName;
            }

            this.SEmailAddress = sEmailAddress;
            this.ObjPhoneSms = objPhoneSms;
        }

        /// <summary>
        /// The unique ID of the Communicationexternalrecipient
        /// </summary>
        /// <value>The unique ID of the Communicationexternalrecipient</value>
        [DataMember(Name="pkiCommunicationexternalrecipientID", EmitDefaultValue=true)]
        public int PkiCommunicationexternalrecipientID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets ObjPhoneSms
        /// </summary>
        [DataMember(Name="objPhoneSms", EmitDefaultValue=false)]
        public PhoneResponseCompound ObjPhoneSms { get; set; }


        /// <summary>
        /// The Name of the Communicationexternalrecipient
        /// </summary>
        /// <value>The Name of the Communicationexternalrecipient</value>
        [DataMember(Name="sCommunicationexternalrecipientName", EmitDefaultValue=true)]
        public string SCommunicationexternalrecipientName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationexternalrecipientResponseCompound {\n");
            sb.Append("  PkiCommunicationexternalrecipientID: ").Append(PkiCommunicationexternalrecipientID).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  ObjPhoneSms: ").Append(ObjPhoneSms).Append("\n");
            sb.Append("  ECommunicationexternalrecipientType: ").Append(ECommunicationexternalrecipientType).Append("\n");
            sb.Append("  SCommunicationexternalrecipientName: ").Append(SCommunicationexternalrecipientName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationexternalrecipientResponseCompound);
        }

        /// <summary>
        /// Returns true if CommunicationexternalrecipientResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationexternalrecipientResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationexternalrecipientResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiCommunicationexternalrecipientID == input.PkiCommunicationexternalrecipientID ||
                    (this.PkiCommunicationexternalrecipientID != null &&
                    this.PkiCommunicationexternalrecipientID.Equals(input.PkiCommunicationexternalrecipientID))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                ) && 
                (
                    this.ObjPhoneSms == input.ObjPhoneSms ||
                    (this.ObjPhoneSms != null &&
                    this.ObjPhoneSms.Equals(input.ObjPhoneSms))
                ) && 
                (
                    this.ECommunicationexternalrecipientType == input.ECommunicationexternalrecipientType ||
                    (this.ECommunicationexternalrecipientType != null &&
                    this.ECommunicationexternalrecipientType.Equals(input.ECommunicationexternalrecipientType))
                ) && 
                (
                    this.SCommunicationexternalrecipientName == input.SCommunicationexternalrecipientName ||
                    (this.SCommunicationexternalrecipientName != null &&
                    this.SCommunicationexternalrecipientName.Equals(input.SCommunicationexternalrecipientName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiCommunicationexternalrecipientID != null)
                    hashCode = hashCode * 59 + this.PkiCommunicationexternalrecipientID.GetHashCode();
                if (this.SEmailAddress != null)
                    hashCode = hashCode * 59 + this.SEmailAddress.GetHashCode();
                if (this.ObjPhoneSms != null)
                    hashCode = hashCode * 59 + this.ObjPhoneSms.GetHashCode();
                if (this.ECommunicationexternalrecipientType != null)
                    hashCode = hashCode * 59 + this.ECommunicationexternalrecipientType.GetHashCode();
                if (this.SCommunicationexternalrecipientName != null)
                    hashCode = hashCode * 59 + this.SCommunicationexternalrecipientName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
