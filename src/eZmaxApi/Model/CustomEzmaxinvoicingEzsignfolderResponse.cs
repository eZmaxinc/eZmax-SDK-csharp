/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An EzmaxinvoicingEzsignfolder object containing information about the Ezmaxinvoicing for an Ezsignfolder
    /// </summary>
    [DataContract(Name = "Custom-EzmaxinvoicingEzsignfolder-Response")]
    public partial class CustomEzmaxinvoicingEzsignfolderResponse : IEquatable<CustomEzmaxinvoicingEzsignfolderResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzmaxinvoicingEzsignfolderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzmaxinvoicingEzsignfolderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzmaxinvoicingEzsignfolderResponse" /> class.
        /// </summary>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="sEzsignfolderDescription">The description of the Ezsignfolder (required).</param>
        /// <param name="bEzsigntsarequirementBillable">Whether the TSA requirement is billable or not (required).</param>
        /// <param name="bEzsignfolderMfaused">Whether the MFA was used or not for the Ezsignfolder (required).</param>
        /// <param name="bEzsignfolderPaymentused">Whether there was a signature is of type payment (required).</param>
        /// <param name="bEzsignfolderAllowed">Whether you have access to the Ezsignfolder or not (required).</param>
        public CustomEzmaxinvoicingEzsignfolderResponse(int fkiEzsignfolderID = default(int), string sEzsignfolderDescription = default(string), bool bEzsigntsarequirementBillable = default(bool), bool bEzsignfolderMfaused = default(bool), bool bEzsignfolderPaymentused = default(bool), bool bEzsignfolderAllowed = default(bool))
        {
            this.FkiEzsignfolderID = fkiEzsignfolderID;
            // to ensure "sEzsignfolderDescription" is required (not null)
            if (sEzsignfolderDescription == null)
            {
                throw new ArgumentNullException("sEzsignfolderDescription is a required property for CustomEzmaxinvoicingEzsignfolderResponse and cannot be null");
            }
            this.SEzsignfolderDescription = sEzsignfolderDescription;
            this.BEzsigntsarequirementBillable = bEzsigntsarequirementBillable;
            this.BEzsignfolderMfaused = bEzsignfolderMfaused;
            this.BEzsignfolderPaymentused = bEzsignfolderPaymentused;
            this.BEzsignfolderAllowed = bEzsignfolderAllowed;
        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        </example> }}
		/* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// The description of the Ezsignfolder
        /// </summary>
        /// <value>The description of the Ezsignfolder</value>
        </example> }}
		/* <example>Test eZsign Folder</example>*/
        [DataMember(Name = "sEzsignfolderDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfolderDescription { get; set; }

        /// <summary>
        /// Whether the TSA requirement is billable or not
        /// </summary>
        /// <value>Whether the TSA requirement is billable or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bEzsigntsarequirementBillable", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntsarequirementBillable { get; set; }

        /// <summary>
        /// Whether the MFA was used or not for the Ezsignfolder
        /// </summary>
        /// <value>Whether the MFA was used or not for the Ezsignfolder</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bEzsignfolderMfaused", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfolderMfaused { get; set; }

        /// <summary>
        /// Whether there was a signature is of type payment
        /// </summary>
        /// <value>Whether there was a signature is of type payment</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bEzsignfolderPaymentused", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfolderPaymentused { get; set; }

        /// <summary>
        /// Whether you have access to the Ezsignfolder or not
        /// </summary>
        /// <value>Whether you have access to the Ezsignfolder or not</value>
        [DataMember(Name = "bEzsignfolderAllowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfolderAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzmaxinvoicingEzsignfolderResponse {\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  SEzsignfolderDescription: ").Append(SEzsignfolderDescription).Append("\n");
            sb.Append("  BEzsigntsarequirementBillable: ").Append(BEzsigntsarequirementBillable).Append("\n");
            sb.Append("  BEzsignfolderMfaused: ").Append(BEzsignfolderMfaused).Append("\n");
            sb.Append("  BEzsignfolderPaymentused: ").Append(BEzsignfolderPaymentused).Append("\n");
            sb.Append("  BEzsignfolderAllowed: ").Append(BEzsignfolderAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzmaxinvoicingEzsignfolderResponse);
        }

        /// <summary>
        /// Returns true if CustomEzmaxinvoicingEzsignfolderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzmaxinvoicingEzsignfolderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzmaxinvoicingEzsignfolderResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID)
                ) && 
                (
                    this.SEzsignfolderDescription == input.SEzsignfolderDescription ||
                    (this.SEzsignfolderDescription != null &&
                    this.SEzsignfolderDescription.Equals(input.SEzsignfolderDescription))
                ) && 
                (
                    this.BEzsigntsarequirementBillable == input.BEzsigntsarequirementBillable ||
                    this.BEzsigntsarequirementBillable.Equals(input.BEzsigntsarequirementBillable)
                ) && 
                (
                    this.BEzsignfolderMfaused == input.BEzsignfolderMfaused ||
                    this.BEzsignfolderMfaused.Equals(input.BEzsignfolderMfaused)
                ) && 
                (
                    this.BEzsignfolderPaymentused == input.BEzsignfolderPaymentused ||
                    this.BEzsignfolderPaymentused.Equals(input.BEzsignfolderPaymentused)
                ) && 
                (
                    this.BEzsignfolderAllowed == input.BEzsignfolderAllowed ||
                    this.BEzsignfolderAllowed.Equals(input.BEzsignfolderAllowed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FkiEzsignfolderID.GetHashCode();
                if (this.SEzsignfolderDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfolderDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzsigntsarequirementBillable.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignfolderMfaused.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignfolderPaymentused.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignfolderAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
