/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignature Object in the context of an EzsignsignaturesAutomatic path
    /// </summary>
    [DataContract(Name = "Custom-EzsignsignatureEzsignsignaturesAutomatic-Response")]
    public partial class CustomEzsignsignatureEzsignsignaturesAutomaticResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignsignatureType
        /// </summary>
        [DataMember(Name = "eEzsignsignatureType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignsignatureType EEzsignsignatureType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignatureEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignsignatureEzsignsignaturesAutomaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignatureEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature (required).</param>
        /// <param name="eEzsignsignatureType">eEzsignsignatureType (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        public CustomEzsignsignatureEzsignsignaturesAutomaticResponse(int pkiEzsignsignatureID = default(int), FieldEEzsignsignatureType eEzsignsignatureType = default(FieldEEzsignsignatureType), int iEzsignpagePagenumber = default(int))
        {
            this.PkiEzsignsignatureID = pkiEzsignsignatureID;
            this.EEzsignsignatureType = eEzsignsignatureType;
            this.IEzsignpagePagenumber = iEzsignpagePagenumber;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignature
        /// </summary>
        /// <value>The unique ID of the Ezsignsignature</value>
        /* <example>49</example>*/
        [DataMember(Name = "pkiEzsignsignatureID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignsignatureID { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsignpagePagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzsignsignatureEzsignsignaturesAutomaticResponse {\n");
            sb.Append("  PkiEzsignsignatureID: ").Append(PkiEzsignsignatureID).Append("\n");
            sb.Append("  EEzsignsignatureType: ").Append(EEzsignsignatureType).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignsignatureID (int) minimum
            if (this.PkiEzsignsignatureID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsignsignatureID, must be a value greater than or equal to 0.", new [] { "PkiEzsignsignatureID" });
            }

            // IEzsignpagePagenumber (int) minimum
            if (this.IEzsignpagePagenumber < (int)1)
            {
                yield return new ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }

            yield break;
        }
    }

}
