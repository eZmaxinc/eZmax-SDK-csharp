/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignature Object in the context of an EzsignsignaturesAutomatic path
    /// </summary>
    [DataContract]
    public partial class CustomEzsignsignatureEzsignsignaturesAutomaticResponse :  IEquatable<CustomEzsignsignatureEzsignsignaturesAutomaticResponse>
    {
        /// <summary>
        /// Gets or Sets EEzsignsignatureType
        /// </summary>
        [DataMember(Name="eEzsignsignatureType", EmitDefaultValue=true)]
        public FieldEEzsignsignatureType EEzsignsignatureType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignatureEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignsignatureEzsignsignaturesAutomaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignsignatureEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature (required).</param>
        /// <param name="eEzsignsignatureType">eEzsignsignatureType (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        public CustomEzsignsignatureEzsignsignaturesAutomaticResponse(int pkiEzsignsignatureID = default(int), FieldEEzsignsignatureType eEzsignsignatureType = default(FieldEEzsignsignatureType), int iEzsignpagePagenumber = default(int))
        {
            // to ensure "pkiEzsignsignatureID" is required (not null)
            if (pkiEzsignsignatureID == null)
            {
                throw new InvalidDataException("pkiEzsignsignatureID is a required property for CustomEzsignsignatureEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.PkiEzsignsignatureID = pkiEzsignsignatureID;
            }

            // to ensure "eEzsignsignatureType" is required (not null)
            if (eEzsignsignatureType == null)
            {
                throw new InvalidDataException("eEzsignsignatureType is a required property for CustomEzsignsignatureEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.EEzsignsignatureType = eEzsignsignatureType;
            }

            // to ensure "iEzsignpagePagenumber" is required (not null)
            if (iEzsignpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsignpagePagenumber is a required property for CustomEzsignsignatureEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsignsignature
        /// </summary>
        /// <value>The unique ID of the Ezsignsignature</value>
        [DataMember(Name="pkiEzsignsignatureID", EmitDefaultValue=true)]
        public int PkiEzsignsignatureID { get; set; }


        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        [DataMember(Name="iEzsignpagePagenumber", EmitDefaultValue=true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomEzsignsignatureEzsignsignaturesAutomaticResponse {\n");
            sb.Append("  PkiEzsignsignatureID: ").Append(PkiEzsignsignatureID).Append("\n");
            sb.Append("  EEzsignsignatureType: ").Append(EEzsignsignatureType).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignsignatureEzsignsignaturesAutomaticResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignsignatureEzsignsignaturesAutomaticResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignsignatureEzsignsignaturesAutomaticResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignsignatureEzsignsignaturesAutomaticResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignatureID == input.PkiEzsignsignatureID ||
                    (this.PkiEzsignsignatureID != null &&
                    this.PkiEzsignsignatureID.Equals(input.PkiEzsignsignatureID))
                ) && 
                (
                    this.EEzsignsignatureType == input.EEzsignsignatureType ||
                    (this.EEzsignsignatureType != null &&
                    this.EEzsignsignatureType.Equals(input.EEzsignsignatureType))
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    (this.IEzsignpagePagenumber != null &&
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignatureID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignatureID.GetHashCode();
                if (this.EEzsignsignatureType != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureType.GetHashCode();
                if (this.IEzsignpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsignpagePagenumber.GetHashCode();
                return hashCode;
            }
        }
    }

}
