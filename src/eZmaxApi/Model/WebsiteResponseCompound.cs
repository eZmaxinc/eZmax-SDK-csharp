/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Website Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "website-ResponseCompound")]
    public partial class WebsiteResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebsiteResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiWebsiteID">The unique ID of the Website Default (required).</param>
        /// <param name="fkiWebsitetypeID">The unique ID of the Websitetype.  Valid values:  |Value|Description| |-|-| |1|Website| |2|Twitter| |3|Facebook| |4|Survey| (required).</param>
        /// <param name="sWebsiteAddress">The URL of the website. (required).</param>
        public WebsiteResponseCompound(int pkiWebsiteID = default(int), int fkiWebsitetypeID = default(int), string sWebsiteAddress = default(string))
        {
            this.PkiWebsiteID = pkiWebsiteID;
            this.FkiWebsitetypeID = fkiWebsitetypeID;
            // to ensure "sWebsiteAddress" is required (not null)
            if (sWebsiteAddress == null)
            {
                throw new ArgumentNullException("sWebsiteAddress is a required property for WebsiteResponseCompound and cannot be null");
            }
            this.SWebsiteAddress = sWebsiteAddress;
        }

        /// <summary>
        /// The unique ID of the Website Default
        /// </summary>
        /// <value>The unique ID of the Website Default</value>
        /* <example>145</example>*/
        [DataMember(Name = "pkiWebsiteID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiWebsiteID { get; set; }

        /// <summary>
        /// The unique ID of the Websitetype.  Valid values:  |Value|Description| |-|-| |1|Website| |2|Twitter| |3|Facebook| |4|Survey|
        /// </summary>
        /// <value>The unique ID of the Websitetype.  Valid values:  |Value|Description| |-|-| |1|Website| |2|Twitter| |3|Facebook| |4|Survey|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiWebsitetypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiWebsitetypeID { get; set; }

        /// <summary>
        /// The URL of the website.
        /// </summary>
        /// <value>The URL of the website.</value>
        /* <example>https://www.example.com</example>*/
        [DataMember(Name = "sWebsiteAddress", IsRequired = true, EmitDefaultValue = true)]
        public string SWebsiteAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebsiteResponseCompound {\n");
            sb.Append("  PkiWebsiteID: ").Append(PkiWebsiteID).Append("\n");
            sb.Append("  FkiWebsitetypeID: ").Append(FkiWebsitetypeID).Append("\n");
            sb.Append("  SWebsiteAddress: ").Append(SWebsiteAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiWebsiteID (int) maximum
            if (this.PkiWebsiteID > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for PkiWebsiteID, must be a value less than or equal to 16777215.", new [] { "PkiWebsiteID" });
            }

            // PkiWebsiteID (int) minimum
            if (this.PkiWebsiteID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiWebsiteID, must be a value greater than or equal to 0.", new [] { "PkiWebsiteID" });
            }

            // FkiWebsitetypeID (int) minimum
            if (this.FkiWebsitetypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiWebsitetypeID, must be a value greater than or equal to 0.", new [] { "FkiWebsitetypeID" });
            }

            yield break;
        }
    }

}
