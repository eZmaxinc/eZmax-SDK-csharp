/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigntemplateelementdependency Object
    /// </summary>
    [DataContract(Name = "ezsigntemplateelementdependency-Response")]
    public partial class EzsigntemplateelementdependencyResponse : IEquatable<EzsigntemplateelementdependencyResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigntemplateelementdependencyValidation
        /// </summary>
        [DataMember(Name = "eEzsigntemplateelementdependencyValidation", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplateelementdependencyValidation EEzsigntemplateelementdependencyValidation { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateelementdependencyOperator
        /// </summary>
        [DataMember(Name = "eEzsigntemplateelementdependencyOperator", EmitDefaultValue = false)]
        public FieldEEzsigntemplateelementdependencyOperator? EEzsigntemplateelementdependencyOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateelementdependencyResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateelementdependencyResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateelementdependencyResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateelementdependencyID">The unique ID of the Ezsigntemplateelementdependency (required).</param>
        /// <param name="fkiEzsigntemplateformfieldID">The unique ID of the Ezsigntemplateformfield.</param>
        /// <param name="fkiEzsigntemplatesignatureID">The unique ID of the Ezsigntemplatesignature.</param>
        /// <param name="fkiEzsigntemplateformfieldIDValidation">The unique ID of the Ezsigntemplateformfield.</param>
        /// <param name="fkiEzsigntemplateformfieldgroupIDValidation">The unique ID of the Ezsigntemplateformfieldgroup.</param>
        /// <param name="eEzsigntemplateelementdependencyValidation">eEzsigntemplateelementdependencyValidation (required).</param>
        /// <param name="bEzsigntemplateelementdependencySelected">Whether if it&#39;s selected or not when using eEzsigntemplateelementdependencyValidation &#x3D; Selected.</param>
        /// <param name="eEzsigntemplateelementdependencyOperator">eEzsigntemplateelementdependencyOperator.</param>
        /// <param name="sEzsigntemplateelementdependencyValue">The value of the Ezsignelementdependency.</param>
        public EzsigntemplateelementdependencyResponse(int pkiEzsigntemplateelementdependencyID = default(int), int fkiEzsigntemplateformfieldID = default(int), int fkiEzsigntemplatesignatureID = default(int), int fkiEzsigntemplateformfieldIDValidation = default(int), int fkiEzsigntemplateformfieldgroupIDValidation = default(int), FieldEEzsigntemplateelementdependencyValidation eEzsigntemplateelementdependencyValidation = default(FieldEEzsigntemplateelementdependencyValidation), bool bEzsigntemplateelementdependencySelected = default(bool), FieldEEzsigntemplateelementdependencyOperator? eEzsigntemplateelementdependencyOperator = default(FieldEEzsigntemplateelementdependencyOperator?), string sEzsigntemplateelementdependencyValue = default(string))
        {
            this.PkiEzsigntemplateelementdependencyID = pkiEzsigntemplateelementdependencyID;
            this.EEzsigntemplateelementdependencyValidation = eEzsigntemplateelementdependencyValidation;
            this.FkiEzsigntemplateformfieldID = fkiEzsigntemplateformfieldID;
            this.FkiEzsigntemplatesignatureID = fkiEzsigntemplatesignatureID;
            this.FkiEzsigntemplateformfieldIDValidation = fkiEzsigntemplateformfieldIDValidation;
            this.FkiEzsigntemplateformfieldgroupIDValidation = fkiEzsigntemplateformfieldgroupIDValidation;
            this.BEzsigntemplateelementdependencySelected = bEzsigntemplateelementdependencySelected;
            this.EEzsigntemplateelementdependencyOperator = eEzsigntemplateelementdependencyOperator;
            this.SEzsigntemplateelementdependencyValue = sEzsigntemplateelementdependencyValue;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateelementdependency
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateelementdependency</value>
        /* <example>314</example>*/
        [DataMember(Name = "pkiEzsigntemplateelementdependencyID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplateelementdependencyID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfield
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfield</value>
        /* <example>71</example>*/
        [DataMember(Name = "fkiEzsigntemplateformfieldID", EmitDefaultValue = false)]
        public int FkiEzsigntemplateformfieldID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesignature
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesignature</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiEzsigntemplatesignatureID", EmitDefaultValue = false)]
        public int FkiEzsigntemplatesignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfield
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfield</value>
        /* <example>71</example>*/
        [DataMember(Name = "fkiEzsigntemplateformfieldIDValidation", EmitDefaultValue = false)]
        public int FkiEzsigntemplateformfieldIDValidation { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfieldgroup</value>
        /* <example>64</example>*/
        [DataMember(Name = "fkiEzsigntemplateformfieldgroupIDValidation", EmitDefaultValue = false)]
        public int FkiEzsigntemplateformfieldgroupIDValidation { get; set; }

        /// <summary>
        /// Whether if it&#39;s selected or not when using eEzsigntemplateelementdependencyValidation &#x3D; Selected
        /// </summary>
        /// <value>Whether if it&#39;s selected or not when using eEzsigntemplateelementdependencyValidation &#x3D; Selected</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsigntemplateelementdependencySelected", EmitDefaultValue = true)]
        public bool BEzsigntemplateelementdependencySelected { get; set; }

        /// <summary>
        /// The value of the Ezsignelementdependency
        /// </summary>
        /// <value>The value of the Ezsignelementdependency</value>
        /* <example>Montreal</example>*/
        [DataMember(Name = "sEzsigntemplateelementdependencyValue", EmitDefaultValue = false)]
        public string SEzsigntemplateelementdependencyValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateelementdependencyResponse {\n");
            sb.Append("  PkiEzsigntemplateelementdependencyID: ").Append(PkiEzsigntemplateelementdependencyID).Append("\n");
            sb.Append("  FkiEzsigntemplateformfieldID: ").Append(FkiEzsigntemplateformfieldID).Append("\n");
            sb.Append("  FkiEzsigntemplatesignatureID: ").Append(FkiEzsigntemplatesignatureID).Append("\n");
            sb.Append("  FkiEzsigntemplateformfieldIDValidation: ").Append(FkiEzsigntemplateformfieldIDValidation).Append("\n");
            sb.Append("  FkiEzsigntemplateformfieldgroupIDValidation: ").Append(FkiEzsigntemplateformfieldgroupIDValidation).Append("\n");
            sb.Append("  EEzsigntemplateelementdependencyValidation: ").Append(EEzsigntemplateelementdependencyValidation).Append("\n");
            sb.Append("  BEzsigntemplateelementdependencySelected: ").Append(BEzsigntemplateelementdependencySelected).Append("\n");
            sb.Append("  EEzsigntemplateelementdependencyOperator: ").Append(EEzsigntemplateelementdependencyOperator).Append("\n");
            sb.Append("  SEzsigntemplateelementdependencyValue: ").Append(SEzsigntemplateelementdependencyValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplateelementdependencyResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplateelementdependencyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplateelementdependencyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplateelementdependencyResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigntemplateelementdependencyID == input.PkiEzsigntemplateelementdependencyID ||
                    this.PkiEzsigntemplateelementdependencyID.Equals(input.PkiEzsigntemplateelementdependencyID)
                ) && 
                (
                    this.FkiEzsigntemplateformfieldID == input.FkiEzsigntemplateformfieldID ||
                    this.FkiEzsigntemplateformfieldID.Equals(input.FkiEzsigntemplateformfieldID)
                ) && 
                (
                    this.FkiEzsigntemplatesignatureID == input.FkiEzsigntemplatesignatureID ||
                    this.FkiEzsigntemplatesignatureID.Equals(input.FkiEzsigntemplatesignatureID)
                ) && 
                (
                    this.FkiEzsigntemplateformfieldIDValidation == input.FkiEzsigntemplateformfieldIDValidation ||
                    this.FkiEzsigntemplateformfieldIDValidation.Equals(input.FkiEzsigntemplateformfieldIDValidation)
                ) && 
                (
                    this.FkiEzsigntemplateformfieldgroupIDValidation == input.FkiEzsigntemplateformfieldgroupIDValidation ||
                    this.FkiEzsigntemplateformfieldgroupIDValidation.Equals(input.FkiEzsigntemplateformfieldgroupIDValidation)
                ) && 
                (
                    this.EEzsigntemplateelementdependencyValidation == input.EEzsigntemplateelementdependencyValidation ||
                    this.EEzsigntemplateelementdependencyValidation.Equals(input.EEzsigntemplateelementdependencyValidation)
                ) && 
                (
                    this.BEzsigntemplateelementdependencySelected == input.BEzsigntemplateelementdependencySelected ||
                    this.BEzsigntemplateelementdependencySelected.Equals(input.BEzsigntemplateelementdependencySelected)
                ) && 
                (
                    this.EEzsigntemplateelementdependencyOperator == input.EEzsigntemplateelementdependencyOperator ||
                    this.EEzsigntemplateelementdependencyOperator.Equals(input.EEzsigntemplateelementdependencyOperator)
                ) && 
                (
                    this.SEzsigntemplateelementdependencyValue == input.SEzsigntemplateelementdependencyValue ||
                    (this.SEzsigntemplateelementdependencyValue != null &&
                    this.SEzsigntemplateelementdependencyValue.Equals(input.SEzsigntemplateelementdependencyValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigntemplateelementdependencyID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateformfieldID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplatesignatureID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateformfieldIDValidation.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateformfieldgroupIDValidation.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsigntemplateelementdependencyValidation.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsigntemplateelementdependencySelected.GetHashCode();
                hashCode = (hashCode * 59) + this.EEzsigntemplateelementdependencyOperator.GetHashCode();
                if (this.SEzsigntemplateelementdependencyValue != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplateelementdependencyValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplateelementdependencyID (int) maximum
            if (this.PkiEzsigntemplateelementdependencyID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateelementdependencyID, must be a value less than or equal to 65535.", new [] { "PkiEzsigntemplateelementdependencyID" });
            }

            // PkiEzsigntemplateelementdependencyID (int) minimum
            if (this.PkiEzsigntemplateelementdependencyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateelementdependencyID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateelementdependencyID" });
            }

            // FkiEzsigntemplateformfieldID (int) minimum
            if (this.FkiEzsigntemplateformfieldID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateformfieldID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateformfieldID" });
            }

            // FkiEzsigntemplatesignatureID (int) minimum
            if (this.FkiEzsigntemplatesignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatesignatureID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatesignatureID" });
            }

            // FkiEzsigntemplateformfieldIDValidation (int) minimum
            if (this.FkiEzsigntemplateformfieldIDValidation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateformfieldIDValidation, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateformfieldIDValidation" });
            }

            // FkiEzsigntemplateformfieldgroupIDValidation (int) minimum
            if (this.FkiEzsigntemplateformfieldgroupIDValidation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateformfieldgroupIDValidation, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateformfieldgroupIDValidation" });
            }

            if (this.SEzsigntemplateelementdependencyValue != null) {
                // SEzsigntemplateelementdependencyValue (string) pattern
                Regex regexSEzsigntemplateelementdependencyValue = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplateelementdependencyValue.Match(this.SEzsigntemplateelementdependencyValue).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateelementdependencyValue, must match a pattern of " + regexSEzsigntemplateelementdependencyValue, new [] { "SEzsigntemplateelementdependencyValue" });
                }
            }

            yield break;
        }
    }

}
