/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Creditcardmerchant AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "creditcardmerchant-AutocompleteElement-Response")]
    public partial class CreditcardmerchantAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardmerchantAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditcardmerchantAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardmerchantAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiCreditcardmerchantID">The unique ID of the Creditcardmerchant (required).</param>
        /// <param name="sCreditcardmerchantDescription">The description of the Creditcardmerchant (required).</param>
        /// <param name="bCreditcardmerchantIsactive">Whether the creditcardmerchant is active or not (required).</param>
        public CreditcardmerchantAutocompleteElementResponse(int pkiCreditcardmerchantID = default(int), string sCreditcardmerchantDescription = default(string), bool bCreditcardmerchantIsactive = default(bool))
        {
            this.PkiCreditcardmerchantID = pkiCreditcardmerchantID;
            // to ensure "sCreditcardmerchantDescription" is required (not null)
            if (sCreditcardmerchantDescription == null)
            {
                throw new ArgumentNullException("sCreditcardmerchantDescription is a required property for CreditcardmerchantAutocompleteElementResponse and cannot be null");
            }
            this.SCreditcardmerchantDescription = sCreditcardmerchantDescription;
            this.BCreditcardmerchantIsactive = bCreditcardmerchantIsactive;
        }

        /// <summary>
        /// The unique ID of the Creditcardmerchant
        /// </summary>
        /// <value>The unique ID of the Creditcardmerchant</value>
        /* <example>30</example>*/
        [DataMember(Name = "pkiCreditcardmerchantID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCreditcardmerchantID { get; set; }

        /// <summary>
        /// The description of the Creditcardmerchant
        /// </summary>
        /// <value>The description of the Creditcardmerchant</value>
        /* <example>Moneris</example>*/
        [DataMember(Name = "sCreditcardmerchantDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcardmerchantDescription { get; set; }

        /// <summary>
        /// Whether the creditcardmerchant is active or not
        /// </summary>
        /// <value>Whether the creditcardmerchant is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCreditcardmerchantIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BCreditcardmerchantIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditcardmerchantAutocompleteElementResponse {\n");
            sb.Append("  PkiCreditcardmerchantID: ").Append(PkiCreditcardmerchantID).Append("\n");
            sb.Append("  SCreditcardmerchantDescription: ").Append(SCreditcardmerchantDescription).Append("\n");
            sb.Append("  BCreditcardmerchantIsactive: ").Append(BCreditcardmerchantIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCreditcardmerchantID (int) maximum
            if (this.PkiCreditcardmerchantID > (int)255)
            {
                yield return new ValidationResult("Invalid value for PkiCreditcardmerchantID, must be a value less than or equal to 255.", new [] { "PkiCreditcardmerchantID" });
            }

            // PkiCreditcardmerchantID (int) minimum
            if (this.PkiCreditcardmerchantID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiCreditcardmerchantID, must be a value greater than or equal to 0.", new [] { "PkiCreditcardmerchantID" });
            }

            if (this.SCreditcardmerchantDescription != null) {
                // SCreditcardmerchantDescription (string) pattern
                Regex regexSCreditcardmerchantDescription = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcardmerchantDescription.Match(this.SCreditcardmerchantDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcardmerchantDescription, must match a pattern of " + regexSCreditcardmerchantDescription, new [] { "SCreditcardmerchantDescription" });
                }
            }

            yield break;
        }
    }

}
