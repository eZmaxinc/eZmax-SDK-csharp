/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignannotation Object
    /// </summary>
    [DataContract(Name = "ezsignannotation-Request")]
    public partial class EzsignannotationRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignannotationHorizontalalignment
        /// </summary>
        [DataMember(Name = "eEzsignannotationHorizontalalignment", EmitDefaultValue = false)]
        public EnumHorizontalalignment? EEzsignannotationHorizontalalignment { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignannotationVerticalalignment
        /// </summary>
        [DataMember(Name = "eEzsignannotationVerticalalignment", EmitDefaultValue = false)]
        public EnumVerticalalignment? EEzsignannotationVerticalalignment { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignannotationType
        /// </summary>
        [DataMember(Name = "eEzsignannotationType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignannotationType EEzsignannotationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignannotationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignannotationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignannotationRequest" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsignannotation.</param>
        /// <param name="">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        /// <param name=""> (required).</param>
        /// <param name="">The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="">The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="">The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width..</param>
        /// <param name="">The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**.</param>
        /// <param name="">The Text of the Ezsignannotation.</param>
        /// <param name="">The page number in the Ezsigndocument (required).</param>
        public EzsignannotationRequest(int  = default(int), int  = default(int), EnumHorizontalalignment?  = default(EnumHorizontalalignment?), EnumVerticalalignment?  = default(EnumVerticalalignment?), FieldEEzsignannotationType  = default(FieldEEzsignannotationType), int  = default(int), int  = default(int), int  = default(int), int  = default(int), string  = default(string), int  = default(int))
        {
            this.FkiEzsigndocumentID = ;
            this.EEzsignannotationType = ;
            this.IEzsignannotationX = ;
            this.IEzsignannotationY = ;
            this.IEzsignpagePagenumber = ;
            this.PkiEzsignannotationID = ;
            this.EEzsignannotationHorizontalalignment = ;
            this.EEzsignannotationVerticalalignment = ;
            this.IEzsignannotationWidth = ;
            this.IEzsignannotationHeight = ;
            this.SEzsignannotationText = ;
        }

        /// <summary>
        /// The unique ID of the Ezsignannotation
        /// </summary>
        /// <value>The unique ID of the Ezsignannotation</value>
        /* <example>113</example>*/
        [DataMember(Name = "pkiEzsignannotationID", EmitDefaultValue = false)]
        public int PkiEzsignannotationID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        /* <example>97</example>*/
        [DataMember(Name = "fkiEzsigndocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        /* <example>50</example>*/
        [DataMember(Name = "iEzsignannotationX", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignannotationX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        /* <example>50</example>*/
        [DataMember(Name = "iEzsignannotationY", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignannotationY { get; set; }

        /// <summary>
        /// The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width.
        /// </summary>
        /// <value>The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width.</value>
        /* <example>75</example>*/
        [DataMember(Name = "iEzsignannotationWidth", EmitDefaultValue = false)]
        public int IEzsignannotationWidth { get; set; }

        /// <summary>
        /// The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**
        /// </summary>
        /// <value>The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**</value>
        /* <example>25</example>*/
        [DataMember(Name = "iEzsignannotationHeight", EmitDefaultValue = false)]
        public int IEzsignannotationHeight { get; set; }

        /// <summary>
        /// The Text of the Ezsignannotation
        /// </summary>
        /// <value>The Text of the Ezsignannotation</value>
        /* <example>Sample</example>*/
        [DataMember(Name = "sEzsignannotationText", EmitDefaultValue = false)]
        public string SEzsignannotationText { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsignpagePagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignannotationRequest {\n");
            sb.Append("  PkiEzsignannotationID: ").Append(PkiEzsignannotationID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  EEzsignannotationHorizontalalignment: ").Append(EEzsignannotationHorizontalalignment).Append("\n");
            sb.Append("  EEzsignannotationVerticalalignment: ").Append(EEzsignannotationVerticalalignment).Append("\n");
            sb.Append("  EEzsignannotationType: ").Append(EEzsignannotationType).Append("\n");
            sb.Append("  IEzsignannotationX: ").Append(IEzsignannotationX).Append("\n");
            sb.Append("  IEzsignannotationY: ").Append(IEzsignannotationY).Append("\n");
            sb.Append("  IEzsignannotationWidth: ").Append(IEzsignannotationWidth).Append("\n");
            sb.Append("  IEzsignannotationHeight: ").Append(IEzsignannotationHeight).Append("\n");
            sb.Append("  SEzsignannotationText: ").Append(SEzsignannotationText).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiEzsigndocumentID (int) minimum
            if (this.FkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigndocumentID" });
            }

            // IEzsignannotationX (int) minimum
            if (this.IEzsignannotationX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignannotationX, must be a value greater than or equal to 0.", new [] { "IEzsignannotationX" });
            }

            // IEzsignannotationY (int) minimum
            if (this.IEzsignannotationY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignannotationY, must be a value greater than or equal to 0.", new [] { "IEzsignannotationY" });
            }

            // IEzsignannotationWidth (int) minimum
            if (this.IEzsignannotationWidth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignannotationWidth, must be a value greater than or equal to 0.", new [] { "IEzsignannotationWidth" });
            }

            // IEzsignannotationHeight (int) minimum
            if (this.IEzsignannotationHeight < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignannotationHeight, must be a value greater than or equal to 0.", new [] { "IEzsignannotationHeight" });
            }

            // IEzsignpagePagenumber (int) minimum
            if (this.IEzsignpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }

            yield break;
        }
    }

}
