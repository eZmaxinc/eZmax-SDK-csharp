/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// ScimAuthenticationScheme
    /// </summary>
    [DataContract(Name = "Scim-AuthenticationScheme")]
    public partial class ScimAuthenticationScheme : IValidatableObject
    {
        /// <summary>
        /// The authentication scheme.
        /// </summary>
        /// <value>The authentication scheme.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Oauth for value: oauth
            /// </summary>
            [EnumMember(Value = "oauth")]
            Oauth = 1,

            /// <summary>
            /// Enum Oauth2 for value: oauth2
            /// </summary>
            [EnumMember(Value = "oauth2")]
            Oauth2 = 2,

            /// <summary>
            /// Enum Oauthbearertoken for value: oauthbearertoken
            /// </summary>
            [EnumMember(Value = "oauthbearertoken")]
            Oauthbearertoken = 3,

            /// <summary>
            /// Enum Httpbasic for value: httpbasic
            /// </summary>
            [EnumMember(Value = "httpbasic")]
            Httpbasic = 4,

            /// <summary>
            /// Enum Httpdigest for value: httpdigest
            /// </summary>
            [EnumMember(Value = "httpdigest")]
            Httpdigest = 5
        }


        /// <summary>
        /// The authentication scheme.
        /// </summary>
        /// <value>The authentication scheme.</value>
        /* <example>oauthbearertoken</example>*/
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimAuthenticationScheme" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScimAuthenticationScheme() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScimAuthenticationScheme" /> class.
        /// </summary>
        /// <param name="description">A description of the authentication scheme. (required).</param>
        /// <param name="name">The common authentication scheme name (required).</param>
        /// <param name="type">The authentication scheme. (required).</param>
        public ScimAuthenticationScheme(string description = default(string), string name = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ScimAuthenticationScheme and cannot be null");
            }
            this.Description = description;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ScimAuthenticationScheme and cannot be null");
            }
            this.Name = name;
            this.Type = type;
        }

        /// <summary>
        /// A description of the authentication scheme.
        /// </summary>
        /// <value>A description of the authentication scheme.</value>
        /* <example>Bearer token in the Authorization header</example>*/
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The common authentication scheme name
        /// </summary>
        /// <value>The common authentication scheme name</value>
        /* <example>Bearer</example>*/
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScimAuthenticationScheme {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
