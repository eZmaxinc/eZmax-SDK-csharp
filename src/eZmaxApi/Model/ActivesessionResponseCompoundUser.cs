/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Activesession-&gt;User Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "activesession-ResponseCompound-User")]
    public partial class ActivesessionResponseCompoundUser : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EUserEzsignsendreminderfrequency
        /// </summary>
        [DataMember(Name = "eUserEzsignsendreminderfrequency", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserEzsignsendreminderfrequency EUserEzsignsendreminderfrequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponseCompoundUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundUser" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiTimezoneID">The unique ID of the Timezone (required).</param>
        /// <param name="sAvatarUrl">The url of the picture used as avatar.</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="eUserEzsignsendreminderfrequency">eUserEzsignsendreminderfrequency (required).</param>
        /// <param name="iUserInterfacecolor">The int32 representation of the interface color. For example, RGB color #39435B would be 3752795 (required).</param>
        /// <param name="bUserInterfacedark">Whether to use a dark mode interface (required).</param>
        /// <param name="iUserListresult">The number of rows to return by default in lists (required).</param>
        public ActivesessionResponseCompoundUser(int pkiUserID = default(int), int fkiTimezoneID = default(int), string sAvatarUrl = default(string), string sUserFirstname = default(string), string sUserLastname = default(string), string sEmailAddress = default(string), FieldEUserEzsignsendreminderfrequency eUserEzsignsendreminderfrequency = default(FieldEUserEzsignsendreminderfrequency), int iUserInterfacecolor = default(int), bool bUserInterfacedark = default(bool), int iUserListresult = default(int))
        {
            this.PkiUserID = pkiUserID;
            this.FkiTimezoneID = fkiTimezoneID;
            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new ArgumentNullException("sUserFirstname is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            this.SUserFirstname = sUserFirstname;
            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new ArgumentNullException("sUserLastname is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            this.SUserLastname = sUserLastname;
            this.EUserEzsignsendreminderfrequency = eUserEzsignsendreminderfrequency;
            this.IUserInterfacecolor = iUserInterfacecolor;
            this.BUserInterfacedark = bUserInterfacedark;
            this.IUserListresult = iUserListresult;
            this.SAvatarUrl = sAvatarUrl;
            this.SEmailAddress = sEmailAddress;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "pkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Timezone
        /// </summary>
        /// <value>The unique ID of the Timezone</value>
        /* <example>247</example>*/
        [DataMember(Name = "fkiTimezoneID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiTimezoneID { get; set; }

        /// <summary>
        /// The url of the picture used as avatar
        /// </summary>
        /// <value>The url of the picture used as avatar</value>
        /* <example>http://www.website.com/avatar.jpg</example>*/
        [DataMember(Name = "sAvatarUrl", EmitDefaultValue = false)]
        public string SAvatarUrl { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        /* <example>John</example>*/
        [DataMember(Name = "sUserFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sUserLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddress", EmitDefaultValue = false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// The int32 representation of the interface color. For example, RGB color #39435B would be 3752795
        /// </summary>
        /// <value>The int32 representation of the interface color. For example, RGB color #39435B would be 3752795</value>
        /* <example>3752795</example>*/
        [DataMember(Name = "iUserInterfacecolor", IsRequired = true, EmitDefaultValue = true)]
        public int IUserInterfacecolor { get; set; }

        /// <summary>
        /// Whether to use a dark mode interface
        /// </summary>
        /// <value>Whether to use a dark mode interface</value>
        /* <example>false</example>*/
        [DataMember(Name = "bUserInterfacedark", IsRequired = true, EmitDefaultValue = true)]
        public bool BUserInterfacedark { get; set; }

        /// <summary>
        /// The number of rows to return by default in lists
        /// </summary>
        /// <value>The number of rows to return by default in lists</value>
        /* <example>25</example>*/
        [DataMember(Name = "iUserListresult", IsRequired = true, EmitDefaultValue = true)]
        public int IUserListresult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivesessionResponseCompoundUser {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  FkiTimezoneID: ").Append(FkiTimezoneID).Append("\n");
            sb.Append("  SAvatarUrl: ").Append(SAvatarUrl).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  EUserEzsignsendreminderfrequency: ").Append(EUserEzsignsendreminderfrequency).Append("\n");
            sb.Append("  IUserInterfacecolor: ").Append(IUserInterfacecolor).Append("\n");
            sb.Append("  BUserInterfacedark: ").Append(BUserInterfacedark).Append("\n");
            sb.Append("  IUserListresult: ").Append(IUserListresult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUserID (int) minimum
            if (this.PkiUserID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiUserID, must be a value greater than or equal to 0.", new [] { "PkiUserID" });
            }

            // FkiTimezoneID (int) minimum
            if (this.FkiTimezoneID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiTimezoneID, must be a value greater than or equal to 0.", new [] { "FkiTimezoneID" });
            }

            if (this.SAvatarUrl != null) {
                // SAvatarUrl (string) pattern
                Regex regexSAvatarUrl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSAvatarUrl.Match(this.SAvatarUrl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SAvatarUrl, must match a pattern of " + regexSAvatarUrl, new [] { "SAvatarUrl" });
                }
            }

            if (this.SEmailAddress != null) {
                // SEmailAddress (string) pattern
                Regex regexSEmailAddress = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddress.Match(this.SEmailAddress).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddress, must match a pattern of " + regexSEmailAddress, new [] { "SEmailAddress" });
                }
            }

            // IUserInterfacecolor (int) minimum
            if (this.IUserInterfacecolor < (int)0)
            {
                yield return new ValidationResult("Invalid value for IUserInterfacecolor, must be a value greater than or equal to 0.", new [] { "IUserInterfacecolor" });
            }

            // IUserListresult (int) maximum
            if (this.IUserListresult > (int)500)
            {
                yield return new ValidationResult("Invalid value for IUserListresult, must be a value less than or equal to 500.", new [] { "IUserListresult" });
            }

            // IUserListresult (int) minimum
            if (this.IUserListresult < (int)5)
            {
                yield return new ValidationResult("Invalid value for IUserListresult, must be a value greater than or equal to 5.", new [] { "IUserListresult" });
            }

            yield break;
        }
    }

}
