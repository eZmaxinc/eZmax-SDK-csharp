/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Activesession-&gt;User Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class ActivesessionResponseCompoundUser :  IEquatable<ActivesessionResponseCompoundUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponseCompoundUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundUser" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiTimezoneID">The unique ID of the Timezone (required).</param>
        /// <param name="sAvatarUrl">The url of the picture used as avatar (required).</param>
        /// <param name="sUserFirstname">The First name of the user (required).</param>
        /// <param name="sUserLastname">The Last name of the user (required).</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        /// <param name="eUserEzsignsendreminderfrequency">eUserEzsignsendreminderfrequency (required).</param>
        /// <param name="iUserInterfacecolor">The int32 representation of the interface color. For example, RGB color #39435B would be 3752795 (required).</param>
        /// <param name="bUserInterfacedark">Whether to use a dark mode interface (required).</param>
        /// <param name="iUserListresult">The number of rows to return by default in lists (required).</param>
        public ActivesessionResponseCompoundUser(int pkiUserID = default(int), int fkiTimezoneID = default(int), string sAvatarUrl = default(string), string sUserFirstname = default(string), string sUserLastname = default(string), string sEmailAddress = default(string), FieldEUserEzsignsendreminderfrequency eUserEzsignsendreminderfrequency = default(FieldEUserEzsignsendreminderfrequency), int iUserInterfacecolor = default(int), bool bUserInterfacedark = default(bool), int iUserListresult = default(int))
        {
            // to ensure "pkiUserID" is required (not null)
            if (pkiUserID == null)
            {
                throw new InvalidDataException("pkiUserID is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.PkiUserID = pkiUserID;
            }

            // to ensure "fkiTimezoneID" is required (not null)
            if (fkiTimezoneID == null)
            {
                throw new InvalidDataException("fkiTimezoneID is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.FkiTimezoneID = fkiTimezoneID;
            }

            // to ensure "sAvatarUrl" is required (not null)
            if (sAvatarUrl == null)
            {
                throw new InvalidDataException("sAvatarUrl is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.SAvatarUrl = sAvatarUrl;
            }

            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new InvalidDataException("sUserFirstname is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.SUserFirstname = sUserFirstname;
            }

            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new InvalidDataException("sUserLastname is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.SUserLastname = sUserLastname;
            }

            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new InvalidDataException("sEmailAddress is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.SEmailAddress = sEmailAddress;
            }

            // to ensure "eUserEzsignsendreminderfrequency" is required (not null)
            if (eUserEzsignsendreminderfrequency == null)
            {
                throw new InvalidDataException("eUserEzsignsendreminderfrequency is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.EUserEzsignsendreminderfrequency = eUserEzsignsendreminderfrequency;
            }

            // to ensure "iUserInterfacecolor" is required (not null)
            if (iUserInterfacecolor == null)
            {
                throw new InvalidDataException("iUserInterfacecolor is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.IUserInterfacecolor = iUserInterfacecolor;
            }

            // to ensure "bUserInterfacedark" is required (not null)
            if (bUserInterfacedark == null)
            {
                throw new InvalidDataException("bUserInterfacedark is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.BUserInterfacedark = bUserInterfacedark;
            }

            // to ensure "iUserListresult" is required (not null)
            if (iUserListresult == null)
            {
                throw new InvalidDataException("iUserListresult is a required property for ActivesessionResponseCompoundUser and cannot be null");
            }
            else
            {
                this.IUserListresult = iUserListresult;
            }

        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="pkiUserID", EmitDefaultValue=true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Timezone
        /// </summary>
        /// <value>The unique ID of the Timezone</value>
        [DataMember(Name="fkiTimezoneID", EmitDefaultValue=true)]
        public int FkiTimezoneID { get; set; }

        /// <summary>
        /// The url of the picture used as avatar
        /// </summary>
        /// <value>The url of the picture used as avatar</value>
        [DataMember(Name="sAvatarUrl", EmitDefaultValue=true)]
        public string SAvatarUrl { get; set; }

        /// <summary>
        /// The First name of the user
        /// </summary>
        /// <value>The First name of the user</value>
        [DataMember(Name="sUserFirstname", EmitDefaultValue=true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The Last name of the user
        /// </summary>
        /// <value>The Last name of the user</value>
        [DataMember(Name="sUserLastname", EmitDefaultValue=true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=true)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets EUserEzsignsendreminderfrequency
        /// </summary>
        [DataMember(Name="eUserEzsignsendreminderfrequency", EmitDefaultValue=true)]
        public FieldEUserEzsignsendreminderfrequency EUserEzsignsendreminderfrequency { get; set; }

        /// <summary>
        /// The int32 representation of the interface color. For example, RGB color #39435B would be 3752795
        /// </summary>
        /// <value>The int32 representation of the interface color. For example, RGB color #39435B would be 3752795</value>
        [DataMember(Name="iUserInterfacecolor", EmitDefaultValue=true)]
        public int IUserInterfacecolor { get; set; }

        /// <summary>
        /// Whether to use a dark mode interface
        /// </summary>
        /// <value>Whether to use a dark mode interface</value>
        [DataMember(Name="bUserInterfacedark", EmitDefaultValue=true)]
        public bool BUserInterfacedark { get; set; }

        /// <summary>
        /// The number of rows to return by default in lists
        /// </summary>
        /// <value>The number of rows to return by default in lists</value>
        [DataMember(Name="iUserListresult", EmitDefaultValue=true)]
        public int IUserListresult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivesessionResponseCompoundUser {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  FkiTimezoneID: ").Append(FkiTimezoneID).Append("\n");
            sb.Append("  SAvatarUrl: ").Append(SAvatarUrl).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  EUserEzsignsendreminderfrequency: ").Append(EUserEzsignsendreminderfrequency).Append("\n");
            sb.Append("  IUserInterfacecolor: ").Append(IUserInterfacecolor).Append("\n");
            sb.Append("  BUserInterfacedark: ").Append(BUserInterfacedark).Append("\n");
            sb.Append("  IUserListresult: ").Append(IUserListresult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivesessionResponseCompoundUser);
        }

        /// <summary>
        /// Returns true if ActivesessionResponseCompoundUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivesessionResponseCompoundUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivesessionResponseCompoundUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUserID == input.PkiUserID ||
                    (this.PkiUserID != null &&
                    this.PkiUserID.Equals(input.PkiUserID))
                ) && 
                (
                    this.FkiTimezoneID == input.FkiTimezoneID ||
                    (this.FkiTimezoneID != null &&
                    this.FkiTimezoneID.Equals(input.FkiTimezoneID))
                ) && 
                (
                    this.SAvatarUrl == input.SAvatarUrl ||
                    (this.SAvatarUrl != null &&
                    this.SAvatarUrl.Equals(input.SAvatarUrl))
                ) && 
                (
                    this.SUserFirstname == input.SUserFirstname ||
                    (this.SUserFirstname != null &&
                    this.SUserFirstname.Equals(input.SUserFirstname))
                ) && 
                (
                    this.SUserLastname == input.SUserLastname ||
                    (this.SUserLastname != null &&
                    this.SUserLastname.Equals(input.SUserLastname))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                ) && 
                (
                    this.EUserEzsignsendreminderfrequency == input.EUserEzsignsendreminderfrequency ||
                    (this.EUserEzsignsendreminderfrequency != null &&
                    this.EUserEzsignsendreminderfrequency.Equals(input.EUserEzsignsendreminderfrequency))
                ) && 
                (
                    this.IUserInterfacecolor == input.IUserInterfacecolor ||
                    (this.IUserInterfacecolor != null &&
                    this.IUserInterfacecolor.Equals(input.IUserInterfacecolor))
                ) && 
                (
                    this.BUserInterfacedark == input.BUserInterfacedark ||
                    (this.BUserInterfacedark != null &&
                    this.BUserInterfacedark.Equals(input.BUserInterfacedark))
                ) && 
                (
                    this.IUserListresult == input.IUserListresult ||
                    (this.IUserListresult != null &&
                    this.IUserListresult.Equals(input.IUserListresult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUserID != null)
                    hashCode = hashCode * 59 + this.PkiUserID.GetHashCode();
                if (this.FkiTimezoneID != null)
                    hashCode = hashCode * 59 + this.FkiTimezoneID.GetHashCode();
                if (this.SAvatarUrl != null)
                    hashCode = hashCode * 59 + this.SAvatarUrl.GetHashCode();
                if (this.SUserFirstname != null)
                    hashCode = hashCode * 59 + this.SUserFirstname.GetHashCode();
                if (this.SUserLastname != null)
                    hashCode = hashCode * 59 + this.SUserLastname.GetHashCode();
                if (this.SEmailAddress != null)
                    hashCode = hashCode * 59 + this.SEmailAddress.GetHashCode();
                if (this.EUserEzsignsendreminderfrequency != null)
                    hashCode = hashCode * 59 + this.EUserEzsignsendreminderfrequency.GetHashCode();
                if (this.IUserInterfacecolor != null)
                    hashCode = hashCode * 59 + this.IUserInterfacecolor.GetHashCode();
                if (this.BUserInterfacedark != null)
                    hashCode = hashCode * 59 + this.BUserInterfacedark.GetHashCode();
                if (this.IUserListresult != null)
                    hashCode = hashCode * 59 + this.IUserListresult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiUserID (int) minimum
            if(this.PkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserID, must be a value greater than or equal to 0.", new [] { "PkiUserID" });
            }



            // FkiTimezoneID (int) minimum
            if(this.FkiTimezoneID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiTimezoneID, must be a value greater than or equal to 0.", new [] { "FkiTimezoneID" });
            }



            // IUserInterfacecolor (int) minimum
            if(this.IUserInterfacecolor < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IUserInterfacecolor, must be a value greater than or equal to 0.", new [] { "IUserInterfacecolor" });
            }



            // IUserListresult (int) maximum
            if(this.IUserListresult > (int)500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IUserListresult, must be a value less than or equal to 500.", new [] { "IUserListresult" });
            }

            // IUserListresult (int) minimum
            if(this.IUserListresult < (int)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IUserListresult, must be a value greater than or equal to 5.", new [] { "IUserListresult" });
            }

            yield break;
        }
    }

}
