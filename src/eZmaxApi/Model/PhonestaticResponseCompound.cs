/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Phonestatic Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class PhonestaticResponseCompound :  IEquatable<PhonestaticResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonestaticResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhonestaticResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonestaticResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiPhonestaticID">The unique ID of the Phone. (required).</param>
        /// <param name="sPhonestaticE164">A phone number in E.164 Format.</param>
        /// <param name="sPhonestaticExtension">The extension of the phone number..</param>
        public PhonestaticResponseCompound(int pkiPhonestaticID = default(int), string sPhonestaticE164 = default(string), string sPhonestaticExtension = default(string))
        {
            // to ensure "pkiPhonestaticID" is required (not null)
            if (pkiPhonestaticID == null)
            {
                throw new InvalidDataException("pkiPhonestaticID is a required property for PhonestaticResponseCompound and cannot be null");
            }
            else
            {
                this.PkiPhonestaticID = pkiPhonestaticID;
            }

            this.SPhonestaticE164 = sPhonestaticE164;
            this.SPhonestaticExtension = sPhonestaticExtension;
        }

        /// <summary>
        /// The unique ID of the Phone.
        /// </summary>
        /// <value>The unique ID of the Phone.</value>
        [DataMember(Name="pkiPhonestaticID", EmitDefaultValue=true)]
        public int PkiPhonestaticID { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        [DataMember(Name="sPhonestaticE164", EmitDefaultValue=false)]
        public string SPhonestaticE164 { get; set; }

        /// <summary>
        /// The extension of the phone number.
        /// </summary>
        /// <value>The extension of the phone number.</value>
        [DataMember(Name="sPhonestaticExtension", EmitDefaultValue=false)]
        public string SPhonestaticExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhonestaticResponseCompound {\n");
            sb.Append("  PkiPhonestaticID: ").Append(PkiPhonestaticID).Append("\n");
            sb.Append("  SPhonestaticE164: ").Append(SPhonestaticE164).Append("\n");
            sb.Append("  SPhonestaticExtension: ").Append(SPhonestaticExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhonestaticResponseCompound);
        }

        /// <summary>
        /// Returns true if PhonestaticResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of PhonestaticResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhonestaticResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiPhonestaticID == input.PkiPhonestaticID ||
                    (this.PkiPhonestaticID != null &&
                    this.PkiPhonestaticID.Equals(input.PkiPhonestaticID))
                ) && 
                (
                    this.SPhonestaticE164 == input.SPhonestaticE164 ||
                    (this.SPhonestaticE164 != null &&
                    this.SPhonestaticE164.Equals(input.SPhonestaticE164))
                ) && 
                (
                    this.SPhonestaticExtension == input.SPhonestaticExtension ||
                    (this.SPhonestaticExtension != null &&
                    this.SPhonestaticExtension.Equals(input.SPhonestaticExtension))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiPhonestaticID != null)
                    hashCode = hashCode * 59 + this.PkiPhonestaticID.GetHashCode();
                if (this.SPhonestaticE164 != null)
                    hashCode = hashCode * 59 + this.SPhonestaticE164.GetHashCode();
                if (this.SPhonestaticExtension != null)
                    hashCode = hashCode * 59 + this.SPhonestaticExtension.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiPhonestaticID (int) minimum
            if(this.PkiPhonestaticID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPhonestaticID, must be a value greater than or equal to 0.", new [] { "PkiPhonestaticID" });
            }



            // SPhonestaticE164 (string) pattern
            Regex regexSPhonestaticE164 = new Regex(@"^\+[1-9]\d{1,14}$", RegexOptions.CultureInvariant);
            if (false == regexSPhonestaticE164.Match(this.SPhonestaticE164).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPhonestaticE164, must match a pattern of " + regexSPhonestaticE164, new [] { "SPhonestaticE164" });
            }



            // SPhonestaticExtension (string) pattern
            Regex regexSPhonestaticExtension = new Regex(@"^\d", RegexOptions.CultureInvariant);
            if (false == regexSPhonestaticExtension.Match(this.SPhonestaticExtension).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPhonestaticExtension, must match a pattern of " + regexSPhonestaticExtension, new [] { "SPhonestaticExtension" });
            }

            yield break;
        }
    }

}
