/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A part in the Reportsubsection 
    /// </summary>
    [DataContract(Name = "Common-Reportsubsectionpart")]
    public partial class CommonReportsubsectionpart : IValidatableObject
    {
        /// <summary>
        /// The type of the Reportsubsectionpart
        /// </summary>
        /// <value>The type of the Reportsubsectionpart</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EReportsubsectionpartTypeEnum
        {
            /// <summary>
            /// Enum Header for value: Header
            /// </summary>
            [EnumMember(Value = "Header")]
            Header = 1,

            /// <summary>
            /// Enum Body for value: Body
            /// </summary>
            [EnumMember(Value = "Body")]
            Body = 2,

            /// <summary>
            /// Enum Footer for value: Footer
            /// </summary>
            [EnumMember(Value = "Footer")]
            Footer = 3
        }


        /// <summary>
        /// The type of the Reportsubsectionpart
        /// </summary>
        /// <value>The type of the Reportsubsectionpart</value>
        [DataMember(Name = "eReportsubsectionpartType", IsRequired = true, EmitDefaultValue = true)]
        public EReportsubsectionpartTypeEnum EReportsubsectionpartType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportsubsectionpart" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonReportsubsectionpart() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportsubsectionpart" /> class.
        /// </summary>
        /// <param name="eReportsubsectionpartType">The type of the Reportsubsectionpart (required).</param>
        /// <param name="aObjReportrow">aObjReportrow (required).</param>
        public CommonReportsubsectionpart(EReportsubsectionpartTypeEnum eReportsubsectionpartType = default(EReportsubsectionpartTypeEnum), List<CommonReportrow> aObjReportrow = default(List<CommonReportrow>))
        {
            this.EReportsubsectionpartType = eReportsubsectionpartType;
            // to ensure "aObjReportrow" is required (not null)
            if (aObjReportrow == null)
            {
                throw new ArgumentNullException("aObjReportrow is a required property for CommonReportsubsectionpart and cannot be null");
            }
            this.AObjReportrow = aObjReportrow;
        }

        /// <summary>
        /// Gets or Sets AObjReportrow
        /// </summary>
        [DataMember(Name = "a_objReportrow", IsRequired = true, EmitDefaultValue = true)]
        public List<CommonReportrow> AObjReportrow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonReportsubsectionpart {\n");
            sb.Append("  EReportsubsectionpartType: ").Append(EReportsubsectionpartType).Append("\n");
            sb.Append("  AObjReportrow: ").Append(AObjReportrow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
