/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Module Object
    /// </summary>
    [DataContract(Name = "module-ResponseCompound")]
    public partial class ModuleResponseCompound : IEquatable<ModuleResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModuleResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiModuleID">The unique ID of the Module (required).</param>
        /// <param name="fkiModulegroupID">The unique ID of the Modulegroup (required).</param>
        /// <param name="eModuleInternalname">The Internal name of the Module.  This is theoretically an enum field but there are so many possibles values we decided not to list them all. (required).</param>
        /// <param name="sModuleNameX">The Name of the Module in the language of the requester (required).</param>
        /// <param name="bModuleRegistered">Whether the Module is registered or not (required).</param>
        /// <param name="bModuleRegisteredapi">Whether the Module is registered or not for api use (required).</param>
        /// <param name="aObjModulesection">aObjModulesection.</param>
        public ModuleResponseCompound(int pkiModuleID = default(int), int fkiModulegroupID = default(int), string eModuleInternalname = default(string), string sModuleNameX = default(string), bool bModuleRegistered = default(bool), bool bModuleRegisteredapi = default(bool), List<ModulesectionResponseCompound> aObjModulesection = default(List<ModulesectionResponseCompound>))
        {
            this.PkiModuleID = pkiModuleID;
            this.FkiModulegroupID = fkiModulegroupID;
            // to ensure "eModuleInternalname" is required (not null)
            if (eModuleInternalname == null)
            {
                throw new ArgumentNullException("eModuleInternalname is a required property for ModuleResponseCompound and cannot be null");
            }
            this.EModuleInternalname = eModuleInternalname;
            // to ensure "sModuleNameX" is required (not null)
            if (sModuleNameX == null)
            {
                throw new ArgumentNullException("sModuleNameX is a required property for ModuleResponseCompound and cannot be null");
            }
            this.SModuleNameX = sModuleNameX;
            this.BModuleRegistered = bModuleRegistered;
            this.BModuleRegisteredapi = bModuleRegisteredapi;
            this.AObjModulesection = aObjModulesection;
        }

        /// <summary>
        /// The unique ID of the Module
        /// </summary>
        /// <value>The unique ID of the Module</value>
        /* <example>40</example>*/
        [DataMember(Name = "pkiModuleID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiModuleID { get; set; }

        /// <summary>
        /// The unique ID of the Modulegroup
        /// </summary>
        /// <value>The unique ID of the Modulegroup</value>
        /* <example>46</example>*/
        [DataMember(Name = "fkiModulegroupID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiModulegroupID { get; set; }

        /// <summary>
        /// The Internal name of the Module.  This is theoretically an enum field but there are so many possibles values we decided not to list them all.
        /// </summary>
        /// <value>The Internal name of the Module.  This is theoretically an enum field but there are so many possibles values we decided not to list them all.</value>
        /* <example>Purchases</example>*/
        [DataMember(Name = "eModuleInternalname", IsRequired = true, EmitDefaultValue = true)]
        public string EModuleInternalname { get; set; }

        /// <summary>
        /// The Name of the Module in the language of the requester
        /// </summary>
        /// <value>The Name of the Module in the language of the requester</value>
        /* <example>Purchase</example>*/
        [DataMember(Name = "sModuleNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SModuleNameX { get; set; }

        /// <summary>
        /// Whether the Module is registered or not
        /// </summary>
        /// <value>Whether the Module is registered or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bModuleRegistered", IsRequired = true, EmitDefaultValue = true)]
        public bool BModuleRegistered { get; set; }

        /// <summary>
        /// Whether the Module is registered or not for api use
        /// </summary>
        /// <value>Whether the Module is registered or not for api use</value>
        /* <example>true</example>*/
        [DataMember(Name = "bModuleRegisteredapi", IsRequired = true, EmitDefaultValue = true)]
        public bool BModuleRegisteredapi { get; set; }

        /// <summary>
        /// Gets or Sets AObjModulesection
        /// </summary>
        [DataMember(Name = "a_objModulesection", EmitDefaultValue = false)]
        public List<ModulesectionResponseCompound> AObjModulesection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModuleResponseCompound {\n");
            sb.Append("  PkiModuleID: ").Append(PkiModuleID).Append("\n");
            sb.Append("  FkiModulegroupID: ").Append(FkiModulegroupID).Append("\n");
            sb.Append("  EModuleInternalname: ").Append(EModuleInternalname).Append("\n");
            sb.Append("  SModuleNameX: ").Append(SModuleNameX).Append("\n");
            sb.Append("  BModuleRegistered: ").Append(BModuleRegistered).Append("\n");
            sb.Append("  BModuleRegisteredapi: ").Append(BModuleRegisteredapi).Append("\n");
            sb.Append("  AObjModulesection: ").Append(AObjModulesection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModuleResponseCompound);
        }

        /// <summary>
        /// Returns true if ModuleResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ModuleResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModuleResponseCompound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiModuleID == input.PkiModuleID ||
                    this.PkiModuleID.Equals(input.PkiModuleID)
                ) && 
                (
                    this.FkiModulegroupID == input.FkiModulegroupID ||
                    this.FkiModulegroupID.Equals(input.FkiModulegroupID)
                ) && 
                (
                    this.EModuleInternalname == input.EModuleInternalname ||
                    (this.EModuleInternalname != null &&
                    this.EModuleInternalname.Equals(input.EModuleInternalname))
                ) && 
                (
                    this.SModuleNameX == input.SModuleNameX ||
                    (this.SModuleNameX != null &&
                    this.SModuleNameX.Equals(input.SModuleNameX))
                ) && 
                (
                    this.BModuleRegistered == input.BModuleRegistered ||
                    this.BModuleRegistered.Equals(input.BModuleRegistered)
                ) && 
                (
                    this.BModuleRegisteredapi == input.BModuleRegisteredapi ||
                    this.BModuleRegisteredapi.Equals(input.BModuleRegisteredapi)
                ) && 
                (
                    this.AObjModulesection == input.AObjModulesection ||
                    this.AObjModulesection != null &&
                    input.AObjModulesection != null &&
                    this.AObjModulesection.SequenceEqual(input.AObjModulesection)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiModuleID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiModulegroupID.GetHashCode();
                if (this.EModuleInternalname != null)
                {
                    hashCode = (hashCode * 59) + this.EModuleInternalname.GetHashCode();
                }
                if (this.SModuleNameX != null)
                {
                    hashCode = (hashCode * 59) + this.SModuleNameX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BModuleRegistered.GetHashCode();
                hashCode = (hashCode * 59) + this.BModuleRegisteredapi.GetHashCode();
                if (this.AObjModulesection != null)
                {
                    hashCode = (hashCode * 59) + this.AObjModulesection.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiModuleID (int) minimum
            if (this.PkiModuleID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiModuleID, must be a value greater than or equal to 0.", new [] { "PkiModuleID" });
            }

            // FkiModulegroupID (int) maximum
            if (this.FkiModulegroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModulegroupID, must be a value less than or equal to 255.", new [] { "FkiModulegroupID" });
            }

            // FkiModulegroupID (int) minimum
            if (this.FkiModulegroupID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModulegroupID, must be a value greater than or equal to 1.", new [] { "FkiModulegroupID" });
            }

            yield break;
        }
    }

}
