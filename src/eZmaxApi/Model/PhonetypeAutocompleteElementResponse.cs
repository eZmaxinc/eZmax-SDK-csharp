/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Phonetype AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class PhonetypeAutocompleteElementResponse :  IEquatable<PhonetypeAutocompleteElementResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonetypeAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhonetypeAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhonetypeAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiPhonetypeID">The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| (required).</param>
        /// <param name="sPhonetypeNameX">The name of the Phonetype in the language of the requester (required).</param>
        /// <param name="bPhonetypeIsactive">Whether the Phonetype is active or not (required).</param>
        public PhonetypeAutocompleteElementResponse(int pkiPhonetypeID = default(int), string sPhonetypeNameX = default(string), bool bPhonetypeIsactive = default(bool))
        {
            // to ensure "pkiPhonetypeID" is required (not null)
            if (pkiPhonetypeID == null)
            {
                throw new InvalidDataException("pkiPhonetypeID is a required property for PhonetypeAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiPhonetypeID = pkiPhonetypeID;
            }

            // to ensure "sPhonetypeNameX" is required (not null)
            if (sPhonetypeNameX == null)
            {
                throw new InvalidDataException("sPhonetypeNameX is a required property for PhonetypeAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SPhonetypeNameX = sPhonetypeNameX;
            }

            // to ensure "bPhonetypeIsactive" is required (not null)
            if (bPhonetypeIsactive == null)
            {
                throw new InvalidDataException("bPhonetypeIsactive is a required property for PhonetypeAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BPhonetypeIsactive = bPhonetypeIsactive;
            }

        }

        /// <summary>
        /// The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
        /// </summary>
        /// <value>The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|</value>
        [DataMember(Name="pkiPhonetypeID", EmitDefaultValue=true)]
        public int PkiPhonetypeID { get; set; }

        /// <summary>
        /// The name of the Phonetype in the language of the requester
        /// </summary>
        /// <value>The name of the Phonetype in the language of the requester</value>
        [DataMember(Name="sPhonetypeNameX", EmitDefaultValue=true)]
        public string SPhonetypeNameX { get; set; }

        /// <summary>
        /// Whether the Phonetype is active or not
        /// </summary>
        /// <value>Whether the Phonetype is active or not</value>
        [DataMember(Name="bPhonetypeIsactive", EmitDefaultValue=true)]
        public bool BPhonetypeIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhonetypeAutocompleteElementResponse {\n");
            sb.Append("  PkiPhonetypeID: ").Append(PkiPhonetypeID).Append("\n");
            sb.Append("  SPhonetypeNameX: ").Append(SPhonetypeNameX).Append("\n");
            sb.Append("  BPhonetypeIsactive: ").Append(BPhonetypeIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhonetypeAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if PhonetypeAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PhonetypeAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhonetypeAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiPhonetypeID == input.PkiPhonetypeID ||
                    (this.PkiPhonetypeID != null &&
                    this.PkiPhonetypeID.Equals(input.PkiPhonetypeID))
                ) && 
                (
                    this.SPhonetypeNameX == input.SPhonetypeNameX ||
                    (this.SPhonetypeNameX != null &&
                    this.SPhonetypeNameX.Equals(input.SPhonetypeNameX))
                ) && 
                (
                    this.BPhonetypeIsactive == input.BPhonetypeIsactive ||
                    (this.BPhonetypeIsactive != null &&
                    this.BPhonetypeIsactive.Equals(input.BPhonetypeIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiPhonetypeID != null)
                    hashCode = hashCode * 59 + this.PkiPhonetypeID.GetHashCode();
                if (this.SPhonetypeNameX != null)
                    hashCode = hashCode * 59 + this.SPhonetypeNameX.GetHashCode();
                if (this.BPhonetypeIsactive != null)
                    hashCode = hashCode * 59 + this.BPhonetypeIsactive.GetHashCode();
                return hashCode;
            }
        }
    }

}
