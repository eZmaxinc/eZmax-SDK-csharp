/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// The description of the Billingentityinternal
    /// </summary>
    [DataContract(Name = "Multilingual-BillingentityinternalDescription")]
    public partial class MultilingualBillingentityinternalDescription : IEquatable<MultilingualBillingentityinternalDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultilingualBillingentityinternalDescription" /> class.
        /// </summary>
        /// <param name="sBillingentityinternalDescription1">The description of the Billingentityinternal in French.</param>
        /// <param name="sBillingentityinternalDescription2">The description of the Billingentityinternal in English.</param>
        public MultilingualBillingentityinternalDescription(string sBillingentityinternalDescription1 = default(string), string sBillingentityinternalDescription2 = default(string))
        {
            this.SBillingentityinternalDescription1 = sBillingentityinternalDescription1;
            this.SBillingentityinternalDescription2 = sBillingentityinternalDescription2;
        }

        /// <summary>
        /// The description of the Billingentityinternal in French
        /// </summary>
        /// <value>The description of the Billingentityinternal in French</value>
		/* <example>DÃ©faut</example>*/
        [DataMember(Name = "sBillingentityinternalDescription1", EmitDefaultValue = false)]
        public string SBillingentityinternalDescription1 { get; set; }

        /// <summary>
        /// The description of the Billingentityinternal in English
        /// </summary>
        /// <value>The description of the Billingentityinternal in English</value>
		/* <example>Default</example>*/
        [DataMember(Name = "sBillingentityinternalDescription2", EmitDefaultValue = false)]
        public string SBillingentityinternalDescription2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultilingualBillingentityinternalDescription {\n");
            sb.Append("  SBillingentityinternalDescription1: ").Append(SBillingentityinternalDescription1).Append("\n");
            sb.Append("  SBillingentityinternalDescription2: ").Append(SBillingentityinternalDescription2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultilingualBillingentityinternalDescription);
        }

        /// <summary>
        /// Returns true if MultilingualBillingentityinternalDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of MultilingualBillingentityinternalDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultilingualBillingentityinternalDescription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SBillingentityinternalDescription1 == input.SBillingentityinternalDescription1 ||
                    (this.SBillingentityinternalDescription1 != null &&
                    this.SBillingentityinternalDescription1.Equals(input.SBillingentityinternalDescription1))
                ) && 
                (
                    this.SBillingentityinternalDescription2 == input.SBillingentityinternalDescription2 ||
                    (this.SBillingentityinternalDescription2 != null &&
                    this.SBillingentityinternalDescription2.Equals(input.SBillingentityinternalDescription2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SBillingentityinternalDescription1 != null)
                {
                    hashCode = (hashCode * 59) + this.SBillingentityinternalDescription1.GetHashCode();
                }
                if (this.SBillingentityinternalDescription2 != null)
                {
                    hashCode = (hashCode * 59) + this.SBillingentityinternalDescription2.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SBillingentityinternalDescription1 != null) {
                // SBillingentityinternalDescription1 (string) pattern
                Regex regexSBillingentityinternalDescription1 = new Regex(@"^.{0,70}$", RegexOptions.CultureInvariant);
                if (!regexSBillingentityinternalDescription1.Match(this.SBillingentityinternalDescription1).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBillingentityinternalDescription1, must match a pattern of " + regexSBillingentityinternalDescription1, new [] { "SBillingentityinternalDescription1" });
                }
            }

            if (this.SBillingentityinternalDescription2 != null) {
                // SBillingentityinternalDescription2 (string) pattern
                Regex regexSBillingentityinternalDescription2 = new Regex(@"^.{0,70}$", RegexOptions.CultureInvariant);
                if (!regexSBillingentityinternalDescription2.Match(this.SBillingentityinternalDescription2).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBillingentityinternalDescription2, must match a pattern of " + regexSBillingentityinternalDescription2, new [] { "SBillingentityinternalDescription2" });
                }
            }

            yield break;
        }
    }

}
