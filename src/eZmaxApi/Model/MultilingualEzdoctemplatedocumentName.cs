/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// The name1 of the Ezdoctemplatedocument
    /// </summary>
    [DataContract(Name = "Multilingual-EzdoctemplatedocumentName")]
    public partial class MultilingualEzdoctemplatedocumentName : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultilingualEzdoctemplatedocumentName" /> class.
        /// </summary>
        /// <param name="">The name1 of the Ezdoctemplatedocument.</param>
        /// <param name="">The name2 of the Ezdoctemplatedocument.</param>
        public MultilingualEzdoctemplatedocumentName(string  = default(string), string  = default(string))
        {
            this.SEzdoctemplatedocumentName1 = ;
            this.SEzdoctemplatedocumentName2 = ;
        }

        /// <summary>
        /// The name1 of the Ezdoctemplatedocument
        /// </summary>
        /// <value>The name1 of the Ezdoctemplatedocument</value>
        /* <example>Contrat type</example>*/
        [DataMember(Name = "sEzdoctemplatedocumentName1", EmitDefaultValue = false)]
        public string SEzdoctemplatedocumentName1 { get; set; }

        /// <summary>
        /// The name2 of the Ezdoctemplatedocument
        /// </summary>
        /// <value>The name2 of the Ezdoctemplatedocument</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzdoctemplatedocumentName2", EmitDefaultValue = false)]
        public string SEzdoctemplatedocumentName2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultilingualEzdoctemplatedocumentName {\n");
            sb.Append("  SEzdoctemplatedocumentName1: ").Append(SEzdoctemplatedocumentName1).Append("\n");
            sb.Append("  SEzdoctemplatedocumentName2: ").Append(SEzdoctemplatedocumentName2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SEzdoctemplatedocumentName1 != null) {
                // SEzdoctemplatedocumentName1 (string) pattern
                Regex regexSEzdoctemplatedocumentName1 = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzdoctemplatedocumentName1.Match(this.SEzdoctemplatedocumentName1).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzdoctemplatedocumentName1, must match a pattern of " + regexSEzdoctemplatedocumentName1, new [] { "SEzdoctemplatedocumentName1" });
                }
            }

            if (this.SEzdoctemplatedocumentName2 != null) {
                // SEzdoctemplatedocumentName2 (string) pattern
                Regex regexSEzdoctemplatedocumentName2 = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzdoctemplatedocumentName2.Match(this.SEzdoctemplatedocumentName2).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzdoctemplatedocumentName2, must match a pattern of " + regexSEzdoctemplatedocumentName2, new [] { "SEzdoctemplatedocumentName2" });
                }
            }

            yield break;
        }
    }

}
