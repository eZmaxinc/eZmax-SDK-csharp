/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Glaccount AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "glaccount-AutocompleteElement-Response")]
    public partial class GlaccountAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlaccountAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GlaccountAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GlaccountAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiGlaccountID">The unique ID of the Glaccount (required).</param>
        /// <param name="iGlaccountCode">The Code of the Glaccount (required).</param>
        /// <param name="sGlaccountDescriptionX">The Description for the Glaccount in the language of the requester (required).</param>
        /// <param name="bGlaccountIsactive">Whether the Glaccount is active or not (required).</param>
        public GlaccountAutocompleteElementResponse(int pkiGlaccountID = default(int), int iGlaccountCode = default(int), string sGlaccountDescriptionX = default(string), bool bGlaccountIsactive = default(bool))
        {
            this.PkiGlaccountID = pkiGlaccountID;
            this.IGlaccountCode = iGlaccountCode;
            // to ensure "sGlaccountDescriptionX" is required (not null)
            if (sGlaccountDescriptionX == null)
            {
                throw new ArgumentNullException("sGlaccountDescriptionX is a required property for GlaccountAutocompleteElementResponse and cannot be null");
            }
            this.SGlaccountDescriptionX = sGlaccountDescriptionX;
            this.BGlaccountIsactive = bGlaccountIsactive;
        }

        /// <summary>
        /// The unique ID of the Glaccount
        /// </summary>
        /// <value>The unique ID of the Glaccount</value>
        /* <example>35</example>*/
        [DataMember(Name = "pkiGlaccountID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiGlaccountID { get; set; }

        /// <summary>
        /// The Code of the Glaccount
        /// </summary>
        /// <value>The Code of the Glaccount</value>
        /* <example>2000</example>*/
        [DataMember(Name = "iGlaccountCode", IsRequired = true, EmitDefaultValue = true)]
        public int IGlaccountCode { get; set; }

        /// <summary>
        /// The Description for the Glaccount in the language of the requester
        /// </summary>
        /// <value>The Description for the Glaccount in the language of the requester</value>
        /* <example>Supplies income</example>*/
        [DataMember(Name = "sGlaccountDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SGlaccountDescriptionX { get; set; }

        /// <summary>
        /// Whether the Glaccount is active or not
        /// </summary>
        /// <value>Whether the Glaccount is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bGlaccountIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BGlaccountIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GlaccountAutocompleteElementResponse {\n");
            sb.Append("  PkiGlaccountID: ").Append(PkiGlaccountID).Append("\n");
            sb.Append("  IGlaccountCode: ").Append(IGlaccountCode).Append("\n");
            sb.Append("  SGlaccountDescriptionX: ").Append(SGlaccountDescriptionX).Append("\n");
            sb.Append("  BGlaccountIsactive: ").Append(BGlaccountIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiGlaccountID (int) minimum
            if (this.PkiGlaccountID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiGlaccountID, must be a value greater than or equal to 0.", new [] { "PkiGlaccountID" });
            }

            // IGlaccountCode (int) minimum
            if (this.IGlaccountCode < (int)0)
            {
                yield return new ValidationResult("Invalid value for IGlaccountCode, must be a value greater than or equal to 0.", new [] { "IGlaccountCode" });
            }

            yield break;
        }
    }

}
