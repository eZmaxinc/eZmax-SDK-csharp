/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntsarequirement AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class EzsigntsarequirementAutocompleteElementResponse :  IEquatable<EzsigntsarequirementAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntsarequirementAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntsarequirementAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntsarequirementAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sEzsigntsarequirementDescriptionX">The description of the Ezsigntsarequirement in the language of the requester (required).</param>
        /// <param name="pkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**| (required).</param>
        /// <param name="bEzsigntsarequirementIsactive">Whether the Ezsigntsarequirement is active or not (required).</param>
        /// <param name="bDisabled">Indicates if the element is disabled in the context (required).</param>
        public EzsigntsarequirementAutocompleteElementResponse(string sEzsigntsarequirementDescriptionX = default(string), int pkiEzsigntsarequirementID = default(int), bool bEzsigntsarequirementIsactive = default(bool), bool bDisabled = default(bool))
        {
            // to ensure "sEzsigntsarequirementDescriptionX" is required (not null)
            if (sEzsigntsarequirementDescriptionX == null)
            {
                throw new InvalidDataException("sEzsigntsarequirementDescriptionX is a required property for EzsigntsarequirementAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SEzsigntsarequirementDescriptionX = sEzsigntsarequirementDescriptionX;
            }

            // to ensure "pkiEzsigntsarequirementID" is required (not null)
            if (pkiEzsigntsarequirementID == null)
            {
                throw new InvalidDataException("pkiEzsigntsarequirementID is a required property for EzsigntsarequirementAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigntsarequirementID = pkiEzsigntsarequirementID;
            }

            // to ensure "bEzsigntsarequirementIsactive" is required (not null)
            if (bEzsigntsarequirementIsactive == null)
            {
                throw new InvalidDataException("bEzsigntsarequirementIsactive is a required property for EzsigntsarequirementAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BEzsigntsarequirementIsactive = bEzsigntsarequirementIsactive;
            }

            // to ensure "bDisabled" is required (not null)
            if (bDisabled == null)
            {
                throw new InvalidDataException("bDisabled is a required property for EzsigntsarequirementAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BDisabled = bDisabled;
            }

        }

        /// <summary>
        /// The description of the Ezsigntsarequirement in the language of the requester
        /// </summary>
        /// <value>The description of the Ezsigntsarequirement in the language of the requester</value>
        [DataMember(Name="sEzsigntsarequirementDescriptionX", EmitDefaultValue=true)]
        public string SEzsigntsarequirementDescriptionX { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        [DataMember(Name="pkiEzsigntsarequirementID", EmitDefaultValue=true)]
        public int PkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// Whether the Ezsigntsarequirement is active or not
        /// </summary>
        /// <value>Whether the Ezsigntsarequirement is active or not</value>
        [DataMember(Name="bEzsigntsarequirementIsactive", EmitDefaultValue=true)]
        public bool BEzsigntsarequirementIsactive { get; set; }

        /// <summary>
        /// Indicates if the element is disabled in the context
        /// </summary>
        /// <value>Indicates if the element is disabled in the context</value>
        [DataMember(Name="bDisabled", EmitDefaultValue=true)]
        public bool BDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntsarequirementAutocompleteElementResponse {\n");
            sb.Append("  SEzsigntsarequirementDescriptionX: ").Append(SEzsigntsarequirementDescriptionX).Append("\n");
            sb.Append("  PkiEzsigntsarequirementID: ").Append(PkiEzsigntsarequirementID).Append("\n");
            sb.Append("  BEzsigntsarequirementIsactive: ").Append(BEzsigntsarequirementIsactive).Append("\n");
            sb.Append("  BDisabled: ").Append(BDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntsarequirementAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if EzsigntsarequirementAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntsarequirementAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntsarequirementAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SEzsigntsarequirementDescriptionX == input.SEzsigntsarequirementDescriptionX ||
                    (this.SEzsigntsarequirementDescriptionX != null &&
                    this.SEzsigntsarequirementDescriptionX.Equals(input.SEzsigntsarequirementDescriptionX))
                ) && 
                (
                    this.PkiEzsigntsarequirementID == input.PkiEzsigntsarequirementID ||
                    (this.PkiEzsigntsarequirementID != null &&
                    this.PkiEzsigntsarequirementID.Equals(input.PkiEzsigntsarequirementID))
                ) && 
                (
                    this.BEzsigntsarequirementIsactive == input.BEzsigntsarequirementIsactive ||
                    (this.BEzsigntsarequirementIsactive != null &&
                    this.BEzsigntsarequirementIsactive.Equals(input.BEzsigntsarequirementIsactive))
                ) && 
                (
                    this.BDisabled == input.BDisabled ||
                    (this.BDisabled != null &&
                    this.BDisabled.Equals(input.BDisabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SEzsigntsarequirementDescriptionX != null)
                    hashCode = hashCode * 59 + this.SEzsigntsarequirementDescriptionX.GetHashCode();
                if (this.PkiEzsigntsarequirementID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntsarequirementID.GetHashCode();
                if (this.BEzsigntsarequirementIsactive != null)
                    hashCode = hashCode * 59 + this.BEzsigntsarequirementIsactive.GetHashCode();
                if (this.BDisabled != null)
                    hashCode = hashCode * 59 + this.BDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntsarequirementID (int) maximum
            if(this.PkiEzsigntsarequirementID > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "PkiEzsigntsarequirementID" });
            }

            // PkiEzsigntsarequirementID (int) minimum
            if(this.PkiEzsigntsarequirementID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "PkiEzsigntsarequirementID" });
            }

            yield break;
        }
    }

}
