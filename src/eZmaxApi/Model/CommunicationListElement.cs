/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communication List Element
    /// </summary>
    [DataContract]
    public partial class CommunicationListElement :  IEquatable<CommunicationListElement>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ECommunicationDirection
        /// </summary>
        [DataMember(Name="eCommunicationDirection", EmitDefaultValue=true)]
        public ComputedECommunicationDirection ECommunicationDirection { get; set; }
        /// <summary>
        /// Gets or Sets ECommunicationImportance
        /// </summary>
        [DataMember(Name="eCommunicationImportance", EmitDefaultValue=true)]
        public FieldECommunicationImportance ECommunicationImportance { get; set; }
        /// <summary>
        /// Gets or Sets ECommunicationType
        /// </summary>
        [DataMember(Name="eCommunicationType", EmitDefaultValue=true)]
        public FieldECommunicationType ECommunicationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationListElement" /> class.
        /// </summary>
        /// <param name="pkiCommunicationID">The unique ID of the Communication. (required).</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder.</param>
        /// <param name="fkiInscriptionID">The unique ID of the Inscription..</param>
        /// <param name="fkiInscriptionnotauthenticatedID">The unique ID of the Inscriptionnotauthenticated..</param>
        /// <param name="dtCreatedDate">The date and time at which the object was created (required).</param>
        /// <param name="eCommunicationDirection">eCommunicationDirection (required).</param>
        /// <param name="eCommunicationImportance">eCommunicationImportance (required).</param>
        /// <param name="eCommunicationType">eCommunicationType (required).</param>
        /// <param name="iCommunicationrecipientCount">The count of Communicationrecipient (required).</param>
        /// <param name="sCommunicationSubject">The subject of the Communication (required).</param>
        /// <param name="sCommunicationSender">The sender name of the Communication (required).</param>
        /// <param name="sCommunicationRecipient">The recipients&#39; name of the Communication (required).</param>
        public CommunicationListElement(int pkiCommunicationID = default(int), int fkiEzsignfolderID = default(int), int fkiInscriptionID = default(int), int fkiInscriptionnotauthenticatedID = default(int), string dtCreatedDate = default(string), ComputedECommunicationDirection eCommunicationDirection = default(ComputedECommunicationDirection), FieldECommunicationImportance eCommunicationImportance = default(FieldECommunicationImportance), FieldECommunicationType eCommunicationType = default(FieldECommunicationType), int iCommunicationrecipientCount = default(int), string sCommunicationSubject = default(string), string sCommunicationSender = default(string), string sCommunicationRecipient = default(string))
        {
            // to ensure "pkiCommunicationID" is required (not null)
            if (pkiCommunicationID == null)
            {
                throw new InvalidDataException("pkiCommunicationID is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.PkiCommunicationID = pkiCommunicationID;
            }

            // to ensure "dtCreatedDate" is required (not null)
            if (dtCreatedDate == null)
            {
                throw new InvalidDataException("dtCreatedDate is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.DtCreatedDate = dtCreatedDate;
            }

            // to ensure "eCommunicationDirection" is required (not null)
            if (eCommunicationDirection == null)
            {
                throw new InvalidDataException("eCommunicationDirection is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.ECommunicationDirection = eCommunicationDirection;
            }

            // to ensure "eCommunicationImportance" is required (not null)
            if (eCommunicationImportance == null)
            {
                throw new InvalidDataException("eCommunicationImportance is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.ECommunicationImportance = eCommunicationImportance;
            }

            // to ensure "eCommunicationType" is required (not null)
            if (eCommunicationType == null)
            {
                throw new InvalidDataException("eCommunicationType is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.ECommunicationType = eCommunicationType;
            }

            // to ensure "iCommunicationrecipientCount" is required (not null)
            if (iCommunicationrecipientCount == null)
            {
                throw new InvalidDataException("iCommunicationrecipientCount is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.ICommunicationrecipientCount = iCommunicationrecipientCount;
            }

            // to ensure "sCommunicationSubject" is required (not null)
            if (sCommunicationSubject == null)
            {
                throw new InvalidDataException("sCommunicationSubject is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.SCommunicationSubject = sCommunicationSubject;
            }

            // to ensure "sCommunicationSender" is required (not null)
            if (sCommunicationSender == null)
            {
                throw new InvalidDataException("sCommunicationSender is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.SCommunicationSender = sCommunicationSender;
            }

            // to ensure "sCommunicationRecipient" is required (not null)
            if (sCommunicationRecipient == null)
            {
                throw new InvalidDataException("sCommunicationRecipient is a required property for CommunicationListElement and cannot be null");
            }
            else
            {
                this.SCommunicationRecipient = sCommunicationRecipient;
            }

            this.FkiEzsignfolderID = fkiEzsignfolderID;
            this.FkiInscriptionID = fkiInscriptionID;
            this.FkiInscriptionnotauthenticatedID = fkiInscriptionnotauthenticatedID;
        }

        /// <summary>
        /// The unique ID of the Communication.
        /// </summary>
        /// <value>The unique ID of the Communication.</value>
        [DataMember(Name="pkiCommunicationID", EmitDefaultValue=true)]
        public int PkiCommunicationID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        [DataMember(Name="fkiEzsignfolderID", EmitDefaultValue=false)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// The unique ID of the Inscription.
        /// </summary>
        /// <value>The unique ID of the Inscription.</value>
        [DataMember(Name="fkiInscriptionID", EmitDefaultValue=false)]
        public int FkiInscriptionID { get; set; }

        /// <summary>
        /// The unique ID of the Inscriptionnotauthenticated.
        /// </summary>
        /// <value>The unique ID of the Inscriptionnotauthenticated.</value>
        [DataMember(Name="fkiInscriptionnotauthenticatedID", EmitDefaultValue=false)]
        public int FkiInscriptionnotauthenticatedID { get; set; }

        /// <summary>
        /// The date and time at which the object was created
        /// </summary>
        /// <value>The date and time at which the object was created</value>
        [DataMember(Name="dtCreatedDate", EmitDefaultValue=true)]
        public string DtCreatedDate { get; set; }




        /// <summary>
        /// The count of Communicationrecipient
        /// </summary>
        /// <value>The count of Communicationrecipient</value>
        [DataMember(Name="iCommunicationrecipientCount", EmitDefaultValue=true)]
        public int ICommunicationrecipientCount { get; set; }

        /// <summary>
        /// The subject of the Communication
        /// </summary>
        /// <value>The subject of the Communication</value>
        [DataMember(Name="sCommunicationSubject", EmitDefaultValue=true)]
        public string SCommunicationSubject { get; set; }

        /// <summary>
        /// The sender name of the Communication
        /// </summary>
        /// <value>The sender name of the Communication</value>
        [DataMember(Name="sCommunicationSender", EmitDefaultValue=true)]
        public string SCommunicationSender { get; set; }

        /// <summary>
        /// The recipients&#39; name of the Communication
        /// </summary>
        /// <value>The recipients&#39; name of the Communication</value>
        [DataMember(Name="sCommunicationRecipient", EmitDefaultValue=true)]
        public string SCommunicationRecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationListElement {\n");
            sb.Append("  PkiCommunicationID: ").Append(PkiCommunicationID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  FkiInscriptionID: ").Append(FkiInscriptionID).Append("\n");
            sb.Append("  FkiInscriptionnotauthenticatedID: ").Append(FkiInscriptionnotauthenticatedID).Append("\n");
            sb.Append("  DtCreatedDate: ").Append(DtCreatedDate).Append("\n");
            sb.Append("  ECommunicationDirection: ").Append(ECommunicationDirection).Append("\n");
            sb.Append("  ECommunicationImportance: ").Append(ECommunicationImportance).Append("\n");
            sb.Append("  ECommunicationType: ").Append(ECommunicationType).Append("\n");
            sb.Append("  ICommunicationrecipientCount: ").Append(ICommunicationrecipientCount).Append("\n");
            sb.Append("  SCommunicationSubject: ").Append(SCommunicationSubject).Append("\n");
            sb.Append("  SCommunicationSender: ").Append(SCommunicationSender).Append("\n");
            sb.Append("  SCommunicationRecipient: ").Append(SCommunicationRecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationListElement);
        }

        /// <summary>
        /// Returns true if CommunicationListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationListElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiCommunicationID == input.PkiCommunicationID ||
                    (this.PkiCommunicationID != null &&
                    this.PkiCommunicationID.Equals(input.PkiCommunicationID))
                ) && 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    (this.FkiEzsignfolderID != null &&
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID))
                ) && 
                (
                    this.FkiInscriptionID == input.FkiInscriptionID ||
                    (this.FkiInscriptionID != null &&
                    this.FkiInscriptionID.Equals(input.FkiInscriptionID))
                ) && 
                (
                    this.FkiInscriptionnotauthenticatedID == input.FkiInscriptionnotauthenticatedID ||
                    (this.FkiInscriptionnotauthenticatedID != null &&
                    this.FkiInscriptionnotauthenticatedID.Equals(input.FkiInscriptionnotauthenticatedID))
                ) && 
                (
                    this.DtCreatedDate == input.DtCreatedDate ||
                    (this.DtCreatedDate != null &&
                    this.DtCreatedDate.Equals(input.DtCreatedDate))
                ) && 
                (
                    this.ECommunicationDirection == input.ECommunicationDirection ||
                    (this.ECommunicationDirection != null &&
                    this.ECommunicationDirection.Equals(input.ECommunicationDirection))
                ) && 
                (
                    this.ECommunicationImportance == input.ECommunicationImportance ||
                    (this.ECommunicationImportance != null &&
                    this.ECommunicationImportance.Equals(input.ECommunicationImportance))
                ) && 
                (
                    this.ECommunicationType == input.ECommunicationType ||
                    (this.ECommunicationType != null &&
                    this.ECommunicationType.Equals(input.ECommunicationType))
                ) && 
                (
                    this.ICommunicationrecipientCount == input.ICommunicationrecipientCount ||
                    (this.ICommunicationrecipientCount != null &&
                    this.ICommunicationrecipientCount.Equals(input.ICommunicationrecipientCount))
                ) && 
                (
                    this.SCommunicationSubject == input.SCommunicationSubject ||
                    (this.SCommunicationSubject != null &&
                    this.SCommunicationSubject.Equals(input.SCommunicationSubject))
                ) && 
                (
                    this.SCommunicationSender == input.SCommunicationSender ||
                    (this.SCommunicationSender != null &&
                    this.SCommunicationSender.Equals(input.SCommunicationSender))
                ) && 
                (
                    this.SCommunicationRecipient == input.SCommunicationRecipient ||
                    (this.SCommunicationRecipient != null &&
                    this.SCommunicationRecipient.Equals(input.SCommunicationRecipient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiCommunicationID != null)
                    hashCode = hashCode * 59 + this.PkiCommunicationID.GetHashCode();
                if (this.FkiEzsignfolderID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfolderID.GetHashCode();
                if (this.FkiInscriptionID != null)
                    hashCode = hashCode * 59 + this.FkiInscriptionID.GetHashCode();
                if (this.FkiInscriptionnotauthenticatedID != null)
                    hashCode = hashCode * 59 + this.FkiInscriptionnotauthenticatedID.GetHashCode();
                if (this.DtCreatedDate != null)
                    hashCode = hashCode * 59 + this.DtCreatedDate.GetHashCode();
                if (this.ECommunicationDirection != null)
                    hashCode = hashCode * 59 + this.ECommunicationDirection.GetHashCode();
                if (this.ECommunicationImportance != null)
                    hashCode = hashCode * 59 + this.ECommunicationImportance.GetHashCode();
                if (this.ECommunicationType != null)
                    hashCode = hashCode * 59 + this.ECommunicationType.GetHashCode();
                if (this.ICommunicationrecipientCount != null)
                    hashCode = hashCode * 59 + this.ICommunicationrecipientCount.GetHashCode();
                if (this.SCommunicationSubject != null)
                    hashCode = hashCode * 59 + this.SCommunicationSubject.GetHashCode();
                if (this.SCommunicationSender != null)
                    hashCode = hashCode * 59 + this.SCommunicationSender.GetHashCode();
                if (this.SCommunicationRecipient != null)
                    hashCode = hashCode * 59 + this.SCommunicationRecipient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiCommunicationID (int) minimum
            if(this.PkiCommunicationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCommunicationID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationID" });
            }



            // FkiEzsignfolderID (int) minimum
            if(this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }



            // FkiInscriptionID (int) minimum
            if(this.FkiInscriptionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiInscriptionID, must be a value greater than or equal to 0.", new [] { "FkiInscriptionID" });
            }



            // FkiInscriptionnotauthenticatedID (int) minimum
            if(this.FkiInscriptionnotauthenticatedID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiInscriptionnotauthenticatedID, must be a value greater than or equal to 0.", new [] { "FkiInscriptionnotauthenticatedID" });
            }

            yield break;
        }
    }

}
