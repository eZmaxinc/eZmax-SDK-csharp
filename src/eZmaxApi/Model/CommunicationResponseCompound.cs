/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communication Object
    /// </summary>
    [DataContract]
    public partial class CommunicationResponseCompound :  IEquatable<CommunicationResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ECommunicationEmailimportance
        /// </summary>
        [DataMember(Name="eCommunicationEmailimportance", EmitDefaultValue=false)]
        public FieldECommunicationEmailimportance? ECommunicationEmailimportance { get; set; }
        /// <summary>
        /// Gets or Sets ECommunicationType
        /// </summary>
        [DataMember(Name="eCommunicationType", EmitDefaultValue=true)]
        public FieldECommunicationType ECommunicationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiCommunicationID">The unique ID of the Communication. (required).</param>
        /// <param name="eCommunicationEmailimportance">eCommunicationEmailimportance.</param>
        /// <param name="eCommunicationType">eCommunicationType (required).</param>
        /// <param name="sCommunicationSubject">The Subject of the Communication (required).</param>
        /// <param name="dtCommunicationSentdate">The send date and time at which the Communication was sent. (required).</param>
        /// <param name="objContactFrom">objContactFrom (required).</param>
        /// <param name="aObjCommunicationattachment">aObjCommunicationattachment (required).</param>
        /// <param name="aObjCommunicationrecipient">aObjCommunicationrecipient (required).</param>
        /// <param name="aObjCommunicationexternalrecipient">aObjCommunicationexternalrecipient (required).</param>
        /// <param name="aObjCommunicationimage">aObjCommunicationimage (required).</param>
        /// <param name="aObjCommunicationexternalimage">aObjCommunicationexternalimage (required).</param>
        public CommunicationResponseCompound(int pkiCommunicationID = default(int), FieldECommunicationEmailimportance? eCommunicationEmailimportance = default(FieldECommunicationEmailimportance?), FieldECommunicationType eCommunicationType = default(FieldECommunicationType), string sCommunicationSubject = default(string), string dtCommunicationSentdate = default(string), CustomContactNameResponse objContactFrom = default(CustomContactNameResponse), List<CommunicationattachmentResponseCompound> aObjCommunicationattachment = default(List<CommunicationattachmentResponseCompound>), List<CommunicationrecipientResponseCompound> aObjCommunicationrecipient = default(List<CommunicationrecipientResponseCompound>), List<CommunicationexternalrecipientResponseCompound> aObjCommunicationexternalrecipient = default(List<CommunicationexternalrecipientResponseCompound>), List<CommunicationimageResponseCompound> aObjCommunicationimage = default(List<CommunicationimageResponseCompound>), List<CommunicationexternalimageResponseCompound> aObjCommunicationexternalimage = default(List<CommunicationexternalimageResponseCompound>))
        {
            // to ensure "pkiCommunicationID" is required (not null)
            if (pkiCommunicationID == null)
            {
                throw new InvalidDataException("pkiCommunicationID is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.PkiCommunicationID = pkiCommunicationID;
            }

            // to ensure "eCommunicationType" is required (not null)
            if (eCommunicationType == null)
            {
                throw new InvalidDataException("eCommunicationType is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ECommunicationType = eCommunicationType;
            }

            // to ensure "sCommunicationSubject" is required (not null)
            if (sCommunicationSubject == null)
            {
                throw new InvalidDataException("sCommunicationSubject is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.SCommunicationSubject = sCommunicationSubject;
            }

            // to ensure "dtCommunicationSentdate" is required (not null)
            if (dtCommunicationSentdate == null)
            {
                throw new InvalidDataException("dtCommunicationSentdate is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.DtCommunicationSentdate = dtCommunicationSentdate;
            }

            // to ensure "objContactFrom" is required (not null)
            if (objContactFrom == null)
            {
                throw new InvalidDataException("objContactFrom is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ObjContactFrom = objContactFrom;
            }

            // to ensure "aObjCommunicationattachment" is required (not null)
            if (aObjCommunicationattachment == null)
            {
                throw new InvalidDataException("aObjCommunicationattachment is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationattachment = aObjCommunicationattachment;
            }

            // to ensure "aObjCommunicationrecipient" is required (not null)
            if (aObjCommunicationrecipient == null)
            {
                throw new InvalidDataException("aObjCommunicationrecipient is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationrecipient = aObjCommunicationrecipient;
            }

            // to ensure "aObjCommunicationexternalrecipient" is required (not null)
            if (aObjCommunicationexternalrecipient == null)
            {
                throw new InvalidDataException("aObjCommunicationexternalrecipient is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
            }

            // to ensure "aObjCommunicationimage" is required (not null)
            if (aObjCommunicationimage == null)
            {
                throw new InvalidDataException("aObjCommunicationimage is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationimage = aObjCommunicationimage;
            }

            // to ensure "aObjCommunicationexternalimage" is required (not null)
            if (aObjCommunicationexternalimage == null)
            {
                throw new InvalidDataException("aObjCommunicationexternalimage is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationexternalimage = aObjCommunicationexternalimage;
            }

            this.ECommunicationEmailimportance = eCommunicationEmailimportance;
        }

        /// <summary>
        /// The unique ID of the Communication.
        /// </summary>
        /// <value>The unique ID of the Communication.</value>
        [DataMember(Name="pkiCommunicationID", EmitDefaultValue=true)]
        public int PkiCommunicationID { get; set; }



        /// <summary>
        /// The Subject of the Communication
        /// </summary>
        /// <value>The Subject of the Communication</value>
        [DataMember(Name="sCommunicationSubject", EmitDefaultValue=true)]
        public string SCommunicationSubject { get; set; }

        /// <summary>
        /// The send date and time at which the Communication was sent.
        /// </summary>
        /// <value>The send date and time at which the Communication was sent.</value>
        [DataMember(Name="dtCommunicationSentdate", EmitDefaultValue=true)]
        public string DtCommunicationSentdate { get; set; }

        /// <summary>
        /// Gets or Sets ObjContactFrom
        /// </summary>
        [DataMember(Name="objContactFrom", EmitDefaultValue=true)]
        public CustomContactNameResponse ObjContactFrom { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationattachment
        /// </summary>
        [DataMember(Name="a_objCommunicationattachment", EmitDefaultValue=true)]
        public List<CommunicationattachmentResponseCompound> AObjCommunicationattachment { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationrecipient
        /// </summary>
        [DataMember(Name="a_objCommunicationrecipient", EmitDefaultValue=true)]
        public List<CommunicationrecipientResponseCompound> AObjCommunicationrecipient { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationexternalrecipient
        /// </summary>
        [DataMember(Name="a_objCommunicationexternalrecipient", EmitDefaultValue=true)]
        public List<CommunicationexternalrecipientResponseCompound> AObjCommunicationexternalrecipient { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationimage
        /// </summary>
        [DataMember(Name="a_objCommunicationimage", EmitDefaultValue=true)]
        public List<CommunicationimageResponseCompound> AObjCommunicationimage { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationexternalimage
        /// </summary>
        [DataMember(Name="a_objCommunicationexternalimage", EmitDefaultValue=true)]
        public List<CommunicationexternalimageResponseCompound> AObjCommunicationexternalimage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationResponseCompound {\n");
            sb.Append("  PkiCommunicationID: ").Append(PkiCommunicationID).Append("\n");
            sb.Append("  ECommunicationEmailimportance: ").Append(ECommunicationEmailimportance).Append("\n");
            sb.Append("  ECommunicationType: ").Append(ECommunicationType).Append("\n");
            sb.Append("  SCommunicationSubject: ").Append(SCommunicationSubject).Append("\n");
            sb.Append("  DtCommunicationSentdate: ").Append(DtCommunicationSentdate).Append("\n");
            sb.Append("  ObjContactFrom: ").Append(ObjContactFrom).Append("\n");
            sb.Append("  AObjCommunicationattachment: ").Append(AObjCommunicationattachment).Append("\n");
            sb.Append("  AObjCommunicationrecipient: ").Append(AObjCommunicationrecipient).Append("\n");
            sb.Append("  AObjCommunicationexternalrecipient: ").Append(AObjCommunicationexternalrecipient).Append("\n");
            sb.Append("  AObjCommunicationimage: ").Append(AObjCommunicationimage).Append("\n");
            sb.Append("  AObjCommunicationexternalimage: ").Append(AObjCommunicationexternalimage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationResponseCompound);
        }

        /// <summary>
        /// Returns true if CommunicationResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiCommunicationID == input.PkiCommunicationID ||
                    (this.PkiCommunicationID != null &&
                    this.PkiCommunicationID.Equals(input.PkiCommunicationID))
                ) && 
                (
                    this.ECommunicationEmailimportance == input.ECommunicationEmailimportance ||
                    (this.ECommunicationEmailimportance != null &&
                    this.ECommunicationEmailimportance.Equals(input.ECommunicationEmailimportance))
                ) && 
                (
                    this.ECommunicationType == input.ECommunicationType ||
                    (this.ECommunicationType != null &&
                    this.ECommunicationType.Equals(input.ECommunicationType))
                ) && 
                (
                    this.SCommunicationSubject == input.SCommunicationSubject ||
                    (this.SCommunicationSubject != null &&
                    this.SCommunicationSubject.Equals(input.SCommunicationSubject))
                ) && 
                (
                    this.DtCommunicationSentdate == input.DtCommunicationSentdate ||
                    (this.DtCommunicationSentdate != null &&
                    this.DtCommunicationSentdate.Equals(input.DtCommunicationSentdate))
                ) && 
                (
                    this.ObjContactFrom == input.ObjContactFrom ||
                    (this.ObjContactFrom != null &&
                    this.ObjContactFrom.Equals(input.ObjContactFrom))
                ) && 
                (
                    this.AObjCommunicationattachment == input.AObjCommunicationattachment ||
                    this.AObjCommunicationattachment != null &&
                    input.AObjCommunicationattachment != null &&
                    this.AObjCommunicationattachment.SequenceEqual(input.AObjCommunicationattachment)
                ) && 
                (
                    this.AObjCommunicationrecipient == input.AObjCommunicationrecipient ||
                    this.AObjCommunicationrecipient != null &&
                    input.AObjCommunicationrecipient != null &&
                    this.AObjCommunicationrecipient.SequenceEqual(input.AObjCommunicationrecipient)
                ) && 
                (
                    this.AObjCommunicationexternalrecipient == input.AObjCommunicationexternalrecipient ||
                    this.AObjCommunicationexternalrecipient != null &&
                    input.AObjCommunicationexternalrecipient != null &&
                    this.AObjCommunicationexternalrecipient.SequenceEqual(input.AObjCommunicationexternalrecipient)
                ) && 
                (
                    this.AObjCommunicationimage == input.AObjCommunicationimage ||
                    this.AObjCommunicationimage != null &&
                    input.AObjCommunicationimage != null &&
                    this.AObjCommunicationimage.SequenceEqual(input.AObjCommunicationimage)
                ) && 
                (
                    this.AObjCommunicationexternalimage == input.AObjCommunicationexternalimage ||
                    this.AObjCommunicationexternalimage != null &&
                    input.AObjCommunicationexternalimage != null &&
                    this.AObjCommunicationexternalimage.SequenceEqual(input.AObjCommunicationexternalimage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiCommunicationID != null)
                    hashCode = hashCode * 59 + this.PkiCommunicationID.GetHashCode();
                if (this.ECommunicationEmailimportance != null)
                    hashCode = hashCode * 59 + this.ECommunicationEmailimportance.GetHashCode();
                if (this.ECommunicationType != null)
                    hashCode = hashCode * 59 + this.ECommunicationType.GetHashCode();
                if (this.SCommunicationSubject != null)
                    hashCode = hashCode * 59 + this.SCommunicationSubject.GetHashCode();
                if (this.DtCommunicationSentdate != null)
                    hashCode = hashCode * 59 + this.DtCommunicationSentdate.GetHashCode();
                if (this.ObjContactFrom != null)
                    hashCode = hashCode * 59 + this.ObjContactFrom.GetHashCode();
                if (this.AObjCommunicationattachment != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationattachment.GetHashCode();
                if (this.AObjCommunicationrecipient != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationrecipient.GetHashCode();
                if (this.AObjCommunicationexternalrecipient != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationexternalrecipient.GetHashCode();
                if (this.AObjCommunicationimage != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationimage.GetHashCode();
                if (this.AObjCommunicationexternalimage != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationexternalimage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiCommunicationID (int) minimum
            if(this.PkiCommunicationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCommunicationID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationID" });
            }

            yield break;
        }
    }

}
