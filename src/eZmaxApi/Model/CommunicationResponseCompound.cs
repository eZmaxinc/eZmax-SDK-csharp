/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communication Object
    /// </summary>
    [DataContract]
    public partial class CommunicationResponseCompound :  IEquatable<CommunicationResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ECommunicationImportance
        /// </summary>
        [DataMember(Name="eCommunicationImportance", EmitDefaultValue=true)]
        public FieldECommunicationImportance ECommunicationImportance { get; set; }
        /// <summary>
        /// Gets or Sets ECommunicationType
        /// </summary>
        [DataMember(Name="eCommunicationType", EmitDefaultValue=true)]
        public FieldECommunicationType ECommunicationType { get; set; }
        /// <summary>
        /// Gets or Sets ECommunicationDirection
        /// </summary>
        [DataMember(Name="eCommunicationDirection", EmitDefaultValue=true)]
        public ComputedECommunicationDirection ECommunicationDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiCommunicationID">The unique ID of the Communication. (required).</param>
        /// <param name="eCommunicationImportance">eCommunicationImportance (required).</param>
        /// <param name="eCommunicationType">eCommunicationType (required).</param>
        /// <param name="sCommunicationSubject">The subject of the Communication (required).</param>
        /// <param name="sCommunicationBodyurl">The url of the body used as body in the Communication.</param>
        /// <param name="eCommunicationDirection">eCommunicationDirection (required).</param>
        /// <param name="iCommunicationrecipientCount">The count of Communicationrecipient (required).</param>
        /// <param name="objDescriptionstaticSender">objDescriptionstaticSender.</param>
        /// <param name="objEmailstaticSender">objEmailstaticSender.</param>
        /// <param name="objPhonestaticSender">objPhonestaticSender.</param>
        /// <param name="objAudit">objAudit (required).</param>
        /// <param name="aObjCommunicationattachment">aObjCommunicationattachment (required).</param>
        /// <param name="aObjCommunicationrecipient">aObjCommunicationrecipient (required).</param>
        /// <param name="aObjCommunicationexternalrecipient">aObjCommunicationexternalrecipient (required).</param>
        public CommunicationResponseCompound(int pkiCommunicationID = default(int), FieldECommunicationImportance eCommunicationImportance = default(FieldECommunicationImportance), FieldECommunicationType eCommunicationType = default(FieldECommunicationType), string sCommunicationSubject = default(string), string sCommunicationBodyurl = default(string), ComputedECommunicationDirection eCommunicationDirection = default(ComputedECommunicationDirection), int iCommunicationrecipientCount = default(int), DescriptionstaticResponse objDescriptionstaticSender = default(DescriptionstaticResponse), EmailstaticResponse objEmailstaticSender = default(EmailstaticResponse), PhonestaticResponse objPhonestaticSender = default(PhonestaticResponse), CommonAudit objAudit = default(CommonAudit), List<CommunicationattachmentResponseCompound> aObjCommunicationattachment = default(List<CommunicationattachmentResponseCompound>), List<CommunicationrecipientResponseCompound> aObjCommunicationrecipient = default(List<CommunicationrecipientResponseCompound>), List<CommunicationexternalrecipientResponseCompound> aObjCommunicationexternalrecipient = default(List<CommunicationexternalrecipientResponseCompound>))
        {
            // to ensure "pkiCommunicationID" is required (not null)
            if (pkiCommunicationID == null)
            {
                throw new InvalidDataException("pkiCommunicationID is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.PkiCommunicationID = pkiCommunicationID;
            }

            // to ensure "eCommunicationImportance" is required (not null)
            if (eCommunicationImportance == null)
            {
                throw new InvalidDataException("eCommunicationImportance is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ECommunicationImportance = eCommunicationImportance;
            }

            // to ensure "eCommunicationType" is required (not null)
            if (eCommunicationType == null)
            {
                throw new InvalidDataException("eCommunicationType is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ECommunicationType = eCommunicationType;
            }

            // to ensure "sCommunicationSubject" is required (not null)
            if (sCommunicationSubject == null)
            {
                throw new InvalidDataException("sCommunicationSubject is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.SCommunicationSubject = sCommunicationSubject;
            }

            // to ensure "eCommunicationDirection" is required (not null)
            if (eCommunicationDirection == null)
            {
                throw new InvalidDataException("eCommunicationDirection is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ECommunicationDirection = eCommunicationDirection;
            }

            // to ensure "iCommunicationrecipientCount" is required (not null)
            if (iCommunicationrecipientCount == null)
            {
                throw new InvalidDataException("iCommunicationrecipientCount is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ICommunicationrecipientCount = iCommunicationrecipientCount;
            }

            // to ensure "objAudit" is required (not null)
            if (objAudit == null)
            {
                throw new InvalidDataException("objAudit is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.ObjAudit = objAudit;
            }

            // to ensure "aObjCommunicationattachment" is required (not null)
            if (aObjCommunicationattachment == null)
            {
                throw new InvalidDataException("aObjCommunicationattachment is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationattachment = aObjCommunicationattachment;
            }

            // to ensure "aObjCommunicationrecipient" is required (not null)
            if (aObjCommunicationrecipient == null)
            {
                throw new InvalidDataException("aObjCommunicationrecipient is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationrecipient = aObjCommunicationrecipient;
            }

            // to ensure "aObjCommunicationexternalrecipient" is required (not null)
            if (aObjCommunicationexternalrecipient == null)
            {
                throw new InvalidDataException("aObjCommunicationexternalrecipient is a required property for CommunicationResponseCompound and cannot be null");
            }
            else
            {
                this.AObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
            }

            this.SCommunicationBodyurl = sCommunicationBodyurl;
            this.ObjDescriptionstaticSender = objDescriptionstaticSender;
            this.ObjEmailstaticSender = objEmailstaticSender;
            this.ObjPhonestaticSender = objPhonestaticSender;
        }

        /// <summary>
        /// The unique ID of the Communication.
        /// </summary>
        /// <value>The unique ID of the Communication.</value>
        [DataMember(Name="pkiCommunicationID", EmitDefaultValue=true)]
        public int PkiCommunicationID { get; set; }



        /// <summary>
        /// The subject of the Communication
        /// </summary>
        /// <value>The subject of the Communication</value>
        [DataMember(Name="sCommunicationSubject", EmitDefaultValue=true)]
        public string SCommunicationSubject { get; set; }

        /// <summary>
        /// The url of the body used as body in the Communication
        /// </summary>
        /// <value>The url of the body used as body in the Communication</value>
        [DataMember(Name="sCommunicationBodyurl", EmitDefaultValue=false)]
        public string SCommunicationBodyurl { get; set; }


        /// <summary>
        /// The count of Communicationrecipient
        /// </summary>
        /// <value>The count of Communicationrecipient</value>
        [DataMember(Name="iCommunicationrecipientCount", EmitDefaultValue=true)]
        public int ICommunicationrecipientCount { get; set; }

        /// <summary>
        /// Gets or Sets ObjDescriptionstaticSender
        /// </summary>
        [DataMember(Name="objDescriptionstaticSender", EmitDefaultValue=false)]
        public DescriptionstaticResponse ObjDescriptionstaticSender { get; set; }

        /// <summary>
        /// Gets or Sets ObjEmailstaticSender
        /// </summary>
        [DataMember(Name="objEmailstaticSender", EmitDefaultValue=false)]
        public EmailstaticResponse ObjEmailstaticSender { get; set; }

        /// <summary>
        /// Gets or Sets ObjPhonestaticSender
        /// </summary>
        [DataMember(Name="objPhonestaticSender", EmitDefaultValue=false)]
        public PhonestaticResponse ObjPhonestaticSender { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name="objAudit", EmitDefaultValue=true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationattachment
        /// </summary>
        [DataMember(Name="a_objCommunicationattachment", EmitDefaultValue=true)]
        public List<CommunicationattachmentResponseCompound> AObjCommunicationattachment { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationrecipient
        /// </summary>
        [DataMember(Name="a_objCommunicationrecipient", EmitDefaultValue=true)]
        public List<CommunicationrecipientResponseCompound> AObjCommunicationrecipient { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationexternalrecipient
        /// </summary>
        [DataMember(Name="a_objCommunicationexternalrecipient", EmitDefaultValue=true)]
        public List<CommunicationexternalrecipientResponseCompound> AObjCommunicationexternalrecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationResponseCompound {\n");
            sb.Append("  PkiCommunicationID: ").Append(PkiCommunicationID).Append("\n");
            sb.Append("  ECommunicationImportance: ").Append(ECommunicationImportance).Append("\n");
            sb.Append("  ECommunicationType: ").Append(ECommunicationType).Append("\n");
            sb.Append("  SCommunicationSubject: ").Append(SCommunicationSubject).Append("\n");
            sb.Append("  SCommunicationBodyurl: ").Append(SCommunicationBodyurl).Append("\n");
            sb.Append("  ECommunicationDirection: ").Append(ECommunicationDirection).Append("\n");
            sb.Append("  ICommunicationrecipientCount: ").Append(ICommunicationrecipientCount).Append("\n");
            sb.Append("  ObjDescriptionstaticSender: ").Append(ObjDescriptionstaticSender).Append("\n");
            sb.Append("  ObjEmailstaticSender: ").Append(ObjEmailstaticSender).Append("\n");
            sb.Append("  ObjPhonestaticSender: ").Append(ObjPhonestaticSender).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  AObjCommunicationattachment: ").Append(AObjCommunicationattachment).Append("\n");
            sb.Append("  AObjCommunicationrecipient: ").Append(AObjCommunicationrecipient).Append("\n");
            sb.Append("  AObjCommunicationexternalrecipient: ").Append(AObjCommunicationexternalrecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationResponseCompound);
        }

        /// <summary>
        /// Returns true if CommunicationResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiCommunicationID == input.PkiCommunicationID ||
                    (this.PkiCommunicationID != null &&
                    this.PkiCommunicationID.Equals(input.PkiCommunicationID))
                ) && 
                (
                    this.ECommunicationImportance == input.ECommunicationImportance ||
                    (this.ECommunicationImportance != null &&
                    this.ECommunicationImportance.Equals(input.ECommunicationImportance))
                ) && 
                (
                    this.ECommunicationType == input.ECommunicationType ||
                    (this.ECommunicationType != null &&
                    this.ECommunicationType.Equals(input.ECommunicationType))
                ) && 
                (
                    this.SCommunicationSubject == input.SCommunicationSubject ||
                    (this.SCommunicationSubject != null &&
                    this.SCommunicationSubject.Equals(input.SCommunicationSubject))
                ) && 
                (
                    this.SCommunicationBodyurl == input.SCommunicationBodyurl ||
                    (this.SCommunicationBodyurl != null &&
                    this.SCommunicationBodyurl.Equals(input.SCommunicationBodyurl))
                ) && 
                (
                    this.ECommunicationDirection == input.ECommunicationDirection ||
                    (this.ECommunicationDirection != null &&
                    this.ECommunicationDirection.Equals(input.ECommunicationDirection))
                ) && 
                (
                    this.ICommunicationrecipientCount == input.ICommunicationrecipientCount ||
                    (this.ICommunicationrecipientCount != null &&
                    this.ICommunicationrecipientCount.Equals(input.ICommunicationrecipientCount))
                ) && 
                (
                    this.ObjDescriptionstaticSender == input.ObjDescriptionstaticSender ||
                    (this.ObjDescriptionstaticSender != null &&
                    this.ObjDescriptionstaticSender.Equals(input.ObjDescriptionstaticSender))
                ) && 
                (
                    this.ObjEmailstaticSender == input.ObjEmailstaticSender ||
                    (this.ObjEmailstaticSender != null &&
                    this.ObjEmailstaticSender.Equals(input.ObjEmailstaticSender))
                ) && 
                (
                    this.ObjPhonestaticSender == input.ObjPhonestaticSender ||
                    (this.ObjPhonestaticSender != null &&
                    this.ObjPhonestaticSender.Equals(input.ObjPhonestaticSender))
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                ) && 
                (
                    this.AObjCommunicationattachment == input.AObjCommunicationattachment ||
                    this.AObjCommunicationattachment != null &&
                    input.AObjCommunicationattachment != null &&
                    this.AObjCommunicationattachment.SequenceEqual(input.AObjCommunicationattachment)
                ) && 
                (
                    this.AObjCommunicationrecipient == input.AObjCommunicationrecipient ||
                    this.AObjCommunicationrecipient != null &&
                    input.AObjCommunicationrecipient != null &&
                    this.AObjCommunicationrecipient.SequenceEqual(input.AObjCommunicationrecipient)
                ) && 
                (
                    this.AObjCommunicationexternalrecipient == input.AObjCommunicationexternalrecipient ||
                    this.AObjCommunicationexternalrecipient != null &&
                    input.AObjCommunicationexternalrecipient != null &&
                    this.AObjCommunicationexternalrecipient.SequenceEqual(input.AObjCommunicationexternalrecipient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiCommunicationID != null)
                    hashCode = hashCode * 59 + this.PkiCommunicationID.GetHashCode();
                if (this.ECommunicationImportance != null)
                    hashCode = hashCode * 59 + this.ECommunicationImportance.GetHashCode();
                if (this.ECommunicationType != null)
                    hashCode = hashCode * 59 + this.ECommunicationType.GetHashCode();
                if (this.SCommunicationSubject != null)
                    hashCode = hashCode * 59 + this.SCommunicationSubject.GetHashCode();
                if (this.SCommunicationBodyurl != null)
                    hashCode = hashCode * 59 + this.SCommunicationBodyurl.GetHashCode();
                if (this.ECommunicationDirection != null)
                    hashCode = hashCode * 59 + this.ECommunicationDirection.GetHashCode();
                if (this.ICommunicationrecipientCount != null)
                    hashCode = hashCode * 59 + this.ICommunicationrecipientCount.GetHashCode();
                if (this.ObjDescriptionstaticSender != null)
                    hashCode = hashCode * 59 + this.ObjDescriptionstaticSender.GetHashCode();
                if (this.ObjEmailstaticSender != null)
                    hashCode = hashCode * 59 + this.ObjEmailstaticSender.GetHashCode();
                if (this.ObjPhonestaticSender != null)
                    hashCode = hashCode * 59 + this.ObjPhonestaticSender.GetHashCode();
                if (this.ObjAudit != null)
                    hashCode = hashCode * 59 + this.ObjAudit.GetHashCode();
                if (this.AObjCommunicationattachment != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationattachment.GetHashCode();
                if (this.AObjCommunicationrecipient != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationrecipient.GetHashCode();
                if (this.AObjCommunicationexternalrecipient != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationexternalrecipient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiCommunicationID (int) minimum
            if(this.PkiCommunicationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCommunicationID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationID" });
            }

            yield break;
        }
    }

}
