/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.15
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Generic DropdownElement Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class CustomDropdownElementResponseCompound :  IEquatable<CustomDropdownElementResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDropdownElementResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDropdownElementResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDropdownElementResponseCompound" /> class.
        /// </summary>
        /// <param name="sLabel">The Description of the element (required).</param>
        /// <param name="sValue">The Value of the element (required).</param>
        public CustomDropdownElementResponseCompound(string sLabel = default(string), string sValue = default(string))
        {
            // to ensure "sLabel" is required (not null)
            if (sLabel == null)
            {
                throw new InvalidDataException("sLabel is a required property for CustomDropdownElementResponseCompound and cannot be null");
            }
            else
            {
                this.SLabel = sLabel;
            }

            // to ensure "sValue" is required (not null)
            if (sValue == null)
            {
                throw new InvalidDataException("sValue is a required property for CustomDropdownElementResponseCompound and cannot be null");
            }
            else
            {
                this.SValue = sValue;
            }

        }

        /// <summary>
        /// The Description of the element
        /// </summary>
        /// <value>The Description of the element</value>
        [DataMember(Name="sLabel", EmitDefaultValue=true)]
        public string SLabel { get; set; }

        /// <summary>
        /// The Value of the element
        /// </summary>
        /// <value>The Value of the element</value>
        [DataMember(Name="sValue", EmitDefaultValue=true)]
        public string SValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomDropdownElementResponseCompound {\n");
            sb.Append("  SLabel: ").Append(SLabel).Append("\n");
            sb.Append("  SValue: ").Append(SValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomDropdownElementResponseCompound);
        }

        /// <summary>
        /// Returns true if CustomDropdownElementResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomDropdownElementResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomDropdownElementResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SLabel == input.SLabel ||
                    (this.SLabel != null &&
                    this.SLabel.Equals(input.SLabel))
                ) && 
                (
                    this.SValue == input.SValue ||
                    (this.SValue != null &&
                    this.SValue.Equals(input.SValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SLabel != null)
                    hashCode = hashCode * 59 + this.SLabel.GetHashCode();
                if (this.SValue != null)
                    hashCode = hashCode * 59 + this.SValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
