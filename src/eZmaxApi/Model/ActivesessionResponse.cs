/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Activesession Object
    /// </summary>
    [DataContract(Name = "activesession-Response")]
    public partial class ActivesessionResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EActivesessionUsertype
        /// </summary>
        [DataMember(Name = "eActivesessionUsertype", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionUsertype EActivesessionUsertype { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionOrigin
        /// </summary>
        [DataMember(Name = "eActivesessionOrigin", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionOrigin EActivesessionOrigin { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionWeekdaystart
        /// </summary>
        [DataMember(Name = "eActivesessionWeekdaystart", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionWeekdaystart EActivesessionWeekdaystart { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionEzsign
        /// </summary>
        [DataMember(Name = "eActivesessionEzsign", EmitDefaultValue = false)]
        public FieldEActivesessionEzsign? EActivesessionEzsign { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionEzsignaccess
        /// </summary>
        [DataMember(Name = "eActivesessionEzsignaccess", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionEzsignaccess EActivesessionEzsignaccess { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionEzsignprepaid
        /// </summary>
        [DataMember(Name = "eActivesessionEzsignprepaid", EmitDefaultValue = false)]
        public FieldEActivesessionEzsignprepaid? EActivesessionEzsignprepaid { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionRealestateinprogress
        /// </summary>
        [DataMember(Name = "eActivesessionRealestateinprogress", EmitDefaultValue = false)]
        public FieldEActivesessionRealestateinprogress? EActivesessionRealestateinprogress { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponse" /> class.
        /// </summary>
        /// <param name="eActivesessionUsertype">eActivesessionUsertype (required).</param>
        /// <param name="eActivesessionOrigin">eActivesessionOrigin (required).</param>
        /// <param name="eActivesessionWeekdaystart">eActivesessionWeekdaystart (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="bActivesessionDebug">Whether the active session is in debug or not (required).</param>
        /// <param name="bActivesessionIssuperadmin">Whether the active session is superadmin or not (required).</param>
        /// <param name="bActivesessionAttachment">Can access attachment when we clone a user.</param>
        /// <param name="bActivesessionCanafe">Can access canafe when we clone a user.</param>
        /// <param name="bActivesessionFinancial">Can access financial element when we clone a user.</param>
        /// <param name="bActivesessionRealestatecompleted">Can access closed realestate folders when we clone a user.</param>
        /// <param name="eActivesessionEzsign">eActivesessionEzsign.</param>
        /// <param name="eActivesessionEzsignaccess">eActivesessionEzsignaccess (required).</param>
        /// <param name="eActivesessionEzsignprepaid">eActivesessionEzsignprepaid.</param>
        /// <param name="eActivesessionRealestateinprogress">eActivesessionRealestateinprogress.</param>
        /// <param name="pksCustomerCode">The customer code assigned to your account (required).</param>
        /// <param name="fkiSystemconfigurationtypeID">The unique ID of the Systemconfigurationtype (required).</param>
        /// <param name="fkiSignatureID">The unique ID of the Signature.</param>
        public ActivesessionResponse(FieldEActivesessionUsertype eActivesessionUsertype = default(FieldEActivesessionUsertype), FieldEActivesessionOrigin eActivesessionOrigin = default(FieldEActivesessionOrigin), FieldEActivesessionWeekdaystart eActivesessionWeekdaystart = default(FieldEActivesessionWeekdaystart), int fkiLanguageID = default(int), string sCompanyNameX = default(string), string sDepartmentNameX = default(string), bool bActivesessionDebug = default(bool), bool bActivesessionIssuperadmin = default(bool), bool bActivesessionAttachment = default(bool), bool bActivesessionCanafe = default(bool), bool bActivesessionFinancial = default(bool), bool bActivesessionRealestatecompleted = default(bool), FieldEActivesessionEzsign? eActivesessionEzsign = default(FieldEActivesessionEzsign?), FieldEActivesessionEzsignaccess eActivesessionEzsignaccess = default(FieldEActivesessionEzsignaccess), FieldEActivesessionEzsignprepaid? eActivesessionEzsignprepaid = default(FieldEActivesessionEzsignprepaid?), FieldEActivesessionRealestateinprogress? eActivesessionRealestateinprogress = default(FieldEActivesessionRealestateinprogress?), string pksCustomerCode = default(string), int fkiSystemconfigurationtypeID = default(int), int fkiSignatureID = default(int))
        {
            this.EActivesessionUsertype = eActivesessionUsertype;
            this.EActivesessionOrigin = eActivesessionOrigin;
            this.EActivesessionWeekdaystart = eActivesessionWeekdaystart;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sCompanyNameX" is required (not null)
            if (sCompanyNameX == null)
            {
                throw new ArgumentNullException("sCompanyNameX is a required property for ActivesessionResponse and cannot be null");
            }
            this.SCompanyNameX = sCompanyNameX;
            // to ensure "sDepartmentNameX" is required (not null)
            if (sDepartmentNameX == null)
            {
                throw new ArgumentNullException("sDepartmentNameX is a required property for ActivesessionResponse and cannot be null");
            }
            this.SDepartmentNameX = sDepartmentNameX;
            this.BActivesessionDebug = bActivesessionDebug;
            this.BActivesessionIssuperadmin = bActivesessionIssuperadmin;
            this.EActivesessionEzsignaccess = eActivesessionEzsignaccess;
            // to ensure "pksCustomerCode" is required (not null)
            if (pksCustomerCode == null)
            {
                throw new ArgumentNullException("pksCustomerCode is a required property for ActivesessionResponse and cannot be null");
            }
            this.PksCustomerCode = pksCustomerCode;
            this.FkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID;
            this.BActivesessionAttachment = bActivesessionAttachment;
            this.BActivesessionCanafe = bActivesessionCanafe;
            this.BActivesessionFinancial = bActivesessionFinancial;
            this.BActivesessionRealestatecompleted = bActivesessionRealestatecompleted;
            this.EActivesessionEzsign = eActivesessionEzsign;
            this.EActivesessionEzsignprepaid = eActivesessionEzsignprepaid;
            this.EActivesessionRealestateinprogress = eActivesessionRealestateinprogress;
            this.FkiSignatureID = fkiSignatureID;
        }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        /* <example>Acme inc.</example>*/
        [DataMember(Name = "sCompanyNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        /* <example>Head Office</example>*/
        [DataMember(Name = "sDepartmentNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// Whether the active session is in debug or not
        /// </summary>
        /// <value>Whether the active session is in debug or not</value>
        /* <example>false</example>*/
        [DataMember(Name = "bActivesessionDebug", IsRequired = true, EmitDefaultValue = true)]
        public bool BActivesessionDebug { get; set; }

        /// <summary>
        /// Whether the active session is superadmin or not
        /// </summary>
        /// <value>Whether the active session is superadmin or not</value>
        /* <example>false</example>*/
        [DataMember(Name = "bActivesessionIssuperadmin", IsRequired = true, EmitDefaultValue = true)]
        public bool BActivesessionIssuperadmin { get; set; }

        /// <summary>
        /// Can access attachment when we clone a user
        /// </summary>
        /// <value>Can access attachment when we clone a user</value>
        /* <example>false</example>*/
        [DataMember(Name = "bActivesessionAttachment", EmitDefaultValue = true)]
        public bool BActivesessionAttachment { get; set; }

        /// <summary>
        /// Can access canafe when we clone a user
        /// </summary>
        /// <value>Can access canafe when we clone a user</value>
        /* <example>false</example>*/
        [DataMember(Name = "bActivesessionCanafe", EmitDefaultValue = true)]
        public bool BActivesessionCanafe { get; set; }

        /// <summary>
        /// Can access financial element when we clone a user
        /// </summary>
        /// <value>Can access financial element when we clone a user</value>
        /* <example>false</example>*/
        [DataMember(Name = "bActivesessionFinancial", EmitDefaultValue = true)]
        public bool BActivesessionFinancial { get; set; }

        /// <summary>
        /// Can access closed realestate folders when we clone a user
        /// </summary>
        /// <value>Can access closed realestate folders when we clone a user</value>
        /* <example>false</example>*/
        [DataMember(Name = "bActivesessionRealestatecompleted", EmitDefaultValue = true)]
        public bool BActivesessionRealestatecompleted { get; set; }

        /// <summary>
        /// The customer code assigned to your account
        /// </summary>
        /// <value>The customer code assigned to your account</value>
        /* <example>demo</example>*/
        [DataMember(Name = "pksCustomerCode", IsRequired = true, EmitDefaultValue = true)]
        public string PksCustomerCode { get; set; }

        /// <summary>
        /// The unique ID of the Systemconfigurationtype
        /// </summary>
        /// <value>The unique ID of the Systemconfigurationtype</value>
        /* <example>28</example>*/
        [DataMember(Name = "fkiSystemconfigurationtypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiSystemconfigurationtypeID { get; set; }

        /// <summary>
        /// The unique ID of the Signature
        /// </summary>
        /// <value>The unique ID of the Signature</value>
        /* <example>12</example>*/
        [DataMember(Name = "fkiSignatureID", EmitDefaultValue = false)]
        public int FkiSignatureID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivesessionResponse {\n");
            sb.Append("  EActivesessionUsertype: ").Append(EActivesessionUsertype).Append("\n");
            sb.Append("  EActivesessionOrigin: ").Append(EActivesessionOrigin).Append("\n");
            sb.Append("  EActivesessionWeekdaystart: ").Append(EActivesessionWeekdaystart).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  BActivesessionDebug: ").Append(BActivesessionDebug).Append("\n");
            sb.Append("  BActivesessionIssuperadmin: ").Append(BActivesessionIssuperadmin).Append("\n");
            sb.Append("  BActivesessionAttachment: ").Append(BActivesessionAttachment).Append("\n");
            sb.Append("  BActivesessionCanafe: ").Append(BActivesessionCanafe).Append("\n");
            sb.Append("  BActivesessionFinancial: ").Append(BActivesessionFinancial).Append("\n");
            sb.Append("  BActivesessionRealestatecompleted: ").Append(BActivesessionRealestatecompleted).Append("\n");
            sb.Append("  EActivesessionEzsign: ").Append(EActivesessionEzsign).Append("\n");
            sb.Append("  EActivesessionEzsignaccess: ").Append(EActivesessionEzsignaccess).Append("\n");
            sb.Append("  EActivesessionEzsignprepaid: ").Append(EActivesessionEzsignprepaid).Append("\n");
            sb.Append("  EActivesessionRealestateinprogress: ").Append(EActivesessionRealestateinprogress).Append("\n");
            sb.Append("  PksCustomerCode: ").Append(PksCustomerCode).Append("\n");
            sb.Append("  FkiSystemconfigurationtypeID: ").Append(FkiSystemconfigurationtypeID).Append("\n");
            sb.Append("  FkiSignatureID: ").Append(FkiSignatureID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            // PksCustomerCode (string) maxLength
            if (this.PksCustomerCode != null && this.PksCustomerCode.Length > 6)
            {
                yield return new ValidationResult("Invalid value for PksCustomerCode, length must be less than 6.", new [] { "PksCustomerCode" });
            }

            // PksCustomerCode (string) minLength
            if (this.PksCustomerCode != null && this.PksCustomerCode.Length < 2)
            {
                yield return new ValidationResult("Invalid value for PksCustomerCode, length must be greater than 2.", new [] { "PksCustomerCode" });
            }

            // FkiSystemconfigurationtypeID (int) minimum
            if (this.FkiSystemconfigurationtypeID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiSystemconfigurationtypeID, must be a value greater than or equal to 1.", new [] { "FkiSystemconfigurationtypeID" });
            }

            // FkiSignatureID (int) maximum
            if (this.FkiSignatureID > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for FkiSignatureID, must be a value less than or equal to 16777215.", new [] { "FkiSignatureID" });
            }

            // FkiSignatureID (int) minimum
            if (this.FkiSignatureID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiSignatureID, must be a value greater than or equal to 0.", new [] { "FkiSignatureID" });
            }

            yield break;
        }
    }

}
