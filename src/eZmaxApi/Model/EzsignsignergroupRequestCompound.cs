/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignsignergroup Object and children
    /// </summary>
    [DataContract(Name = "ezsignsignergroup-RequestCompound")]
    public partial class EzsignsignergroupRequestCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignergroupRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup.</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="objEzsignsignergroupDescription">objEzsignsignergroupDescription (required).</param>
        public EzsignsignergroupRequestCompound(int pkiEzsignsignergroupID = default(int), int fkiEzsignfolderID = default(int), MultilingualEzsignsignergroupDescription objEzsignsignergroupDescription = default(MultilingualEzsignsignergroupDescription))
        {
            this.FkiEzsignfolderID = fkiEzsignfolderID;
            // to ensure "objEzsignsignergroupDescription" is required (not null)
            if (objEzsignsignergroupDescription == null)
            {
                throw new ArgumentNullException("objEzsignsignergroupDescription is a required property for EzsignsignergroupRequestCompound and cannot be null");
            }
            this.ObjEzsignsignergroupDescription = objEzsignsignergroupDescription;
            this.PkiEzsignsignergroupID = pkiEzsignsignergroupID;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignergroup
        /// </summary>
        /// <value>The unique ID of the Ezsignsignergroup</value>
        /* <example>27</example>*/
        [DataMember(Name = "pkiEzsignsignergroupID", EmitDefaultValue = false)]
        public int PkiEzsignsignergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsignergroupDescription
        /// </summary>
        [DataMember(Name = "objEzsignsignergroupDescription", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualEzsignsignergroupDescription ObjEzsignsignergroupDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignsignergroupRequestCompound {\n");
            sb.Append("  PkiEzsignsignergroupID: ").Append(PkiEzsignsignergroupID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  ObjEzsignsignergroupDescription: ").Append(ObjEzsignsignergroupDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignsignergroupID (int) maximum
            if (this.PkiEzsignsignergroupID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for PkiEzsignsignergroupID, must be a value less than or equal to 65535.", new [] { "PkiEzsignsignergroupID" });
            }

            // PkiEzsignsignergroupID (int) minimum
            if (this.PkiEzsignsignergroupID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsignsignergroupID, must be a value greater than or equal to 0.", new [] { "PkiEzsignsignergroupID" });
            }

            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
