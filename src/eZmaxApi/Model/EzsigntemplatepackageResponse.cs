/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepackage Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatepackage-Response")]
    public partial class EzsigntemplatepackageResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepackageResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsigntemplatepackage (required).</param>
        /// <param name="">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="">The unique ID of the Ezdoctemplatedocument.</param>
        /// <param name="">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="">The name of the Ezdoctemplatedocument in the language of the requester.</param>
        /// <param name="">The Name of the Language in the language of the requester (required).</param>
        /// <param name="">The description of the Ezsigntemplatepackage (required).</param>
        /// <param name="">Whether the Ezsigntemplatepackage can be accessed by admin users only (eUserType&#x3D;Normal) (required).</param>
        /// <param name="">Whether the Ezsignbulksend was automatically modified and needs a manual validation (required).</param>
        /// <param name="">Whether the Ezsigntemplatepackage is active or not (required).</param>
        /// <param name="">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="">Whether the Ezsigntemplatepackage if allowed to edit or not (required).</param>
        public EzsigntemplatepackageResponse(int  = default(int), int  = default(int), int  = default(int), int  = default(int), string  = default(string), string  = default(string), string  = default(string), bool  = default(bool), bool  = default(bool), bool  = default(bool), string  = default(string), bool  = default(bool))
        {
            this.PkiEzsigntemplatepackageID = ;
            this.FkiEzsignfoldertypeID = ;
            this.FkiLanguageID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsigntemplatepackageResponse and cannot be null");
            }
            this.SLanguageNameX = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsigntemplatepackageResponse and cannot be null");
            }
            this.SEzsigntemplatepackageDescription = ;
            this.BEzsigntemplatepackageAdminonly = ;
            this.BEzsigntemplatepackageNeedvalidation = ;
            this.BEzsigntemplatepackageIsactive = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsigntemplatepackageResponse and cannot be null");
            }
            this.SEzsignfoldertypeNameX = ;
            this.BEzsigntemplatepackageEditallowed = ;
            this.FkiEzdoctemplatedocumentID = ;
            this.SEzdoctemplatedocumentNameX = ;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackage</value>
        /* <example>99</example>*/
        [DataMember(Name = "pkiEzsigntemplatepackageID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplatepackageID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Ezdoctemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatedocument</value>
        /* <example>95</example>*/
        [DataMember(Name = "fkiEzdoctemplatedocumentID", EmitDefaultValue = false)]
        public int FkiEzdoctemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The name of the Ezdoctemplatedocument in the language of the requester
        /// </summary>
        /// <value>The name of the Ezdoctemplatedocument in the language of the requester</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzdoctemplatedocumentNameX", EmitDefaultValue = false)]
        public string SEzdoctemplatedocumentNameX { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        /* <example>English</example>*/
        [DataMember(Name = "sLanguageNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The description of the Ezsigntemplatepackage</value>
        /* <example>Package for new clients</example>*/
        [DataMember(Name = "sEzsigntemplatepackageDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatepackageDescription { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage can be accessed by admin users only (eUserType&#x3D;Normal)
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage can be accessed by admin users only (eUserType&#x3D;Normal)</value>
        [DataMember(Name = "bEzsigntemplatepackageAdminonly", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatepackageAdminonly { get; set; }

        /// <summary>
        /// Whether the Ezsignbulksend was automatically modified and needs a manual validation
        /// </summary>
        /// <value>Whether the Ezsignbulksend was automatically modified and needs a manual validation</value>
        [DataMember(Name = "bEzsigntemplatepackageNeedvalidation", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatepackageNeedvalidation { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage is active or not
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsigntemplatepackageIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatepackageIsactive { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage if allowed to edit or not
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage if allowed to edit or not</value>
        [DataMember(Name = "bEzsigntemplatepackageEditallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatepackageEditallowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepackageResponse {\n");
            sb.Append("  PkiEzsigntemplatepackageID: ").Append(PkiEzsigntemplatepackageID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiEzdoctemplatedocumentID: ").Append(FkiEzdoctemplatedocumentID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SEzdoctemplatedocumentNameX: ").Append(SEzdoctemplatedocumentNameX).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  SEzsigntemplatepackageDescription: ").Append(SEzsigntemplatepackageDescription).Append("\n");
            sb.Append("  BEzsigntemplatepackageAdminonly: ").Append(BEzsigntemplatepackageAdminonly).Append("\n");
            sb.Append("  BEzsigntemplatepackageNeedvalidation: ").Append(BEzsigntemplatepackageNeedvalidation).Append("\n");
            sb.Append("  BEzsigntemplatepackageIsactive: ").Append(BEzsigntemplatepackageIsactive).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  BEzsigntemplatepackageEditallowed: ").Append(BEzsigntemplatepackageEditallowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatepackageID (int) minimum
            if (this.PkiEzsigntemplatepackageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatepackageID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatepackageID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzdoctemplatedocumentID (int) maximum
            if (this.FkiEzdoctemplatedocumentID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatedocumentID, must be a value less than or equal to 65535.", new [] { "FkiEzdoctemplatedocumentID" });
            }

            // FkiEzdoctemplatedocumentID (int) minimum
            if (this.FkiEzdoctemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatedocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzdoctemplatedocumentID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SEzdoctemplatedocumentNameX != null) {
                // SEzdoctemplatedocumentNameX (string) pattern
                Regex regexSEzdoctemplatedocumentNameX = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzdoctemplatedocumentNameX.Match(this.SEzdoctemplatedocumentNameX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzdoctemplatedocumentNameX, must match a pattern of " + regexSEzdoctemplatedocumentNameX, new [] { "SEzdoctemplatedocumentNameX" });
                }
            }

            if (this.SEzsigntemplatepackageDescription != null) {
                // SEzsigntemplatepackageDescription (string) pattern
                Regex regexSEzsigntemplatepackageDescription = new Regex(@"^.{0,80}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplatepackageDescription.Match(this.SEzsigntemplatepackageDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplatepackageDescription, must match a pattern of " + regexSEzsigntemplatepackageDescription, new [] { "SEzsigntemplatepackageDescription" });
                }
            }

            yield break;
        }
    }

}
