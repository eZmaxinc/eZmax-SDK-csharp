/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /1/object/notificationtest/{pkiNotificationtestID}/getElements
    /// </summary>
    [DataContract]
    public partial class NotificationtestGetElementsV1ResponseMPayload :  IEquatable<NotificationtestGetElementsV1ResponseMPayload>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationtestGetElementsV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationtestGetElementsV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationtestGetElementsV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="pkiNotificationtestID">The unique ID of the Notificationtest (required).</param>
        /// <param name="sNotificationtestFunction">The function name of the Notificationtest (required).</param>
        /// <param name="aSVariableobjectProperty">aSVariableobjectProperty.</param>
        /// <param name="aObjVariableobject">aObjVariableobject (required).</param>
        public NotificationtestGetElementsV1ResponseMPayload(int pkiNotificationtestID = default(int), string sNotificationtestFunction = default(string), List<string> aSVariableobjectProperty = default(List<string>), List<Dictionary<string, Object>> aObjVariableobject = default(List<Dictionary<string, Object>>))
        {
            // to ensure "pkiNotificationtestID" is required (not null)
            if (pkiNotificationtestID == null)
            {
                throw new InvalidDataException("pkiNotificationtestID is a required property for NotificationtestGetElementsV1ResponseMPayload and cannot be null");
            }
            else
            {
                this.PkiNotificationtestID = pkiNotificationtestID;
            }

            // to ensure "sNotificationtestFunction" is required (not null)
            if (sNotificationtestFunction == null)
            {
                throw new InvalidDataException("sNotificationtestFunction is a required property for NotificationtestGetElementsV1ResponseMPayload and cannot be null");
            }
            else
            {
                this.SNotificationtestFunction = sNotificationtestFunction;
            }

            // to ensure "aObjVariableobject" is required (not null)
            if (aObjVariableobject == null)
            {
                throw new InvalidDataException("aObjVariableobject is a required property for NotificationtestGetElementsV1ResponseMPayload and cannot be null");
            }
            else
            {
                this.AObjVariableobject = aObjVariableobject;
            }

            this.ASVariableobjectProperty = aSVariableobjectProperty;
        }

        /// <summary>
        /// The unique ID of the Notificationtest
        /// </summary>
        /// <value>The unique ID of the Notificationtest</value>
        [DataMember(Name="pkiNotificationtestID", EmitDefaultValue=true)]
        public int PkiNotificationtestID { get; set; }

        /// <summary>
        /// The function name of the Notificationtest
        /// </summary>
        /// <value>The function name of the Notificationtest</value>
        [DataMember(Name="sNotificationtestFunction", EmitDefaultValue=true)]
        public string SNotificationtestFunction { get; set; }

        /// <summary>
        /// Gets or Sets ASVariableobjectProperty
        /// </summary>
        [DataMember(Name="a_sVariableobjectProperty", EmitDefaultValue=false)]
        public List<string> ASVariableobjectProperty { get; set; }

        /// <summary>
        /// Gets or Sets AObjVariableobject
        /// </summary>
        [DataMember(Name="a_objVariableobject", EmitDefaultValue=true)]
        public List<Dictionary<string, Object>> AObjVariableobject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationtestGetElementsV1ResponseMPayload {\n");
            sb.Append("  PkiNotificationtestID: ").Append(PkiNotificationtestID).Append("\n");
            sb.Append("  SNotificationtestFunction: ").Append(SNotificationtestFunction).Append("\n");
            sb.Append("  ASVariableobjectProperty: ").Append(ASVariableobjectProperty).Append("\n");
            sb.Append("  AObjVariableobject: ").Append(AObjVariableobject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationtestGetElementsV1ResponseMPayload);
        }

        /// <summary>
        /// Returns true if NotificationtestGetElementsV1ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationtestGetElementsV1ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationtestGetElementsV1ResponseMPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiNotificationtestID == input.PkiNotificationtestID ||
                    (this.PkiNotificationtestID != null &&
                    this.PkiNotificationtestID.Equals(input.PkiNotificationtestID))
                ) && 
                (
                    this.SNotificationtestFunction == input.SNotificationtestFunction ||
                    (this.SNotificationtestFunction != null &&
                    this.SNotificationtestFunction.Equals(input.SNotificationtestFunction))
                ) && 
                (
                    this.ASVariableobjectProperty == input.ASVariableobjectProperty ||
                    this.ASVariableobjectProperty != null &&
                    input.ASVariableobjectProperty != null &&
                    this.ASVariableobjectProperty.SequenceEqual(input.ASVariableobjectProperty)
                ) && 
                (
                    this.AObjVariableobject == input.AObjVariableobject ||
                    this.AObjVariableobject != null &&
                    input.AObjVariableobject != null &&
                    this.AObjVariableobject.SequenceEqual(input.AObjVariableobject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiNotificationtestID != null)
                    hashCode = hashCode * 59 + this.PkiNotificationtestID.GetHashCode();
                if (this.SNotificationtestFunction != null)
                    hashCode = hashCode * 59 + this.SNotificationtestFunction.GetHashCode();
                if (this.ASVariableobjectProperty != null)
                    hashCode = hashCode * 59 + this.ASVariableobjectProperty.GetHashCode();
                if (this.AObjVariableobject != null)
                    hashCode = hashCode * 59 + this.AObjVariableobject.GetHashCode();
                return hashCode;
            }
        }
    }

}
