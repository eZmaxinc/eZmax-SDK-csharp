/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfolder Object in the context of an EzsignsignaturesAutomatic path
    /// </summary>
    [DataContract]
    public partial class CustomEzsignfolderEzsignsignaturesAutomaticResponse :  IEquatable<CustomEzsignfolderEzsignsignaturesAutomaticResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfolderEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignfolderEzsignsignaturesAutomaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfolderEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="sEzsignfolderDescription">The description of the Ezsignfolder (required).</param>
        /// <param name="aObjEzsigndocument">aObjEzsigndocument (required).</param>
        public CustomEzsignfolderEzsignsignaturesAutomaticResponse(int pkiEzsignfolderID = default(int), string sEzsignfolderDescription = default(string), List<CustomEzsigndocumentEzsignsignaturesAutomaticResponse> aObjEzsigndocument = default(List<CustomEzsigndocumentEzsignsignaturesAutomaticResponse>))
        {
            // to ensure "pkiEzsignfolderID" is required (not null)
            if (pkiEzsignfolderID == null)
            {
                throw new InvalidDataException("pkiEzsignfolderID is a required property for CustomEzsignfolderEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.PkiEzsignfolderID = pkiEzsignfolderID;
            }

            // to ensure "sEzsignfolderDescription" is required (not null)
            if (sEzsignfolderDescription == null)
            {
                throw new InvalidDataException("sEzsignfolderDescription is a required property for CustomEzsignfolderEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.SEzsignfolderDescription = sEzsignfolderDescription;
            }

            // to ensure "aObjEzsigndocument" is required (not null)
            if (aObjEzsigndocument == null)
            {
                throw new InvalidDataException("aObjEzsigndocument is a required property for CustomEzsignfolderEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.AObjEzsigndocument = aObjEzsigndocument;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        [DataMember(Name="pkiEzsignfolderID", EmitDefaultValue=true)]
        public int PkiEzsignfolderID { get; set; }

        /// <summary>
        /// The description of the Ezsignfolder
        /// </summary>
        /// <value>The description of the Ezsignfolder</value>
        [DataMember(Name="sEzsignfolderDescription", EmitDefaultValue=true)]
        public string SEzsignfolderDescription { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsigndocument
        /// </summary>
        [DataMember(Name="a_objEzsigndocument", EmitDefaultValue=true)]
        public List<CustomEzsigndocumentEzsignsignaturesAutomaticResponse> AObjEzsigndocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomEzsignfolderEzsignsignaturesAutomaticResponse {\n");
            sb.Append("  PkiEzsignfolderID: ").Append(PkiEzsignfolderID).Append("\n");
            sb.Append("  SEzsignfolderDescription: ").Append(SEzsignfolderDescription).Append("\n");
            sb.Append("  AObjEzsigndocument: ").Append(AObjEzsigndocument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignfolderEzsignsignaturesAutomaticResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignfolderEzsignsignaturesAutomaticResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignfolderEzsignsignaturesAutomaticResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignfolderEzsignsignaturesAutomaticResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignfolderID == input.PkiEzsignfolderID ||
                    (this.PkiEzsignfolderID != null &&
                    this.PkiEzsignfolderID.Equals(input.PkiEzsignfolderID))
                ) && 
                (
                    this.SEzsignfolderDescription == input.SEzsignfolderDescription ||
                    (this.SEzsignfolderDescription != null &&
                    this.SEzsignfolderDescription.Equals(input.SEzsignfolderDescription))
                ) && 
                (
                    this.AObjEzsigndocument == input.AObjEzsigndocument ||
                    this.AObjEzsigndocument != null &&
                    input.AObjEzsigndocument != null &&
                    this.AObjEzsigndocument.SequenceEqual(input.AObjEzsigndocument)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignfolderID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignfolderID.GetHashCode();
                if (this.SEzsignfolderDescription != null)
                    hashCode = hashCode * 59 + this.SEzsignfolderDescription.GetHashCode();
                if (this.AObjEzsigndocument != null)
                    hashCode = hashCode * 59 + this.AObjEzsigndocument.GetHashCode();
                return hashCode;
            }
        }
    }

}
