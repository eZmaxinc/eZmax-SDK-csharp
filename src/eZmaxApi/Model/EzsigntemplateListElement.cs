/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplate List Element
    /// </summary>
    [DataContract(Name = "ezsigntemplate-ListElement")]
    public partial class EzsigntemplateListElement : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigntemplateType
        /// </summary>
        [DataMember(Name = "eEzsigntemplateType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplateType EEzsigntemplateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateListElement" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sEzsigntemplateDescription">The description of the Ezsigntemplate (required).</param>
        /// <param name="iEzsigntemplatedocumentPagetotal">The number of pages in the Ezsigntemplatedocument..</param>
        /// <param name="iEzsigntemplateSignaturetotal">The number of total signatures in the Ezsigntemplate..</param>
        /// <param name="iEzsigntemplateFormfieldtotal">The number of total form fields in the Ezsigntemplate..</param>
        /// <param name="bEzsigntemplateIncomplete">Indicate the Ezsigntemplate is incomplete and cannot be used (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester.</param>
        /// <param name="eEzsigntemplateType">eEzsigntemplateType (required).</param>
        public EzsigntemplateListElement(int pkiEzsigntemplateID = default(int), int fkiEzsignfoldertypeID = default(int), int fkiLanguageID = default(int), string sEzsigntemplateDescription = default(string), int iEzsigntemplatedocumentPagetotal = default(int), int iEzsigntemplateSignaturetotal = default(int), int iEzsigntemplateFormfieldtotal = default(int), bool bEzsigntemplateIncomplete = default(bool), string sEzsignfoldertypeNameX = default(string), FieldEEzsigntemplateType eEzsigntemplateType = default(FieldEEzsigntemplateType))
        {
            this.PkiEzsigntemplateID = pkiEzsigntemplateID;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sEzsigntemplateDescription" is required (not null)
            if (sEzsigntemplateDescription == null)
            {
                throw new ArgumentNullException("sEzsigntemplateDescription is a required property for EzsigntemplateListElement and cannot be null");
            }
            this.SEzsigntemplateDescription = sEzsigntemplateDescription;
            this.BEzsigntemplateIncomplete = bEzsigntemplateIncomplete;
            this.EEzsigntemplateType = eEzsigntemplateType;
            this.FkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
            this.IEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal;
            this.IEzsigntemplateSignaturetotal = iEzsigntemplateSignaturetotal;
            this.IEzsigntemplateFormfieldtotal = iEzsigntemplateFormfieldtotal;
            this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        /* <example>36</example>*/
        [DataMember(Name = "pkiEzsigntemplateID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", EmitDefaultValue = false)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplate
        /// </summary>
        /// <value>The description of the Ezsigntemplate</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzsigntemplateDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplateDescription { get; set; }

        /// <summary>
        /// The number of pages in the Ezsigntemplatedocument.
        /// </summary>
        /// <value>The number of pages in the Ezsigntemplatedocument.</value>
        /* <example>5</example>*/
        [DataMember(Name = "iEzsigntemplatedocumentPagetotal", EmitDefaultValue = false)]
        public int IEzsigntemplatedocumentPagetotal { get; set; }

        /// <summary>
        /// The number of total signatures in the Ezsigntemplate.
        /// </summary>
        /// <value>The number of total signatures in the Ezsigntemplate.</value>
        /* <example>8</example>*/
        [DataMember(Name = "iEzsigntemplateSignaturetotal", EmitDefaultValue = false)]
        public int IEzsigntemplateSignaturetotal { get; set; }

        /// <summary>
        /// The number of total form fields in the Ezsigntemplate.
        /// </summary>
        /// <value>The number of total form fields in the Ezsigntemplate.</value>
        /* <example>8</example>*/
        [DataMember(Name = "iEzsigntemplateFormfieldtotal", EmitDefaultValue = false)]
        public int IEzsigntemplateFormfieldtotal { get; set; }

        /// <summary>
        /// Indicate the Ezsigntemplate is incomplete and cannot be used
        /// </summary>
        /// <value>Indicate the Ezsigntemplate is incomplete and cannot be used</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsigntemplateIncomplete", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplateIncomplete { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", EmitDefaultValue = false)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateListElement {\n");
            sb.Append("  PkiEzsigntemplateID: ").Append(PkiEzsigntemplateID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SEzsigntemplateDescription: ").Append(SEzsigntemplateDescription).Append("\n");
            sb.Append("  IEzsigntemplatedocumentPagetotal: ").Append(IEzsigntemplatedocumentPagetotal).Append("\n");
            sb.Append("  IEzsigntemplateSignaturetotal: ").Append(IEzsigntemplateSignaturetotal).Append("\n");
            sb.Append("  IEzsigntemplateFormfieldtotal: ").Append(IEzsigntemplateFormfieldtotal).Append("\n");
            sb.Append("  BEzsigntemplateIncomplete: ").Append(BEzsigntemplateIncomplete).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  EEzsigntemplateType: ").Append(EEzsigntemplateType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplateID (int) minimum
            if (this.PkiEzsigntemplateID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SEzsigntemplateDescription != null) {
                // SEzsigntemplateDescription (string) pattern
                Regex regexSEzsigntemplateDescription = new Regex(@"^.{0,80}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplateDescription.Match(this.SEzsigntemplateDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateDescription, must match a pattern of " + regexSEzsigntemplateDescription, new [] { "SEzsigntemplateDescription" });
                }
            }

            // IEzsigntemplatedocumentPagetotal (int) minimum
            if (this.IEzsigntemplatedocumentPagetotal < (int)1)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplatedocumentPagetotal, must be a value greater than or equal to 1.", new [] { "IEzsigntemplatedocumentPagetotal" });
            }

            yield break;
        }
    }

}
