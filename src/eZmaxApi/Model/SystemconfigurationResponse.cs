/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Systemconfiguration Object
    /// </summary>
    [DataContract(Name = "systemconfiguration-Response")]
    public partial class SystemconfigurationResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ESystemconfigurationNewexternaluseraction
        /// </summary>
        [DataMember(Name = "eSystemconfigurationNewexternaluseraction", IsRequired = true, EmitDefaultValue = true)]
        public FieldESystemconfigurationNewexternaluseraction ESystemconfigurationNewexternaluseraction { get; set; }

        /// <summary>
        /// Gets or Sets ESystemconfigurationLanguage1
        /// </summary>
        [DataMember(Name = "eSystemconfigurationLanguage1", IsRequired = true, EmitDefaultValue = true)]
        public FieldESystemconfigurationLanguage1 ESystemconfigurationLanguage1 { get; set; }

        /// <summary>
        /// Gets or Sets ESystemconfigurationLanguage2
        /// </summary>
        [DataMember(Name = "eSystemconfigurationLanguage2", IsRequired = true, EmitDefaultValue = true)]
        public FieldESystemconfigurationLanguage2 ESystemconfigurationLanguage2 { get; set; }

        /// <summary>
        /// Gets or Sets ESystemconfigurationEzsign
        /// </summary>
        [DataMember(Name = "eSystemconfigurationEzsign", EmitDefaultValue = false)]
        [Obsolete]
        public FieldESystemconfigurationEzsign? ESystemconfigurationEzsign { get; set; }

        /// <summary>
        /// Gets or Sets ESystemconfigurationEzsignofficeplan
        /// </summary>
        [DataMember(Name = "eSystemconfigurationEzsignofficeplan", EmitDefaultValue = false)]
        public FieldESystemconfigurationEzsignofficeplan? ESystemconfigurationEzsignofficeplan { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemconfigurationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemconfigurationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemconfigurationResponse" /> class.
        /// </summary>
        /// <param name="pkiSystemconfigurationID">The unique ID of the Systemconfiguration (required).</param>
        /// <param name="fkiSystemconfigurationtypeID">The unique ID of the Systemconfigurationtype (required).</param>
        /// <param name="sSystemconfigurationtypeDescriptionX">The description of the Systemconfigurationtype in the language of the requester (required).</param>
        /// <param name="eSystemconfigurationNewexternaluseraction">eSystemconfigurationNewexternaluseraction (required).</param>
        /// <param name="eSystemconfigurationLanguage1">eSystemconfigurationLanguage1 (required).</param>
        /// <param name="eSystemconfigurationLanguage2">eSystemconfigurationLanguage2 (required).</param>
        /// <param name="eSystemconfigurationEzsign">eSystemconfigurationEzsign.</param>
        /// <param name="eSystemconfigurationEzsignofficeplan">eSystemconfigurationEzsignofficeplan.</param>
        /// <param name="bSystemconfigurationEzsignpaidbyoffice">Whether if Ezsign is paid by the company or not.</param>
        /// <param name="bSystemconfigurationEzsignpersonnal">Whether if we allow the creation of personal files in eZsign (required).</param>
        /// <param name="bSystemconfigurationIsdisposalactive">Whether is Disposal processus is active or not.</param>
        /// <param name="bSystemconfigurationSspr">Whether if we allow SSPR (required).</param>
        /// <param name="dtSystemconfigurationReadonlyexpirationstart">The start date where the system will be in read only.</param>
        /// <param name="dtSystemconfigurationReadonlyexpirationend">The end date where the system will be in read only.</param>
        public SystemconfigurationResponse(int pkiSystemconfigurationID = default(int), int fkiSystemconfigurationtypeID = default(int), string sSystemconfigurationtypeDescriptionX = default(string), FieldESystemconfigurationNewexternaluseraction eSystemconfigurationNewexternaluseraction = default(FieldESystemconfigurationNewexternaluseraction), FieldESystemconfigurationLanguage1 eSystemconfigurationLanguage1 = default(FieldESystemconfigurationLanguage1), FieldESystemconfigurationLanguage2 eSystemconfigurationLanguage2 = default(FieldESystemconfigurationLanguage2), FieldESystemconfigurationEzsign? eSystemconfigurationEzsign = default(FieldESystemconfigurationEzsign?), FieldESystemconfigurationEzsignofficeplan? eSystemconfigurationEzsignofficeplan = default(FieldESystemconfigurationEzsignofficeplan?), bool bSystemconfigurationEzsignpaidbyoffice = default(bool), bool bSystemconfigurationEzsignpersonnal = default(bool), bool bSystemconfigurationIsdisposalactive = default(bool), bool bSystemconfigurationSspr = default(bool), string dtSystemconfigurationReadonlyexpirationstart = default(string), string dtSystemconfigurationReadonlyexpirationend = default(string))
        {
            this.PkiSystemconfigurationID = pkiSystemconfigurationID;
            this.FkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID;
            // to ensure "sSystemconfigurationtypeDescriptionX" is required (not null)
            if (sSystemconfigurationtypeDescriptionX == null)
            {
                throw new ArgumentNullException("sSystemconfigurationtypeDescriptionX is a required property for SystemconfigurationResponse and cannot be null");
            }
            this.SSystemconfigurationtypeDescriptionX = sSystemconfigurationtypeDescriptionX;
            this.ESystemconfigurationNewexternaluseraction = eSystemconfigurationNewexternaluseraction;
            this.ESystemconfigurationLanguage1 = eSystemconfigurationLanguage1;
            this.ESystemconfigurationLanguage2 = eSystemconfigurationLanguage2;
            this.BSystemconfigurationEzsignpersonnal = bSystemconfigurationEzsignpersonnal;
            this.BSystemconfigurationSspr = bSystemconfigurationSspr;
            this.ESystemconfigurationEzsign = eSystemconfigurationEzsign;
            this.ESystemconfigurationEzsignofficeplan = eSystemconfigurationEzsignofficeplan;
            this.BSystemconfigurationEzsignpaidbyoffice = bSystemconfigurationEzsignpaidbyoffice;
            this.BSystemconfigurationIsdisposalactive = bSystemconfigurationIsdisposalactive;
            this.DtSystemconfigurationReadonlyexpirationstart = dtSystemconfigurationReadonlyexpirationstart;
            this.DtSystemconfigurationReadonlyexpirationend = dtSystemconfigurationReadonlyexpirationend;
        }

        /// <summary>
        /// The unique ID of the Systemconfiguration
        /// </summary>
        /// <value>The unique ID of the Systemconfiguration</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiSystemconfigurationID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiSystemconfigurationID { get; set; }

        /// <summary>
        /// The unique ID of the Systemconfigurationtype
        /// </summary>
        /// <value>The unique ID of the Systemconfigurationtype</value>
        /* <example>28</example>*/
        [DataMember(Name = "fkiSystemconfigurationtypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiSystemconfigurationtypeID { get; set; }

        /// <summary>
        /// The description of the Systemconfigurationtype in the language of the requester
        /// </summary>
        /// <value>The description of the Systemconfigurationtype in the language of the requester</value>
        /* <example>eZsign (Pro)</example>*/
        [DataMember(Name = "sSystemconfigurationtypeDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SSystemconfigurationtypeDescriptionX { get; set; }

        /// <summary>
        /// Whether if Ezsign is paid by the company or not
        /// </summary>
        /// <value>Whether if Ezsign is paid by the company or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bSystemconfigurationEzsignpaidbyoffice", EmitDefaultValue = true)]
        public bool BSystemconfigurationEzsignpaidbyoffice { get; set; }

        /// <summary>
        /// Whether if we allow the creation of personal files in eZsign
        /// </summary>
        /// <value>Whether if we allow the creation of personal files in eZsign</value>
        /* <example>true</example>*/
        [DataMember(Name = "bSystemconfigurationEzsignpersonnal", IsRequired = true, EmitDefaultValue = true)]
        public bool BSystemconfigurationEzsignpersonnal { get; set; }

        /// <summary>
        /// Whether is Disposal processus is active or not
        /// </summary>
        /// <value>Whether is Disposal processus is active or not</value>
        [DataMember(Name = "bSystemconfigurationIsdisposalactive", EmitDefaultValue = true)]
        public bool BSystemconfigurationIsdisposalactive { get; set; }

        /// <summary>
        /// Whether if we allow SSPR
        /// </summary>
        /// <value>Whether if we allow SSPR</value>
        /* <example>true</example>*/
        [DataMember(Name = "bSystemconfigurationSspr", IsRequired = true, EmitDefaultValue = true)]
        public bool BSystemconfigurationSspr { get; set; }

        /// <summary>
        /// The start date where the system will be in read only
        /// </summary>
        /// <value>The start date where the system will be in read only</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtSystemconfigurationReadonlyexpirationstart", EmitDefaultValue = false)]
        public string DtSystemconfigurationReadonlyexpirationstart { get; set; }

        /// <summary>
        /// The end date where the system will be in read only
        /// </summary>
        /// <value>The end date where the system will be in read only</value>
        /* <example>2021-12-31</example>*/
        [DataMember(Name = "dtSystemconfigurationReadonlyexpirationend", EmitDefaultValue = false)]
        public string DtSystemconfigurationReadonlyexpirationend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemconfigurationResponse {\n");
            sb.Append("  PkiSystemconfigurationID: ").Append(PkiSystemconfigurationID).Append("\n");
            sb.Append("  FkiSystemconfigurationtypeID: ").Append(FkiSystemconfigurationtypeID).Append("\n");
            sb.Append("  SSystemconfigurationtypeDescriptionX: ").Append(SSystemconfigurationtypeDescriptionX).Append("\n");
            sb.Append("  ESystemconfigurationNewexternaluseraction: ").Append(ESystemconfigurationNewexternaluseraction).Append("\n");
            sb.Append("  ESystemconfigurationLanguage1: ").Append(ESystemconfigurationLanguage1).Append("\n");
            sb.Append("  ESystemconfigurationLanguage2: ").Append(ESystemconfigurationLanguage2).Append("\n");
            sb.Append("  ESystemconfigurationEzsign: ").Append(ESystemconfigurationEzsign).Append("\n");
            sb.Append("  ESystemconfigurationEzsignofficeplan: ").Append(ESystemconfigurationEzsignofficeplan).Append("\n");
            sb.Append("  BSystemconfigurationEzsignpaidbyoffice: ").Append(BSystemconfigurationEzsignpaidbyoffice).Append("\n");
            sb.Append("  BSystemconfigurationEzsignpersonnal: ").Append(BSystemconfigurationEzsignpersonnal).Append("\n");
            sb.Append("  BSystemconfigurationIsdisposalactive: ").Append(BSystemconfigurationIsdisposalactive).Append("\n");
            sb.Append("  BSystemconfigurationSspr: ").Append(BSystemconfigurationSspr).Append("\n");
            sb.Append("  DtSystemconfigurationReadonlyexpirationstart: ").Append(DtSystemconfigurationReadonlyexpirationstart).Append("\n");
            sb.Append("  DtSystemconfigurationReadonlyexpirationend: ").Append(DtSystemconfigurationReadonlyexpirationend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSystemconfigurationID (int) maximum
            if (this.PkiSystemconfigurationID > (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSystemconfigurationID, must be a value less than or equal to 1.", new [] { "PkiSystemconfigurationID" });
            }

            // PkiSystemconfigurationID (int) minimum
            if (this.PkiSystemconfigurationID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSystemconfigurationID, must be a value greater than or equal to 1.", new [] { "PkiSystemconfigurationID" });
            }

            // FkiSystemconfigurationtypeID (int) minimum
            if (this.FkiSystemconfigurationtypeID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiSystemconfigurationtypeID, must be a value greater than or equal to 1.", new [] { "FkiSystemconfigurationtypeID" });
            }

            if (this.DtSystemconfigurationReadonlyexpirationstart != null) {
                // DtSystemconfigurationReadonlyexpirationstart (string) pattern
                Regex regexDtSystemconfigurationReadonlyexpirationstart = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtSystemconfigurationReadonlyexpirationstart.Match(this.DtSystemconfigurationReadonlyexpirationstart).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtSystemconfigurationReadonlyexpirationstart, must match a pattern of " + regexDtSystemconfigurationReadonlyexpirationstart, new [] { "DtSystemconfigurationReadonlyexpirationstart" });
                }
            }

            if (this.DtSystemconfigurationReadonlyexpirationend != null) {
                // DtSystemconfigurationReadonlyexpirationend (string) pattern
                Regex regexDtSystemconfigurationReadonlyexpirationend = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtSystemconfigurationReadonlyexpirationend.Match(this.DtSystemconfigurationReadonlyexpirationend).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtSystemconfigurationReadonlyexpirationend, must match a pattern of " + regexDtSystemconfigurationReadonlyexpirationend, new [] { "DtSystemconfigurationReadonlyexpirationend" });
                }
            }

            yield break;
        }
    }

}
