/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Branding AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class BrandingAutocompleteElementResponse :  IEquatable<BrandingAutocompleteElementResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandingAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sBrandingDescriptionX">The Description of the Branding in the language of the requester (required).</param>
        /// <param name="pkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="bBrandingIsactive">Whether the Branding is active or not (required).</param>
        public BrandingAutocompleteElementResponse(string sBrandingDescriptionX = default(string), int pkiBrandingID = default(int), bool bBrandingIsactive = default(bool))
        {
            // to ensure "sBrandingDescriptionX" is required (not null)
            if (sBrandingDescriptionX == null)
            {
                throw new InvalidDataException("sBrandingDescriptionX is a required property for BrandingAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SBrandingDescriptionX = sBrandingDescriptionX;
            }

            // to ensure "pkiBrandingID" is required (not null)
            if (pkiBrandingID == null)
            {
                throw new InvalidDataException("pkiBrandingID is a required property for BrandingAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiBrandingID = pkiBrandingID;
            }

            // to ensure "bBrandingIsactive" is required (not null)
            if (bBrandingIsactive == null)
            {
                throw new InvalidDataException("bBrandingIsactive is a required property for BrandingAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BBrandingIsactive = bBrandingIsactive;
            }

        }

        /// <summary>
        /// The Description of the Branding in the language of the requester
        /// </summary>
        /// <value>The Description of the Branding in the language of the requester</value>
        [DataMember(Name="sBrandingDescriptionX", EmitDefaultValue=true)]
        public string SBrandingDescriptionX { get; set; }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        [DataMember(Name="pkiBrandingID", EmitDefaultValue=true)]
        public int PkiBrandingID { get; set; }

        /// <summary>
        /// Whether the Branding is active or not
        /// </summary>
        /// <value>Whether the Branding is active or not</value>
        [DataMember(Name="bBrandingIsactive", EmitDefaultValue=true)]
        public bool BBrandingIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandingAutocompleteElementResponse {\n");
            sb.Append("  SBrandingDescriptionX: ").Append(SBrandingDescriptionX).Append("\n");
            sb.Append("  PkiBrandingID: ").Append(PkiBrandingID).Append("\n");
            sb.Append("  BBrandingIsactive: ").Append(BBrandingIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandingAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if BrandingAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandingAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandingAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SBrandingDescriptionX == input.SBrandingDescriptionX ||
                    (this.SBrandingDescriptionX != null &&
                    this.SBrandingDescriptionX.Equals(input.SBrandingDescriptionX))
                ) && 
                (
                    this.PkiBrandingID == input.PkiBrandingID ||
                    (this.PkiBrandingID != null &&
                    this.PkiBrandingID.Equals(input.PkiBrandingID))
                ) && 
                (
                    this.BBrandingIsactive == input.BBrandingIsactive ||
                    (this.BBrandingIsactive != null &&
                    this.BBrandingIsactive.Equals(input.BBrandingIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SBrandingDescriptionX != null)
                    hashCode = hashCode * 59 + this.SBrandingDescriptionX.GetHashCode();
                if (this.PkiBrandingID != null)
                    hashCode = hashCode * 59 + this.PkiBrandingID.GetHashCode();
                if (this.BBrandingIsactive != null)
                    hashCode = hashCode * 59 + this.BBrandingIsactive.GetHashCode();
                return hashCode;
            }
        }
    }

}
