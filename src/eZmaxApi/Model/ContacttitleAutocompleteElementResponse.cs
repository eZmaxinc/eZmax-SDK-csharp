/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Contacttitle AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "contacttitle-AutocompleteElement-Response")]
    public partial class ContacttitleAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContacttitleAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContacttitleAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContacttitleAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiContacttitleID">The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)| (required).</param>
        /// <param name="sContacttitleNameX">The name of the Contacttitle in the language of the requester (required).</param>
        public ContacttitleAutocompleteElementResponse(int pkiContacttitleID = default(int), string sContacttitleNameX = default(string))
        {
            this.PkiContacttitleID = pkiContacttitleID;
            // to ensure "sContacttitleNameX" is required (not null)
            if (sContacttitleNameX == null)
            {
                throw new ArgumentNullException("sContacttitleNameX is a required property for ContacttitleAutocompleteElementResponse and cannot be null");
            }
            this.SContacttitleNameX = sContacttitleNameX;
        }

        /// <summary>
        /// The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
        /// </summary>
        /// <value>The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|</value>
        /* <example>2</example>*/
        [DataMember(Name = "pkiContacttitleID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiContacttitleID { get; set; }

        /// <summary>
        /// The name of the Contacttitle in the language of the requester
        /// </summary>
        /// <value>The name of the Contacttitle in the language of the requester</value>
        /* <example>Sir</example>*/
        [DataMember(Name = "sContacttitleNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SContacttitleNameX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContacttitleAutocompleteElementResponse {\n");
            sb.Append("  PkiContacttitleID: ").Append(PkiContacttitleID).Append("\n");
            sb.Append("  SContacttitleNameX: ").Append(SContacttitleNameX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiContacttitleID (int) minimum
            if (this.PkiContacttitleID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiContacttitleID, must be a value greater than or equal to 0.", new [] { "PkiContacttitleID" });
            }

            if (this.SContacttitleNameX != null) {
                // SContacttitleNameX (string) pattern
                Regex regexSContacttitleNameX = new Regex(@"^.{0,10}$", RegexOptions.CultureInvariant);
                if (!regexSContacttitleNameX.Match(this.SContacttitleNameX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SContacttitleNameX, must match a pattern of " + regexSContacttitleNameX, new [] { "SContacttitleNameX" });
                }
            }

            yield break;
        }
    }

}
