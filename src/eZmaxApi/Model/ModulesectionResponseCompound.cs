/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Modulesection Object
    /// </summary>
    [DataContract]
    public partial class ModulesectionResponseCompound :  IEquatable<ModulesectionResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModulesectionResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModulesectionResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModulesectionResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiModulesectionID">The unique ID of the Modulesection (required).</param>
        /// <param name="fkiModuleID">The unique ID of the Module (required).</param>
        /// <param name="sModulesectionInternalname">The Internal name of the Module section. (required).</param>
        /// <param name="sModulesectionNameX">The Name of the Modulesection in the language of the requester (required).</param>
        /// <param name="aObjPermission">aObjPermission (required).</param>
        public ModulesectionResponseCompound(int pkiModulesectionID = default(int), int fkiModuleID = default(int), string sModulesectionInternalname = default(string), string sModulesectionNameX = default(string), List<PermissionResponseCompound> aObjPermission = default(List<PermissionResponseCompound>))
        {
            // to ensure "pkiModulesectionID" is required (not null)
            if (pkiModulesectionID == null)
            {
                throw new InvalidDataException("pkiModulesectionID is a required property for ModulesectionResponseCompound and cannot be null");
            }
            else
            {
                this.PkiModulesectionID = pkiModulesectionID;
            }

            // to ensure "fkiModuleID" is required (not null)
            if (fkiModuleID == null)
            {
                throw new InvalidDataException("fkiModuleID is a required property for ModulesectionResponseCompound and cannot be null");
            }
            else
            {
                this.FkiModuleID = fkiModuleID;
            }

            // to ensure "sModulesectionInternalname" is required (not null)
            if (sModulesectionInternalname == null)
            {
                throw new InvalidDataException("sModulesectionInternalname is a required property for ModulesectionResponseCompound and cannot be null");
            }
            else
            {
                this.SModulesectionInternalname = sModulesectionInternalname;
            }

            // to ensure "sModulesectionNameX" is required (not null)
            if (sModulesectionNameX == null)
            {
                throw new InvalidDataException("sModulesectionNameX is a required property for ModulesectionResponseCompound and cannot be null");
            }
            else
            {
                this.SModulesectionNameX = sModulesectionNameX;
            }

            // to ensure "aObjPermission" is required (not null)
            if (aObjPermission == null)
            {
                throw new InvalidDataException("aObjPermission is a required property for ModulesectionResponseCompound and cannot be null");
            }
            else
            {
                this.AObjPermission = aObjPermission;
            }

        }

        /// <summary>
        /// The unique ID of the Modulesection
        /// </summary>
        /// <value>The unique ID of the Modulesection</value>
        [DataMember(Name="pkiModulesectionID", EmitDefaultValue=true)]
        public int PkiModulesectionID { get; set; }

        /// <summary>
        /// The unique ID of the Module
        /// </summary>
        /// <value>The unique ID of the Module</value>
        [DataMember(Name="fkiModuleID", EmitDefaultValue=true)]
        public int FkiModuleID { get; set; }

        /// <summary>
        /// The Internal name of the Module section.
        /// </summary>
        /// <value>The Internal name of the Module section.</value>
        [DataMember(Name="sModulesectionInternalname", EmitDefaultValue=true)]
        public string SModulesectionInternalname { get; set; }

        /// <summary>
        /// The Name of the Modulesection in the language of the requester
        /// </summary>
        /// <value>The Name of the Modulesection in the language of the requester</value>
        [DataMember(Name="sModulesectionNameX", EmitDefaultValue=true)]
        public string SModulesectionNameX { get; set; }

        /// <summary>
        /// Gets or Sets AObjPermission
        /// </summary>
        [DataMember(Name="a_objPermission", EmitDefaultValue=true)]
        public List<PermissionResponseCompound> AObjPermission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModulesectionResponseCompound {\n");
            sb.Append("  PkiModulesectionID: ").Append(PkiModulesectionID).Append("\n");
            sb.Append("  FkiModuleID: ").Append(FkiModuleID).Append("\n");
            sb.Append("  SModulesectionInternalname: ").Append(SModulesectionInternalname).Append("\n");
            sb.Append("  SModulesectionNameX: ").Append(SModulesectionNameX).Append("\n");
            sb.Append("  AObjPermission: ").Append(AObjPermission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModulesectionResponseCompound);
        }

        /// <summary>
        /// Returns true if ModulesectionResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ModulesectionResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModulesectionResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiModulesectionID == input.PkiModulesectionID ||
                    (this.PkiModulesectionID != null &&
                    this.PkiModulesectionID.Equals(input.PkiModulesectionID))
                ) && 
                (
                    this.FkiModuleID == input.FkiModuleID ||
                    (this.FkiModuleID != null &&
                    this.FkiModuleID.Equals(input.FkiModuleID))
                ) && 
                (
                    this.SModulesectionInternalname == input.SModulesectionInternalname ||
                    (this.SModulesectionInternalname != null &&
                    this.SModulesectionInternalname.Equals(input.SModulesectionInternalname))
                ) && 
                (
                    this.SModulesectionNameX == input.SModulesectionNameX ||
                    (this.SModulesectionNameX != null &&
                    this.SModulesectionNameX.Equals(input.SModulesectionNameX))
                ) && 
                (
                    this.AObjPermission == input.AObjPermission ||
                    this.AObjPermission != null &&
                    input.AObjPermission != null &&
                    this.AObjPermission.SequenceEqual(input.AObjPermission)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiModulesectionID != null)
                    hashCode = hashCode * 59 + this.PkiModulesectionID.GetHashCode();
                if (this.FkiModuleID != null)
                    hashCode = hashCode * 59 + this.FkiModuleID.GetHashCode();
                if (this.SModulesectionInternalname != null)
                    hashCode = hashCode * 59 + this.SModulesectionInternalname.GetHashCode();
                if (this.SModulesectionNameX != null)
                    hashCode = hashCode * 59 + this.SModulesectionNameX.GetHashCode();
                if (this.AObjPermission != null)
                    hashCode = hashCode * 59 + this.AObjPermission.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiModulesectionID (int) minimum
            if(this.PkiModulesectionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiModulesectionID, must be a value greater than or equal to 0.", new [] { "PkiModulesectionID" });
            }



            // FkiModuleID (int) minimum
            if(this.FkiModuleID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModuleID, must be a value greater than or equal to 0.", new [] { "FkiModuleID" });
            }

            yield break;
        }
    }

}
