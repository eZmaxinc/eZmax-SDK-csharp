/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Email Object
    /// </summary>
    [DataContract(Name = "email-Response")]
    public partial class EmailResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailResponse" /> class.
        /// </summary>
        /// <param name="pkiEmailID">The unique ID of the Email (required).</param>
        /// <param name="fkiEmailtypeID">The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| (required).</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        public EmailResponse(int pkiEmailID = default(int), int fkiEmailtypeID = default(int), string sEmailAddress = default(string))
        {
            this.PkiEmailID = pkiEmailID;
            this.FkiEmailtypeID = fkiEmailtypeID;
            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new ArgumentNullException("sEmailAddress is a required property for EmailResponse and cannot be null");
            }
            this.SEmailAddress = sEmailAddress;
        }

        /// <summary>
        /// The unique ID of the Email
        /// </summary>
        /// <value>The unique ID of the Email</value>
        /* <example>22</example>*/
        [DataMember(Name = "pkiEmailID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEmailID { get; set; }

        /// <summary>
        /// The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
        /// </summary>
        /// <value>The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiEmailtypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEmailtypeID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailResponse {\n");
            sb.Append("  PkiEmailID: ").Append(PkiEmailID).Append("\n");
            sb.Append("  FkiEmailtypeID: ").Append(FkiEmailtypeID).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEmailID (int) maximum
            if (this.PkiEmailID > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for PkiEmailID, must be a value less than or equal to 16777215.", new [] { "PkiEmailID" });
            }

            // PkiEmailID (int) minimum
            if (this.PkiEmailID < (int)1)
            {
                yield return new ValidationResult("Invalid value for PkiEmailID, must be a value greater than or equal to 1.", new [] { "PkiEmailID" });
            }

            // FkiEmailtypeID (int) minimum
            if (this.FkiEmailtypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEmailtypeID, must be a value greater than or equal to 0.", new [] { "FkiEmailtypeID" });
            }

            if (this.SEmailAddress != null) {
                // SEmailAddress (string) pattern
                Regex regexSEmailAddress = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddress.Match(this.SEmailAddress).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddress, must match a pattern of " + regexSEmailAddress, new [] { "SEmailAddress" });
                }
            }

            yield break;
        }
    }

}
