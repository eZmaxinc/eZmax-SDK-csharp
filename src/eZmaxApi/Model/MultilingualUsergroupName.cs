/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// The name of the Usergroup
    /// </summary>
    [DataContract]
    public partial class MultilingualUsergroupName :  IEquatable<MultilingualUsergroupName>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultilingualUsergroupName" /> class.
        /// </summary>
        /// <param name="sUsergroupName1">The name of the Usergroup in French.</param>
        /// <param name="sUsergroupName2">The name of the Usergroup in English.</param>
        public MultilingualUsergroupName(string sUsergroupName1 = default(string), string sUsergroupName2 = default(string))
        {
            this.SUsergroupName1 = sUsergroupName1;
            this.SUsergroupName2 = sUsergroupName2;
        }

        /// <summary>
        /// The name of the Usergroup in French
        /// </summary>
        /// <value>The name of the Usergroup in French</value>
        [DataMember(Name="sUsergroupName1", EmitDefaultValue=false)]
        public string SUsergroupName1 { get; set; }

        /// <summary>
        /// The name of the Usergroup in English
        /// </summary>
        /// <value>The name of the Usergroup in English</value>
        [DataMember(Name="sUsergroupName2", EmitDefaultValue=false)]
        public string SUsergroupName2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultilingualUsergroupName {\n");
            sb.Append("  SUsergroupName1: ").Append(SUsergroupName1).Append("\n");
            sb.Append("  SUsergroupName2: ").Append(SUsergroupName2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultilingualUsergroupName);
        }

        /// <summary>
        /// Returns true if MultilingualUsergroupName instances are equal
        /// </summary>
        /// <param name="input">Instance of MultilingualUsergroupName to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultilingualUsergroupName input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SUsergroupName1 == input.SUsergroupName1 ||
                    (this.SUsergroupName1 != null &&
                    this.SUsergroupName1.Equals(input.SUsergroupName1))
                ) && 
                (
                    this.SUsergroupName2 == input.SUsergroupName2 ||
                    (this.SUsergroupName2 != null &&
                    this.SUsergroupName2.Equals(input.SUsergroupName2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SUsergroupName1 != null)
                    hashCode = hashCode * 59 + this.SUsergroupName1.GetHashCode();
                if (this.SUsergroupName2 != null)
                    hashCode = hashCode * 59 + this.SUsergroupName2.GetHashCode();
                return hashCode;
            }
        }
    }

}
