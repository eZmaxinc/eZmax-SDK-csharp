/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Discussion Object
    /// </summary>
    [DataContract(Name = "discussion-RequestPatch")]
    public partial class DiscussionRequestPatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscussionRequestPatch" /> class.
        /// </summary>
        /// <param name="sDiscussionDescription">The description of the Discussion.</param>
        /// <param name="bDiscussionClosed">Whether if it&#39;s an closed.</param>
        public DiscussionRequestPatch(string sDiscussionDescription = default(string), bool bDiscussionClosed = default(bool))
        {
            this.SDiscussionDescription = sDiscussionDescription;
            this.BDiscussionClosed = bDiscussionClosed;
        }

        /// <summary>
        /// The description of the Discussion
        /// </summary>
        /// <value>The description of the Discussion</value>
        /* <example>John Doe</example>*/
        [DataMember(Name = "sDiscussionDescription", EmitDefaultValue = false)]
        public string SDiscussionDescription { get; set; }

        /// <summary>
        /// Whether if it&#39;s an closed
        /// </summary>
        /// <value>Whether if it&#39;s an closed</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDiscussionClosed", EmitDefaultValue = true)]
        public bool BDiscussionClosed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscussionRequestPatch {\n");
            sb.Append("  SDiscussionDescription: ").Append(SDiscussionDescription).Append("\n");
            sb.Append("  BDiscussionClosed: ").Append(BDiscussionClosed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SDiscussionDescription != null) {
                // SDiscussionDescription (string) pattern
                Regex regexSDiscussionDescription = new Regex(@"^.{0,75}$", RegexOptions.CultureInvariant);
                if (!regexSDiscussionDescription.Match(this.SDiscussionDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SDiscussionDescription, must match a pattern of " + regexSDiscussionDescription, new [] { "SDiscussionDescription" });
                }
            }

            yield break;
        }
    }

}
