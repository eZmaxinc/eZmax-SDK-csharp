/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignformfield Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignformfield-RequestCompound")]
    public partial class EzsignformfieldRequestCompound : IEquatable<EzsignformfieldRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignformfieldRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignformfieldRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignformfieldRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignformfieldID">The unique ID of the Ezsignformfield.</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="sEzsignformfieldLabel">The Label for the Ezsignformfield (required).</param>
        /// <param name="sEzsignformfieldValue">The value for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is Checkbox or Radio.</param>
        /// <param name="iEzsignformfieldX">The X coordinate (Horizontal) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignformfieldY">The Y coordinate (Vertical) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignformfieldWidth">The Width of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     | (required).</param>
        /// <param name="iEzsignformfieldHeight">The Height of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     |  (required).</param>
        /// <param name="bEzsignformfieldSelected">Whether the Ezsignformfield is selected or not by default.  This can only be set if eEzsignformfieldgroupType is **Checkbox** or **Radio**.</param>
        /// <param name="sEzsignformfieldEnteredvalue">This is the value enterred for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is **Dropdown**, **Text** or **Textarea**.</param>
        public EzsignformfieldRequestCompound(int pkiEzsignformfieldID = default(int), int iEzsignpagePagenumber = default(int), string sEzsignformfieldLabel = default(string), string sEzsignformfieldValue = default(string), int iEzsignformfieldX = default(int), int iEzsignformfieldY = default(int), int iEzsignformfieldWidth = default(int), int iEzsignformfieldHeight = default(int), bool bEzsignformfieldSelected = default(bool), string sEzsignformfieldEnteredvalue = default(string))
        {
            this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            // to ensure "sEzsignformfieldLabel" is required (not null)
            if (sEzsignformfieldLabel == null)
            {
                throw new ArgumentNullException("sEzsignformfieldLabel is a required property for EzsignformfieldRequestCompound and cannot be null");
            }
            this.SEzsignformfieldLabel = sEzsignformfieldLabel;
            this.IEzsignformfieldX = iEzsignformfieldX;
            this.IEzsignformfieldY = iEzsignformfieldY;
            this.IEzsignformfieldWidth = iEzsignformfieldWidth;
            this.IEzsignformfieldHeight = iEzsignformfieldHeight;
            this.PkiEzsignformfieldID = pkiEzsignformfieldID;
            this.SEzsignformfieldValue = sEzsignformfieldValue;
            this.BEzsignformfieldSelected = bEzsignformfieldSelected;
            this.SEzsignformfieldEnteredvalue = sEzsignformfieldEnteredvalue;
        }

        /// <summary>
        /// The unique ID of the Ezsignformfield
        /// </summary>
        /// <value>The unique ID of the Ezsignformfield</value>
        /// <example>32</example>
        [DataMember(Name = "pkiEzsignformfieldID", EmitDefaultValue = false)]
        public int PkiEzsignformfieldID { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        /// <example>1</example>
        [DataMember(Name = "iEzsignpagePagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// The Label for the Ezsignformfield
        /// </summary>
        /// <value>The Label for the Ezsignformfield</value>
        /// <example>Peanuts</example>
        [DataMember(Name = "sEzsignformfieldLabel", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignformfieldLabel { get; set; }

        /// <summary>
        /// The value for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is Checkbox or Radio
        /// </summary>
        /// <value>The value for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is Checkbox or Radio</value>
        /// <example>Yes</example>
        [DataMember(Name = "sEzsignformfieldValue", EmitDefaultValue = false)]
        public string SEzsignformfieldValue { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        /// <example>200</example>
        [DataMember(Name = "iEzsignformfieldX", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        /// <example>300</example>
        [DataMember(Name = "iEzsignformfieldY", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldY { get; set; }

        /// <summary>
        /// The Width of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     |
        /// </summary>
        /// <value>The Width of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     |</value>
        /// <example>102</example>
        [DataMember(Name = "iEzsignformfieldWidth", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldWidth { get; set; }

        /// <summary>
        /// The Height of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     | 
        /// </summary>
        /// <value>The Height of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     | </value>
        /// <example>22</example>
        [DataMember(Name = "iEzsignformfieldHeight", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignformfieldHeight { get; set; }

        /// <summary>
        /// Whether the Ezsignformfield is selected or not by default.  This can only be set if eEzsignformfieldgroupType is **Checkbox** or **Radio**
        /// </summary>
        /// <value>Whether the Ezsignformfield is selected or not by default.  This can only be set if eEzsignformfieldgroupType is **Checkbox** or **Radio**</value>
        [DataMember(Name = "bEzsignformfieldSelected", EmitDefaultValue = true)]
        public bool BEzsignformfieldSelected { get; set; }

        /// <summary>
        /// This is the value enterred for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is **Dropdown**, **Text** or **Textarea**
        /// </summary>
        /// <value>This is the value enterred for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is **Dropdown**, **Text** or **Textarea**</value>
        /// <example>Montreal</example>
        [DataMember(Name = "sEzsignformfieldEnteredvalue", EmitDefaultValue = false)]
        public string SEzsignformfieldEnteredvalue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignformfieldRequestCompound {\n");
            sb.Append("  PkiEzsignformfieldID: ").Append(PkiEzsignformfieldID).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  SEzsignformfieldLabel: ").Append(SEzsignformfieldLabel).Append("\n");
            sb.Append("  SEzsignformfieldValue: ").Append(SEzsignformfieldValue).Append("\n");
            sb.Append("  IEzsignformfieldX: ").Append(IEzsignformfieldX).Append("\n");
            sb.Append("  IEzsignformfieldY: ").Append(IEzsignformfieldY).Append("\n");
            sb.Append("  IEzsignformfieldWidth: ").Append(IEzsignformfieldWidth).Append("\n");
            sb.Append("  IEzsignformfieldHeight: ").Append(IEzsignformfieldHeight).Append("\n");
            sb.Append("  BEzsignformfieldSelected: ").Append(BEzsignformfieldSelected).Append("\n");
            sb.Append("  SEzsignformfieldEnteredvalue: ").Append(SEzsignformfieldEnteredvalue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignformfieldRequestCompound);
        }

        /// <summary>
        /// Returns true if EzsignformfieldRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignformfieldRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignformfieldRequestCompound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsignformfieldID == input.PkiEzsignformfieldID ||
                    this.PkiEzsignformfieldID.Equals(input.PkiEzsignformfieldID)
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber)
                ) && 
                (
                    this.SEzsignformfieldLabel == input.SEzsignformfieldLabel ||
                    (this.SEzsignformfieldLabel != null &&
                    this.SEzsignformfieldLabel.Equals(input.SEzsignformfieldLabel))
                ) && 
                (
                    this.SEzsignformfieldValue == input.SEzsignformfieldValue ||
                    (this.SEzsignformfieldValue != null &&
                    this.SEzsignformfieldValue.Equals(input.SEzsignformfieldValue))
                ) && 
                (
                    this.IEzsignformfieldX == input.IEzsignformfieldX ||
                    this.IEzsignformfieldX.Equals(input.IEzsignformfieldX)
                ) && 
                (
                    this.IEzsignformfieldY == input.IEzsignformfieldY ||
                    this.IEzsignformfieldY.Equals(input.IEzsignformfieldY)
                ) && 
                (
                    this.IEzsignformfieldWidth == input.IEzsignformfieldWidth ||
                    this.IEzsignformfieldWidth.Equals(input.IEzsignformfieldWidth)
                ) && 
                (
                    this.IEzsignformfieldHeight == input.IEzsignformfieldHeight ||
                    this.IEzsignformfieldHeight.Equals(input.IEzsignformfieldHeight)
                ) && 
                (
                    this.BEzsignformfieldSelected == input.BEzsignformfieldSelected ||
                    this.BEzsignformfieldSelected.Equals(input.BEzsignformfieldSelected)
                ) && 
                (
                    this.SEzsignformfieldEnteredvalue == input.SEzsignformfieldEnteredvalue ||
                    (this.SEzsignformfieldEnteredvalue != null &&
                    this.SEzsignformfieldEnteredvalue.Equals(input.SEzsignformfieldEnteredvalue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsignformfieldID.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignpagePagenumber.GetHashCode();
                if (this.SEzsignformfieldLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldLabel.GetHashCode();
                }
                if (this.SEzsignformfieldValue != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IEzsignformfieldX.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignformfieldY.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignformfieldWidth.GetHashCode();
                hashCode = (hashCode * 59) + this.IEzsignformfieldHeight.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignformfieldSelected.GetHashCode();
                if (this.SEzsignformfieldEnteredvalue != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldEnteredvalue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignformfieldID (int) minimum
            if (this.PkiEzsignformfieldID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignformfieldID, must be a value greater than or equal to 0.", new [] { "PkiEzsignformfieldID" });
            }

            // IEzsignpagePagenumber (int) minimum
            if (this.IEzsignpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }

            // IEzsignformfieldX (int) minimum
            if (this.IEzsignformfieldX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldX, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldX" });
            }

            // IEzsignformfieldY (int) minimum
            if (this.IEzsignformfieldY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldY, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldY" });
            }

            // IEzsignformfieldWidth (int) minimum
            if (this.IEzsignformfieldWidth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldWidth, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldWidth" });
            }

            // IEzsignformfieldHeight (int) minimum
            if (this.IEzsignformfieldHeight < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignformfieldHeight, must be a value greater than or equal to 0.", new [] { "IEzsignformfieldHeight" });
            }

            yield break;
        }
    }

}
