/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Emailstatic Object
    /// </summary>
    [DataContract]
    public partial class EmailstaticResponse :  IEquatable<EmailstaticResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailstaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailstaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailstaticResponse" /> class.
        /// </summary>
        /// <param name="pkiEmailstaticID">The unique ID of the Emailstatic (required).</param>
        /// <param name="sEmailstaticAddress">The email address. (required).</param>
        public EmailstaticResponse(int pkiEmailstaticID = default(int), string sEmailstaticAddress = default(string))
        {
            // to ensure "pkiEmailstaticID" is required (not null)
            if (pkiEmailstaticID == null)
            {
                throw new InvalidDataException("pkiEmailstaticID is a required property for EmailstaticResponse and cannot be null");
            }
            else
            {
                this.PkiEmailstaticID = pkiEmailstaticID;
            }

            // to ensure "sEmailstaticAddress" is required (not null)
            if (sEmailstaticAddress == null)
            {
                throw new InvalidDataException("sEmailstaticAddress is a required property for EmailstaticResponse and cannot be null");
            }
            else
            {
                this.SEmailstaticAddress = sEmailstaticAddress;
            }

        }

        /// <summary>
        /// The unique ID of the Emailstatic
        /// </summary>
        /// <value>The unique ID of the Emailstatic</value>
        [DataMember(Name="pkiEmailstaticID", EmitDefaultValue=true)]
        public int PkiEmailstaticID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailstaticAddress", EmitDefaultValue=true)]
        public string SEmailstaticAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailstaticResponse {\n");
            sb.Append("  PkiEmailstaticID: ").Append(PkiEmailstaticID).Append("\n");
            sb.Append("  SEmailstaticAddress: ").Append(SEmailstaticAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailstaticResponse);
        }

        /// <summary>
        /// Returns true if EmailstaticResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailstaticResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailstaticResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEmailstaticID == input.PkiEmailstaticID ||
                    (this.PkiEmailstaticID != null &&
                    this.PkiEmailstaticID.Equals(input.PkiEmailstaticID))
                ) && 
                (
                    this.SEmailstaticAddress == input.SEmailstaticAddress ||
                    (this.SEmailstaticAddress != null &&
                    this.SEmailstaticAddress.Equals(input.SEmailstaticAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEmailstaticID != null)
                    hashCode = hashCode * 59 + this.PkiEmailstaticID.GetHashCode();
                if (this.SEmailstaticAddress != null)
                    hashCode = hashCode * 59 + this.SEmailstaticAddress.GetHashCode();
                return hashCode;
            }
        }
    }

}
