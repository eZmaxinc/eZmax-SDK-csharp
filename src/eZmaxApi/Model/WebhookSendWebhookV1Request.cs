/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/webhook/sendWebhook
    /// </summary>
    [DataContract(Name = "webhook-sendWebhook-v1-Request")]
    public partial class WebhookSendWebhookV1Request : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EWebhookModule
        /// </summary>
        [DataMember(Name = "eWebhookModule", IsRequired = true, EmitDefaultValue = true)]
        public FieldEWebhookModule EWebhookModule { get; set; }

        /// <summary>
        /// Gets or Sets EWebhookEzsignevent
        /// </summary>
        [DataMember(Name = "eWebhookEzsignevent", EmitDefaultValue = false)]
        public CustomEWebhookEzsignevent? EWebhookEzsignevent { get; set; }

        /// <summary>
        /// Gets or Sets EWebhookManagementevent
        /// </summary>
        [DataMember(Name = "eWebhookManagementevent", EmitDefaultValue = false)]
        public FieldEWebhookManagementevent? EWebhookManagementevent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookSendWebhookV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookSendWebhookV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookSendWebhookV1Request" /> class.
        /// </summary>
        /// <param name="eWebhookModule">eWebhookModule (required).</param>
        /// <param name="eWebhookEzsignevent">eWebhookEzsignevent.</param>
        /// <param name="eWebhookManagementevent">eWebhookManagementevent.</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder.</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument.</param>
        /// <param name="fkiEzsignsignerID">The unique ID of the Ezsignsigner.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiUserstagedID">The unique ID of the Userstaged.</param>
        public WebhookSendWebhookV1Request(FieldEWebhookModule eWebhookModule = default(FieldEWebhookModule), CustomEWebhookEzsignevent? eWebhookEzsignevent = default(CustomEWebhookEzsignevent?), FieldEWebhookManagementevent? eWebhookManagementevent = default(FieldEWebhookManagementevent?), int fkiEzsignfolderID = default(int), int fkiEzsigndocumentID = default(int), int fkiEzsignsignerID = default(int), int fkiUserID = default(int), int fkiUserstagedID = default(int))
        {
            this.EWebhookModule = eWebhookModule;
            this.EWebhookEzsignevent = eWebhookEzsignevent;
            this.EWebhookManagementevent = eWebhookManagementevent;
            this.FkiEzsignfolderID = fkiEzsignfolderID;
            this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            this.FkiEzsignsignerID = fkiEzsignsignerID;
            this.FkiUserID = fkiUserID;
            this.FkiUserstagedID = fkiUserstagedID;
        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", EmitDefaultValue = false)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        /* <example>97</example>*/
        [DataMember(Name = "fkiEzsigndocumentID", EmitDefaultValue = false)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignsigner
        /// </summary>
        /// <value>The unique ID of the Ezsignsigner</value>
        /* <example>89</example>*/
        [DataMember(Name = "fkiEzsignsignerID", EmitDefaultValue = false)]
        public int FkiEzsignsignerID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Userstaged
        /// </summary>
        /// <value>The unique ID of the Userstaged</value>
        /* <example>90</example>*/
        [DataMember(Name = "fkiUserstagedID", EmitDefaultValue = false)]
        public int FkiUserstagedID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookSendWebhookV1Request {\n");
            sb.Append("  EWebhookModule: ").Append(EWebhookModule).Append("\n");
            sb.Append("  EWebhookEzsignevent: ").Append(EWebhookEzsignevent).Append("\n");
            sb.Append("  EWebhookManagementevent: ").Append(EWebhookManagementevent).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsignsignerID: ").Append(FkiEzsignsignerID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiUserstagedID: ").Append(FkiUserstagedID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            // FkiEzsigndocumentID (int) minimum
            if (this.FkiEzsigndocumentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigndocumentID" });
            }

            // FkiEzsignsignerID (int) minimum
            if (this.FkiEzsignsignerID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignsignerID, must be a value greater than or equal to 0.", new [] { "FkiEzsignsignerID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiUserstagedID (int) maximum
            if (this.FkiUserstagedID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for FkiUserstagedID, must be a value less than or equal to 65535.", new [] { "FkiUserstagedID" });
            }

            // FkiUserstagedID (int) minimum
            if (this.FkiUserstagedID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiUserstagedID, must be a value greater than or equal to 1.", new [] { "FkiUserstagedID" });
            }

            yield break;
        }
    }

}
