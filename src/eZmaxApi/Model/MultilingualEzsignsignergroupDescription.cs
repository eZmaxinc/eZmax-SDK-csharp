/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Description of the Ezsignsignergroup
    /// </summary>
    [DataContract]
    public partial class MultilingualEzsignsignergroupDescription :  IEquatable<MultilingualEzsignsignergroupDescription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultilingualEzsignsignergroupDescription" /> class.
        /// </summary>
        /// <param name="sEzsignsignergroupDescription1">The description of the Ezsignsignergroup in French.</param>
        /// <param name="sEzsignsignergroupDescription2">The description of the Ezsignsignergroup in English.</param>
        public MultilingualEzsignsignergroupDescription(string sEzsignsignergroupDescription1 = default(string), string sEzsignsignergroupDescription2 = default(string))
        {
            this.SEzsignsignergroupDescription1 = sEzsignsignergroupDescription1;
            this.SEzsignsignergroupDescription2 = sEzsignsignergroupDescription2;
        }

        /// <summary>
        /// The description of the Ezsignsignergroup in French
        /// </summary>
        /// <value>The description of the Ezsignsignergroup in French</value>
        [DataMember(Name="sEzsignsignergroupDescription1", EmitDefaultValue=false)]
        public string SEzsignsignergroupDescription1 { get; set; }

        /// <summary>
        /// The description of the Ezsignsignergroup in English
        /// </summary>
        /// <value>The description of the Ezsignsignergroup in English</value>
        [DataMember(Name="sEzsignsignergroupDescription2", EmitDefaultValue=false)]
        public string SEzsignsignergroupDescription2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultilingualEzsignsignergroupDescription {\n");
            sb.Append("  SEzsignsignergroupDescription1: ").Append(SEzsignsignergroupDescription1).Append("\n");
            sb.Append("  SEzsignsignergroupDescription2: ").Append(SEzsignsignergroupDescription2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultilingualEzsignsignergroupDescription);
        }

        /// <summary>
        /// Returns true if MultilingualEzsignsignergroupDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of MultilingualEzsignsignergroupDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultilingualEzsignsignergroupDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SEzsignsignergroupDescription1 == input.SEzsignsignergroupDescription1 ||
                    (this.SEzsignsignergroupDescription1 != null &&
                    this.SEzsignsignergroupDescription1.Equals(input.SEzsignsignergroupDescription1))
                ) && 
                (
                    this.SEzsignsignergroupDescription2 == input.SEzsignsignergroupDescription2 ||
                    (this.SEzsignsignergroupDescription2 != null &&
                    this.SEzsignsignergroupDescription2.Equals(input.SEzsignsignergroupDescription2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SEzsignsignergroupDescription1 != null)
                    hashCode = hashCode * 59 + this.SEzsignsignergroupDescription1.GetHashCode();
                if (this.SEzsignsignergroupDescription2 != null)
                    hashCode = hashCode * 59 + this.SEzsignsignergroupDescription2.GetHashCode();
                return hashCode;
            }
        }
    }

}
