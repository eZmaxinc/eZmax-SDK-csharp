/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Branding Object
    /// </summary>
    [DataContract(Name = "branding-Response")]
    public partial class BrandingResponse : IEquatable<BrandingResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EBrandingLogo
        /// </summary>
        [DataMember(Name = "eBrandingLogo", IsRequired = true, EmitDefaultValue = true)]
        public FieldEBrandingLogo EBrandingLogo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingResponse" /> class.
        /// </summary>
        /// <param name="pkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="fkiEmailID">The unique ID of the Email.</param>
        /// <param name="objBrandingDescription">objBrandingDescription (required).</param>
        /// <param name="sBrandingDescriptionX">The Description of the Branding in the language of the requester (required).</param>
        /// <param name="sBrandingName">The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty.</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="eBrandingLogo">eBrandingLogo (required).</param>
        /// <param name="iBrandingColortext">The color of the text. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColortextlinkbox">The color of the text in the link box. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColortextbutton">The color of the text in the button. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackground">The color of the background. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackgroundbutton">The color of the background of the button. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackgroundsmallbox">The color of the background of the small box. This is a RGB color converted into integer (required).</param>
        /// <param name="bBrandingIsactive">Whether the Branding is active or not (required).</param>
        public BrandingResponse(int pkiBrandingID = default(int), int fkiEmailID = default(int), MultilingualBrandingDescription objBrandingDescription = default(MultilingualBrandingDescription), string sBrandingDescriptionX = default(string), string sBrandingName = default(string), string sEmailAddress = default(string), FieldEBrandingLogo eBrandingLogo = default(FieldEBrandingLogo), int iBrandingColortext = default(int), int iBrandingColortextlinkbox = default(int), int iBrandingColortextbutton = default(int), int iBrandingColorbackground = default(int), int iBrandingColorbackgroundbutton = default(int), int iBrandingColorbackgroundsmallbox = default(int), bool bBrandingIsactive = default(bool))
        {
            this.PkiBrandingID = pkiBrandingID;
            // to ensure "objBrandingDescription" is required (not null)
            if (objBrandingDescription == null)
            {
                throw new ArgumentNullException("objBrandingDescription is a required property for BrandingResponse and cannot be null");
            }
            this.ObjBrandingDescription = objBrandingDescription;
            // to ensure "sBrandingDescriptionX" is required (not null)
            if (sBrandingDescriptionX == null)
            {
                throw new ArgumentNullException("sBrandingDescriptionX is a required property for BrandingResponse and cannot be null");
            }
            this.SBrandingDescriptionX = sBrandingDescriptionX;
            this.EBrandingLogo = eBrandingLogo;
            this.IBrandingColortext = iBrandingColortext;
            this.IBrandingColortextlinkbox = iBrandingColortextlinkbox;
            this.IBrandingColortextbutton = iBrandingColortextbutton;
            this.IBrandingColorbackground = iBrandingColorbackground;
            this.IBrandingColorbackgroundbutton = iBrandingColorbackgroundbutton;
            this.IBrandingColorbackgroundsmallbox = iBrandingColorbackgroundsmallbox;
            this.BBrandingIsactive = bBrandingIsactive;
            this.FkiEmailID = fkiEmailID;
            this.SBrandingName = sBrandingName;
            this.SEmailAddress = sEmailAddress;
        }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        /// <example>78</example>
        [DataMember(Name = "pkiBrandingID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiBrandingID { get; set; }

        /// <summary>
        /// The unique ID of the Email
        /// </summary>
        /// <value>The unique ID of the Email</value>
        /// <example>22</example>
        [DataMember(Name = "fkiEmailID", EmitDefaultValue = false)]
        public int FkiEmailID { get; set; }

        /// <summary>
        /// Gets or Sets ObjBrandingDescription
        /// </summary>
        [DataMember(Name = "objBrandingDescription", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualBrandingDescription ObjBrandingDescription { get; set; }

        /// <summary>
        /// The Description of the Branding in the language of the requester
        /// </summary>
        /// <value>The Description of the Branding in the language of the requester</value>
        /// <example>Company X</example>
        [DataMember(Name = "sBrandingDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SBrandingDescriptionX { get; set; }

        /// <summary>
        /// The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty
        /// </summary>
        /// <value>The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty</value>
        /// <example>eZmax (Corp)</example>
        [DataMember(Name = "sBrandingName", EmitDefaultValue = false)]
        public string SBrandingName { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /// <example>email@example.com</example>
        [DataMember(Name = "sEmailAddress", EmitDefaultValue = false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// The color of the text. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text. This is a RGB color converted into integer</value>
        /// <example>3752795</example>
        [DataMember(Name = "iBrandingColortext", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortext { get; set; }

        /// <summary>
        /// The color of the text in the link box. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text in the link box. This is a RGB color converted into integer</value>
        /// <example>0</example>
        [DataMember(Name = "iBrandingColortextlinkbox", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortextlinkbox { get; set; }

        /// <summary>
        /// The color of the text in the button. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text in the button. This is a RGB color converted into integer</value>
        /// <example>16777215</example>
        [DataMember(Name = "iBrandingColortextbutton", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortextbutton { get; set; }

        /// <summary>
        /// The color of the background. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background. This is a RGB color converted into integer</value>
        /// <example>15658734</example>
        [DataMember(Name = "iBrandingColorbackground", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackground { get; set; }

        /// <summary>
        /// The color of the background of the button. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background of the button. This is a RGB color converted into integer</value>
        /// <example>13577007</example>
        [DataMember(Name = "iBrandingColorbackgroundbutton", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackgroundbutton { get; set; }

        /// <summary>
        /// The color of the background of the small box. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background of the small box. This is a RGB color converted into integer</value>
        /// <example>16777215</example>
        [DataMember(Name = "iBrandingColorbackgroundsmallbox", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackgroundsmallbox { get; set; }

        /// <summary>
        /// Whether the Branding is active or not
        /// </summary>
        /// <value>Whether the Branding is active or not</value>
        /// <example>true</example>
        [DataMember(Name = "bBrandingIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BBrandingIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandingResponse {\n");
            sb.Append("  PkiBrandingID: ").Append(PkiBrandingID).Append("\n");
            sb.Append("  FkiEmailID: ").Append(FkiEmailID).Append("\n");
            sb.Append("  ObjBrandingDescription: ").Append(ObjBrandingDescription).Append("\n");
            sb.Append("  SBrandingDescriptionX: ").Append(SBrandingDescriptionX).Append("\n");
            sb.Append("  SBrandingName: ").Append(SBrandingName).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  EBrandingLogo: ").Append(EBrandingLogo).Append("\n");
            sb.Append("  IBrandingColortext: ").Append(IBrandingColortext).Append("\n");
            sb.Append("  IBrandingColortextlinkbox: ").Append(IBrandingColortextlinkbox).Append("\n");
            sb.Append("  IBrandingColortextbutton: ").Append(IBrandingColortextbutton).Append("\n");
            sb.Append("  IBrandingColorbackground: ").Append(IBrandingColorbackground).Append("\n");
            sb.Append("  IBrandingColorbackgroundbutton: ").Append(IBrandingColorbackgroundbutton).Append("\n");
            sb.Append("  IBrandingColorbackgroundsmallbox: ").Append(IBrandingColorbackgroundsmallbox).Append("\n");
            sb.Append("  BBrandingIsactive: ").Append(BBrandingIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandingResponse);
        }

        /// <summary>
        /// Returns true if BrandingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandingResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiBrandingID == input.PkiBrandingID ||
                    this.PkiBrandingID.Equals(input.PkiBrandingID)
                ) && 
                (
                    this.FkiEmailID == input.FkiEmailID ||
                    this.FkiEmailID.Equals(input.FkiEmailID)
                ) && 
                (
                    this.ObjBrandingDescription == input.ObjBrandingDescription ||
                    (this.ObjBrandingDescription != null &&
                    this.ObjBrandingDescription.Equals(input.ObjBrandingDescription))
                ) && 
                (
                    this.SBrandingDescriptionX == input.SBrandingDescriptionX ||
                    (this.SBrandingDescriptionX != null &&
                    this.SBrandingDescriptionX.Equals(input.SBrandingDescriptionX))
                ) && 
                (
                    this.SBrandingName == input.SBrandingName ||
                    (this.SBrandingName != null &&
                    this.SBrandingName.Equals(input.SBrandingName))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                ) && 
                (
                    this.EBrandingLogo == input.EBrandingLogo ||
                    this.EBrandingLogo.Equals(input.EBrandingLogo)
                ) && 
                (
                    this.IBrandingColortext == input.IBrandingColortext ||
                    this.IBrandingColortext.Equals(input.IBrandingColortext)
                ) && 
                (
                    this.IBrandingColortextlinkbox == input.IBrandingColortextlinkbox ||
                    this.IBrandingColortextlinkbox.Equals(input.IBrandingColortextlinkbox)
                ) && 
                (
                    this.IBrandingColortextbutton == input.IBrandingColortextbutton ||
                    this.IBrandingColortextbutton.Equals(input.IBrandingColortextbutton)
                ) && 
                (
                    this.IBrandingColorbackground == input.IBrandingColorbackground ||
                    this.IBrandingColorbackground.Equals(input.IBrandingColorbackground)
                ) && 
                (
                    this.IBrandingColorbackgroundbutton == input.IBrandingColorbackgroundbutton ||
                    this.IBrandingColorbackgroundbutton.Equals(input.IBrandingColorbackgroundbutton)
                ) && 
                (
                    this.IBrandingColorbackgroundsmallbox == input.IBrandingColorbackgroundsmallbox ||
                    this.IBrandingColorbackgroundsmallbox.Equals(input.IBrandingColorbackgroundsmallbox)
                ) && 
                (
                    this.BBrandingIsactive == input.BBrandingIsactive ||
                    this.BBrandingIsactive.Equals(input.BBrandingIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiBrandingID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEmailID.GetHashCode();
                if (this.ObjBrandingDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ObjBrandingDescription.GetHashCode();
                }
                if (this.SBrandingDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SBrandingDescriptionX.GetHashCode();
                }
                if (this.SBrandingName != null)
                {
                    hashCode = (hashCode * 59) + this.SBrandingName.GetHashCode();
                }
                if (this.SEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.SEmailAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EBrandingLogo.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColortext.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColortextlinkbox.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColortextbutton.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColorbackground.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColorbackgroundbutton.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColorbackgroundsmallbox.GetHashCode();
                hashCode = (hashCode * 59) + this.BBrandingIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiBrandingID (int) minimum
            if (this.PkiBrandingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiBrandingID, must be a value greater than or equal to 0.", new [] { "PkiBrandingID" });
            }

            // FkiEmailID (int) maximum
            if (this.FkiEmailID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEmailID, must be a value less than or equal to 16777215.", new [] { "FkiEmailID" });
            }

            // FkiEmailID (int) minimum
            if (this.FkiEmailID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEmailID, must be a value greater than or equal to 1.", new [] { "FkiEmailID" });
            }

            if (this.SBrandingName != null) {
                // SBrandingName (string) pattern
                Regex regexSBrandingName = new Regex(@"^.{0,55}$", RegexOptions.CultureInvariant);
                if (!regexSBrandingName.Match(this.SBrandingName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBrandingName, must match a pattern of " + regexSBrandingName, new [] { "SBrandingName" });
                }
            }

            // IBrandingColortext (int) maximum
            if (this.IBrandingColortext > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortext, must be a value less than or equal to 16777215.", new [] { "IBrandingColortext" });
            }

            // IBrandingColortext (int) minimum
            if (this.IBrandingColortext < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortext, must be a value greater than or equal to 0.", new [] { "IBrandingColortext" });
            }

            // IBrandingColortextlinkbox (int) maximum
            if (this.IBrandingColortextlinkbox > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextlinkbox, must be a value less than or equal to 16777215.", new [] { "IBrandingColortextlinkbox" });
            }

            // IBrandingColortextlinkbox (int) minimum
            if (this.IBrandingColortextlinkbox < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextlinkbox, must be a value greater than or equal to 0.", new [] { "IBrandingColortextlinkbox" });
            }

            // IBrandingColortextbutton (int) maximum
            if (this.IBrandingColortextbutton > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextbutton, must be a value less than or equal to 16777215.", new [] { "IBrandingColortextbutton" });
            }

            // IBrandingColortextbutton (int) minimum
            if (this.IBrandingColortextbutton < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextbutton, must be a value greater than or equal to 0.", new [] { "IBrandingColortextbutton" });
            }

            // IBrandingColorbackground (int) maximum
            if (this.IBrandingColorbackground > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackground, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackground" });
            }

            // IBrandingColorbackground (int) minimum
            if (this.IBrandingColorbackground < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackground, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackground" });
            }

            // IBrandingColorbackgroundbutton (int) maximum
            if (this.IBrandingColorbackgroundbutton > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundbutton, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackgroundbutton" });
            }

            // IBrandingColorbackgroundbutton (int) minimum
            if (this.IBrandingColorbackgroundbutton < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundbutton, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackgroundbutton" });
            }

            // IBrandingColorbackgroundsmallbox (int) maximum
            if (this.IBrandingColorbackgroundsmallbox > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundsmallbox, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackgroundsmallbox" });
            }

            // IBrandingColorbackgroundsmallbox (int) minimum
            if (this.IBrandingColorbackgroundsmallbox < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundsmallbox, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackgroundsmallbox" });
            }

            yield break;
        }
    }

}
