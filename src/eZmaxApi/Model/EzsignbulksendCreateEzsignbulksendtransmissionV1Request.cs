/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.9
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission
    /// </summary>
    [DataContract]
    public partial class EzsignbulksendCreateEzsignbulksendtransmissionV1Request :  IEquatable<EzsignbulksendCreateEzsignbulksendtransmissionV1Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendCreateEzsignbulksendtransmissionV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignbulksendCreateEzsignbulksendtransmissionV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendCreateEzsignbulksendtransmissionV1Request" /> class.
        /// </summary>
        /// <param name="fkiUserlogintypeID">The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| (required).</param>
        /// <param name="fkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="sEzsignbulksendtransmissionDescription">The description of the Ezsignbulksendtransmission (required).</param>
        /// <param name="dtEzsigndocumentDuedate">The maximum date and time at which the Ezsigndocument can be signed. (required).</param>
        /// <param name="eEzsignfolderSendreminderfrequency">eEzsignfolderSendreminderfrequency (required).</param>
        /// <param name="tExtraMessage">A custom text message that will be added to the email sent. (required).</param>
        /// <param name="sCsvBase64">The Base64 encoded binary content of the CSV file. (required).</param>
        public EzsignbulksendCreateEzsignbulksendtransmissionV1Request(int fkiUserlogintypeID = default(int), int fkiEzsigntsarequirementID = default(int), string sEzsignbulksendtransmissionDescription = default(string), string dtEzsigndocumentDuedate = default(string), FieldEEzsignfolderSendreminderfrequency eEzsignfolderSendreminderfrequency = default(FieldEEzsignfolderSendreminderfrequency), string tExtraMessage = default(string), byte[] sCsvBase64 = default(byte[]))
        {
            // to ensure "fkiUserlogintypeID" is required (not null)
            if (fkiUserlogintypeID == null)
            {
                throw new InvalidDataException("fkiUserlogintypeID is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV1Request and cannot be null");
            }
            else
            {
                this.FkiUserlogintypeID = fkiUserlogintypeID;
            }

            // to ensure "sEzsignbulksendtransmissionDescription" is required (not null)
            if (sEzsignbulksendtransmissionDescription == null)
            {
                throw new InvalidDataException("sEzsignbulksendtransmissionDescription is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV1Request and cannot be null");
            }
            else
            {
                this.SEzsignbulksendtransmissionDescription = sEzsignbulksendtransmissionDescription;
            }

            // to ensure "dtEzsigndocumentDuedate" is required (not null)
            if (dtEzsigndocumentDuedate == null)
            {
                throw new InvalidDataException("dtEzsigndocumentDuedate is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV1Request and cannot be null");
            }
            else
            {
                this.DtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
            }

            // to ensure "eEzsignfolderSendreminderfrequency" is required (not null)
            if (eEzsignfolderSendreminderfrequency == null)
            {
                throw new InvalidDataException("eEzsignfolderSendreminderfrequency is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV1Request and cannot be null");
            }
            else
            {
                this.EEzsignfolderSendreminderfrequency = eEzsignfolderSendreminderfrequency;
            }

            // to ensure "tExtraMessage" is required (not null)
            if (tExtraMessage == null)
            {
                throw new InvalidDataException("tExtraMessage is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV1Request and cannot be null");
            }
            else
            {
                this.TExtraMessage = tExtraMessage;
            }

            // to ensure "sCsvBase64" is required (not null)
            if (sCsvBase64 == null)
            {
                throw new InvalidDataException("sCsvBase64 is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV1Request and cannot be null");
            }
            else
            {
                this.SCsvBase64 = sCsvBase64;
            }

            this.FkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
        }

        /// <summary>
        /// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|</value>
        [DataMember(Name="fkiUserlogintypeID", EmitDefaultValue=true)]
        public int FkiUserlogintypeID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        [DataMember(Name="fkiEzsigntsarequirementID", EmitDefaultValue=false)]
        public int FkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// The description of the Ezsignbulksendtransmission
        /// </summary>
        /// <value>The description of the Ezsignbulksendtransmission</value>
        [DataMember(Name="sEzsignbulksendtransmissionDescription", EmitDefaultValue=true)]
        public string SEzsignbulksendtransmissionDescription { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsigndocument can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsigndocument can be signed.</value>
        [DataMember(Name="dtEzsigndocumentDuedate", EmitDefaultValue=true)]
        public string DtEzsigndocumentDuedate { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfolderSendreminderfrequency
        /// </summary>
        [DataMember(Name="eEzsignfolderSendreminderfrequency", EmitDefaultValue=true)]
        public FieldEEzsignfolderSendreminderfrequency EEzsignfolderSendreminderfrequency { get; set; }

        /// <summary>
        /// A custom text message that will be added to the email sent.
        /// </summary>
        /// <value>A custom text message that will be added to the email sent.</value>
        [DataMember(Name="tExtraMessage", EmitDefaultValue=true)]
        public string TExtraMessage { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the CSV file.
        /// </summary>
        /// <value>The Base64 encoded binary content of the CSV file.</value>
        [DataMember(Name="sCsvBase64", EmitDefaultValue=true)]
        public byte[] SCsvBase64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignbulksendCreateEzsignbulksendtransmissionV1Request {\n");
            sb.Append("  FkiUserlogintypeID: ").Append(FkiUserlogintypeID).Append("\n");
            sb.Append("  FkiEzsigntsarequirementID: ").Append(FkiEzsigntsarequirementID).Append("\n");
            sb.Append("  SEzsignbulksendtransmissionDescription: ").Append(SEzsignbulksendtransmissionDescription).Append("\n");
            sb.Append("  DtEzsigndocumentDuedate: ").Append(DtEzsigndocumentDuedate).Append("\n");
            sb.Append("  EEzsignfolderSendreminderfrequency: ").Append(EEzsignfolderSendreminderfrequency).Append("\n");
            sb.Append("  TExtraMessage: ").Append(TExtraMessage).Append("\n");
            sb.Append("  SCsvBase64: ").Append(SCsvBase64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignbulksendCreateEzsignbulksendtransmissionV1Request);
        }

        /// <summary>
        /// Returns true if EzsignbulksendCreateEzsignbulksendtransmissionV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignbulksendCreateEzsignbulksendtransmissionV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignbulksendCreateEzsignbulksendtransmissionV1Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FkiUserlogintypeID == input.FkiUserlogintypeID ||
                    (this.FkiUserlogintypeID != null &&
                    this.FkiUserlogintypeID.Equals(input.FkiUserlogintypeID))
                ) && 
                (
                    this.FkiEzsigntsarequirementID == input.FkiEzsigntsarequirementID ||
                    (this.FkiEzsigntsarequirementID != null &&
                    this.FkiEzsigntsarequirementID.Equals(input.FkiEzsigntsarequirementID))
                ) && 
                (
                    this.SEzsignbulksendtransmissionDescription == input.SEzsignbulksendtransmissionDescription ||
                    (this.SEzsignbulksendtransmissionDescription != null &&
                    this.SEzsignbulksendtransmissionDescription.Equals(input.SEzsignbulksendtransmissionDescription))
                ) && 
                (
                    this.DtEzsigndocumentDuedate == input.DtEzsigndocumentDuedate ||
                    (this.DtEzsigndocumentDuedate != null &&
                    this.DtEzsigndocumentDuedate.Equals(input.DtEzsigndocumentDuedate))
                ) && 
                (
                    this.EEzsignfolderSendreminderfrequency == input.EEzsignfolderSendreminderfrequency ||
                    (this.EEzsignfolderSendreminderfrequency != null &&
                    this.EEzsignfolderSendreminderfrequency.Equals(input.EEzsignfolderSendreminderfrequency))
                ) && 
                (
                    this.TExtraMessage == input.TExtraMessage ||
                    (this.TExtraMessage != null &&
                    this.TExtraMessage.Equals(input.TExtraMessage))
                ) && 
                (
                    this.SCsvBase64 == input.SCsvBase64 ||
                    (this.SCsvBase64 != null &&
                    this.SCsvBase64.Equals(input.SCsvBase64))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FkiUserlogintypeID != null)
                    hashCode = hashCode * 59 + this.FkiUserlogintypeID.GetHashCode();
                if (this.FkiEzsigntsarequirementID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntsarequirementID.GetHashCode();
                if (this.SEzsignbulksendtransmissionDescription != null)
                    hashCode = hashCode * 59 + this.SEzsignbulksendtransmissionDescription.GetHashCode();
                if (this.DtEzsigndocumentDuedate != null)
                    hashCode = hashCode * 59 + this.DtEzsigndocumentDuedate.GetHashCode();
                if (this.EEzsignfolderSendreminderfrequency != null)
                    hashCode = hashCode * 59 + this.EEzsignfolderSendreminderfrequency.GetHashCode();
                if (this.TExtraMessage != null)
                    hashCode = hashCode * 59 + this.TExtraMessage.GetHashCode();
                if (this.SCsvBase64 != null)
                    hashCode = hashCode * 59 + this.SCsvBase64.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // FkiUserlogintypeID (int) minimum
            if(this.FkiUserlogintypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserlogintypeID, must be a value greater than or equal to 0.", new [] { "FkiUserlogintypeID" });
            }



            // FkiEzsigntsarequirementID (int) maximum
            if(this.FkiEzsigntsarequirementID > (int)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiEzsigntsarequirementID (int) minimum
            if(this.FkiEzsigntsarequirementID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "FkiEzsigntsarequirementID" });
            }

            yield break;
        }
    }

}
