/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfoldertype List Element
    /// </summary>
    [DataContract(Name = "ezsignfoldertype-ListElement")]
    public partial class EzsignfoldertypeListElement : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldertypeListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeListElement" /> class.
        /// </summary>
        /// <param name="pkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="bEzsignfoldertypeIsactive">Whether the Ezsignfoldertype is active or not (required).</param>
        public EzsignfoldertypeListElement(int pkiEzsignfoldertypeID = default(int), FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), string sEzsignfoldertypeNameX = default(string), bool bEzsignfoldertypeIsactive = default(bool))
        {
            this.PkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
            this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            // to ensure "sEzsignfoldertypeNameX" is required (not null)
            if (sEzsignfoldertypeNameX == null)
            {
                throw new ArgumentNullException("sEzsignfoldertypeNameX is a required property for EzsignfoldertypeListElement and cannot be null");
            }
            this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
            this.BEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "pkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// Whether the Ezsignfoldertype is active or not
        /// </summary>
        /// <value>Whether the Ezsignfoldertype is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldertypeIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldertypeIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfoldertypeListElement {\n");
            sb.Append("  PkiEzsignfoldertypeID: ").Append(PkiEzsignfoldertypeID).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  BEzsignfoldertypeIsactive: ").Append(BEzsignfoldertypeIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfoldertypeID (int) maximum
            if (this.PkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "PkiEzsignfoldertypeID" });
            }

            // PkiEzsignfoldertypeID (int) minimum
            if (this.PkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldertypeID" });
            }

            yield break;
        }
    }

}
