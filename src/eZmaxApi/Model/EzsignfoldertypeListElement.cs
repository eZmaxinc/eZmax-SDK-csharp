/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfoldertype List Element
    /// </summary>
    [DataContract]
    public partial class EzsignfoldertypeListElement :  IEquatable<EzsignfoldertypeListElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldertypeListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldertypeListElement" /> class.
        /// </summary>
        /// <param name="pkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="bEzsignfoldertypeIsactive">Whether the Ezsignfoldertype is active or not (required).</param>
        public EzsignfoldertypeListElement(int pkiEzsignfoldertypeID = default(int), FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), string sEzsignfoldertypeNameX = default(string), bool bEzsignfoldertypeIsactive = default(bool))
        {
            // to ensure "pkiEzsignfoldertypeID" is required (not null)
            if (pkiEzsignfoldertypeID == null)
            {
                throw new InvalidDataException("pkiEzsignfoldertypeID is a required property for EzsignfoldertypeListElement and cannot be null");
            }
            else
            {
                this.PkiEzsignfoldertypeID = pkiEzsignfoldertypeID;
            }

            // to ensure "eEzsignfoldertypePrivacylevel" is required (not null)
            if (eEzsignfoldertypePrivacylevel == null)
            {
                throw new InvalidDataException("eEzsignfoldertypePrivacylevel is a required property for EzsignfoldertypeListElement and cannot be null");
            }
            else
            {
                this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            }

            // to ensure "sEzsignfoldertypeNameX" is required (not null)
            if (sEzsignfoldertypeNameX == null)
            {
                throw new InvalidDataException("sEzsignfoldertypeNameX is a required property for EzsignfoldertypeListElement and cannot be null");
            }
            else
            {
                this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
            }

            // to ensure "bEzsignfoldertypeIsactive" is required (not null)
            if (bEzsignfoldertypeIsactive == null)
            {
                throw new InvalidDataException("bEzsignfoldertypeIsactive is a required property for EzsignfoldertypeListElement and cannot be null");
            }
            else
            {
                this.BEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        [DataMember(Name="pkiEzsignfoldertypeID", EmitDefaultValue=true)]
        public int PkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name="eEzsignfoldertypePrivacylevel", EmitDefaultValue=true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        [DataMember(Name="sEzsignfoldertypeNameX", EmitDefaultValue=true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// Whether the Ezsignfoldertype is active or not
        /// </summary>
        /// <value>Whether the Ezsignfoldertype is active or not</value>
        [DataMember(Name="bEzsignfoldertypeIsactive", EmitDefaultValue=true)]
        public bool BEzsignfoldertypeIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfoldertypeListElement {\n");
            sb.Append("  PkiEzsignfoldertypeID: ").Append(PkiEzsignfoldertypeID).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  BEzsignfoldertypeIsactive: ").Append(BEzsignfoldertypeIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfoldertypeListElement);
        }

        /// <summary>
        /// Returns true if EzsignfoldertypeListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfoldertypeListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfoldertypeListElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignfoldertypeID == input.PkiEzsignfoldertypeID ||
                    (this.PkiEzsignfoldertypeID != null &&
                    this.PkiEzsignfoldertypeID.Equals(input.PkiEzsignfoldertypeID))
                ) && 
                (
                    this.EEzsignfoldertypePrivacylevel == input.EEzsignfoldertypePrivacylevel ||
                    (this.EEzsignfoldertypePrivacylevel != null &&
                    this.EEzsignfoldertypePrivacylevel.Equals(input.EEzsignfoldertypePrivacylevel))
                ) && 
                (
                    this.SEzsignfoldertypeNameX == input.SEzsignfoldertypeNameX ||
                    (this.SEzsignfoldertypeNameX != null &&
                    this.SEzsignfoldertypeNameX.Equals(input.SEzsignfoldertypeNameX))
                ) && 
                (
                    this.BEzsignfoldertypeIsactive == input.BEzsignfoldertypeIsactive ||
                    (this.BEzsignfoldertypeIsactive != null &&
                    this.BEzsignfoldertypeIsactive.Equals(input.BEzsignfoldertypeIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignfoldertypeID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignfoldertypeID.GetHashCode();
                if (this.EEzsignfoldertypePrivacylevel != null)
                    hashCode = hashCode * 59 + this.EEzsignfoldertypePrivacylevel.GetHashCode();
                if (this.SEzsignfoldertypeNameX != null)
                    hashCode = hashCode * 59 + this.SEzsignfoldertypeNameX.GetHashCode();
                if (this.BEzsignfoldertypeIsactive != null)
                    hashCode = hashCode * 59 + this.BEzsignfoldertypeIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
