/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom Apikey Object
    /// </summary>
    [DataContract(Name = "Custom-Apikey")]
    public partial class CustomApikey : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomApikey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomApikey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomApikey" /> class.
        /// </summary>
        /// <param name="sApikeyKey">The key of the Apikey (required).</param>
        /// <param name="sApikeySecret">The secret of the Apikey (required).</param>
        public CustomApikey(string sApikeyKey = default(string), string sApikeySecret = default(string))
        {
            // to ensure "sApikeyKey" is required (not null)
            if (sApikeyKey == null)
            {
                throw new ArgumentNullException("sApikeyKey is a required property for CustomApikey and cannot be null");
            }
            this.SApikeyKey = sApikeyKey;
            // to ensure "sApikeySecret" is required (not null)
            if (sApikeySecret == null)
            {
                throw new ArgumentNullException("sApikeySecret is a required property for CustomApikey and cannot be null");
            }
            this.SApikeySecret = sApikeySecret;
        }

        /// <summary>
        /// The key of the Apikey
        /// </summary>
        /// <value>The key of the Apikey</value>
        [DataMember(Name = "sApikeyKey", IsRequired = true, EmitDefaultValue = true)]
        public string SApikeyKey { get; set; }

        /// <summary>
        /// The secret of the Apikey
        /// </summary>
        /// <value>The secret of the Apikey</value>
        /* <example>f514d7a0008a9f6dee03e60734624d04</example>*/
        [DataMember(Name = "sApikeySecret", IsRequired = true, EmitDefaultValue = true)]
        public string SApikeySecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomApikey {\n");
            sb.Append("  SApikeyKey: ").Append(SApikeyKey).Append("\n");
            sb.Append("  SApikeySecret: ").Append(SApikeySecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SApikeyKey != null) {
                // SApikeyKey (string) pattern
                Regex regexSApikeyKey = new Regex(@"^.{1,200}$", RegexOptions.CultureInvariant);
                if (!regexSApikeyKey.Match(this.SApikeyKey).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SApikeyKey, must match a pattern of " + regexSApikeyKey, new [] { "SApikeyKey" });
                }
            }

            if (this.SApikeySecret != null) {
                // SApikeySecret (string) pattern
                Regex regexSApikeySecret = new Regex(@"^[0-9a-fA-F]{1,32}$", RegexOptions.CultureInvariant);
                if (!regexSApikeySecret.Match(this.SApikeySecret).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SApikeySecret, must match a pattern of " + regexSApikeySecret, new [] { "SApikeySecret" });
                }
            }

            yield break;
        }
    }

}
