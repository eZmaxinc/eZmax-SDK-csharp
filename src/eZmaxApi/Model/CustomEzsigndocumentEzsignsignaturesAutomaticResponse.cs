/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigndocument Object in the context of an EzsignsignaturesAutomatic path
    /// </summary>
    [DataContract]
    public partial class CustomEzsigndocumentEzsignsignaturesAutomaticResponse :  IEquatable<CustomEzsigndocumentEzsignsignaturesAutomaticResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsigndocumentEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsigndocumentEzsignsignaturesAutomaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsigndocumentEzsignsignaturesAutomaticResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="sEzsigndocumentName">The name of the document that will be presented to Ezsignfoldersignerassociations (required).</param>
        /// <param name="aObjEzsignsignature">aObjEzsignsignature (required).</param>
        public CustomEzsigndocumentEzsignsignaturesAutomaticResponse(int pkiEzsigndocumentID = default(int), string sEzsigndocumentName = default(string), List<CustomEzsignsignatureEzsignsignaturesAutomaticResponse> aObjEzsignsignature = default(List<CustomEzsignsignatureEzsignsignaturesAutomaticResponse>))
        {
            // to ensure "pkiEzsigndocumentID" is required (not null)
            if (pkiEzsigndocumentID == null)
            {
                throw new InvalidDataException("pkiEzsigndocumentID is a required property for CustomEzsigndocumentEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigndocumentID = pkiEzsigndocumentID;
            }

            // to ensure "sEzsigndocumentName" is required (not null)
            if (sEzsigndocumentName == null)
            {
                throw new InvalidDataException("sEzsigndocumentName is a required property for CustomEzsigndocumentEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.SEzsigndocumentName = sEzsigndocumentName;
            }

            // to ensure "aObjEzsignsignature" is required (not null)
            if (aObjEzsignsignature == null)
            {
                throw new InvalidDataException("aObjEzsignsignature is a required property for CustomEzsigndocumentEzsignsignaturesAutomaticResponse and cannot be null");
            }
            else
            {
                this.AObjEzsignsignature = aObjEzsignsignature;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        [DataMember(Name="pkiEzsigndocumentID", EmitDefaultValue=true)]
        public int PkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The name of the document that will be presented to Ezsignfoldersignerassociations
        /// </summary>
        /// <value>The name of the document that will be presented to Ezsignfoldersignerassociations</value>
        [DataMember(Name="sEzsigndocumentName", EmitDefaultValue=true)]
        public string SEzsigndocumentName { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignsignature
        /// </summary>
        [DataMember(Name="a_objEzsignsignature", EmitDefaultValue=true)]
        public List<CustomEzsignsignatureEzsignsignaturesAutomaticResponse> AObjEzsignsignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomEzsigndocumentEzsignsignaturesAutomaticResponse {\n");
            sb.Append("  PkiEzsigndocumentID: ").Append(PkiEzsigndocumentID).Append("\n");
            sb.Append("  SEzsigndocumentName: ").Append(SEzsigndocumentName).Append("\n");
            sb.Append("  AObjEzsignsignature: ").Append(AObjEzsignsignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsigndocumentEzsignsignaturesAutomaticResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsigndocumentEzsignsignaturesAutomaticResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsigndocumentEzsignsignaturesAutomaticResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsigndocumentEzsignsignaturesAutomaticResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigndocumentID == input.PkiEzsigndocumentID ||
                    (this.PkiEzsigndocumentID != null &&
                    this.PkiEzsigndocumentID.Equals(input.PkiEzsigndocumentID))
                ) && 
                (
                    this.SEzsigndocumentName == input.SEzsigndocumentName ||
                    (this.SEzsigndocumentName != null &&
                    this.SEzsigndocumentName.Equals(input.SEzsigndocumentName))
                ) && 
                (
                    this.AObjEzsignsignature == input.AObjEzsignsignature ||
                    this.AObjEzsignsignature != null &&
                    input.AObjEzsignsignature != null &&
                    this.AObjEzsignsignature.SequenceEqual(input.AObjEzsignsignature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigndocumentID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigndocumentID.GetHashCode();
                if (this.SEzsigndocumentName != null)
                    hashCode = hashCode * 59 + this.SEzsigndocumentName.GetHashCode();
                if (this.AObjEzsignsignature != null)
                    hashCode = hashCode * 59 + this.AObjEzsignsignature.GetHashCode();
                return hashCode;
            }
        }
    }

}
