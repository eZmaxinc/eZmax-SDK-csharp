/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxproduct AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "ezmaxproduct-AutocompleteElement-Response")]
    public partial class EzmaxproductAutocompleteElementResponse : IEquatable<EzmaxproductAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxproductAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxproductAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxproductAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiEzmaxproductID">The unique ID of the Ezmaxproduct (required).</param>
        /// <param name="sEzmaxproductDescriptionX">The description of the Ezmaxproduct in the language of the requester (required).</param>
        /// <param name="bEzmaxproductIsactive">Whether the Ezmaxproduct is active or not (required).</param>
        public EzmaxproductAutocompleteElementResponse(int pkiEzmaxproductID = default(int), string sEzmaxproductDescriptionX = default(string), bool bEzmaxproductIsactive = default(bool))
        {
            this.PkiEzmaxproductID = pkiEzmaxproductID;
            // to ensure "sEzmaxproductDescriptionX" is required (not null)
            if (sEzmaxproductDescriptionX == null)
            {
                throw new ArgumentNullException("sEzmaxproductDescriptionX is a required property for EzmaxproductAutocompleteElementResponse and cannot be null");
            }
            this.SEzmaxproductDescriptionX = sEzmaxproductDescriptionX;
            this.BEzmaxproductIsactive = bEzmaxproductIsactive;
        }

        /// <summary>
        /// The unique ID of the Ezmaxproduct
        /// </summary>
        /// <value>The unique ID of the Ezmaxproduct</value>
        /* <example>172</example>*/
        [DataMember(Name = "pkiEzmaxproductID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzmaxproductID { get; set; }

        /// <summary>
        /// The description of the Ezmaxproduct in the language of the requester
        /// </summary>
        /// <value>The description of the Ezmaxproduct in the language of the requester</value>
        /* <example>eZmax (License)</example>*/
        [DataMember(Name = "sEzmaxproductDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzmaxproductDescriptionX { get; set; }

        /// <summary>
        /// Whether the Ezmaxproduct is active or not
        /// </summary>
        /// <value>Whether the Ezmaxproduct is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzmaxproductIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzmaxproductIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzmaxproductAutocompleteElementResponse {\n");
            sb.Append("  PkiEzmaxproductID: ").Append(PkiEzmaxproductID).Append("\n");
            sb.Append("  SEzmaxproductDescriptionX: ").Append(SEzmaxproductDescriptionX).Append("\n");
            sb.Append("  BEzmaxproductIsactive: ").Append(BEzmaxproductIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzmaxproductAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if EzmaxproductAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzmaxproductAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzmaxproductAutocompleteElementResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzmaxproductID == input.PkiEzmaxproductID ||
                    this.PkiEzmaxproductID.Equals(input.PkiEzmaxproductID)
                ) && 
                (
                    this.SEzmaxproductDescriptionX == input.SEzmaxproductDescriptionX ||
                    (this.SEzmaxproductDescriptionX != null &&
                    this.SEzmaxproductDescriptionX.Equals(input.SEzmaxproductDescriptionX))
                ) && 
                (
                    this.BEzmaxproductIsactive == input.BEzmaxproductIsactive ||
                    this.BEzmaxproductIsactive.Equals(input.BEzmaxproductIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzmaxproductID.GetHashCode();
                if (this.SEzmaxproductDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SEzmaxproductDescriptionX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzmaxproductIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzmaxproductID (int) minimum
            if (this.PkiEzmaxproductID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzmaxproductID, must be a value greater than or equal to 1.", new [] { "PkiEzmaxproductID" });
            }

            yield break;
        }
    }

}
