/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Phone Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "phone-ResponseCompound")]
    public partial class PhoneResponseCompound : PhoneResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneResponseCompound" /> class.
        /// </summary>
        /// <param name="bPhoneInternational">Indicate the phone number is an international phone number..</param>
        /// <param name="pkiPhoneID">The unique ID of the Phone. (required).</param>
        /// <param name="fkiPhonetypeID">The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| (required).</param>
        /// <param name="ePhoneType">ePhoneType.</param>
        /// <param name="sPhoneE164">A phone number in E.164 Format.</param>
        /// <param name="sPhoneExtension">The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers.</param>
        public PhoneResponseCompound(bool bPhoneInternational = default(bool), int pkiPhoneID = default(int), int fkiPhonetypeID = default(int), FieldEPhoneType? ePhoneType = default(FieldEPhoneType?), string sPhoneE164 = default(string), string sPhoneExtension = default(string)) : base()
        {
            this.BPhoneInternational = bPhoneInternational;
        }

        /// <summary>
        /// Indicate the phone number is an international phone number.
        /// </summary>
        /// <value>Indicate the phone number is an international phone number.</value>
        /* <example>true</example>*/
        [DataMember(Name = "bPhoneInternational", EmitDefaultValue = true)]
        public bool BPhoneInternational { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BPhoneInternational: ").Append(BPhoneInternational).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
