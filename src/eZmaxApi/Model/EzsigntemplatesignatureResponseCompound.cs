/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatesignature Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatesignature-ResponseCompound")]
    public partial class EzsigntemplatesignatureResponseCompound : EzsigntemplatesignatureResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignatureResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatesignatureResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignatureResponseCompound" /> class.
        /// </summary>
        /// <param name="bEzsigntemplatesignatureCustomdate">Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**).</param>
        /// <param name="aObjEzsigntemplatesignaturecustomdate">An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all..</param>
        /// <param name="aObjEzsigntemplateelementdependency">aObjEzsigntemplateelementdependency.</param>
        /// <param name="pkiEzsigntemplatesignatureID">The unique ID of the Ezsigntemplatesignature (required).</param>
        /// <param name="fkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument (required).</param>
        /// <param name="fkiEzsigntemplatesignerID">The unique ID of the Ezsigntemplatesigner (required).</param>
        /// <param name="fkiEzsigntemplatesignerIDValidation">The unique ID of the Ezsigntemplatesigner.</param>
        /// <param name="bEzsigntemplatesignatureHandwritten">Whether the Ezsigntemplatesignature must be handwritten or not when eEzsigntemplatesignatureType &#x3D; Signature..</param>
        /// <param name="bEzsigntemplatesignatureReason">Whether the Ezsigntemplatesignature must include a reason or not when eEzsigntemplatesignatureType &#x3D; Signature..</param>
        /// <param name="eEzsigntemplatesignaturePositioning">eEzsigntemplatesignaturePositioning.</param>
        /// <param name="iEzsigntemplatedocumentpagePagenumber">The page number in the Ezsigntemplatedocument (required).</param>
        /// <param name="iEzsigntemplatesignatureX">The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate..</param>
        /// <param name="iEzsigntemplatesignatureY">The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate..</param>
        /// <param name="iEzsigntemplatesignatureWidth">The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsigntemplatesignatureWidth..</param>
        /// <param name="iEzsigntemplatesignatureHeight">The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsigntemplatesignatureHeight..</param>
        /// <param name="iEzsigntemplatesignatureStep">The step when the Ezsigntemplatesigner will be invited to sign (required).</param>
        /// <param name="eEzsigntemplatesignatureType">eEzsigntemplatesignatureType (required).</param>
        /// <param name="eEzsigntemplatesignatureConsultationtrigger">eEzsigntemplatesignatureConsultationtrigger.</param>
        /// <param name="tEzsigntemplatesignatureTooltip">A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature.</param>
        /// <param name="eEzsigntemplatesignatureTooltipposition">eEzsigntemplatesignatureTooltipposition.</param>
        /// <param name="eEzsigntemplatesignatureFont">eEzsigntemplatesignatureFont.</param>
        /// <param name="iEzsigntemplatesignatureValidationstep">The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments.</param>
        /// <param name="sEzsigntemplatesignatureAttachmentdescription">The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments.</param>
        /// <param name="eEzsigntemplatesignatureAttachmentnamesource">eEzsigntemplatesignatureAttachmentnamesource.</param>
        /// <param name="bEzsigntemplatesignatureRequired">Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType &#x3D; Attachments..</param>
        /// <param name="iEzsigntemplatesignatureMaxlength">The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea**.</param>
        /// <param name="sEzsigntemplatesignatureDefaultvalue">The default value for the Ezsigntemplatesignature  You can use the codes below and they will be replaced at signature time.    | Code | Description | Example | | - -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- - | - -- -- -- -- -- - | | {sUserFirstname} | The first name of the contact | John | | {sUserLastname} | The last name of the contact | Doe | | {sUserJobtitle} | The job title | Sales Representative | | {sCompany} | Company name | eZmax Solutions Inc. | | {sEmailAddress} | The email address | email@example.com | | {sPhoneE164} | A phone number in E.164 Format | +15149901516 | | {sPhoneE164Cell} | A phone number in E.164 Format | +15149901516 |.</param>
        /// <param name="sEzsigntemplatesignatureRegexp">A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea**.</param>
        /// <param name="eEzsigntemplatesignatureTextvalidation">eEzsigntemplatesignatureTextvalidation.</param>
        /// <param name="sEzsigntemplatesignatureTextvalidationcustommessage">Description of validation rule. Show by signatory..</param>
        /// <param name="eEzsigntemplatesignatureDependencyrequirement">eEzsigntemplatesignatureDependencyrequirement.</param>
        /// <param name="sEzsigntemplatesignaturePositioningpattern">The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**.</param>
        /// <param name="iEzsigntemplatesignaturePositioningoffsetx">The offset X  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**.</param>
        /// <param name="iEzsigntemplatesignaturePositioningoffsety">The offset Y  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**.</param>
        /// <param name="eEzsigntemplatesignaturePositioningoccurence">eEzsigntemplatesignaturePositioningoccurence.</param>
        public EzsigntemplatesignatureResponseCompound(bool bEzsigntemplatesignatureCustomdate = default(bool), List<EzsigntemplatesignaturecustomdateResponseCompound> aObjEzsigntemplatesignaturecustomdate = default(List<EzsigntemplatesignaturecustomdateResponseCompound>), List<EzsigntemplateelementdependencyResponseCompound> aObjEzsigntemplateelementdependency = default(List<EzsigntemplateelementdependencyResponseCompound>), int pkiEzsigntemplatesignatureID = default(int), int fkiEzsigntemplatedocumentID = default(int), int fkiEzsigntemplatesignerID = default(int), int fkiEzsigntemplatesignerIDValidation = default(int), bool bEzsigntemplatesignatureHandwritten = default(bool), bool bEzsigntemplatesignatureReason = default(bool), FieldEEzsigntemplatesignaturePositioning? eEzsigntemplatesignaturePositioning = default(FieldEEzsigntemplatesignaturePositioning?), int iEzsigntemplatedocumentpagePagenumber = default(int), int iEzsigntemplatesignatureX = default(int), int iEzsigntemplatesignatureY = default(int), int iEzsigntemplatesignatureWidth = default(int), int iEzsigntemplatesignatureHeight = default(int), int iEzsigntemplatesignatureStep = default(int), FieldEEzsigntemplatesignatureType eEzsigntemplatesignatureType = default(FieldEEzsigntemplatesignatureType), FieldEEzsigntemplatesignatureConsultationtrigger? eEzsigntemplatesignatureConsultationtrigger = default(FieldEEzsigntemplatesignatureConsultationtrigger?), string tEzsigntemplatesignatureTooltip = default(string), FieldEEzsigntemplatesignatureTooltipposition? eEzsigntemplatesignatureTooltipposition = default(FieldEEzsigntemplatesignatureTooltipposition?), FieldEEzsigntemplatesignatureFont? eEzsigntemplatesignatureFont = default(FieldEEzsigntemplatesignatureFont?), int iEzsigntemplatesignatureValidationstep = default(int), string sEzsigntemplatesignatureAttachmentdescription = default(string), FieldEEzsigntemplatesignatureAttachmentnamesource? eEzsigntemplatesignatureAttachmentnamesource = default(FieldEEzsigntemplatesignatureAttachmentnamesource?), bool bEzsigntemplatesignatureRequired = default(bool), int iEzsigntemplatesignatureMaxlength = default(int), string sEzsigntemplatesignatureDefaultvalue = default(string), string sEzsigntemplatesignatureRegexp = default(string), EnumTextvalidation? eEzsigntemplatesignatureTextvalidation = default(EnumTextvalidation?), string sEzsigntemplatesignatureTextvalidationcustommessage = default(string), FieldEEzsigntemplatesignatureDependencyrequirement? eEzsigntemplatesignatureDependencyrequirement = default(FieldEEzsigntemplatesignatureDependencyrequirement?), string sEzsigntemplatesignaturePositioningpattern = default(string), int iEzsigntemplatesignaturePositioningoffsetx = default(int), int iEzsigntemplatesignaturePositioningoffsety = default(int), FieldEEzsigntemplatesignaturePositioningoccurence? eEzsigntemplatesignaturePositioningoccurence = default(FieldEEzsigntemplatesignaturePositioningoccurence?)) : base()
        {
            this.BEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
            this.AObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
            this.AObjEzsigntemplateelementdependency = aObjEzsigntemplateelementdependency;
        }

        /// <summary>
        /// Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
        /// </summary>
        /// <value>Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)</value>
        [DataMember(Name = "bEzsigntemplatesignatureCustomdate", EmitDefaultValue = true)]
        public bool BEzsigntemplatesignatureCustomdate { get; set; }

        /// <summary>
        /// An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
        /// </summary>
        /// <value>An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.</value>
        [DataMember(Name = "a_objEzsigntemplatesignaturecustomdate", EmitDefaultValue = false)]
        public List<EzsigntemplatesignaturecustomdateResponseCompound> AObjEzsigntemplatesignaturecustomdate { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplateelementdependency
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplateelementdependency", EmitDefaultValue = false)]
        public List<EzsigntemplateelementdependencyResponseCompound> AObjEzsigntemplateelementdependency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatesignatureResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BEzsigntemplatesignatureCustomdate: ").Append(BEzsigntemplatesignatureCustomdate).Append("\n");
            sb.Append("  AObjEzsigntemplatesignaturecustomdate: ").Append(AObjEzsigntemplatesignaturecustomdate).Append("\n");
            sb.Append("  AObjEzsigntemplateelementdependency: ").Append(AObjEzsigntemplateelementdependency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
