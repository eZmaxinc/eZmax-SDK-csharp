/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.15
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatesignature Object
    /// </summary>
    [DataContract]
    public partial class EzsigntemplatesignatureResponseCompound :  IEquatable<EzsigntemplatesignatureResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignatureResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatesignatureResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignatureResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatesignatureID">The unique ID of the Ezsigntemplatesignature (required).</param>
        /// <param name="fkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument (required).</param>
        /// <param name="fkiEzsigntemplatesignerID">The unique ID of the Ezsigntemplatesigner (required).</param>
        /// <param name="fkiEzsigntemplatesignerIDValidation">The unique ID of the Ezsigntemplatesigner.</param>
        /// <param name="iEzsigntemplatedocumentpagePagenumber">The page number in the Ezsigntemplatedocument (required).</param>
        /// <param name="iEzsigntemplatesignatureX">The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsigntemplatesignatureY">The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsigntemplatesignatureStep">The step when the Ezsigntemplatesigner will be invited to sign (required).</param>
        /// <param name="eEzsigntemplatesignatureType">eEzsigntemplatesignatureType (required).</param>
        /// <param name="tEzsigntemplatesignatureTooltip">A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature.</param>
        /// <param name="eEzsigntemplatesignatureTooltipposition">eEzsigntemplatesignatureTooltipposition.</param>
        /// <param name="eEzsigntemplatesignatureFont">eEzsigntemplatesignatureFont.</param>
        /// <param name="iEzsigntemplatesignatureValidationstep">The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments.</param>
        /// <param name="sEzsigntemplatesignatureAttachmentdescription">The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments.</param>
        /// <param name="eEzsigntemplatesignatureAttachmentnamesource">eEzsigntemplatesignatureAttachmentnamesource.</param>
        /// <param name="bEzsigntemplatesignatureRequired">Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType &#x3D; Attachments..</param>
        /// <param name="bEzsigntemplatesignatureCustomdate">Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**).</param>
        /// <param name="aObjEzsigntemplatesignaturecustomdate">An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all..</param>
        public EzsigntemplatesignatureResponseCompound(int pkiEzsigntemplatesignatureID = default(int), int fkiEzsigntemplatedocumentID = default(int), int fkiEzsigntemplatesignerID = default(int), int fkiEzsigntemplatesignerIDValidation = default(int), int iEzsigntemplatedocumentpagePagenumber = default(int), int iEzsigntemplatesignatureX = default(int), int iEzsigntemplatesignatureY = default(int), int iEzsigntemplatesignatureStep = default(int), FieldEEzsigntemplatesignatureType eEzsigntemplatesignatureType = default(FieldEEzsigntemplatesignatureType), string tEzsigntemplatesignatureTooltip = default(string), FieldEEzsigntemplatesignatureTooltipposition eEzsigntemplatesignatureTooltipposition = default(FieldEEzsigntemplatesignatureTooltipposition), FieldEEzsigntemplatesignatureFont eEzsigntemplatesignatureFont = default(FieldEEzsigntemplatesignatureFont), int iEzsigntemplatesignatureValidationstep = default(int), string sEzsigntemplatesignatureAttachmentdescription = default(string), FieldEEzsigntemplatesignatureAttachmentnamesource eEzsigntemplatesignatureAttachmentnamesource = default(FieldEEzsigntemplatesignatureAttachmentnamesource), bool bEzsigntemplatesignatureRequired = default(bool), bool bEzsigntemplatesignatureCustomdate = default(bool), List<EzsigntemplatesignaturecustomdateResponseCompound> aObjEzsigntemplatesignaturecustomdate = default(List<EzsigntemplatesignaturecustomdateResponseCompound>))
        {
            // to ensure "pkiEzsigntemplatesignatureID" is required (not null)
            if (pkiEzsigntemplatesignatureID == null)
            {
                throw new InvalidDataException("pkiEzsigntemplatesignatureID is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.PkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID;
            }

            // to ensure "fkiEzsigntemplatedocumentID" is required (not null)
            if (fkiEzsigntemplatedocumentID == null)
            {
                throw new InvalidDataException("fkiEzsigntemplatedocumentID is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
            }

            // to ensure "fkiEzsigntemplatesignerID" is required (not null)
            if (fkiEzsigntemplatesignerID == null)
            {
                throw new InvalidDataException("fkiEzsigntemplatesignerID is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
            }

            // to ensure "iEzsigntemplatedocumentpagePagenumber" is required (not null)
            if (iEzsigntemplatedocumentpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsigntemplatedocumentpagePagenumber is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber;
            }

            // to ensure "iEzsigntemplatesignatureX" is required (not null)
            if (iEzsigntemplatesignatureX == null)
            {
                throw new InvalidDataException("iEzsigntemplatesignatureX is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsigntemplatesignatureX = iEzsigntemplatesignatureX;
            }

            // to ensure "iEzsigntemplatesignatureY" is required (not null)
            if (iEzsigntemplatesignatureY == null)
            {
                throw new InvalidDataException("iEzsigntemplatesignatureY is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsigntemplatesignatureY = iEzsigntemplatesignatureY;
            }

            // to ensure "iEzsigntemplatesignatureStep" is required (not null)
            if (iEzsigntemplatesignatureStep == null)
            {
                throw new InvalidDataException("iEzsigntemplatesignatureStep is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsigntemplatesignatureStep = iEzsigntemplatesignatureStep;
            }

            // to ensure "eEzsigntemplatesignatureType" is required (not null)
            if (eEzsigntemplatesignatureType == null)
            {
                throw new InvalidDataException("eEzsigntemplatesignatureType is a required property for EzsigntemplatesignatureResponseCompound and cannot be null");
            }
            else
            {
                this.EEzsigntemplatesignatureType = eEzsigntemplatesignatureType;
            }

            this.FkiEzsigntemplatesignerIDValidation = fkiEzsigntemplatesignerIDValidation;
            this.TEzsigntemplatesignatureTooltip = tEzsigntemplatesignatureTooltip;
            this.EEzsigntemplatesignatureTooltipposition = eEzsigntemplatesignatureTooltipposition;
            this.EEzsigntemplatesignatureFont = eEzsigntemplatesignatureFont;
            this.IEzsigntemplatesignatureValidationstep = iEzsigntemplatesignatureValidationstep;
            this.SEzsigntemplatesignatureAttachmentdescription = sEzsigntemplatesignatureAttachmentdescription;
            this.EEzsigntemplatesignatureAttachmentnamesource = eEzsigntemplatesignatureAttachmentnamesource;
            this.BEzsigntemplatesignatureRequired = bEzsigntemplatesignatureRequired;
            this.BEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate;
            this.AObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesignature
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesignature</value>
        [DataMember(Name="pkiEzsigntemplatesignatureID", EmitDefaultValue=true)]
        public int PkiEzsigntemplatesignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
        [DataMember(Name="fkiEzsigntemplatedocumentID", EmitDefaultValue=true)]
        public int FkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesigner</value>
        [DataMember(Name="fkiEzsigntemplatesignerID", EmitDefaultValue=true)]
        public int FkiEzsigntemplatesignerID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesigner</value>
        [DataMember(Name="fkiEzsigntemplatesignerIDValidation", EmitDefaultValue=false)]
        public int FkiEzsigntemplatesignerIDValidation { get; set; }

        /// <summary>
        /// The page number in the Ezsigntemplatedocument
        /// </summary>
        /// <value>The page number in the Ezsigntemplatedocument</value>
        [DataMember(Name="iEzsigntemplatedocumentpagePagenumber", EmitDefaultValue=true)]
        public int IEzsigntemplatedocumentpagePagenumber { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsigntemplatesignatureX", EmitDefaultValue=true)]
        public int IEzsigntemplatesignatureX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsigntemplatesignatureY", EmitDefaultValue=true)]
        public int IEzsigntemplatesignatureY { get; set; }

        /// <summary>
        /// The step when the Ezsigntemplatesigner will be invited to sign
        /// </summary>
        /// <value>The step when the Ezsigntemplatesigner will be invited to sign</value>
        [DataMember(Name="iEzsigntemplatesignatureStep", EmitDefaultValue=true)]
        public int IEzsigntemplatesignatureStep { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplatesignatureType
        /// </summary>
        [DataMember(Name="eEzsigntemplatesignatureType", EmitDefaultValue=true)]
        public FieldEEzsigntemplatesignatureType EEzsigntemplatesignatureType { get; set; }

        /// <summary>
        /// A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature</value>
        [DataMember(Name="tEzsigntemplatesignatureTooltip", EmitDefaultValue=false)]
        public string TEzsigntemplatesignatureTooltip { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplatesignatureTooltipposition
        /// </summary>
        [DataMember(Name="eEzsigntemplatesignatureTooltipposition", EmitDefaultValue=false)]
        public FieldEEzsigntemplatesignatureTooltipposition EEzsigntemplatesignatureTooltipposition { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplatesignatureFont
        /// </summary>
        [DataMember(Name="eEzsigntemplatesignatureFont", EmitDefaultValue=false)]
        public FieldEEzsigntemplatesignatureFont EEzsigntemplatesignatureFont { get; set; }

        /// <summary>
        /// The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
        /// </summary>
        /// <value>The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments</value>
        [DataMember(Name="iEzsigntemplatesignatureValidationstep", EmitDefaultValue=false)]
        public int IEzsigntemplatesignatureValidationstep { get; set; }

        /// <summary>
        /// The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments
        /// </summary>
        /// <value>The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments</value>
        [DataMember(Name="sEzsigntemplatesignatureAttachmentdescription", EmitDefaultValue=false)]
        public string SEzsigntemplatesignatureAttachmentdescription { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplatesignatureAttachmentnamesource
        /// </summary>
        [DataMember(Name="eEzsigntemplatesignatureAttachmentnamesource", EmitDefaultValue=false)]
        public FieldEEzsigntemplatesignatureAttachmentnamesource EEzsigntemplatesignatureAttachmentnamesource { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType &#x3D; Attachments.
        /// </summary>
        /// <value>Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType &#x3D; Attachments.</value>
        [DataMember(Name="bEzsigntemplatesignatureRequired", EmitDefaultValue=false)]
        public bool BEzsigntemplatesignatureRequired { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)
        /// </summary>
        /// <value>Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**)</value>
        [DataMember(Name="bEzsigntemplatesignatureCustomdate", EmitDefaultValue=false)]
        public bool BEzsigntemplatesignatureCustomdate { get; set; }

        /// <summary>
        /// An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.
        /// </summary>
        /// <value>An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don&#39;t want to have a date at all.</value>
        [DataMember(Name="a_objEzsigntemplatesignaturecustomdate", EmitDefaultValue=false)]
        public List<EzsigntemplatesignaturecustomdateResponseCompound> AObjEzsigntemplatesignaturecustomdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplatesignatureResponseCompound {\n");
            sb.Append("  PkiEzsigntemplatesignatureID: ").Append(PkiEzsigntemplatesignatureID).Append("\n");
            sb.Append("  FkiEzsigntemplatedocumentID: ").Append(FkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  FkiEzsigntemplatesignerID: ").Append(FkiEzsigntemplatesignerID).Append("\n");
            sb.Append("  FkiEzsigntemplatesignerIDValidation: ").Append(FkiEzsigntemplatesignerIDValidation).Append("\n");
            sb.Append("  IEzsigntemplatedocumentpagePagenumber: ").Append(IEzsigntemplatedocumentpagePagenumber).Append("\n");
            sb.Append("  IEzsigntemplatesignatureX: ").Append(IEzsigntemplatesignatureX).Append("\n");
            sb.Append("  IEzsigntemplatesignatureY: ").Append(IEzsigntemplatesignatureY).Append("\n");
            sb.Append("  IEzsigntemplatesignatureStep: ").Append(IEzsigntemplatesignatureStep).Append("\n");
            sb.Append("  EEzsigntemplatesignatureType: ").Append(EEzsigntemplatesignatureType).Append("\n");
            sb.Append("  TEzsigntemplatesignatureTooltip: ").Append(TEzsigntemplatesignatureTooltip).Append("\n");
            sb.Append("  EEzsigntemplatesignatureTooltipposition: ").Append(EEzsigntemplatesignatureTooltipposition).Append("\n");
            sb.Append("  EEzsigntemplatesignatureFont: ").Append(EEzsigntemplatesignatureFont).Append("\n");
            sb.Append("  IEzsigntemplatesignatureValidationstep: ").Append(IEzsigntemplatesignatureValidationstep).Append("\n");
            sb.Append("  SEzsigntemplatesignatureAttachmentdescription: ").Append(SEzsigntemplatesignatureAttachmentdescription).Append("\n");
            sb.Append("  EEzsigntemplatesignatureAttachmentnamesource: ").Append(EEzsigntemplatesignatureAttachmentnamesource).Append("\n");
            sb.Append("  BEzsigntemplatesignatureRequired: ").Append(BEzsigntemplatesignatureRequired).Append("\n");
            sb.Append("  BEzsigntemplatesignatureCustomdate: ").Append(BEzsigntemplatesignatureCustomdate).Append("\n");
            sb.Append("  AObjEzsigntemplatesignaturecustomdate: ").Append(AObjEzsigntemplatesignaturecustomdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatesignatureResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsigntemplatesignatureResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatesignatureResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatesignatureResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigntemplatesignatureID == input.PkiEzsigntemplatesignatureID ||
                    (this.PkiEzsigntemplatesignatureID != null &&
                    this.PkiEzsigntemplatesignatureID.Equals(input.PkiEzsigntemplatesignatureID))
                ) && 
                (
                    this.FkiEzsigntemplatedocumentID == input.FkiEzsigntemplatedocumentID ||
                    (this.FkiEzsigntemplatedocumentID != null &&
                    this.FkiEzsigntemplatedocumentID.Equals(input.FkiEzsigntemplatedocumentID))
                ) && 
                (
                    this.FkiEzsigntemplatesignerID == input.FkiEzsigntemplatesignerID ||
                    (this.FkiEzsigntemplatesignerID != null &&
                    this.FkiEzsigntemplatesignerID.Equals(input.FkiEzsigntemplatesignerID))
                ) && 
                (
                    this.FkiEzsigntemplatesignerIDValidation == input.FkiEzsigntemplatesignerIDValidation ||
                    (this.FkiEzsigntemplatesignerIDValidation != null &&
                    this.FkiEzsigntemplatesignerIDValidation.Equals(input.FkiEzsigntemplatesignerIDValidation))
                ) && 
                (
                    this.IEzsigntemplatedocumentpagePagenumber == input.IEzsigntemplatedocumentpagePagenumber ||
                    (this.IEzsigntemplatedocumentpagePagenumber != null &&
                    this.IEzsigntemplatedocumentpagePagenumber.Equals(input.IEzsigntemplatedocumentpagePagenumber))
                ) && 
                (
                    this.IEzsigntemplatesignatureX == input.IEzsigntemplatesignatureX ||
                    (this.IEzsigntemplatesignatureX != null &&
                    this.IEzsigntemplatesignatureX.Equals(input.IEzsigntemplatesignatureX))
                ) && 
                (
                    this.IEzsigntemplatesignatureY == input.IEzsigntemplatesignatureY ||
                    (this.IEzsigntemplatesignatureY != null &&
                    this.IEzsigntemplatesignatureY.Equals(input.IEzsigntemplatesignatureY))
                ) && 
                (
                    this.IEzsigntemplatesignatureStep == input.IEzsigntemplatesignatureStep ||
                    (this.IEzsigntemplatesignatureStep != null &&
                    this.IEzsigntemplatesignatureStep.Equals(input.IEzsigntemplatesignatureStep))
                ) && 
                (
                    this.EEzsigntemplatesignatureType == input.EEzsigntemplatesignatureType ||
                    (this.EEzsigntemplatesignatureType != null &&
                    this.EEzsigntemplatesignatureType.Equals(input.EEzsigntemplatesignatureType))
                ) && 
                (
                    this.TEzsigntemplatesignatureTooltip == input.TEzsigntemplatesignatureTooltip ||
                    (this.TEzsigntemplatesignatureTooltip != null &&
                    this.TEzsigntemplatesignatureTooltip.Equals(input.TEzsigntemplatesignatureTooltip))
                ) && 
                (
                    this.EEzsigntemplatesignatureTooltipposition == input.EEzsigntemplatesignatureTooltipposition ||
                    (this.EEzsigntemplatesignatureTooltipposition != null &&
                    this.EEzsigntemplatesignatureTooltipposition.Equals(input.EEzsigntemplatesignatureTooltipposition))
                ) && 
                (
                    this.EEzsigntemplatesignatureFont == input.EEzsigntemplatesignatureFont ||
                    (this.EEzsigntemplatesignatureFont != null &&
                    this.EEzsigntemplatesignatureFont.Equals(input.EEzsigntemplatesignatureFont))
                ) && 
                (
                    this.IEzsigntemplatesignatureValidationstep == input.IEzsigntemplatesignatureValidationstep ||
                    (this.IEzsigntemplatesignatureValidationstep != null &&
                    this.IEzsigntemplatesignatureValidationstep.Equals(input.IEzsigntemplatesignatureValidationstep))
                ) && 
                (
                    this.SEzsigntemplatesignatureAttachmentdescription == input.SEzsigntemplatesignatureAttachmentdescription ||
                    (this.SEzsigntemplatesignatureAttachmentdescription != null &&
                    this.SEzsigntemplatesignatureAttachmentdescription.Equals(input.SEzsigntemplatesignatureAttachmentdescription))
                ) && 
                (
                    this.EEzsigntemplatesignatureAttachmentnamesource == input.EEzsigntemplatesignatureAttachmentnamesource ||
                    (this.EEzsigntemplatesignatureAttachmentnamesource != null &&
                    this.EEzsigntemplatesignatureAttachmentnamesource.Equals(input.EEzsigntemplatesignatureAttachmentnamesource))
                ) && 
                (
                    this.BEzsigntemplatesignatureRequired == input.BEzsigntemplatesignatureRequired ||
                    (this.BEzsigntemplatesignatureRequired != null &&
                    this.BEzsigntemplatesignatureRequired.Equals(input.BEzsigntemplatesignatureRequired))
                ) && 
                (
                    this.BEzsigntemplatesignatureCustomdate == input.BEzsigntemplatesignatureCustomdate ||
                    (this.BEzsigntemplatesignatureCustomdate != null &&
                    this.BEzsigntemplatesignatureCustomdate.Equals(input.BEzsigntemplatesignatureCustomdate))
                ) && 
                (
                    this.AObjEzsigntemplatesignaturecustomdate == input.AObjEzsigntemplatesignaturecustomdate ||
                    this.AObjEzsigntemplatesignaturecustomdate != null &&
                    input.AObjEzsigntemplatesignaturecustomdate != null &&
                    this.AObjEzsigntemplatesignaturecustomdate.SequenceEqual(input.AObjEzsigntemplatesignaturecustomdate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigntemplatesignatureID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplatesignatureID.GetHashCode();
                if (this.FkiEzsigntemplatedocumentID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplatedocumentID.GetHashCode();
                if (this.FkiEzsigntemplatesignerID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplatesignerID.GetHashCode();
                if (this.FkiEzsigntemplatesignerIDValidation != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplatesignerIDValidation.GetHashCode();
                if (this.IEzsigntemplatedocumentpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatedocumentpagePagenumber.GetHashCode();
                if (this.IEzsigntemplatesignatureX != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatesignatureX.GetHashCode();
                if (this.IEzsigntemplatesignatureY != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatesignatureY.GetHashCode();
                if (this.IEzsigntemplatesignatureStep != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatesignatureStep.GetHashCode();
                if (this.EEzsigntemplatesignatureType != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplatesignatureType.GetHashCode();
                if (this.TEzsigntemplatesignatureTooltip != null)
                    hashCode = hashCode * 59 + this.TEzsigntemplatesignatureTooltip.GetHashCode();
                if (this.EEzsigntemplatesignatureTooltipposition != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplatesignatureTooltipposition.GetHashCode();
                if (this.EEzsigntemplatesignatureFont != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplatesignatureFont.GetHashCode();
                if (this.IEzsigntemplatesignatureValidationstep != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatesignatureValidationstep.GetHashCode();
                if (this.SEzsigntemplatesignatureAttachmentdescription != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplatesignatureAttachmentdescription.GetHashCode();
                if (this.EEzsigntemplatesignatureAttachmentnamesource != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplatesignatureAttachmentnamesource.GetHashCode();
                if (this.BEzsigntemplatesignatureRequired != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplatesignatureRequired.GetHashCode();
                if (this.BEzsigntemplatesignatureCustomdate != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplatesignatureCustomdate.GetHashCode();
                if (this.AObjEzsigntemplatesignaturecustomdate != null)
                    hashCode = hashCode * 59 + this.AObjEzsigntemplatesignaturecustomdate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntemplatesignatureID (int) minimum
            if(this.PkiEzsigntemplatesignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatesignatureID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatesignatureID" });
            }



            // FkiEzsigntemplatedocumentID (int) minimum
            if(this.FkiEzsigntemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatedocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatedocumentID" });
            }



            // FkiEzsigntemplatesignerID (int) minimum
            if(this.FkiEzsigntemplatesignerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatesignerID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatesignerID" });
            }



            // FkiEzsigntemplatesignerIDValidation (int) minimum
            if(this.FkiEzsigntemplatesignerIDValidation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatesignerIDValidation, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatesignerIDValidation" });
            }



            // IEzsigntemplatedocumentpagePagenumber (int) minimum
            if(this.IEzsigntemplatedocumentpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatedocumentpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsigntemplatedocumentpagePagenumber" });
            }



            // IEzsigntemplatesignatureX (int) minimum
            if(this.IEzsigntemplatesignatureX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatesignatureX, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatesignatureX" });
            }



            // IEzsigntemplatesignatureY (int) minimum
            if(this.IEzsigntemplatesignatureY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatesignatureY, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatesignatureY" });
            }



            // IEzsigntemplatesignatureStep (int) minimum
            if(this.IEzsigntemplatesignatureStep < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatesignatureStep, must be a value greater than or equal to 1.", new [] { "IEzsigntemplatesignatureStep" });
            }

            yield break;
        }
    }

}
