/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.15
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Franchisebroker AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class FranchisebrokerAutocompleteElementResponse :  IEquatable<FranchisebrokerAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FranchisebrokerAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FranchisebrokerAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FranchisebrokerAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sFranchisebrokerName">The name of the Franchisebroker in the language of the requester (required).</param>
        /// <param name="pkiFranchisebrokerID">The unique ID of the Franchisebroker (required).</param>
        /// <param name="bFranchisebrokerIsactive">Whether the Franchisebroker is active or not (required).</param>
        public FranchisebrokerAutocompleteElementResponse(string sFranchisebrokerName = default(string), int pkiFranchisebrokerID = default(int), bool bFranchisebrokerIsactive = default(bool))
        {
            // to ensure "sFranchisebrokerName" is required (not null)
            if (sFranchisebrokerName == null)
            {
                throw new InvalidDataException("sFranchisebrokerName is a required property for FranchisebrokerAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SFranchisebrokerName = sFranchisebrokerName;
            }

            // to ensure "pkiFranchisebrokerID" is required (not null)
            if (pkiFranchisebrokerID == null)
            {
                throw new InvalidDataException("pkiFranchisebrokerID is a required property for FranchisebrokerAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiFranchisebrokerID = pkiFranchisebrokerID;
            }

            // to ensure "bFranchisebrokerIsactive" is required (not null)
            if (bFranchisebrokerIsactive == null)
            {
                throw new InvalidDataException("bFranchisebrokerIsactive is a required property for FranchisebrokerAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BFranchisebrokerIsactive = bFranchisebrokerIsactive;
            }

        }

        /// <summary>
        /// The name of the Franchisebroker in the language of the requester
        /// </summary>
        /// <value>The name of the Franchisebroker in the language of the requester</value>
        [DataMember(Name="sFranchisebrokerName", EmitDefaultValue=true)]
        public string SFranchisebrokerName { get; set; }

        /// <summary>
        /// The unique ID of the Franchisebroker
        /// </summary>
        /// <value>The unique ID of the Franchisebroker</value>
        [DataMember(Name="pkiFranchisebrokerID", EmitDefaultValue=true)]
        public int PkiFranchisebrokerID { get; set; }

        /// <summary>
        /// Whether the Franchisebroker is active or not
        /// </summary>
        /// <value>Whether the Franchisebroker is active or not</value>
        [DataMember(Name="bFranchisebrokerIsactive", EmitDefaultValue=true)]
        public bool BFranchisebrokerIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FranchisebrokerAutocompleteElementResponse {\n");
            sb.Append("  SFranchisebrokerName: ").Append(SFranchisebrokerName).Append("\n");
            sb.Append("  PkiFranchisebrokerID: ").Append(PkiFranchisebrokerID).Append("\n");
            sb.Append("  BFranchisebrokerIsactive: ").Append(BFranchisebrokerIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FranchisebrokerAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if FranchisebrokerAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FranchisebrokerAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FranchisebrokerAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SFranchisebrokerName == input.SFranchisebrokerName ||
                    (this.SFranchisebrokerName != null &&
                    this.SFranchisebrokerName.Equals(input.SFranchisebrokerName))
                ) && 
                (
                    this.PkiFranchisebrokerID == input.PkiFranchisebrokerID ||
                    (this.PkiFranchisebrokerID != null &&
                    this.PkiFranchisebrokerID.Equals(input.PkiFranchisebrokerID))
                ) && 
                (
                    this.BFranchisebrokerIsactive == input.BFranchisebrokerIsactive ||
                    (this.BFranchisebrokerIsactive != null &&
                    this.BFranchisebrokerIsactive.Equals(input.BFranchisebrokerIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SFranchisebrokerName != null)
                    hashCode = hashCode * 59 + this.SFranchisebrokerName.GetHashCode();
                if (this.PkiFranchisebrokerID != null)
                    hashCode = hashCode * 59 + this.PkiFranchisebrokerID.GetHashCode();
                if (this.BFranchisebrokerIsactive != null)
                    hashCode = hashCode * 59 + this.BFranchisebrokerIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiFranchisebrokerID (int) minimum
            if(this.PkiFranchisebrokerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiFranchisebrokerID, must be a value greater than or equal to 0.", new [] { "PkiFranchisebrokerID" });
            }

            yield break;
        }
    }

}
