/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepackagesigner Object and children
    /// </summary>
    [DataContract(Name = "ezsigntemplatepackagesigner-RequestCompound")]
    public partial class EzsigntemplatepackagesignerRequestCompound : IEquatable<EzsigntemplatepackagesignerRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackagesignerRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepackagesignerRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackagesignerRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatepackagesignerID">The unique ID of the Ezsigntemplatepackagesigner.</param>
        /// <param name="fkiEzsigntemplatepackageID">The unique ID of the Ezsigntemplatepackage (required).</param>
        /// <param name="sEzsigntemplatepackagesignerDescription">The description of the Ezsigntemplatepackagesigner (required).</param>
        public EzsigntemplatepackagesignerRequestCompound(int pkiEzsigntemplatepackagesignerID = default(int), int fkiEzsigntemplatepackageID = default(int), string sEzsigntemplatepackagesignerDescription = default(string))
        {
            this.FkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID;
            // to ensure "sEzsigntemplatepackagesignerDescription" is required (not null)
            if (sEzsigntemplatepackagesignerDescription == null)
            {
                throw new ArgumentNullException("sEzsigntemplatepackagesignerDescription is a required property for EzsigntemplatepackagesignerRequestCompound and cannot be null");
            }
            this.SEzsigntemplatepackagesignerDescription = sEzsigntemplatepackagesignerDescription;
            this.PkiEzsigntemplatepackagesignerID = pkiEzsigntemplatepackagesignerID;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackagesigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackagesigner</value>
        /* <example>174</example>*/
        [DataMember(Name = "pkiEzsigntemplatepackagesignerID", EmitDefaultValue = false)]
        public int PkiEzsigntemplatepackagesignerID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackage</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiEzsigntemplatepackageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigntemplatepackageID { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplatepackagesigner
        /// </summary>
        /// <value>The description of the Ezsigntemplatepackagesigner</value>
        /* <example>Customer</example>*/
        [DataMember(Name = "sEzsigntemplatepackagesignerDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatepackagesignerDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepackagesignerRequestCompound {\n");
            sb.Append("  PkiEzsigntemplatepackagesignerID: ").Append(PkiEzsigntemplatepackagesignerID).Append("\n");
            sb.Append("  FkiEzsigntemplatepackageID: ").Append(FkiEzsigntemplatepackageID).Append("\n");
            sb.Append("  SEzsigntemplatepackagesignerDescription: ").Append(SEzsigntemplatepackagesignerDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatepackagesignerRequestCompound);
        }

        /// <summary>
        /// Returns true if EzsigntemplatepackagesignerRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatepackagesignerRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatepackagesignerRequestCompound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigntemplatepackagesignerID == input.PkiEzsigntemplatepackagesignerID ||
                    this.PkiEzsigntemplatepackagesignerID.Equals(input.PkiEzsigntemplatepackagesignerID)
                ) && 
                (
                    this.FkiEzsigntemplatepackageID == input.FkiEzsigntemplatepackageID ||
                    this.FkiEzsigntemplatepackageID.Equals(input.FkiEzsigntemplatepackageID)
                ) && 
                (
                    this.SEzsigntemplatepackagesignerDescription == input.SEzsigntemplatepackagesignerDescription ||
                    (this.SEzsigntemplatepackagesignerDescription != null &&
                    this.SEzsigntemplatepackagesignerDescription.Equals(input.SEzsigntemplatepackagesignerDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigntemplatepackagesignerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplatepackageID.GetHashCode();
                if (this.SEzsigntemplatepackagesignerDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatepackagesignerDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatepackagesignerID (int) minimum
            if (this.PkiEzsigntemplatepackagesignerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatepackagesignerID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatepackagesignerID" });
            }

            // FkiEzsigntemplatepackageID (int) minimum
            if (this.FkiEzsigntemplatepackageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatepackageID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatepackageID" });
            }

            yield break;
        }
    }

}
