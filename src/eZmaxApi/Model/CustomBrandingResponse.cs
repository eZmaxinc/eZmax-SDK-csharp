/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom Branding Object
    /// </summary>
    [DataContract(Name = "Custom-Branding-Response")]
    public partial class CustomBrandingResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomBrandingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomBrandingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomBrandingResponse" /> class.
        /// </summary>
        /// <param name="iBrandingColor">The primary color. This is a RGB color converted into integer (required).</param>
        /// <param name="sBrandingLogointerfaceurl">The url of the picture used as logo in the Branding (required).</param>
        public CustomBrandingResponse(int iBrandingColor = default(int), string sBrandingLogointerfaceurl = default(string))
        {
            this.IBrandingColor = iBrandingColor;
            // to ensure "sBrandingLogointerfaceurl" is required (not null)
            if (sBrandingLogointerfaceurl == null)
            {
                throw new ArgumentNullException("sBrandingLogointerfaceurl is a required property for CustomBrandingResponse and cannot be null");
            }
            this.SBrandingLogointerfaceurl = sBrandingLogointerfaceurl;
        }

        /// <summary>
        /// The primary color. This is a RGB color converted into integer
        /// </summary>
        /// <value>The primary color. This is a RGB color converted into integer</value>
        /* <example>15658734</example>*/
        [DataMember(Name = "iBrandingColor", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColor { get; set; }

        /// <summary>
        /// The url of the picture used as logo in the Branding
        /// </summary>
        /// <value>The url of the picture used as logo in the Branding</value>
        /* <example>http://www.example.com/logo.jpg</example>*/
        [DataMember(Name = "sBrandingLogointerfaceurl", IsRequired = true, EmitDefaultValue = true)]
        public string SBrandingLogointerfaceurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomBrandingResponse {\n");
            sb.Append("  IBrandingColor: ").Append(IBrandingColor).Append("\n");
            sb.Append("  SBrandingLogointerfaceurl: ").Append(SBrandingLogointerfaceurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IBrandingColor (int) maximum
            if (this.IBrandingColor > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for IBrandingColor, must be a value less than or equal to 16777215.", new [] { "IBrandingColor" });
            }

            // IBrandingColor (int) minimum
            if (this.IBrandingColor < (int)0)
            {
                yield return new ValidationResult("Invalid value for IBrandingColor, must be a value greater than or equal to 0.", new [] { "IBrandingColor" });
            }

            if (this.SBrandingLogointerfaceurl != null) {
                // SBrandingLogointerfaceurl (string) pattern
                Regex regexSBrandingLogointerfaceurl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSBrandingLogointerfaceurl.Match(this.SBrandingLogointerfaceurl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBrandingLogointerfaceurl, must match a pattern of " + regexSBrandingLogointerfaceurl, new [] { "SBrandingLogointerfaceurl" });
                }
            }

            yield break;
        }
    }

}
