/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communication List Element
    /// </summary>
    [DataContract(Name = "Custom-CommunicationListElement-Response")]
    public partial class CustomCommunicationListElementResponse : IEquatable<CustomCommunicationListElementResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ECommunicationDirection
        /// </summary>
        [DataMember(Name = "eCommunicationDirection", IsRequired = true, EmitDefaultValue = true)]
        public ComputedECommunicationDirection ECommunicationDirection { get; set; }

        /// <summary>
        /// Gets or Sets ECommunicationImportance
        /// </summary>
        [DataMember(Name = "eCommunicationImportance", IsRequired = true, EmitDefaultValue = true)]
        public FieldECommunicationImportance ECommunicationImportance { get; set; }

        /// <summary>
        /// Gets or Sets ECommunicationType
        /// </summary>
        [DataMember(Name = "eCommunicationType", IsRequired = true, EmitDefaultValue = true)]
        public FieldECommunicationType ECommunicationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCommunicationListElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomCommunicationListElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCommunicationListElementResponse" /> class.
        /// </summary>
        /// <param name="pkiCommunicationID">The unique ID of the Communication. (required).</param>
        /// <param name="dtCreatedDate">The date and time at which the object was created (required).</param>
        /// <param name="eCommunicationDirection">eCommunicationDirection (required).</param>
        /// <param name="eCommunicationImportance">eCommunicationImportance (required).</param>
        /// <param name="eCommunicationType">eCommunicationType (required).</param>
        /// <param name="iCommunicationrecipientCount">The count of Communicationrecipient (required).</param>
        /// <param name="sCommunicationSubject">The subject of the Communication (required).</param>
        /// <param name="sCommunicationSender">The sender name of the Communication (required).</param>
        /// <param name="sCommunicationRecipient">The recipients&#39; name of the Communication (required).</param>
        public CustomCommunicationListElementResponse(int pkiCommunicationID = default(int), string dtCreatedDate = default(string), ComputedECommunicationDirection eCommunicationDirection = default(ComputedECommunicationDirection), FieldECommunicationImportance eCommunicationImportance = default(FieldECommunicationImportance), FieldECommunicationType eCommunicationType = default(FieldECommunicationType), int iCommunicationrecipientCount = default(int), string sCommunicationSubject = default(string), string sCommunicationSender = default(string), string sCommunicationRecipient = default(string))
        {
            this.PkiCommunicationID = pkiCommunicationID;
            // to ensure "dtCreatedDate" is required (not null)
            if (dtCreatedDate == null)
            {
                throw new ArgumentNullException("dtCreatedDate is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.DtCreatedDate = dtCreatedDate;
            this.ECommunicationDirection = eCommunicationDirection;
            this.ECommunicationImportance = eCommunicationImportance;
            this.ECommunicationType = eCommunicationType;
            this.ICommunicationrecipientCount = iCommunicationrecipientCount;
            // to ensure "sCommunicationSubject" is required (not null)
            if (sCommunicationSubject == null)
            {
                throw new ArgumentNullException("sCommunicationSubject is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.SCommunicationSubject = sCommunicationSubject;
            // to ensure "sCommunicationSender" is required (not null)
            if (sCommunicationSender == null)
            {
                throw new ArgumentNullException("sCommunicationSender is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.SCommunicationSender = sCommunicationSender;
            // to ensure "sCommunicationRecipient" is required (not null)
            if (sCommunicationRecipient == null)
            {
                throw new ArgumentNullException("sCommunicationRecipient is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.SCommunicationRecipient = sCommunicationRecipient;
        }

        /// <summary>
        /// The unique ID of the Communication.
        /// </summary>
        /// <value>The unique ID of the Communication.</value>
        /// <example>1</example>
        [DataMember(Name = "pkiCommunicationID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCommunicationID { get; set; }

        /// <summary>
        /// The date and time at which the object was created
        /// </summary>
        /// <value>The date and time at which the object was created</value>
        /// <example>2020-12-31 23:59:59</example>
        [DataMember(Name = "dtCreatedDate", IsRequired = true, EmitDefaultValue = true)]
        public string DtCreatedDate { get; set; }

        /// <summary>
        /// The count of Communicationrecipient
        /// </summary>
        /// <value>The count of Communicationrecipient</value>
        /// <example>8</example>
        [DataMember(Name = "iCommunicationrecipientCount", IsRequired = true, EmitDefaultValue = true)]
        public int ICommunicationrecipientCount { get; set; }

        /// <summary>
        /// The subject of the Communication
        /// </summary>
        /// <value>The subject of the Communication</value>
        /// <example>This is an example of subject</example>
        [DataMember(Name = "sCommunicationSubject", IsRequired = true, EmitDefaultValue = true)]
        public string SCommunicationSubject { get; set; }

        /// <summary>
        /// The sender name of the Communication
        /// </summary>
        /// <value>The sender name of the Communication</value>
        /// <example>John Doe</example>
        [DataMember(Name = "sCommunicationSender", IsRequired = true, EmitDefaultValue = true)]
        public string SCommunicationSender { get; set; }

        /// <summary>
        /// The recipients&#39; name of the Communication
        /// </summary>
        /// <value>The recipients&#39; name of the Communication</value>
        /// <example>Jane Doe</example>
        [DataMember(Name = "sCommunicationRecipient", IsRequired = true, EmitDefaultValue = true)]
        public string SCommunicationRecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomCommunicationListElementResponse {\n");
            sb.Append("  PkiCommunicationID: ").Append(PkiCommunicationID).Append("\n");
            sb.Append("  DtCreatedDate: ").Append(DtCreatedDate).Append("\n");
            sb.Append("  ECommunicationDirection: ").Append(ECommunicationDirection).Append("\n");
            sb.Append("  ECommunicationImportance: ").Append(ECommunicationImportance).Append("\n");
            sb.Append("  ECommunicationType: ").Append(ECommunicationType).Append("\n");
            sb.Append("  ICommunicationrecipientCount: ").Append(ICommunicationrecipientCount).Append("\n");
            sb.Append("  SCommunicationSubject: ").Append(SCommunicationSubject).Append("\n");
            sb.Append("  SCommunicationSender: ").Append(SCommunicationSender).Append("\n");
            sb.Append("  SCommunicationRecipient: ").Append(SCommunicationRecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomCommunicationListElementResponse);
        }

        /// <summary>
        /// Returns true if CustomCommunicationListElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomCommunicationListElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomCommunicationListElementResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiCommunicationID == input.PkiCommunicationID ||
                    this.PkiCommunicationID.Equals(input.PkiCommunicationID)
                ) && 
                (
                    this.DtCreatedDate == input.DtCreatedDate ||
                    (this.DtCreatedDate != null &&
                    this.DtCreatedDate.Equals(input.DtCreatedDate))
                ) && 
                (
                    this.ECommunicationDirection == input.ECommunicationDirection ||
                    this.ECommunicationDirection.Equals(input.ECommunicationDirection)
                ) && 
                (
                    this.ECommunicationImportance == input.ECommunicationImportance ||
                    this.ECommunicationImportance.Equals(input.ECommunicationImportance)
                ) && 
                (
                    this.ECommunicationType == input.ECommunicationType ||
                    this.ECommunicationType.Equals(input.ECommunicationType)
                ) && 
                (
                    this.ICommunicationrecipientCount == input.ICommunicationrecipientCount ||
                    this.ICommunicationrecipientCount.Equals(input.ICommunicationrecipientCount)
                ) && 
                (
                    this.SCommunicationSubject == input.SCommunicationSubject ||
                    (this.SCommunicationSubject != null &&
                    this.SCommunicationSubject.Equals(input.SCommunicationSubject))
                ) && 
                (
                    this.SCommunicationSender == input.SCommunicationSender ||
                    (this.SCommunicationSender != null &&
                    this.SCommunicationSender.Equals(input.SCommunicationSender))
                ) && 
                (
                    this.SCommunicationRecipient == input.SCommunicationRecipient ||
                    (this.SCommunicationRecipient != null &&
                    this.SCommunicationRecipient.Equals(input.SCommunicationRecipient))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiCommunicationID.GetHashCode();
                if (this.DtCreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.DtCreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ECommunicationDirection.GetHashCode();
                hashCode = (hashCode * 59) + this.ECommunicationImportance.GetHashCode();
                hashCode = (hashCode * 59) + this.ECommunicationType.GetHashCode();
                hashCode = (hashCode * 59) + this.ICommunicationrecipientCount.GetHashCode();
                if (this.SCommunicationSubject != null)
                {
                    hashCode = (hashCode * 59) + this.SCommunicationSubject.GetHashCode();
                }
                if (this.SCommunicationSender != null)
                {
                    hashCode = (hashCode * 59) + this.SCommunicationSender.GetHashCode();
                }
                if (this.SCommunicationRecipient != null)
                {
                    hashCode = (hashCode * 59) + this.SCommunicationRecipient.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCommunicationID (int) minimum
            if (this.PkiCommunicationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCommunicationID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationID" });
            }

            yield break;
        }
    }

}
