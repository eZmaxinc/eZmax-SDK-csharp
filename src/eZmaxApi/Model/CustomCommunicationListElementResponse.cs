/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communication List Element
    /// </summary>
    [DataContract(Name = "Custom-CommunicationListElement-Response")]
    public partial class CustomCommunicationListElementResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ECommunicationDirection
        /// </summary>
        [DataMember(Name = "eCommunicationDirection", IsRequired = true, EmitDefaultValue = true)]
        public ComputedECommunicationDirection ECommunicationDirection { get; set; }

        /// <summary>
        /// Gets or Sets ECommunicationImportance
        /// </summary>
        [DataMember(Name = "eCommunicationImportance", IsRequired = true, EmitDefaultValue = true)]
        public FieldECommunicationImportance ECommunicationImportance { get; set; }

        /// <summary>
        /// Gets or Sets ECommunicationType
        /// </summary>
        [DataMember(Name = "eCommunicationType", IsRequired = true, EmitDefaultValue = true)]
        public FieldECommunicationType ECommunicationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCommunicationListElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomCommunicationListElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomCommunicationListElementResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Communication. (required).</param>
        /// <param name="">The date and time at which the object was created (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The count of Communicationrecipient (required).</param>
        /// <param name="">The subject of the Communication (required).</param>
        /// <param name="">The sender name of the Communication (required).</param>
        /// <param name="">The recipients&#39; name of the Communication (required).</param>
        public CustomCommunicationListElementResponse(int  = default(int), string  = default(string), ComputedECommunicationDirection  = default(ComputedECommunicationDirection), FieldECommunicationImportance  = default(FieldECommunicationImportance), FieldECommunicationType  = default(FieldECommunicationType), int  = default(int), string  = default(string), string  = default(string), string  = default(string))
        {
            this.PkiCommunicationID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.DtCreatedDate = ;
            this.ECommunicationDirection = ;
            this.ECommunicationImportance = ;
            this.ECommunicationType = ;
            this.ICommunicationrecipientCount = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.SCommunicationSubject = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.SCommunicationSender = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CustomCommunicationListElementResponse and cannot be null");
            }
            this.SCommunicationRecipient = ;
        }

        /// <summary>
        /// The unique ID of the Communication.
        /// </summary>
        /// <value>The unique ID of the Communication.</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiCommunicationID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCommunicationID { get; set; }

        /// <summary>
        /// The date and time at which the object was created
        /// </summary>
        /// <value>The date and time at which the object was created</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtCreatedDate", IsRequired = true, EmitDefaultValue = true)]
        public string DtCreatedDate { get; set; }

        /// <summary>
        /// The count of Communicationrecipient
        /// </summary>
        /// <value>The count of Communicationrecipient</value>
        /* <example>8</example>*/
        [DataMember(Name = "iCommunicationrecipientCount", IsRequired = true, EmitDefaultValue = true)]
        public int ICommunicationrecipientCount { get; set; }

        /// <summary>
        /// The subject of the Communication
        /// </summary>
        /// <value>The subject of the Communication</value>
        /* <example>This is an example of subject</example>*/
        [DataMember(Name = "sCommunicationSubject", IsRequired = true, EmitDefaultValue = true)]
        public string SCommunicationSubject { get; set; }

        /// <summary>
        /// The sender name of the Communication
        /// </summary>
        /// <value>The sender name of the Communication</value>
        /* <example>John Doe</example>*/
        [DataMember(Name = "sCommunicationSender", IsRequired = true, EmitDefaultValue = true)]
        public string SCommunicationSender { get; set; }

        /// <summary>
        /// The recipients&#39; name of the Communication
        /// </summary>
        /// <value>The recipients&#39; name of the Communication</value>
        /* <example>Jane Doe</example>*/
        [DataMember(Name = "sCommunicationRecipient", IsRequired = true, EmitDefaultValue = true)]
        public string SCommunicationRecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomCommunicationListElementResponse {\n");
            sb.Append("  PkiCommunicationID: ").Append(PkiCommunicationID).Append("\n");
            sb.Append("  DtCreatedDate: ").Append(DtCreatedDate).Append("\n");
            sb.Append("  ECommunicationDirection: ").Append(ECommunicationDirection).Append("\n");
            sb.Append("  ECommunicationImportance: ").Append(ECommunicationImportance).Append("\n");
            sb.Append("  ECommunicationType: ").Append(ECommunicationType).Append("\n");
            sb.Append("  ICommunicationrecipientCount: ").Append(ICommunicationrecipientCount).Append("\n");
            sb.Append("  SCommunicationSubject: ").Append(SCommunicationSubject).Append("\n");
            sb.Append("  SCommunicationSender: ").Append(SCommunicationSender).Append("\n");
            sb.Append("  SCommunicationRecipient: ").Append(SCommunicationRecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCommunicationID (int) minimum
            if (this.PkiCommunicationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCommunicationID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationID" });
            }

            if (this.SCommunicationSubject != null) {
                // SCommunicationSubject (string) pattern
                Regex regexSCommunicationSubject = new Regex(@"^.{0,200}$", RegexOptions.CultureInvariant);
                if (!regexSCommunicationSubject.Match(this.SCommunicationSubject).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCommunicationSubject, must match a pattern of " + regexSCommunicationSubject, new [] { "SCommunicationSubject" });
                }
            }

            yield break;
        }
    }

}
