/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communicationrecipient Object
    /// </summary>
    [DataContract(Name = "communicationrecipient-Request")]
    public partial class CommunicationrecipientRequest : IEquatable<CommunicationrecipientRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ECommunicationrecipientType
        /// </summary>
        [DataMember(Name = "eCommunicationrecipientType", EmitDefaultValue = false)]
        public FieldECommunicationrecipientType? ECommunicationrecipientType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationrecipientRequest" /> class.
        /// </summary>
        /// <param name="pkiCommunicationrecipientID">The unique ID of the Communicationrecipient..</param>
        /// <param name="fkiAgentID">The unique ID of the Agent..</param>
        /// <param name="fkiAgentincorporationID">The unique ID of the Agentincorporation..</param>
        /// <param name="fkiBrokerID">The unique ID of the Broker..</param>
        /// <param name="fkiCustomerID">The unique ID of the Customer..</param>
        /// <param name="fkiEmployeeID">The unique ID of the Employee..</param>
        /// <param name="fkiAssistantID">The unique ID of the Assistant..</param>
        /// <param name="fkiExternalbrokerID">The unique ID of the Externalbroker..</param>
        /// <param name="fkiEzsignsignerID">The unique ID of the Ezsignsigner.</param>
        /// <param name="fkiNotaryID">The unique ID of the Notary..</param>
        /// <param name="fkiSupplierID">The unique ID of the Supplier..</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="eCommunicationrecipientType">eCommunicationrecipientType.</param>
        public CommunicationrecipientRequest(int pkiCommunicationrecipientID = default(int), int fkiAgentID = default(int), int fkiAgentincorporationID = default(int), int fkiBrokerID = default(int), int fkiCustomerID = default(int), int fkiEmployeeID = default(int), int fkiAssistantID = default(int), int fkiExternalbrokerID = default(int), int fkiEzsignsignerID = default(int), int fkiNotaryID = default(int), int fkiSupplierID = default(int), int fkiUserID = default(int), FieldECommunicationrecipientType? eCommunicationrecipientType = default(FieldECommunicationrecipientType?))
        {
            this.PkiCommunicationrecipientID = pkiCommunicationrecipientID;
            this.FkiAgentID = fkiAgentID;
            this.FkiAgentincorporationID = fkiAgentincorporationID;
            this.FkiBrokerID = fkiBrokerID;
            this.FkiCustomerID = fkiCustomerID;
            this.FkiEmployeeID = fkiEmployeeID;
            this.FkiAssistantID = fkiAssistantID;
            this.FkiExternalbrokerID = fkiExternalbrokerID;
            this.FkiEzsignsignerID = fkiEzsignsignerID;
            this.FkiNotaryID = fkiNotaryID;
            this.FkiSupplierID = fkiSupplierID;
            this.FkiUserID = fkiUserID;
            this.ECommunicationrecipientType = eCommunicationrecipientType;
        }

        /// <summary>
        /// The unique ID of the Communicationrecipient.
        /// </summary>
        /// <value>The unique ID of the Communicationrecipient.</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiCommunicationrecipientID", EmitDefaultValue = false)]
        public int PkiCommunicationrecipientID { get; set; }

        /// <summary>
        /// The unique ID of the Agent.
        /// </summary>
        /// <value>The unique ID of the Agent.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAgentID", EmitDefaultValue = false)]
        public int FkiAgentID { get; set; }

        /// <summary>
        /// The unique ID of the Agentincorporation.
        /// </summary>
        /// <value>The unique ID of the Agentincorporation.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAgentincorporationID", EmitDefaultValue = false)]
        public int FkiAgentincorporationID { get; set; }

        /// <summary>
        /// The unique ID of the Broker.
        /// </summary>
        /// <value>The unique ID of the Broker.</value>
        /* <example>26</example>*/
        [DataMember(Name = "fkiBrokerID", EmitDefaultValue = false)]
        public int FkiBrokerID { get; set; }

        /// <summary>
        /// The unique ID of the Customer.
        /// </summary>
        /// <value>The unique ID of the Customer.</value>
        /* <example>18</example>*/
        [DataMember(Name = "fkiCustomerID", EmitDefaultValue = false)]
        public int FkiCustomerID { get; set; }

        /// <summary>
        /// The unique ID of the Employee.
        /// </summary>
        /// <value>The unique ID of the Employee.</value>
        /* <example>31</example>*/
        [DataMember(Name = "fkiEmployeeID", EmitDefaultValue = false)]
        public int FkiEmployeeID { get; set; }

        /// <summary>
        /// The unique ID of the Assistant.
        /// </summary>
        /// <value>The unique ID of the Assistant.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiAssistantID", EmitDefaultValue = false)]
        public int FkiAssistantID { get; set; }

        /// <summary>
        /// The unique ID of the Externalbroker.
        /// </summary>
        /// <value>The unique ID of the Externalbroker.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiExternalbrokerID", EmitDefaultValue = false)]
        public int FkiExternalbrokerID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignsigner
        /// </summary>
        /// <value>The unique ID of the Ezsignsigner</value>
        /* <example>89</example>*/
        [DataMember(Name = "fkiEzsignsignerID", EmitDefaultValue = false)]
        public int FkiEzsignsignerID { get; set; }

        /// <summary>
        /// The unique ID of the Notary.
        /// </summary>
        /// <value>The unique ID of the Notary.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiNotaryID", EmitDefaultValue = false)]
        public int FkiNotaryID { get; set; }

        /// <summary>
        /// The unique ID of the Supplier.
        /// </summary>
        /// <value>The unique ID of the Supplier.</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiSupplierID", EmitDefaultValue = false)]
        public int FkiSupplierID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommunicationrecipientRequest {\n");
            sb.Append("  PkiCommunicationrecipientID: ").Append(PkiCommunicationrecipientID).Append("\n");
            sb.Append("  FkiAgentID: ").Append(FkiAgentID).Append("\n");
            sb.Append("  FkiAgentincorporationID: ").Append(FkiAgentincorporationID).Append("\n");
            sb.Append("  FkiBrokerID: ").Append(FkiBrokerID).Append("\n");
            sb.Append("  FkiCustomerID: ").Append(FkiCustomerID).Append("\n");
            sb.Append("  FkiEmployeeID: ").Append(FkiEmployeeID).Append("\n");
            sb.Append("  FkiAssistantID: ").Append(FkiAssistantID).Append("\n");
            sb.Append("  FkiExternalbrokerID: ").Append(FkiExternalbrokerID).Append("\n");
            sb.Append("  FkiEzsignsignerID: ").Append(FkiEzsignsignerID).Append("\n");
            sb.Append("  FkiNotaryID: ").Append(FkiNotaryID).Append("\n");
            sb.Append("  FkiSupplierID: ").Append(FkiSupplierID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  ECommunicationrecipientType: ").Append(ECommunicationrecipientType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationrecipientRequest);
        }

        /// <summary>
        /// Returns true if CommunicationrecipientRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationrecipientRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationrecipientRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiCommunicationrecipientID == input.PkiCommunicationrecipientID ||
                    this.PkiCommunicationrecipientID.Equals(input.PkiCommunicationrecipientID)
                ) && 
                (
                    this.FkiAgentID == input.FkiAgentID ||
                    this.FkiAgentID.Equals(input.FkiAgentID)
                ) && 
                (
                    this.FkiAgentincorporationID == input.FkiAgentincorporationID ||
                    this.FkiAgentincorporationID.Equals(input.FkiAgentincorporationID)
                ) && 
                (
                    this.FkiBrokerID == input.FkiBrokerID ||
                    this.FkiBrokerID.Equals(input.FkiBrokerID)
                ) && 
                (
                    this.FkiCustomerID == input.FkiCustomerID ||
                    this.FkiCustomerID.Equals(input.FkiCustomerID)
                ) && 
                (
                    this.FkiEmployeeID == input.FkiEmployeeID ||
                    this.FkiEmployeeID.Equals(input.FkiEmployeeID)
                ) && 
                (
                    this.FkiAssistantID == input.FkiAssistantID ||
                    this.FkiAssistantID.Equals(input.FkiAssistantID)
                ) && 
                (
                    this.FkiExternalbrokerID == input.FkiExternalbrokerID ||
                    this.FkiExternalbrokerID.Equals(input.FkiExternalbrokerID)
                ) && 
                (
                    this.FkiEzsignsignerID == input.FkiEzsignsignerID ||
                    this.FkiEzsignsignerID.Equals(input.FkiEzsignsignerID)
                ) && 
                (
                    this.FkiNotaryID == input.FkiNotaryID ||
                    this.FkiNotaryID.Equals(input.FkiNotaryID)
                ) && 
                (
                    this.FkiSupplierID == input.FkiSupplierID ||
                    this.FkiSupplierID.Equals(input.FkiSupplierID)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.ECommunicationrecipientType == input.ECommunicationrecipientType ||
                    this.ECommunicationrecipientType.Equals(input.ECommunicationrecipientType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiCommunicationrecipientID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiAgentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiAgentincorporationID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiBrokerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiCustomerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEmployeeID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiAssistantID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiExternalbrokerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignsignerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiNotaryID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiSupplierID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                hashCode = (hashCode * 59) + this.ECommunicationrecipientType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCommunicationrecipientID (int) minimum
            if (this.PkiCommunicationrecipientID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCommunicationrecipientID, must be a value greater than or equal to 0.", new [] { "PkiCommunicationrecipientID" });
            }

            // FkiAgentID (int) minimum
            if (this.FkiAgentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiAgentID, must be a value greater than or equal to 0.", new [] { "FkiAgentID" });
            }

            // FkiAgentincorporationID (int) minimum
            if (this.FkiAgentincorporationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiAgentincorporationID, must be a value greater than or equal to 0.", new [] { "FkiAgentincorporationID" });
            }

            // FkiBrokerID (int) minimum
            if (this.FkiBrokerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiBrokerID, must be a value greater than or equal to 0.", new [] { "FkiBrokerID" });
            }

            // FkiCustomerID (int) minimum
            if (this.FkiCustomerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCustomerID, must be a value greater than or equal to 0.", new [] { "FkiCustomerID" });
            }

            // FkiEmployeeID (int) minimum
            if (this.FkiEmployeeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEmployeeID, must be a value greater than or equal to 0.", new [] { "FkiEmployeeID" });
            }

            // FkiAssistantID (int) minimum
            if (this.FkiAssistantID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiAssistantID, must be a value greater than or equal to 0.", new [] { "FkiAssistantID" });
            }

            // FkiExternalbrokerID (int) minimum
            if (this.FkiExternalbrokerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiExternalbrokerID, must be a value greater than or equal to 0.", new [] { "FkiExternalbrokerID" });
            }

            // FkiEzsignsignerID (int) minimum
            if (this.FkiEzsignsignerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignsignerID, must be a value greater than or equal to 0.", new [] { "FkiEzsignsignerID" });
            }

            // FkiNotaryID (int) minimum
            if (this.FkiNotaryID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiNotaryID, must be a value greater than or equal to 0.", new [] { "FkiNotaryID" });
            }

            // FkiSupplierID (int) minimum
            if (this.FkiSupplierID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiSupplierID, must be a value greater than or equal to 0.", new [] { "FkiSupplierID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            yield break;
        }
    }

}
