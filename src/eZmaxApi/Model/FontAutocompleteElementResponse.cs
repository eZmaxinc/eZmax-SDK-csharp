/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Font AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class FontAutocompleteElementResponse :  IEquatable<FontAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FontAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FontAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FontAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sFontName">The name of the Font (required).</param>
        /// <param name="pkiFontID">The unique ID of the Font (required).</param>
        /// <param name="bFontIsactive">Whether the Font is active or not (required).</param>
        public FontAutocompleteElementResponse(string sFontName = default(string), int pkiFontID = default(int), bool bFontIsactive = default(bool))
        {
            // to ensure "sFontName" is required (not null)
            if (sFontName == null)
            {
                throw new InvalidDataException("sFontName is a required property for FontAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SFontName = sFontName;
            }

            // to ensure "pkiFontID" is required (not null)
            if (pkiFontID == null)
            {
                throw new InvalidDataException("pkiFontID is a required property for FontAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiFontID = pkiFontID;
            }

            // to ensure "bFontIsactive" is required (not null)
            if (bFontIsactive == null)
            {
                throw new InvalidDataException("bFontIsactive is a required property for FontAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BFontIsactive = bFontIsactive;
            }

        }

        /// <summary>
        /// The name of the Font
        /// </summary>
        /// <value>The name of the Font</value>
        [DataMember(Name="sFontName", EmitDefaultValue=true)]
        public string SFontName { get; set; }

        /// <summary>
        /// The unique ID of the Font
        /// </summary>
        /// <value>The unique ID of the Font</value>
        [DataMember(Name="pkiFontID", EmitDefaultValue=true)]
        public int PkiFontID { get; set; }

        /// <summary>
        /// Whether the Font is active or not
        /// </summary>
        /// <value>Whether the Font is active or not</value>
        [DataMember(Name="bFontIsactive", EmitDefaultValue=true)]
        public bool BFontIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FontAutocompleteElementResponse {\n");
            sb.Append("  SFontName: ").Append(SFontName).Append("\n");
            sb.Append("  PkiFontID: ").Append(PkiFontID).Append("\n");
            sb.Append("  BFontIsactive: ").Append(BFontIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FontAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if FontAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FontAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FontAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SFontName == input.SFontName ||
                    (this.SFontName != null &&
                    this.SFontName.Equals(input.SFontName))
                ) && 
                (
                    this.PkiFontID == input.PkiFontID ||
                    (this.PkiFontID != null &&
                    this.PkiFontID.Equals(input.PkiFontID))
                ) && 
                (
                    this.BFontIsactive == input.BFontIsactive ||
                    (this.BFontIsactive != null &&
                    this.BFontIsactive.Equals(input.BFontIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SFontName != null)
                    hashCode = hashCode * 59 + this.SFontName.GetHashCode();
                if (this.PkiFontID != null)
                    hashCode = hashCode * 59 + this.PkiFontID.GetHashCode();
                if (this.BFontIsactive != null)
                    hashCode = hashCode * 59 + this.BFontIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // SFontName (string) pattern
            Regex regexSFontName = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
            if (false == regexSFontName.Match(this.SFontName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SFontName, must match a pattern of " + regexSFontName, new [] { "SFontName" });
            }



            // PkiFontID (int) minimum
            if(this.PkiFontID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiFontID, must be a value greater than or equal to 0.", new [] { "PkiFontID" });
            }

            yield break;
        }
    }

}
