/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Module AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "module-AutocompleteElement-Response")]
    public partial class ModuleAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModuleAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModuleAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiModuleID">The unique ID of the Module (required).</param>
        /// <param name="sModuleNameX">The Name of the Module in the language of the requester (required).</param>
        /// <param name="bModuleIsactive">Whether the Module is active or not (required).</param>
        public ModuleAutocompleteElementResponse(int pkiModuleID = default(int), string sModuleNameX = default(string), bool bModuleIsactive = default(bool))
        {
            this.PkiModuleID = pkiModuleID;
            // to ensure "sModuleNameX" is required (not null)
            if (sModuleNameX == null)
            {
                throw new ArgumentNullException("sModuleNameX is a required property for ModuleAutocompleteElementResponse and cannot be null");
            }
            this.SModuleNameX = sModuleNameX;
            this.BModuleIsactive = bModuleIsactive;
        }

        /// <summary>
        /// The unique ID of the Module
        /// </summary>
        /// <value>The unique ID of the Module</value>
        /* <example>40</example>*/
        [DataMember(Name = "pkiModuleID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiModuleID { get; set; }

        /// <summary>
        /// The Name of the Module in the language of the requester
        /// </summary>
        /// <value>The Name of the Module in the language of the requester</value>
        /* <example>Purchase</example>*/
        [DataMember(Name = "sModuleNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SModuleNameX { get; set; }

        /// <summary>
        /// Whether the Module is active or not
        /// </summary>
        /// <value>Whether the Module is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bModuleIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BModuleIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModuleAutocompleteElementResponse {\n");
            sb.Append("  PkiModuleID: ").Append(PkiModuleID).Append("\n");
            sb.Append("  SModuleNameX: ").Append(SModuleNameX).Append("\n");
            sb.Append("  BModuleIsactive: ").Append(BModuleIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiModuleID (int) minimum
            if (this.PkiModuleID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiModuleID, must be a value greater than or equal to 0.", new [] { "PkiModuleID" });
            }

            yield break;
        }
    }

}
