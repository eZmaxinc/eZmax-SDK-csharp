/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for POST /1/object/ezsigntemplatepublic/createEzsignfolder
    /// </summary>
    [DataContract(Name = "ezsigntemplatepublic-createEzsignfolder-v1-Response-mPayload")]
    public partial class EzsigntemplatepublicCreateEzsignfolderV1ResponseMPayload : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepublicCreateEzsignfolderV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="sEzsigntemplatepublicSigningurl">The url to sign the Ezsignfolder created by the Ezsigntemplatepublic. Only used when fkiUserLogintypeID is **No validation** or **Sms only**.</param>
        public EzsigntemplatepublicCreateEzsignfolderV1ResponseMPayload(string sEzsigntemplatepublicSigningurl = default(string))
        {
            this.SEzsigntemplatepublicSigningurl = sEzsigntemplatepublicSigningurl;
        }

        /// <summary>
        /// The url to sign the Ezsignfolder created by the Ezsigntemplatepublic. Only used when fkiUserLogintypeID is **No validation** or **Sms only**
        /// </summary>
        /// <value>The url to sign the Ezsignfolder created by the Ezsigntemplatepublic. Only used when fkiUserLogintypeID is **No validation** or **Sms only**</value>
        /* <example>https://prod.ezsignsigner.ca-central-1.ezmax.com/ezsigntemplatepublic/{sEzmaxcustomerCode}/{sEzsigntemplatepublicReferenceID}</example>*/
        [DataMember(Name = "sEzsigntemplatepublicSigningurl", EmitDefaultValue = false)]
        public string SEzsigntemplatepublicSigningurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepublicCreateEzsignfolderV1ResponseMPayload {\n");
            sb.Append("  SEzsigntemplatepublicSigningurl: ").Append(SEzsigntemplatepublicSigningurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SEzsigntemplatepublicSigningurl != null) {
                // SEzsigntemplatepublicSigningurl (string) pattern
                Regex regexSEzsigntemplatepublicSigningurl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplatepublicSigningurl.Match(this.SEzsigntemplatepublicSigningurl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplatepublicSigningurl, must match a pattern of " + regexSEzsigntemplatepublicSigningurl, new [] { "SEzsigntemplatepublicSigningurl" });
                }
            }

            yield break;
        }
    }

}
