/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignsigner-&gt;Contact Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignsigner-ResponseCompound-Contact")]
    public partial class EzsignsignerResponseCompoundContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignerResponseCompoundContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignerResponseCompoundContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignerResponseCompoundContact" /> class.
        /// </summary>
        /// <param name="pkiContactID">The unique ID of the Contact (required).</param>
        /// <param name="sContactFirstname">The First name of the contact (required).</param>
        /// <param name="sContactLastname">The Last name of the contact (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="sPhoneE164">A phone number in E.164 Format.</param>
        /// <param name="sPhoneExtension">The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers.</param>
        /// <param name="sPhoneE164Cell">A phone number in E.164 Format.</param>
        public EzsignsignerResponseCompoundContact(int pkiContactID = default(int), string sContactFirstname = default(string), string sContactLastname = default(string), int fkiLanguageID = default(int), string sEmailAddress = default(string), string sPhoneE164 = default(string), string sPhoneExtension = default(string), string sPhoneE164Cell = default(string))
        {
            this.PkiContactID = pkiContactID;
            // to ensure "sContactFirstname" is required (not null)
            if (sContactFirstname == null)
            {
                throw new ArgumentNullException("sContactFirstname is a required property for EzsignsignerResponseCompoundContact and cannot be null");
            }
            this.SContactFirstname = sContactFirstname;
            // to ensure "sContactLastname" is required (not null)
            if (sContactLastname == null)
            {
                throw new ArgumentNullException("sContactLastname is a required property for EzsignsignerResponseCompoundContact and cannot be null");
            }
            this.SContactLastname = sContactLastname;
            this.FkiLanguageID = fkiLanguageID;
            this.SEmailAddress = sEmailAddress;
            this.SPhoneE164 = sPhoneE164;
            this.SPhoneExtension = sPhoneExtension;
            this.SPhoneE164Cell = sPhoneE164Cell;
        }

        /// <summary>
        /// The unique ID of the Contact
        /// </summary>
        /// <value>The unique ID of the Contact</value>
        /* <example>21</example>*/
        [DataMember(Name = "pkiContactID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiContactID { get; set; }

        /// <summary>
        /// The First name of the contact
        /// </summary>
        /// <value>The First name of the contact</value>
        /* <example>John</example>*/
        [DataMember(Name = "sContactFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SContactFirstname { get; set; }

        /// <summary>
        /// The Last name of the contact
        /// </summary>
        /// <value>The Last name of the contact</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sContactLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SContactLastname { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddress", EmitDefaultValue = false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        /* <example>+15149901516</example>*/
        [DataMember(Name = "sPhoneE164", EmitDefaultValue = false)]
        public string SPhoneE164 { get; set; }

        /// <summary>
        /// The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
        /// </summary>
        /// <value>The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers</value>
        /* <example>123</example>*/
        [DataMember(Name = "sPhoneExtension", EmitDefaultValue = false)]
        public string SPhoneExtension { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        /* <example>+15149901516</example>*/
        [DataMember(Name = "sPhoneE164Cell", EmitDefaultValue = false)]
        public string SPhoneE164Cell { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignsignerResponseCompoundContact {\n");
            sb.Append("  PkiContactID: ").Append(PkiContactID).Append("\n");
            sb.Append("  SContactFirstname: ").Append(SContactFirstname).Append("\n");
            sb.Append("  SContactLastname: ").Append(SContactLastname).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  SPhoneE164: ").Append(SPhoneE164).Append("\n");
            sb.Append("  SPhoneExtension: ").Append(SPhoneExtension).Append("\n");
            sb.Append("  SPhoneE164Cell: ").Append(SPhoneE164Cell).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiContactID (int) minimum
            if (this.PkiContactID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiContactID, must be a value greater than or equal to 0.", new [] { "PkiContactID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SPhoneE164 != null) {
                // SPhoneE164 (string) pattern
                Regex regexSPhoneE164 = new Regex(@"^\+[1-9]\d{1,14}$", RegexOptions.CultureInvariant);
                if (!regexSPhoneE164.Match(this.SPhoneE164).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPhoneE164, must match a pattern of " + regexSPhoneE164, new [] { "SPhoneE164" });
                }
            }

            if (this.SPhoneE164Cell != null) {
                // SPhoneE164Cell (string) pattern
                Regex regexSPhoneE164Cell = new Regex(@"^\+[1-9]\d{1,14}$", RegexOptions.CultureInvariant);
                if (!regexSPhoneE164Cell.Match(this.SPhoneE164Cell).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPhoneE164Cell, must match a pattern of " + regexSPhoneE164Cell, new [] { "SPhoneE164Cell" });
                }
            }

            yield break;
        }
    }

}
