/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignsigner-&gt;Contact Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class EzsignsignerResponseCompoundContact :  IEquatable<EzsignsignerResponseCompoundContact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignerResponseCompoundContact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignerResponseCompoundContact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignerResponseCompoundContact" /> class.
        /// </summary>
        /// <param name="sContactFirstname">The First name of the contact (required).</param>
        /// <param name="sContactLastname">The Last name of the contact (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="sPhoneE164">A phone number in E.164 Format.</param>
        /// <param name="sPhoneE164Cell">A phone number in E.164 Format.</param>
        public EzsignsignerResponseCompoundContact(string sContactFirstname = default(string), string sContactLastname = default(string), int fkiLanguageID = default(int), string sEmailAddress = default(string), string sPhoneE164 = default(string), string sPhoneE164Cell = default(string))
        {
            // to ensure "sContactFirstname" is required (not null)
            if (sContactFirstname == null)
            {
                throw new InvalidDataException("sContactFirstname is a required property for EzsignsignerResponseCompoundContact and cannot be null");
            }
            else
            {
                this.SContactFirstname = sContactFirstname;
            }

            // to ensure "sContactLastname" is required (not null)
            if (sContactLastname == null)
            {
                throw new InvalidDataException("sContactLastname is a required property for EzsignsignerResponseCompoundContact and cannot be null");
            }
            else
            {
                this.SContactLastname = sContactLastname;
            }

            // to ensure "fkiLanguageID" is required (not null)
            if (fkiLanguageID == null)
            {
                throw new InvalidDataException("fkiLanguageID is a required property for EzsignsignerResponseCompoundContact and cannot be null");
            }
            else
            {
                this.FkiLanguageID = fkiLanguageID;
            }

            this.SEmailAddress = sEmailAddress;
            this.SPhoneE164 = sPhoneE164;
            this.SPhoneE164Cell = sPhoneE164Cell;
        }

        /// <summary>
        /// The First name of the contact
        /// </summary>
        /// <value>The First name of the contact</value>
        [DataMember(Name="sContactFirstname", EmitDefaultValue=true)]
        public string SContactFirstname { get; set; }

        /// <summary>
        /// The Last name of the contact
        /// </summary>
        /// <value>The Last name of the contact</value>
        [DataMember(Name="sContactLastname", EmitDefaultValue=true)]
        public string SContactLastname { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        [DataMember(Name="fkiLanguageID", EmitDefaultValue=true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=false)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        [DataMember(Name="sPhoneE164", EmitDefaultValue=false)]
        public string SPhoneE164 { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        [DataMember(Name="sPhoneE164Cell", EmitDefaultValue=false)]
        public string SPhoneE164Cell { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignerResponseCompoundContact {\n");
            sb.Append("  SContactFirstname: ").Append(SContactFirstname).Append("\n");
            sb.Append("  SContactLastname: ").Append(SContactLastname).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  SPhoneE164: ").Append(SPhoneE164).Append("\n");
            sb.Append("  SPhoneE164Cell: ").Append(SPhoneE164Cell).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignerResponseCompoundContact);
        }

        /// <summary>
        /// Returns true if EzsignsignerResponseCompoundContact instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignerResponseCompoundContact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignerResponseCompoundContact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SContactFirstname == input.SContactFirstname ||
                    (this.SContactFirstname != null &&
                    this.SContactFirstname.Equals(input.SContactFirstname))
                ) && 
                (
                    this.SContactLastname == input.SContactLastname ||
                    (this.SContactLastname != null &&
                    this.SContactLastname.Equals(input.SContactLastname))
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    (this.FkiLanguageID != null &&
                    this.FkiLanguageID.Equals(input.FkiLanguageID))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                ) && 
                (
                    this.SPhoneE164 == input.SPhoneE164 ||
                    (this.SPhoneE164 != null &&
                    this.SPhoneE164.Equals(input.SPhoneE164))
                ) && 
                (
                    this.SPhoneE164Cell == input.SPhoneE164Cell ||
                    (this.SPhoneE164Cell != null &&
                    this.SPhoneE164Cell.Equals(input.SPhoneE164Cell))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SContactFirstname != null)
                    hashCode = hashCode * 59 + this.SContactFirstname.GetHashCode();
                if (this.SContactLastname != null)
                    hashCode = hashCode * 59 + this.SContactLastname.GetHashCode();
                if (this.FkiLanguageID != null)
                    hashCode = hashCode * 59 + this.FkiLanguageID.GetHashCode();
                if (this.SEmailAddress != null)
                    hashCode = hashCode * 59 + this.SEmailAddress.GetHashCode();
                if (this.SPhoneE164 != null)
                    hashCode = hashCode * 59 + this.SPhoneE164.GetHashCode();
                if (this.SPhoneE164Cell != null)
                    hashCode = hashCode * 59 + this.SPhoneE164Cell.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // FkiLanguageID (int) maximum
            if(this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if(this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            yield break;
        }
    }

}
