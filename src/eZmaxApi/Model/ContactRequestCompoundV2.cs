/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Contact Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "contact-RequestCompoundV2")]
    public partial class ContactRequestCompoundV2 : ContactRequestV2, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRequestCompoundV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactRequestCompoundV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRequestCompoundV2" /> class.
        /// </summary>
        /// <param name="objContactinformations">objContactinformations (required).</param>
        /// <param name="fkiContacttitleID">The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)| (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="eContactType">eContactType (required).</param>
        /// <param name="sContactFirstname">The First name of the contact (required).</param>
        /// <param name="sContactLastname">The Last name of the contact (required).</param>
        /// <param name="sContactCompany">The Company name of the contact.</param>
        /// <param name="dtContactBirthdate">The Birth Date of the contact.</param>
        /// <param name="sContactOccupation">The occupation of the Contact.</param>
        /// <param name="tContactNote">The note of the Contact.</param>
        /// <param name="bContactIsactive">Whether the contact is active or not.</param>
        public ContactRequestCompoundV2(ContactinformationsRequestCompoundV2 objContactinformations = default(ContactinformationsRequestCompoundV2), int fkiContacttitleID = default(int), int fkiLanguageID = default(int), FieldEContactType eContactType = default(FieldEContactType), string sContactFirstname = default(string), string sContactLastname = default(string), string sContactCompany = default(string), string dtContactBirthdate = default(string), string sContactOccupation = default(string), string tContactNote = default(string), bool bContactIsactive = default(bool)) : base()
        {
            // to ensure "objContactinformations" is required (not null)
            if (objContactinformations == null)
            {
                throw new ArgumentNullException("objContactinformations is a required property for ContactRequestCompoundV2 and cannot be null");
            }
            this.ObjContactinformations = objContactinformations;
        }

        /// <summary>
        /// Gets or Sets ObjContactinformations
        /// </summary>
        [DataMember(Name = "objContactinformations", IsRequired = true, EmitDefaultValue = true)]
        public ContactinformationsRequestCompoundV2 ObjContactinformations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactRequestCompoundV2 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ObjContactinformations: ").Append(ObjContactinformations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
