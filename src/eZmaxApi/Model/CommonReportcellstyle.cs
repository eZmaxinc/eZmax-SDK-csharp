/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Styles applied to a Reportcell 
    /// </summary>
    [DataContract(Name = "Common-Reportcellstyle")]
    public partial class CommonReportcellstyle : IEquatable<CommonReportcellstyle>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EReportcellHorizontalalignment
        /// </summary>
        [DataMember(Name = "eReportcellHorizontalalignment", IsRequired = true, EmitDefaultValue = true)]
        public EnumHorizontalalignment EReportcellHorizontalalignment { get; set; }

        /// <summary>
        /// Gets or Sets EReportcellVerticalalignment
        /// </summary>
        [DataMember(Name = "eReportcellVerticalalignment", IsRequired = true, EmitDefaultValue = true)]
        public EnumVerticalalignment EReportcellVerticalalignment { get; set; }

        /// <summary>
        /// Gets or Sets EReportcellFontweight
        /// </summary>
        [DataMember(Name = "eReportcellFontweight", IsRequired = true, EmitDefaultValue = true)]
        public EnumFontweight EReportcellFontweight { get; set; }

        /// <summary>
        /// Gets or Sets EReportcellFontunderline
        /// </summary>
        [DataMember(Name = "eReportcellFontunderline", IsRequired = true, EmitDefaultValue = true)]
        public EnumFontunderline EReportcellFontunderline { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportcellstyle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonReportcellstyle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportcellstyle" /> class.
        /// </summary>
        /// <param name="bReportcellstyleBordertop">Whether there is a border at the top of the Reportcell (required).</param>
        /// <param name="bReportcellstyleBorderbottom">Whether there is a border at the bottom of the Reportcell (required).</param>
        /// <param name="bReportcellstyleBorderleft">Whether there is a border at the left of the Reportcell (required).</param>
        /// <param name="bReportcellstyleBorderright">Whether there is a border at the right of the Reportcell (required).</param>
        /// <param name="eReportcellHorizontalalignment">eReportcellHorizontalalignment (required).</param>
        /// <param name="eReportcellVerticalalignment">eReportcellVerticalalignment (required).</param>
        /// <param name="eReportcellFontweight">eReportcellFontweight (required).</param>
        /// <param name="eReportcellFontunderline">eReportcellFontunderline (required).</param>
        public CommonReportcellstyle(bool bReportcellstyleBordertop = default(bool), bool bReportcellstyleBorderbottom = default(bool), bool bReportcellstyleBorderleft = default(bool), bool bReportcellstyleBorderright = default(bool), EnumHorizontalalignment eReportcellHorizontalalignment = default(EnumHorizontalalignment), EnumVerticalalignment eReportcellVerticalalignment = default(EnumVerticalalignment), EnumFontweight eReportcellFontweight = default(EnumFontweight), EnumFontunderline eReportcellFontunderline = default(EnumFontunderline))
        {
            this.BReportcellstyleBordertop = bReportcellstyleBordertop;
            this.BReportcellstyleBorderbottom = bReportcellstyleBorderbottom;
            this.BReportcellstyleBorderleft = bReportcellstyleBorderleft;
            this.BReportcellstyleBorderright = bReportcellstyleBorderright;
            this.EReportcellHorizontalalignment = eReportcellHorizontalalignment;
            this.EReportcellVerticalalignment = eReportcellVerticalalignment;
            this.EReportcellFontweight = eReportcellFontweight;
            this.EReportcellFontunderline = eReportcellFontunderline;
        }

        /// <summary>
        /// Whether there is a border at the top of the Reportcell
        /// </summary>
        /// <value>Whether there is a border at the top of the Reportcell</value>
        /* <example>true</example>*/
        [DataMember(Name = "bReportcellstyleBordertop", IsRequired = true, EmitDefaultValue = true)]
        public bool BReportcellstyleBordertop { get; set; }

        /// <summary>
        /// Whether there is a border at the bottom of the Reportcell
        /// </summary>
        /// <value>Whether there is a border at the bottom of the Reportcell</value>
        /* <example>true</example>*/
        [DataMember(Name = "bReportcellstyleBorderbottom", IsRequired = true, EmitDefaultValue = true)]
        public bool BReportcellstyleBorderbottom { get; set; }

        /// <summary>
        /// Whether there is a border at the left of the Reportcell
        /// </summary>
        /// <value>Whether there is a border at the left of the Reportcell</value>
        /* <example>true</example>*/
        [DataMember(Name = "bReportcellstyleBorderleft", IsRequired = true, EmitDefaultValue = true)]
        public bool BReportcellstyleBorderleft { get; set; }

        /// <summary>
        /// Whether there is a border at the right of the Reportcell
        /// </summary>
        /// <value>Whether there is a border at the right of the Reportcell</value>
        /* <example>true</example>*/
        [DataMember(Name = "bReportcellstyleBorderright", IsRequired = true, EmitDefaultValue = true)]
        public bool BReportcellstyleBorderright { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonReportcellstyle {\n");
            sb.Append("  BReportcellstyleBordertop: ").Append(BReportcellstyleBordertop).Append("\n");
            sb.Append("  BReportcellstyleBorderbottom: ").Append(BReportcellstyleBorderbottom).Append("\n");
            sb.Append("  BReportcellstyleBorderleft: ").Append(BReportcellstyleBorderleft).Append("\n");
            sb.Append("  BReportcellstyleBorderright: ").Append(BReportcellstyleBorderright).Append("\n");
            sb.Append("  EReportcellHorizontalalignment: ").Append(EReportcellHorizontalalignment).Append("\n");
            sb.Append("  EReportcellVerticalalignment: ").Append(EReportcellVerticalalignment).Append("\n");
            sb.Append("  EReportcellFontweight: ").Append(EReportcellFontweight).Append("\n");
            sb.Append("  EReportcellFontunderline: ").Append(EReportcellFontunderline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonReportcellstyle);
        }

        /// <summary>
        /// Returns true if CommonReportcellstyle instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonReportcellstyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonReportcellstyle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BReportcellstyleBordertop == input.BReportcellstyleBordertop ||
                    this.BReportcellstyleBordertop.Equals(input.BReportcellstyleBordertop)
                ) && 
                (
                    this.BReportcellstyleBorderbottom == input.BReportcellstyleBorderbottom ||
                    this.BReportcellstyleBorderbottom.Equals(input.BReportcellstyleBorderbottom)
                ) && 
                (
                    this.BReportcellstyleBorderleft == input.BReportcellstyleBorderleft ||
                    this.BReportcellstyleBorderleft.Equals(input.BReportcellstyleBorderleft)
                ) && 
                (
                    this.BReportcellstyleBorderright == input.BReportcellstyleBorderright ||
                    this.BReportcellstyleBorderright.Equals(input.BReportcellstyleBorderright)
                ) && 
                (
                    this.EReportcellHorizontalalignment == input.EReportcellHorizontalalignment ||
                    this.EReportcellHorizontalalignment.Equals(input.EReportcellHorizontalalignment)
                ) && 
                (
                    this.EReportcellVerticalalignment == input.EReportcellVerticalalignment ||
                    this.EReportcellVerticalalignment.Equals(input.EReportcellVerticalalignment)
                ) && 
                (
                    this.EReportcellFontweight == input.EReportcellFontweight ||
                    this.EReportcellFontweight.Equals(input.EReportcellFontweight)
                ) && 
                (
                    this.EReportcellFontunderline == input.EReportcellFontunderline ||
                    this.EReportcellFontunderline.Equals(input.EReportcellFontunderline)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BReportcellstyleBordertop.GetHashCode();
                hashCode = (hashCode * 59) + this.BReportcellstyleBorderbottom.GetHashCode();
                hashCode = (hashCode * 59) + this.BReportcellstyleBorderleft.GetHashCode();
                hashCode = (hashCode * 59) + this.BReportcellstyleBorderright.GetHashCode();
                hashCode = (hashCode * 59) + this.EReportcellHorizontalalignment.GetHashCode();
                hashCode = (hashCode * 59) + this.EReportcellVerticalalignment.GetHashCode();
                hashCode = (hashCode * 59) + this.EReportcellFontweight.GetHashCode();
                hashCode = (hashCode * 59) + this.EReportcellFontunderline.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
