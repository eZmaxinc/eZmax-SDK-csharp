/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezdoctemplatedocument Object
    /// </summary>
    [DataContract(Name = "ezdoctemplatedocument-RequestPatch")]
    public partial class EzdoctemplatedocumentRequestPatch : IValidatableObject
    {
        /// <summary>
        /// Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set.
        /// </summary>
        /// <value>Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EEzdoctemplatedocumentFormatEnum
        {
            /// <summary>
            /// Enum Docx for value: Docx
            /// </summary>
            [EnumMember(Value = "Docx")]
            Docx = 1,

            /// <summary>
            /// Enum Html for value: Html
            /// </summary>
            [EnumMember(Value = "Html")]
            Html = 2,

            /// <summary>
            /// Enum Tx for value: Tx
            /// </summary>
            [EnumMember(Value = "Tx")]
            Tx = 3
        }


        /// <summary>
        /// Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set.
        /// </summary>
        /// <value>Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set.</value>
        [DataMember(Name = "eEzdoctemplatedocumentFormat", EmitDefaultValue = false)]
        public EEzdoctemplatedocumentFormatEnum? EEzdoctemplatedocumentFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatedocumentRequestPatch" /> class.
        /// </summary>
        /// <param name="eEzdoctemplatedocumentFormat">Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set..</param>
        /// <param name="sEzdoctemplatedocumentFields">List of field in Ezdoctemplatedocument.</param>
        /// <param name="sEzdoctemplatedocumentBase64">The Base64 encoded binary content of the document.  This field is Required when eEzdoctemplatedocumentFormat is set..</param>
        public EzdoctemplatedocumentRequestPatch(EEzdoctemplatedocumentFormatEnum? eEzdoctemplatedocumentFormat = default(EEzdoctemplatedocumentFormatEnum?), string sEzdoctemplatedocumentFields = default(string), byte[] sEzdoctemplatedocumentBase64 = default(byte[]))
        {
            this.EEzdoctemplatedocumentFormat = eEzdoctemplatedocumentFormat;
            this.SEzdoctemplatedocumentFields = sEzdoctemplatedocumentFields;
            this.SEzdoctemplatedocumentBase64 = sEzdoctemplatedocumentBase64;
        }

        /// <summary>
        /// List of field in Ezdoctemplatedocument
        /// </summary>
        /// <value>List of field in Ezdoctemplatedocument</value>
        [DataMember(Name = "sEzdoctemplatedocumentFields", EmitDefaultValue = false)]
        public string SEzdoctemplatedocumentFields { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the document.  This field is Required when eEzdoctemplatedocumentFormat is set.
        /// </summary>
        /// <value>The Base64 encoded binary content of the document.  This field is Required when eEzdoctemplatedocumentFormat is set.</value>
        /* <example>[B@4eeea57d</example>*/
        [DataMember(Name = "sEzdoctemplatedocumentBase64", EmitDefaultValue = false)]
        public byte[] SEzdoctemplatedocumentBase64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzdoctemplatedocumentRequestPatch {\n");
            sb.Append("  EEzdoctemplatedocumentFormat: ").Append(EEzdoctemplatedocumentFormat).Append("\n");
            sb.Append("  SEzdoctemplatedocumentFields: ").Append(SEzdoctemplatedocumentFields).Append("\n");
            sb.Append("  SEzdoctemplatedocumentBase64: ").Append(SEzdoctemplatedocumentBase64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SEzdoctemplatedocumentFields (string) maxLength
            if (this.SEzdoctemplatedocumentFields != null && this.SEzdoctemplatedocumentFields.Length > 16000000)
            {
                yield return new ValidationResult("Invalid value for SEzdoctemplatedocumentFields, length must be less than 16000000.", new [] { "SEzdoctemplatedocumentFields" });
            }

            if (this.SEzdoctemplatedocumentFields != null) {
                // SEzdoctemplatedocumentFields (string) pattern
                Regex regexSEzdoctemplatedocumentFields = new Regex(@"^.{0,}$", RegexOptions.CultureInvariant);
                if (!regexSEzdoctemplatedocumentFields.Match(this.SEzdoctemplatedocumentFields).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzdoctemplatedocumentFields, must match a pattern of " + regexSEzdoctemplatedocumentFields, new [] { "SEzdoctemplatedocumentFields" });
                }
            }

            yield break;
        }
    }

}
