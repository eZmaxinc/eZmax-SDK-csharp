/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Generic Error Message
    /// </summary>
    [DataContract]
    public partial class CommonResponseError :  IEquatable<CommonResponseError>
    {
        /// <summary>
        /// Gets or Sets EErrorCode
        /// </summary>
        [DataMember(Name="eErrorCode", EmitDefaultValue=true)]
        public FieldEErrorCode EErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonResponseError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseError" /> class.
        /// </summary>
        /// <param name="sErrorMessage">The message giving details about the error (required).</param>
        /// <param name="eErrorCode">eErrorCode (required).</param>
        public CommonResponseError(string sErrorMessage = default(string), FieldEErrorCode eErrorCode = default(FieldEErrorCode))
        {
            // to ensure "sErrorMessage" is required (not null)
            if (sErrorMessage == null)
            {
                throw new InvalidDataException("sErrorMessage is a required property for CommonResponseError and cannot be null");
            }
            else
            {
                this.SErrorMessage = sErrorMessage;
            }

            // to ensure "eErrorCode" is required (not null)
            if (eErrorCode == null)
            {
                throw new InvalidDataException("eErrorCode is a required property for CommonResponseError and cannot be null");
            }
            else
            {
                this.EErrorCode = eErrorCode;
            }

        }

        /// <summary>
        /// The message giving details about the error
        /// </summary>
        /// <value>The message giving details about the error</value>
        [DataMember(Name="sErrorMessage", EmitDefaultValue=true)]
        public string SErrorMessage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonResponseError {\n");
            sb.Append("  SErrorMessage: ").Append(SErrorMessage).Append("\n");
            sb.Append("  EErrorCode: ").Append(EErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonResponseError);
        }

        /// <summary>
        /// Returns true if CommonResponseError instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonResponseError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonResponseError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SErrorMessage == input.SErrorMessage ||
                    (this.SErrorMessage != null &&
                    this.SErrorMessage.Equals(input.SErrorMessage))
                ) && 
                (
                    this.EErrorCode == input.EErrorCode ||
                    (this.EErrorCode != null &&
                    this.EErrorCode.Equals(input.EErrorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SErrorMessage != null)
                    hashCode = hashCode * 59 + this.SErrorMessage.GetHashCode();
                if (this.EErrorCode != null)
                    hashCode = hashCode * 59 + this.EErrorCode.GetHashCode();
                return hashCode;
            }
        }
    }

}
