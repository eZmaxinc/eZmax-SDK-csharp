/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignbulksend Object
    /// </summary>
    [DataContract(Name = "ezsignbulksend-Response")]
    public partial class EzsignbulksendResponse : IEquatable<EzsignbulksendResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignbulksendResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignbulksendID">The unique ID of the Ezsignbulksend (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="sEzsignbulksendDescription">The description of the Ezsignbulksend (required).</param>
        /// <param name="tEzsignbulksendNote">Note about the Ezsignbulksend (required).</param>
        /// <param name="bEzsignbulksendNeedvalidation">Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation (required).</param>
        /// <param name="bEzsignbulksendIsactive">Whether the Ezsignbulksend is active or not (required).</param>
        /// <param name="objAudit">objAudit (required).</param>
        public EzsignbulksendResponse(int pkiEzsignbulksendID = default(int), int fkiEzsignfoldertypeID = default(int), int fkiLanguageID = default(int), string sLanguageNameX = default(string), FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), string sEzsignfoldertypeNameX = default(string), string sEzsignbulksendDescription = default(string), string tEzsignbulksendNote = default(string), bool bEzsignbulksendNeedvalidation = default(bool), bool bEzsignbulksendIsactive = default(bool), CommonAudit objAudit = default(CommonAudit))
        {
            this.PkiEzsignbulksendID = pkiEzsignbulksendID;
            this.FkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sLanguageNameX" is required (not null)
            if (sLanguageNameX == null)
            {
                throw new ArgumentNullException("sLanguageNameX is a required property for EzsignbulksendResponse and cannot be null");
            }
            this.SLanguageNameX = sLanguageNameX;
            this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            // to ensure "sEzsignfoldertypeNameX" is required (not null)
            if (sEzsignfoldertypeNameX == null)
            {
                throw new ArgumentNullException("sEzsignfoldertypeNameX is a required property for EzsignbulksendResponse and cannot be null");
            }
            this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
            // to ensure "sEzsignbulksendDescription" is required (not null)
            if (sEzsignbulksendDescription == null)
            {
                throw new ArgumentNullException("sEzsignbulksendDescription is a required property for EzsignbulksendResponse and cannot be null");
            }
            this.SEzsignbulksendDescription = sEzsignbulksendDescription;
            // to ensure "tEzsignbulksendNote" is required (not null)
            if (tEzsignbulksendNote == null)
            {
                throw new ArgumentNullException("tEzsignbulksendNote is a required property for EzsignbulksendResponse and cannot be null");
            }
            this.TEzsignbulksendNote = tEzsignbulksendNote;
            this.BEzsignbulksendNeedvalidation = bEzsignbulksendNeedvalidation;
            this.BEzsignbulksendIsactive = bEzsignbulksendIsactive;
            // to ensure "objAudit" is required (not null)
            if (objAudit == null)
            {
                throw new ArgumentNullException("objAudit is a required property for EzsignbulksendResponse and cannot be null");
            }
            this.ObjAudit = objAudit;
        }

        /// <summary>
        /// The unique ID of the Ezsignbulksend
        /// </summary>
        /// <value>The unique ID of the Ezsignbulksend</value>
        </example> }}
		/* <example>8</example>*/
        [DataMember(Name = "pkiEzsignbulksendID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignbulksendID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        </example> }}
		/* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        </example> }}
		/* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        </example> }}
		/* <example>English</example>*/
        [DataMember(Name = "sLanguageNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        </example> }}
		/* <example>Default</example>*/
        [DataMember(Name = "sEzsignfoldertypeNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// The description of the Ezsignbulksend
        /// </summary>
        /// <value>The description of the Ezsignbulksend</value>
        </example> }}
		/* <example>Test eZsign Bulk Send</example>*/
        [DataMember(Name = "sEzsignbulksendDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignbulksendDescription { get; set; }

        /// <summary>
        /// Note about the Ezsignbulksend
        /// </summary>
        /// <value>Note about the Ezsignbulksend</value>
        </example> }}
		/* <example>This is a note</example>*/
        [DataMember(Name = "tEzsignbulksendNote", IsRequired = true, EmitDefaultValue = true)]
        public string TEzsignbulksendNote { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation</value>
        [DataMember(Name = "bEzsignbulksendNeedvalidation", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignbulksendNeedvalidation { get; set; }

        /// <summary>
        /// Whether the Ezsignbulksend is active or not
        /// </summary>
        /// <value>Whether the Ezsignbulksend is active or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bEzsignbulksendIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignbulksendIsactive { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", IsRequired = true, EmitDefaultValue = true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignbulksendResponse {\n");
            sb.Append("  PkiEzsignbulksendID: ").Append(PkiEzsignbulksendID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  SEzsignbulksendDescription: ").Append(SEzsignbulksendDescription).Append("\n");
            sb.Append("  TEzsignbulksendNote: ").Append(TEzsignbulksendNote).Append("\n");
            sb.Append("  BEzsignbulksendNeedvalidation: ").Append(BEzsignbulksendNeedvalidation).Append("\n");
            sb.Append("  BEzsignbulksendIsactive: ").Append(BEzsignbulksendIsactive).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignbulksendResponse);
        }

        /// <summary>
        /// Returns true if EzsignbulksendResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignbulksendResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignbulksendResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsignbulksendID == input.PkiEzsignbulksendID ||
                    this.PkiEzsignbulksendID.Equals(input.PkiEzsignbulksendID)
                ) && 
                (
                    this.FkiEzsignfoldertypeID == input.FkiEzsignfoldertypeID ||
                    this.FkiEzsignfoldertypeID.Equals(input.FkiEzsignfoldertypeID)
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    this.FkiLanguageID.Equals(input.FkiLanguageID)
                ) && 
                (
                    this.SLanguageNameX == input.SLanguageNameX ||
                    (this.SLanguageNameX != null &&
                    this.SLanguageNameX.Equals(input.SLanguageNameX))
                ) && 
                (
                    this.EEzsignfoldertypePrivacylevel == input.EEzsignfoldertypePrivacylevel ||
                    this.EEzsignfoldertypePrivacylevel.Equals(input.EEzsignfoldertypePrivacylevel)
                ) && 
                (
                    this.SEzsignfoldertypeNameX == input.SEzsignfoldertypeNameX ||
                    (this.SEzsignfoldertypeNameX != null &&
                    this.SEzsignfoldertypeNameX.Equals(input.SEzsignfoldertypeNameX))
                ) && 
                (
                    this.SEzsignbulksendDescription == input.SEzsignbulksendDescription ||
                    (this.SEzsignbulksendDescription != null &&
                    this.SEzsignbulksendDescription.Equals(input.SEzsignbulksendDescription))
                ) && 
                (
                    this.TEzsignbulksendNote == input.TEzsignbulksendNote ||
                    (this.TEzsignbulksendNote != null &&
                    this.TEzsignbulksendNote.Equals(input.TEzsignbulksendNote))
                ) && 
                (
                    this.BEzsignbulksendNeedvalidation == input.BEzsignbulksendNeedvalidation ||
                    this.BEzsignbulksendNeedvalidation.Equals(input.BEzsignbulksendNeedvalidation)
                ) && 
                (
                    this.BEzsignbulksendIsactive == input.BEzsignbulksendIsactive ||
                    this.BEzsignbulksendIsactive.Equals(input.BEzsignbulksendIsactive)
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsignbulksendID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfoldertypeID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiLanguageID.GetHashCode();
                if (this.SLanguageNameX != null)
                {
                    hashCode = (hashCode * 59) + this.SLanguageNameX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EEzsignfoldertypePrivacylevel.GetHashCode();
                if (this.SEzsignfoldertypeNameX != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfoldertypeNameX.GetHashCode();
                }
                if (this.SEzsignbulksendDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignbulksendDescription.GetHashCode();
                }
                if (this.TEzsignbulksendNote != null)
                {
                    hashCode = (hashCode * 59) + this.TEzsignbulksendNote.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BEzsignbulksendNeedvalidation.GetHashCode();
                hashCode = (hashCode * 59) + this.BEzsignbulksendIsactive.GetHashCode();
                if (this.ObjAudit != null)
                {
                    hashCode = (hashCode * 59) + this.ObjAudit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignbulksendID (int) minimum
            if (this.PkiEzsignbulksendID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignbulksendID, must be a value greater than or equal to 0.", new [] { "PkiEzsignbulksendID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            yield break;
        }
    }

}
