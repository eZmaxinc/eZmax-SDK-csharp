/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom Discussionconfiguration Object
    /// </summary>
    [DataContract(Name = "Custom-Discussionconfiguration-Response")]
    public partial class CustomDiscussionconfigurationResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDiscussionconfigurationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDiscussionconfigurationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDiscussionconfigurationResponse" /> class.
        /// </summary>
        /// <param name="bDiscussionconfigurationCompletehistorywhenadded">If the added Discussionmembership will have access to the entire history or not (required).</param>
        /// <param name="bDiscussionconfigurationCreateallowed">If the the creation of the Discussion is allowed or not (required).</param>
        /// <param name="bDiscussionconfigurationDeleteallowed">If the the destruction of the Discussion is allowed or not (required).</param>
        /// <param name="bDiscussionconfigurationDeletediscussionmessageallowed">If the the destruction of the Discussionmessage is allowed or not (required).</param>
        /// <param name="bDiscussionconfigurationEditdiscussionmessageallowed">If the the creation of the Discussionmessage is allowed or not (required).</param>
        public CustomDiscussionconfigurationResponse(bool bDiscussionconfigurationCompletehistorywhenadded = default(bool), bool bDiscussionconfigurationCreateallowed = default(bool), bool bDiscussionconfigurationDeleteallowed = default(bool), bool bDiscussionconfigurationDeletediscussionmessageallowed = default(bool), bool bDiscussionconfigurationEditdiscussionmessageallowed = default(bool))
        {
            this.BDiscussionconfigurationCompletehistorywhenadded = bDiscussionconfigurationCompletehistorywhenadded;
            this.BDiscussionconfigurationCreateallowed = bDiscussionconfigurationCreateallowed;
            this.BDiscussionconfigurationDeleteallowed = bDiscussionconfigurationDeleteallowed;
            this.BDiscussionconfigurationDeletediscussionmessageallowed = bDiscussionconfigurationDeletediscussionmessageallowed;
            this.BDiscussionconfigurationEditdiscussionmessageallowed = bDiscussionconfigurationEditdiscussionmessageallowed;
        }

        /// <summary>
        /// If the added Discussionmembership will have access to the entire history or not
        /// </summary>
        /// <value>If the added Discussionmembership will have access to the entire history or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDiscussionconfigurationCompletehistorywhenadded", IsRequired = true, EmitDefaultValue = true)]
        public bool BDiscussionconfigurationCompletehistorywhenadded { get; set; }

        /// <summary>
        /// If the the creation of the Discussion is allowed or not
        /// </summary>
        /// <value>If the the creation of the Discussion is allowed or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDiscussionconfigurationCreateallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BDiscussionconfigurationCreateallowed { get; set; }

        /// <summary>
        /// If the the destruction of the Discussion is allowed or not
        /// </summary>
        /// <value>If the the destruction of the Discussion is allowed or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDiscussionconfigurationDeleteallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BDiscussionconfigurationDeleteallowed { get; set; }

        /// <summary>
        /// If the the destruction of the Discussionmessage is allowed or not
        /// </summary>
        /// <value>If the the destruction of the Discussionmessage is allowed or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDiscussionconfigurationDeletediscussionmessageallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BDiscussionconfigurationDeletediscussionmessageallowed { get; set; }

        /// <summary>
        /// If the the creation of the Discussionmessage is allowed or not
        /// </summary>
        /// <value>If the the creation of the Discussionmessage is allowed or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bDiscussionconfigurationEditdiscussionmessageallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool BDiscussionconfigurationEditdiscussionmessageallowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDiscussionconfigurationResponse {\n");
            sb.Append("  BDiscussionconfigurationCompletehistorywhenadded: ").Append(BDiscussionconfigurationCompletehistorywhenadded).Append("\n");
            sb.Append("  BDiscussionconfigurationCreateallowed: ").Append(BDiscussionconfigurationCreateallowed).Append("\n");
            sb.Append("  BDiscussionconfigurationDeleteallowed: ").Append(BDiscussionconfigurationDeleteallowed).Append("\n");
            sb.Append("  BDiscussionconfigurationDeletediscussionmessageallowed: ").Append(BDiscussionconfigurationDeletediscussionmessageallowed).Append("\n");
            sb.Append("  BDiscussionconfigurationEditdiscussionmessageallowed: ").Append(BDiscussionconfigurationEditdiscussionmessageallowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
