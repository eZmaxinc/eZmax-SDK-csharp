/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /1/object/activesession/getCurrent
    /// </summary>
    [DataContract(Name = "activesession-ResponseCompound")]
    public partial class ActivesessionResponseCompound : ActivesessionResponse, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ESystemconfigurationEzsignofficeplan
        /// </summary>
        [DataMember(Name = "eSystemconfigurationEzsignofficeplan", EmitDefaultValue = false)]
        public FieldESystemconfigurationEzsignofficeplan? ESystemconfigurationEzsignofficeplan { get; set; }

        /// <summary>
        /// Gets or Sets EUserEzsignaccess
        /// </summary>
        [DataMember(Name = "eUserEzsignaccess", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserEzsignaccess EUserEzsignaccess { get; set; }

        /// <summary>
        /// Gets or Sets EUserEzsignprepaid
        /// </summary>
        [DataMember(Name = "eUserEzsignprepaid", EmitDefaultValue = false)]
        public FieldEUserEzsignprepaid? EUserEzsignprepaid { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompound" /> class.
        /// </summary>
        /// <param name="fkiEzsignuserID">The unique ID of the Ezsignuser.</param>
        /// <param name="bSystemconfigurationEzsignpaidbyoffice">Whether if Ezsign is paid by the company or not.</param>
        /// <param name="eSystemconfigurationEzsignofficeplan">eSystemconfigurationEzsignofficeplan.</param>
        /// <param name="eUserEzsignaccess">eUserEzsignaccess (required).</param>
        /// <param name="eUserEzsignprepaid">eUserEzsignprepaid.</param>
        /// <param name="bUserEzsigntrial">Whether the User&#39;s eZsign subscription is a trial.</param>
        /// <param name="dtUserEzsignprepaidexpiration">The eZsign prepaid expiration date.</param>
        /// <param name="aPkiPermissionID">An array of permissions granted to the user or api key (required).</param>
        /// <param name="objUserReal">objUserReal (required).</param>
        /// <param name="objUserCloned">objUserCloned.</param>
        /// <param name="objApikey">objApikey.</param>
        /// <param name="aEModuleInternalname">An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. (required).</param>
        /// <param name="eActivesessionUsertype">eActivesessionUsertype (required).</param>
        /// <param name="eActivesessionOrigin">eActivesessionOrigin (required).</param>
        /// <param name="eActivesessionWeekdaystart">eActivesessionWeekdaystart (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="bActivesessionDebug">Whether the active session is in debug or not (required).</param>
        /// <param name="bActivesessionIssuperadmin">Whether the active session is superadmin or not (required).</param>
        /// <param name="bActivesessionAttachment">Can access attachment when we clone a user.</param>
        /// <param name="bActivesessionCanafe">Can access canafe when we clone a user.</param>
        /// <param name="bActivesessionFinancial">Can access financial element when we clone a user.</param>
        /// <param name="bActivesessionRealestatecompleted">Can access closed realestate folders when we clone a user.</param>
        /// <param name="eActivesessionEzsign">eActivesessionEzsign.</param>
        /// <param name="eActivesessionEzsignaccess">eActivesessionEzsignaccess (required).</param>
        /// <param name="eActivesessionEzsignprepaid">eActivesessionEzsignprepaid.</param>
        /// <param name="eActivesessionRealestateinprogress">eActivesessionRealestateinprogress.</param>
        /// <param name="pksCustomerCode">The customer code assigned to your account (required).</param>
        /// <param name="fkiSystemconfigurationtypeID">The unique ID of the Systemconfigurationtype (required).</param>
        /// <param name="fkiSignatureID">The unique ID of the Signature.</param>
        public ActivesessionResponseCompound(int fkiEzsignuserID = default(int), bool bSystemconfigurationEzsignpaidbyoffice = default(bool), FieldESystemconfigurationEzsignofficeplan? eSystemconfigurationEzsignofficeplan = default(FieldESystemconfigurationEzsignofficeplan?), FieldEUserEzsignaccess eUserEzsignaccess = default(FieldEUserEzsignaccess), FieldEUserEzsignprepaid? eUserEzsignprepaid = default(FieldEUserEzsignprepaid?), bool bUserEzsigntrial = default(bool), string dtUserEzsignprepaidexpiration = default(string), List<int> aPkiPermissionID = default(List<int>), ActivesessionResponseCompoundUser objUserReal = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundUser objUserCloned = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundApikey objApikey = default(ActivesessionResponseCompoundApikey), List<string> aEModuleInternalname = default(List<string>), FieldEActivesessionUsertype eActivesessionUsertype = default(FieldEActivesessionUsertype), FieldEActivesessionOrigin eActivesessionOrigin = default(FieldEActivesessionOrigin), FieldEActivesessionWeekdaystart eActivesessionWeekdaystart = default(FieldEActivesessionWeekdaystart), int fkiLanguageID = default(int), string sCompanyNameX = default(string), string sDepartmentNameX = default(string), bool bActivesessionDebug = default(bool), bool bActivesessionIssuperadmin = default(bool), bool bActivesessionAttachment = default(bool), bool bActivesessionCanafe = default(bool), bool bActivesessionFinancial = default(bool), bool bActivesessionRealestatecompleted = default(bool), FieldEActivesessionEzsign? eActivesessionEzsign = default(FieldEActivesessionEzsign?), FieldEActivesessionEzsignaccess eActivesessionEzsignaccess = default(FieldEActivesessionEzsignaccess), FieldEActivesessionEzsignprepaid? eActivesessionEzsignprepaid = default(FieldEActivesessionEzsignprepaid?), FieldEActivesessionRealestateinprogress? eActivesessionRealestateinprogress = default(FieldEActivesessionRealestateinprogress?), string pksCustomerCode = default(string), int fkiSystemconfigurationtypeID = default(int), int fkiSignatureID = default(int)) : base()
        {
            this.EUserEzsignaccess = eUserEzsignaccess;
            // to ensure "aPkiPermissionID" is required (not null)
            if (aPkiPermissionID == null)
            {
                throw new ArgumentNullException("aPkiPermissionID is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.APkiPermissionID = aPkiPermissionID;
            // to ensure "objUserReal" is required (not null)
            if (objUserReal == null)
            {
                throw new ArgumentNullException("objUserReal is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.ObjUserReal = objUserReal;
            // to ensure "aEModuleInternalname" is required (not null)
            if (aEModuleInternalname == null)
            {
                throw new ArgumentNullException("aEModuleInternalname is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.AEModuleInternalname = aEModuleInternalname;
            this.FkiEzsignuserID = fkiEzsignuserID;
            this.BSystemconfigurationEzsignpaidbyoffice = bSystemconfigurationEzsignpaidbyoffice;
            this.ESystemconfigurationEzsignofficeplan = eSystemconfigurationEzsignofficeplan;
            this.EUserEzsignprepaid = eUserEzsignprepaid;
            this.BUserEzsigntrial = bUserEzsigntrial;
            this.DtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration;
            this.ObjUserCloned = objUserCloned;
            this.ObjApikey = objApikey;
        }

        /// <summary>
        /// The unique ID of the Ezsignuser
        /// </summary>
        /// <value>The unique ID of the Ezsignuser</value>
        /* <example>94</example>*/
        [DataMember(Name = "fkiEzsignuserID", EmitDefaultValue = false)]
        public int FkiEzsignuserID { get; set; }

        /// <summary>
        /// Whether if Ezsign is paid by the company or not
        /// </summary>
        /// <value>Whether if Ezsign is paid by the company or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bSystemconfigurationEzsignpaidbyoffice", EmitDefaultValue = true)]
        public bool BSystemconfigurationEzsignpaidbyoffice { get; set; }

        /// <summary>
        /// Whether the User&#39;s eZsign subscription is a trial
        /// </summary>
        /// <value>Whether the User&#39;s eZsign subscription is a trial</value>
        /* <example>false</example>*/
        [DataMember(Name = "bUserEzsigntrial", EmitDefaultValue = true)]
        public bool BUserEzsigntrial { get; set; }

        /// <summary>
        /// The eZsign prepaid expiration date
        /// </summary>
        /// <value>The eZsign prepaid expiration date</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtUserEzsignprepaidexpiration", EmitDefaultValue = false)]
        public string DtUserEzsignprepaidexpiration { get; set; }

        /// <summary>
        /// An array of permissions granted to the user or api key
        /// </summary>
        /// <value>An array of permissions granted to the user or api key</value>
        [DataMember(Name = "a_pkiPermissionID", IsRequired = true, EmitDefaultValue = true)]
        public List<int> APkiPermissionID { get; set; }

        /// <summary>
        /// Gets or Sets ObjUserReal
        /// </summary>
        [DataMember(Name = "objUserReal", IsRequired = true, EmitDefaultValue = true)]
        public ActivesessionResponseCompoundUser ObjUserReal { get; set; }

        /// <summary>
        /// Gets or Sets ObjUserCloned
        /// </summary>
        [DataMember(Name = "objUserCloned", EmitDefaultValue = false)]
        public ActivesessionResponseCompoundUser ObjUserCloned { get; set; }

        /// <summary>
        /// Gets or Sets ObjApikey
        /// </summary>
        [DataMember(Name = "objApikey", EmitDefaultValue = false)]
        public ActivesessionResponseCompoundApikey ObjApikey { get; set; }

        /// <summary>
        /// An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
        /// </summary>
        /// <value>An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.</value>
        [DataMember(Name = "a_eModuleInternalname", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AEModuleInternalname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivesessionResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FkiEzsignuserID: ").Append(FkiEzsignuserID).Append("\n");
            sb.Append("  BSystemconfigurationEzsignpaidbyoffice: ").Append(BSystemconfigurationEzsignpaidbyoffice).Append("\n");
            sb.Append("  ESystemconfigurationEzsignofficeplan: ").Append(ESystemconfigurationEzsignofficeplan).Append("\n");
            sb.Append("  EUserEzsignaccess: ").Append(EUserEzsignaccess).Append("\n");
            sb.Append("  EUserEzsignprepaid: ").Append(EUserEzsignprepaid).Append("\n");
            sb.Append("  BUserEzsigntrial: ").Append(BUserEzsigntrial).Append("\n");
            sb.Append("  DtUserEzsignprepaidexpiration: ").Append(DtUserEzsignprepaidexpiration).Append("\n");
            sb.Append("  APkiPermissionID: ").Append(APkiPermissionID).Append("\n");
            sb.Append("  ObjUserReal: ").Append(ObjUserReal).Append("\n");
            sb.Append("  ObjUserCloned: ").Append(ObjUserCloned).Append("\n");
            sb.Append("  ObjApikey: ").Append(ObjApikey).Append("\n");
            sb.Append("  AEModuleInternalname: ").Append(AEModuleInternalname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            // FkiEzsignuserID (int) maximum
            if (this.FkiEzsignuserID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignuserID, must be a value less than or equal to 65535.", new [] { "FkiEzsignuserID" });
            }

            // FkiEzsignuserID (int) minimum
            if (this.FkiEzsignuserID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsignuserID, must be a value greater than or equal to 0.", new [] { "FkiEzsignuserID" });
            }

            if (this.DtUserEzsignprepaidexpiration != null) {
                // DtUserEzsignprepaidexpiration (string) pattern
                Regex regexDtUserEzsignprepaidexpiration = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtUserEzsignprepaidexpiration.Match(this.DtUserEzsignprepaidexpiration).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtUserEzsignprepaidexpiration, must match a pattern of " + regexDtUserEzsignprepaidexpiration, new [] { "DtUserEzsignprepaidexpiration" });
                }
            }

            yield break;
        }
    }

}
