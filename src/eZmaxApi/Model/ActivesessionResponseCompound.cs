/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /1/object/activesession/getCurrent
    /// </summary>
    [DataContract(Name = "activesession-ResponseCompound")]
    public partial class ActivesessionResponseCompound : IEquatable<ActivesessionResponseCompound>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EActivesessionUsertype
        /// </summary>
        [DataMember(Name = "eActivesessionUsertype", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionUsertype EActivesessionUsertype { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionOrigin
        /// </summary>
        [DataMember(Name = "eActivesessionOrigin", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionOrigin EActivesessionOrigin { get; set; }

        /// <summary>
        /// Gets or Sets EActivesessionWeekdaystart
        /// </summary>
        [DataMember(Name = "eActivesessionWeekdaystart", IsRequired = true, EmitDefaultValue = true)]
        public FieldEActivesessionWeekdaystart EActivesessionWeekdaystart { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompound" /> class.
        /// </summary>
        /// <param name="eActivesessionUsertype">eActivesessionUsertype (required).</param>
        /// <param name="eActivesessionOrigin">eActivesessionOrigin (required).</param>
        /// <param name="eActivesessionWeekdaystart">eActivesessionWeekdaystart (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="bActivesessionDebug">Whether the active session is in debug or not (required).</param>
        /// <param name="bActivesessionIssuperadmin">Whether the active session is superadmin or not (required).</param>
        /// <param name="pksCustomerCode">The customer code assigned to your account (required).</param>
        /// <param name="fkiSystemconfigurationtypeID">The unique ID of the Systemconfigurationtype.</param>
        /// <param name="fkiSignatureID">The unique ID of the Signature.</param>
        /// <param name="aPkiPermissionID">An array of permissions granted to the user or api key (required).</param>
        /// <param name="objUserReal">objUserReal (required).</param>
        /// <param name="objUserCloned">objUserCloned.</param>
        /// <param name="objApikey">objApikey.</param>
        /// <param name="aEModuleInternalname">An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. (required).</param>
        public ActivesessionResponseCompound(FieldEActivesessionUsertype eActivesessionUsertype = default(FieldEActivesessionUsertype), FieldEActivesessionOrigin eActivesessionOrigin = default(FieldEActivesessionOrigin), FieldEActivesessionWeekdaystart eActivesessionWeekdaystart = default(FieldEActivesessionWeekdaystart), int fkiLanguageID = default(int), string sCompanyNameX = default(string), string sDepartmentNameX = default(string), bool bActivesessionDebug = default(bool), bool bActivesessionIssuperadmin = default(bool), string pksCustomerCode = default(string), int fkiSystemconfigurationtypeID = default(int), int fkiSignatureID = default(int), List<int> aPkiPermissionID = default(List<int>), ActivesessionResponseCompoundUser objUserReal = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundUser objUserCloned = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundApikey objApikey = default(ActivesessionResponseCompoundApikey), List<string> aEModuleInternalname = default(List<string>))
        {
            this.EActivesessionUsertype = eActivesessionUsertype;
            this.EActivesessionOrigin = eActivesessionOrigin;
            this.EActivesessionWeekdaystart = eActivesessionWeekdaystart;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sCompanyNameX" is required (not null)
            if (sCompanyNameX == null)
            {
                throw new ArgumentNullException("sCompanyNameX is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.SCompanyNameX = sCompanyNameX;
            // to ensure "sDepartmentNameX" is required (not null)
            if (sDepartmentNameX == null)
            {
                throw new ArgumentNullException("sDepartmentNameX is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.SDepartmentNameX = sDepartmentNameX;
            this.BActivesessionDebug = bActivesessionDebug;
            this.BActivesessionIssuperadmin = bActivesessionIssuperadmin;
            // to ensure "pksCustomerCode" is required (not null)
            if (pksCustomerCode == null)
            {
                throw new ArgumentNullException("pksCustomerCode is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.PksCustomerCode = pksCustomerCode;
            // to ensure "aPkiPermissionID" is required (not null)
            if (aPkiPermissionID == null)
            {
                throw new ArgumentNullException("aPkiPermissionID is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.APkiPermissionID = aPkiPermissionID;
            // to ensure "objUserReal" is required (not null)
            if (objUserReal == null)
            {
                throw new ArgumentNullException("objUserReal is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.ObjUserReal = objUserReal;
            // to ensure "aEModuleInternalname" is required (not null)
            if (aEModuleInternalname == null)
            {
                throw new ArgumentNullException("aEModuleInternalname is a required property for ActivesessionResponseCompound and cannot be null");
            }
            this.AEModuleInternalname = aEModuleInternalname;
            this.FkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID;
            this.FkiSignatureID = fkiSignatureID;
            this.ObjUserCloned = objUserCloned;
            this.ObjApikey = objApikey;
        }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /// <example>2</example>
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        /// <example>Acme inc.</example>
        [DataMember(Name = "sCompanyNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// The Name of the Department in the language of the requester
        /// </summary>
        /// <value>The Name of the Department in the language of the requester</value>
        /// <example>Head Office</example>
        [DataMember(Name = "sDepartmentNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SDepartmentNameX { get; set; }

        /// <summary>
        /// Whether the active session is in debug or not
        /// </summary>
        /// <value>Whether the active session is in debug or not</value>
        /// <example>false</example>
        [DataMember(Name = "bActivesessionDebug", IsRequired = true, EmitDefaultValue = true)]
        public bool BActivesessionDebug { get; set; }

        /// <summary>
        /// Whether the active session is superadmin or not
        /// </summary>
        /// <value>Whether the active session is superadmin or not</value>
        /// <example>false</example>
        [DataMember(Name = "bActivesessionIssuperadmin", IsRequired = true, EmitDefaultValue = true)]
        public bool BActivesessionIssuperadmin { get; set; }

        /// <summary>
        /// The customer code assigned to your account
        /// </summary>
        /// <value>The customer code assigned to your account</value>
        /// <example>demo</example>
        [DataMember(Name = "pksCustomerCode", IsRequired = true, EmitDefaultValue = true)]
        public string PksCustomerCode { get; set; }

        /// <summary>
        /// The unique ID of the Systemconfigurationtype
        /// </summary>
        /// <value>The unique ID of the Systemconfigurationtype</value>
        /// <example>28</example>
        [DataMember(Name = "fkiSystemconfigurationtypeID", EmitDefaultValue = false)]
        public int FkiSystemconfigurationtypeID { get; set; }

        /// <summary>
        /// The unique ID of the Signature
        /// </summary>
        /// <value>The unique ID of the Signature</value>
        /// <example>12</example>
        [DataMember(Name = "fkiSignatureID", EmitDefaultValue = false)]
        public int FkiSignatureID { get; set; }

        /// <summary>
        /// An array of permissions granted to the user or api key
        /// </summary>
        /// <value>An array of permissions granted to the user or api key</value>
        [DataMember(Name = "a_pkiPermissionID", IsRequired = true, EmitDefaultValue = true)]
        public List<int> APkiPermissionID { get; set; }

        /// <summary>
        /// Gets or Sets ObjUserReal
        /// </summary>
        [DataMember(Name = "objUserReal", IsRequired = true, EmitDefaultValue = true)]
        public ActivesessionResponseCompoundUser ObjUserReal { get; set; }

        /// <summary>
        /// Gets or Sets ObjUserCloned
        /// </summary>
        [DataMember(Name = "objUserCloned", EmitDefaultValue = false)]
        public ActivesessionResponseCompoundUser ObjUserCloned { get; set; }

        /// <summary>
        /// Gets or Sets ObjApikey
        /// </summary>
        [DataMember(Name = "objApikey", EmitDefaultValue = false)]
        public ActivesessionResponseCompoundApikey ObjApikey { get; set; }

        /// <summary>
        /// An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
        /// </summary>
        /// <value>An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.</value>
        [DataMember(Name = "a_eModuleInternalname", IsRequired = true, EmitDefaultValue = true)]
        public List<string> AEModuleInternalname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivesessionResponseCompound {\n");
            sb.Append("  EActivesessionUsertype: ").Append(EActivesessionUsertype).Append("\n");
            sb.Append("  EActivesessionOrigin: ").Append(EActivesessionOrigin).Append("\n");
            sb.Append("  EActivesessionWeekdaystart: ").Append(EActivesessionWeekdaystart).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("  SDepartmentNameX: ").Append(SDepartmentNameX).Append("\n");
            sb.Append("  BActivesessionDebug: ").Append(BActivesessionDebug).Append("\n");
            sb.Append("  BActivesessionIssuperadmin: ").Append(BActivesessionIssuperadmin).Append("\n");
            sb.Append("  PksCustomerCode: ").Append(PksCustomerCode).Append("\n");
            sb.Append("  FkiSystemconfigurationtypeID: ").Append(FkiSystemconfigurationtypeID).Append("\n");
            sb.Append("  FkiSignatureID: ").Append(FkiSignatureID).Append("\n");
            sb.Append("  APkiPermissionID: ").Append(APkiPermissionID).Append("\n");
            sb.Append("  ObjUserReal: ").Append(ObjUserReal).Append("\n");
            sb.Append("  ObjUserCloned: ").Append(ObjUserCloned).Append("\n");
            sb.Append("  ObjApikey: ").Append(ObjApikey).Append("\n");
            sb.Append("  AEModuleInternalname: ").Append(AEModuleInternalname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivesessionResponseCompound);
        }

        /// <summary>
        /// Returns true if ActivesessionResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivesessionResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivesessionResponseCompound input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EActivesessionUsertype == input.EActivesessionUsertype ||
                    this.EActivesessionUsertype.Equals(input.EActivesessionUsertype)
                ) && 
                (
                    this.EActivesessionOrigin == input.EActivesessionOrigin ||
                    this.EActivesessionOrigin.Equals(input.EActivesessionOrigin)
                ) && 
                (
                    this.EActivesessionWeekdaystart == input.EActivesessionWeekdaystart ||
                    this.EActivesessionWeekdaystart.Equals(input.EActivesessionWeekdaystart)
                ) && 
                (
                    this.FkiLanguageID == input.FkiLanguageID ||
                    this.FkiLanguageID.Equals(input.FkiLanguageID)
                ) && 
                (
                    this.SCompanyNameX == input.SCompanyNameX ||
                    (this.SCompanyNameX != null &&
                    this.SCompanyNameX.Equals(input.SCompanyNameX))
                ) && 
                (
                    this.SDepartmentNameX == input.SDepartmentNameX ||
                    (this.SDepartmentNameX != null &&
                    this.SDepartmentNameX.Equals(input.SDepartmentNameX))
                ) && 
                (
                    this.BActivesessionDebug == input.BActivesessionDebug ||
                    this.BActivesessionDebug.Equals(input.BActivesessionDebug)
                ) && 
                (
                    this.BActivesessionIssuperadmin == input.BActivesessionIssuperadmin ||
                    this.BActivesessionIssuperadmin.Equals(input.BActivesessionIssuperadmin)
                ) && 
                (
                    this.PksCustomerCode == input.PksCustomerCode ||
                    (this.PksCustomerCode != null &&
                    this.PksCustomerCode.Equals(input.PksCustomerCode))
                ) && 
                (
                    this.FkiSystemconfigurationtypeID == input.FkiSystemconfigurationtypeID ||
                    this.FkiSystemconfigurationtypeID.Equals(input.FkiSystemconfigurationtypeID)
                ) && 
                (
                    this.FkiSignatureID == input.FkiSignatureID ||
                    this.FkiSignatureID.Equals(input.FkiSignatureID)
                ) && 
                (
                    this.APkiPermissionID == input.APkiPermissionID ||
                    this.APkiPermissionID != null &&
                    input.APkiPermissionID != null &&
                    this.APkiPermissionID.SequenceEqual(input.APkiPermissionID)
                ) && 
                (
                    this.ObjUserReal == input.ObjUserReal ||
                    (this.ObjUserReal != null &&
                    this.ObjUserReal.Equals(input.ObjUserReal))
                ) && 
                (
                    this.ObjUserCloned == input.ObjUserCloned ||
                    (this.ObjUserCloned != null &&
                    this.ObjUserCloned.Equals(input.ObjUserCloned))
                ) && 
                (
                    this.ObjApikey == input.ObjApikey ||
                    (this.ObjApikey != null &&
                    this.ObjApikey.Equals(input.ObjApikey))
                ) && 
                (
                    this.AEModuleInternalname == input.AEModuleInternalname ||
                    this.AEModuleInternalname != null &&
                    input.AEModuleInternalname != null &&
                    this.AEModuleInternalname.SequenceEqual(input.AEModuleInternalname)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EActivesessionUsertype.GetHashCode();
                hashCode = (hashCode * 59) + this.EActivesessionOrigin.GetHashCode();
                hashCode = (hashCode * 59) + this.EActivesessionWeekdaystart.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiLanguageID.GetHashCode();
                if (this.SCompanyNameX != null)
                {
                    hashCode = (hashCode * 59) + this.SCompanyNameX.GetHashCode();
                }
                if (this.SDepartmentNameX != null)
                {
                    hashCode = (hashCode * 59) + this.SDepartmentNameX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BActivesessionDebug.GetHashCode();
                hashCode = (hashCode * 59) + this.BActivesessionIssuperadmin.GetHashCode();
                if (this.PksCustomerCode != null)
                {
                    hashCode = (hashCode * 59) + this.PksCustomerCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FkiSystemconfigurationtypeID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiSignatureID.GetHashCode();
                if (this.APkiPermissionID != null)
                {
                    hashCode = (hashCode * 59) + this.APkiPermissionID.GetHashCode();
                }
                if (this.ObjUserReal != null)
                {
                    hashCode = (hashCode * 59) + this.ObjUserReal.GetHashCode();
                }
                if (this.ObjUserCloned != null)
                {
                    hashCode = (hashCode * 59) + this.ObjUserCloned.GetHashCode();
                }
                if (this.ObjApikey != null)
                {
                    hashCode = (hashCode * 59) + this.ObjApikey.GetHashCode();
                }
                if (this.AEModuleInternalname != null)
                {
                    hashCode = (hashCode * 59) + this.AEModuleInternalname.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            // PksCustomerCode (string) maxLength
            if (this.PksCustomerCode != null && this.PksCustomerCode.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PksCustomerCode, length must be less than 6.", new [] { "PksCustomerCode" });
            }

            // PksCustomerCode (string) minLength
            if (this.PksCustomerCode != null && this.PksCustomerCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PksCustomerCode, length must be greater than 2.", new [] { "PksCustomerCode" });
            }

            // FkiSystemconfigurationtypeID (int) minimum
            if (this.FkiSystemconfigurationtypeID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiSystemconfigurationtypeID, must be a value greater than or equal to 1.", new [] { "FkiSystemconfigurationtypeID" });
            }

            // FkiSignatureID (int) maximum
            if (this.FkiSignatureID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiSignatureID, must be a value less than or equal to 16777215.", new [] { "FkiSignatureID" });
            }

            // FkiSignatureID (int) minimum
            if (this.FkiSignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiSignatureID, must be a value greater than or equal to 0.", new [] { "FkiSignatureID" });
            }

            yield break;
        }
    }

}
