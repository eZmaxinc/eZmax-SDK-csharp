/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Billingentityexternal AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class BillingentityexternalAutocompleteElementResponse :  IEquatable<BillingentityexternalAutocompleteElementResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingentityexternalAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BillingentityexternalAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingentityexternalAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiBillingentityexternalID">The unique ID of the Billingentityexternal (required).</param>
        /// <param name="sBillingentityexternalDescription">The description of the Billingentityexternal (required).</param>
        /// <param name="bBillingentityexternalIsactive">Whether the Billingentityexternal is active or not (required).</param>
        public BillingentityexternalAutocompleteElementResponse(int pkiBillingentityexternalID = default(int), string sBillingentityexternalDescription = default(string), bool bBillingentityexternalIsactive = default(bool))
        {
            // to ensure "pkiBillingentityexternalID" is required (not null)
            if (pkiBillingentityexternalID == null)
            {
                throw new InvalidDataException("pkiBillingentityexternalID is a required property for BillingentityexternalAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiBillingentityexternalID = pkiBillingentityexternalID;
            }

            // to ensure "sBillingentityexternalDescription" is required (not null)
            if (sBillingentityexternalDescription == null)
            {
                throw new InvalidDataException("sBillingentityexternalDescription is a required property for BillingentityexternalAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SBillingentityexternalDescription = sBillingentityexternalDescription;
            }

            // to ensure "bBillingentityexternalIsactive" is required (not null)
            if (bBillingentityexternalIsactive == null)
            {
                throw new InvalidDataException("bBillingentityexternalIsactive is a required property for BillingentityexternalAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BBillingentityexternalIsactive = bBillingentityexternalIsactive;
            }

        }

        /// <summary>
        /// The unique ID of the Billingentityexternal
        /// </summary>
        /// <value>The unique ID of the Billingentityexternal</value>
        [DataMember(Name="pkiBillingentityexternalID", EmitDefaultValue=true)]
        public int PkiBillingentityexternalID { get; set; }

        /// <summary>
        /// The description of the Billingentityexternal
        /// </summary>
        /// <value>The description of the Billingentityexternal</value>
        [DataMember(Name="sBillingentityexternalDescription", EmitDefaultValue=true)]
        public string SBillingentityexternalDescription { get; set; }

        /// <summary>
        /// Whether the Billingentityexternal is active or not
        /// </summary>
        /// <value>Whether the Billingentityexternal is active or not</value>
        [DataMember(Name="bBillingentityexternalIsactive", EmitDefaultValue=true)]
        public bool BBillingentityexternalIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingentityexternalAutocompleteElementResponse {\n");
            sb.Append("  PkiBillingentityexternalID: ").Append(PkiBillingentityexternalID).Append("\n");
            sb.Append("  SBillingentityexternalDescription: ").Append(SBillingentityexternalDescription).Append("\n");
            sb.Append("  BBillingentityexternalIsactive: ").Append(BBillingentityexternalIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingentityexternalAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if BillingentityexternalAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingentityexternalAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingentityexternalAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiBillingentityexternalID == input.PkiBillingentityexternalID ||
                    (this.PkiBillingentityexternalID != null &&
                    this.PkiBillingentityexternalID.Equals(input.PkiBillingentityexternalID))
                ) && 
                (
                    this.SBillingentityexternalDescription == input.SBillingentityexternalDescription ||
                    (this.SBillingentityexternalDescription != null &&
                    this.SBillingentityexternalDescription.Equals(input.SBillingentityexternalDescription))
                ) && 
                (
                    this.BBillingentityexternalIsactive == input.BBillingentityexternalIsactive ||
                    (this.BBillingentityexternalIsactive != null &&
                    this.BBillingentityexternalIsactive.Equals(input.BBillingentityexternalIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiBillingentityexternalID != null)
                    hashCode = hashCode * 59 + this.PkiBillingentityexternalID.GetHashCode();
                if (this.SBillingentityexternalDescription != null)
                    hashCode = hashCode * 59 + this.SBillingentityexternalDescription.GetHashCode();
                if (this.BBillingentityexternalIsactive != null)
                    hashCode = hashCode * 59 + this.BBillingentityexternalIsactive.GetHashCode();
                return hashCode;
            }
        }
    }

}
