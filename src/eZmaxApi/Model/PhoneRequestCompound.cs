/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Phone Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class PhoneRequestCompound :  IEquatable<PhoneRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EPhoneType
        /// </summary>
        [DataMember(Name="ePhoneType", EmitDefaultValue=false)]
        [Obsolete]
        public FieldEPhoneType? EPhoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiPhoneID">The unique ID of the Phone..</param>
        /// <param name="fkiPhonetypeID">The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| (required).</param>
        /// <param name="ePhoneType">ePhoneType.</param>
        /// <param name="sPhoneRegion">The region of the phone number. (For a North America Number only)  The region is the \&quot;514\&quot; section in this sample phone number: (514) 990-1516 x123.</param>
        /// <param name="sPhoneExchange">The exchange of the phone number. (For a North America Number only)  The exchange is the \&quot;990\&quot; section in this sample phone number: (514) 990-1516 x123.</param>
        /// <param name="sPhoneNumber">The number of the phone number. (For a North America Number only)  The number is the \&quot;1516\&quot; section in this sample phone number: (514) 990-1516 x123.</param>
        /// <param name="sPhoneInternational">The international phone number..</param>
        /// <param name="sPhoneExtension">The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers.</param>
        /// <param name="sPhoneE164">A phone number in E.164 Format.</param>
        public PhoneRequestCompound(int pkiPhoneID = default(int), int fkiPhonetypeID = default(int), FieldEPhoneType? ePhoneType = default(FieldEPhoneType?), string sPhoneRegion = default(string), string sPhoneExchange = default(string), string sPhoneNumber = default(string), string sPhoneInternational = default(string), string sPhoneExtension = default(string), string sPhoneE164 = default(string))
        {
            // to ensure "fkiPhonetypeID" is required (not null)
            if (fkiPhonetypeID == null)
            {
                throw new InvalidDataException("fkiPhonetypeID is a required property for PhoneRequestCompound and cannot be null");
            }
            else
            {
                this.FkiPhonetypeID = fkiPhonetypeID;
            }

            this.PkiPhoneID = pkiPhoneID;
            this.EPhoneType = ePhoneType;
            this.SPhoneRegion = sPhoneRegion;
            this.SPhoneExchange = sPhoneExchange;
            this.SPhoneNumber = sPhoneNumber;
            this.SPhoneInternational = sPhoneInternational;
            this.SPhoneExtension = sPhoneExtension;
            this.SPhoneE164 = sPhoneE164;
        }

        /// <summary>
        /// The unique ID of the Phone.
        /// </summary>
        /// <value>The unique ID of the Phone.</value>
        [DataMember(Name="pkiPhoneID", EmitDefaultValue=false)]
        public int PkiPhoneID { get; set; }

        /// <summary>
        /// The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
        /// </summary>
        /// <value>The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|</value>
        [DataMember(Name="fkiPhonetypeID", EmitDefaultValue=true)]
        public int FkiPhonetypeID { get; set; }


        /// <summary>
        /// The region of the phone number. (For a North America Number only)  The region is the \&quot;514\&quot; section in this sample phone number: (514) 990-1516 x123
        /// </summary>
        /// <value>The region of the phone number. (For a North America Number only)  The region is the \&quot;514\&quot; section in this sample phone number: (514) 990-1516 x123</value>
        [DataMember(Name="sPhoneRegion", EmitDefaultValue=false)]
        [Obsolete]
        public string SPhoneRegion { get; set; }

        /// <summary>
        /// The exchange of the phone number. (For a North America Number only)  The exchange is the \&quot;990\&quot; section in this sample phone number: (514) 990-1516 x123
        /// </summary>
        /// <value>The exchange of the phone number. (For a North America Number only)  The exchange is the \&quot;990\&quot; section in this sample phone number: (514) 990-1516 x123</value>
        [DataMember(Name="sPhoneExchange", EmitDefaultValue=false)]
        [Obsolete]
        public string SPhoneExchange { get; set; }

        /// <summary>
        /// The number of the phone number. (For a North America Number only)  The number is the \&quot;1516\&quot; section in this sample phone number: (514) 990-1516 x123
        /// </summary>
        /// <value>The number of the phone number. (For a North America Number only)  The number is the \&quot;1516\&quot; section in this sample phone number: (514) 990-1516 x123</value>
        [DataMember(Name="sPhoneNumber", EmitDefaultValue=false)]
        [Obsolete]
        public string SPhoneNumber { get; set; }

        /// <summary>
        /// The international phone number.
        /// </summary>
        /// <value>The international phone number.</value>
        [DataMember(Name="sPhoneInternational", EmitDefaultValue=false)]
        [Obsolete]
        public string SPhoneInternational { get; set; }

        /// <summary>
        /// The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
        /// </summary>
        /// <value>The extension of the phone number.  The extension is the \&quot;123\&quot; section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers</value>
        [DataMember(Name="sPhoneExtension", EmitDefaultValue=false)]
        public string SPhoneExtension { get; set; }

        /// <summary>
        /// A phone number in E.164 Format
        /// </summary>
        /// <value>A phone number in E.164 Format</value>
        [DataMember(Name="sPhoneE164", EmitDefaultValue=false)]
        public string SPhoneE164 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneRequestCompound {\n");
            sb.Append("  PkiPhoneID: ").Append(PkiPhoneID).Append("\n");
            sb.Append("  FkiPhonetypeID: ").Append(FkiPhonetypeID).Append("\n");
            sb.Append("  EPhoneType: ").Append(EPhoneType).Append("\n");
            sb.Append("  SPhoneRegion: ").Append(SPhoneRegion).Append("\n");
            sb.Append("  SPhoneExchange: ").Append(SPhoneExchange).Append("\n");
            sb.Append("  SPhoneNumber: ").Append(SPhoneNumber).Append("\n");
            sb.Append("  SPhoneInternational: ").Append(SPhoneInternational).Append("\n");
            sb.Append("  SPhoneExtension: ").Append(SPhoneExtension).Append("\n");
            sb.Append("  SPhoneE164: ").Append(SPhoneE164).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneRequestCompound);
        }

        /// <summary>
        /// Returns true if PhoneRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiPhoneID == input.PkiPhoneID ||
                    (this.PkiPhoneID != null &&
                    this.PkiPhoneID.Equals(input.PkiPhoneID))
                ) && 
                (
                    this.FkiPhonetypeID == input.FkiPhonetypeID ||
                    (this.FkiPhonetypeID != null &&
                    this.FkiPhonetypeID.Equals(input.FkiPhonetypeID))
                ) && 
                (
                    this.EPhoneType == input.EPhoneType ||
                    (this.EPhoneType != null &&
                    this.EPhoneType.Equals(input.EPhoneType))
                ) && 
                (
                    this.SPhoneRegion == input.SPhoneRegion ||
                    (this.SPhoneRegion != null &&
                    this.SPhoneRegion.Equals(input.SPhoneRegion))
                ) && 
                (
                    this.SPhoneExchange == input.SPhoneExchange ||
                    (this.SPhoneExchange != null &&
                    this.SPhoneExchange.Equals(input.SPhoneExchange))
                ) && 
                (
                    this.SPhoneNumber == input.SPhoneNumber ||
                    (this.SPhoneNumber != null &&
                    this.SPhoneNumber.Equals(input.SPhoneNumber))
                ) && 
                (
                    this.SPhoneInternational == input.SPhoneInternational ||
                    (this.SPhoneInternational != null &&
                    this.SPhoneInternational.Equals(input.SPhoneInternational))
                ) && 
                (
                    this.SPhoneExtension == input.SPhoneExtension ||
                    (this.SPhoneExtension != null &&
                    this.SPhoneExtension.Equals(input.SPhoneExtension))
                ) && 
                (
                    this.SPhoneE164 == input.SPhoneE164 ||
                    (this.SPhoneE164 != null &&
                    this.SPhoneE164.Equals(input.SPhoneE164))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiPhoneID != null)
                    hashCode = hashCode * 59 + this.PkiPhoneID.GetHashCode();
                if (this.FkiPhonetypeID != null)
                    hashCode = hashCode * 59 + this.FkiPhonetypeID.GetHashCode();
                if (this.EPhoneType != null)
                    hashCode = hashCode * 59 + this.EPhoneType.GetHashCode();
                if (this.SPhoneRegion != null)
                    hashCode = hashCode * 59 + this.SPhoneRegion.GetHashCode();
                if (this.SPhoneExchange != null)
                    hashCode = hashCode * 59 + this.SPhoneExchange.GetHashCode();
                if (this.SPhoneNumber != null)
                    hashCode = hashCode * 59 + this.SPhoneNumber.GetHashCode();
                if (this.SPhoneInternational != null)
                    hashCode = hashCode * 59 + this.SPhoneInternational.GetHashCode();
                if (this.SPhoneExtension != null)
                    hashCode = hashCode * 59 + this.SPhoneExtension.GetHashCode();
                if (this.SPhoneE164 != null)
                    hashCode = hashCode * 59 + this.SPhoneE164.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiPhoneID (int) minimum
            if(this.PkiPhoneID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPhoneID, must be a value greater than or equal to 0.", new [] { "PkiPhoneID" });
            }



            // FkiPhonetypeID (int) minimum
            if(this.FkiPhonetypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiPhonetypeID, must be a value greater than or equal to 0.", new [] { "FkiPhonetypeID" });
            }



            // SPhoneE164 (string) pattern
            Regex regexSPhoneE164 = new Regex(@"^\+[1-9]\d{1,14}$", RegexOptions.CultureInvariant);
            if (false == regexSPhoneE164.Match(this.SPhoneE164).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPhoneE164, must match a pattern of " + regexSPhoneE164, new [] { "SPhoneE164" });
            }

            yield break;
        }
    }

}
