/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Language AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "language-AutocompleteElement-Response")]
    public partial class LanguageAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LanguageAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="">The Name of the Language in the language of the requester (required).</param>
        /// <param name="">Whether the Language is active or not (required).</param>
        public LanguageAutocompleteElementResponse(int  = default(int), string  = default(string), bool  = default(bool))
        {
            this.PkiLanguageID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for LanguageAutocompleteElementResponse and cannot be null");
            }
            this.SLanguageNameX = ;
            this.BLanguageIsactive = ;
        }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "pkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        /* <example>English</example>*/
        [DataMember(Name = "sLanguageNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// Whether the Language is active or not
        /// </summary>
        /// <value>Whether the Language is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bLanguageIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BLanguageIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LanguageAutocompleteElementResponse {\n");
            sb.Append("  PkiLanguageID: ").Append(PkiLanguageID).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  BLanguageIsactive: ").Append(BLanguageIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiLanguageID (int) maximum
            if (this.PkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiLanguageID, must be a value less than or equal to 2.", new [] { "PkiLanguageID" });
            }

            // PkiLanguageID (int) minimum
            if (this.PkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiLanguageID, must be a value greater than or equal to 1.", new [] { "PkiLanguageID" });
            }

            yield break;
        }
    }

}
