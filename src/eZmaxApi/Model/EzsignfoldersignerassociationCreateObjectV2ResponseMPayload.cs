/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for the /2/object/ezsignfoldersignerassociation/createObject API Request
    /// </summary>
    [DataContract]
    public partial class EzsignfoldersignerassociationCreateObjectV2ResponseMPayload :  IEquatable<EzsignfoldersignerassociationCreateObjectV2ResponseMPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationCreateObjectV2ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldersignerassociationCreateObjectV2ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationCreateObjectV2ResponseMPayload" /> class.
        /// </summary>
        /// <param name="aPkiEzsignfoldersignerassociationID">An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request. (required).</param>
        public EzsignfoldersignerassociationCreateObjectV2ResponseMPayload(List<int> aPkiEzsignfoldersignerassociationID = default(List<int>))
        {
            // to ensure "aPkiEzsignfoldersignerassociationID" is required (not null)
            if (aPkiEzsignfoldersignerassociationID == null)
            {
                throw new InvalidDataException("aPkiEzsignfoldersignerassociationID is a required property for EzsignfoldersignerassociationCreateObjectV2ResponseMPayload and cannot be null");
            }
            else
            {
                this.APkiEzsignfoldersignerassociationID = aPkiEzsignfoldersignerassociationID;
            }

        }

        /// <summary>
        /// An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.
        /// </summary>
        /// <value>An array of unique IDs representing the object that were requested to be created.  They are returned in the same order as the array containing the objects to be created that was sent in the request.</value>
        [DataMember(Name="a_pkiEzsignfoldersignerassociationID", EmitDefaultValue=true)]
        public List<int> APkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfoldersignerassociationCreateObjectV2ResponseMPayload {\n");
            sb.Append("  APkiEzsignfoldersignerassociationID: ").Append(APkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfoldersignerassociationCreateObjectV2ResponseMPayload);
        }

        /// <summary>
        /// Returns true if EzsignfoldersignerassociationCreateObjectV2ResponseMPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfoldersignerassociationCreateObjectV2ResponseMPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfoldersignerassociationCreateObjectV2ResponseMPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.APkiEzsignfoldersignerassociationID == input.APkiEzsignfoldersignerassociationID ||
                    this.APkiEzsignfoldersignerassociationID != null &&
                    input.APkiEzsignfoldersignerassociationID != null &&
                    this.APkiEzsignfoldersignerassociationID.SequenceEqual(input.APkiEzsignfoldersignerassociationID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.APkiEzsignfoldersignerassociationID != null)
                    hashCode = hashCode * 59 + this.APkiEzsignfoldersignerassociationID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
