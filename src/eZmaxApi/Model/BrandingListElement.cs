/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Branding List Element
    /// </summary>
    [DataContract(Name = "branding-ListElement")]
    public partial class BrandingListElement : IEquatable<BrandingListElement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandingListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingListElement" /> class.
        /// </summary>
        /// <param name="pkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="sBrandingDescriptionX">The Description of the Branding in the language of the requester (required).</param>
        /// <param name="iBrandingColortext">The color of the text. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColortextlinkbox">The color of the text in the link box. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColortextbutton">The color of the text in the button. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackground">The color of the background. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackgroundbutton">The color of the background of the button. This is a RGB color converted into integer (required).</param>
        /// <param name="iBrandingColorbackgroundsmallbox">The color of the background of the small box. This is a RGB color converted into integer (required).</param>
        /// <param name="bBrandingIsactive">Whether the Branding is active or not (required).</param>
        public BrandingListElement(int pkiBrandingID = default(int), string sBrandingDescriptionX = default(string), int iBrandingColortext = default(int), int iBrandingColortextlinkbox = default(int), int iBrandingColortextbutton = default(int), int iBrandingColorbackground = default(int), int iBrandingColorbackgroundbutton = default(int), int iBrandingColorbackgroundsmallbox = default(int), bool bBrandingIsactive = default(bool))
        {
            this.PkiBrandingID = pkiBrandingID;
            // to ensure "sBrandingDescriptionX" is required (not null)
            if (sBrandingDescriptionX == null)
            {
                throw new ArgumentNullException("sBrandingDescriptionX is a required property for BrandingListElement and cannot be null");
            }
            this.SBrandingDescriptionX = sBrandingDescriptionX;
            this.IBrandingColortext = iBrandingColortext;
            this.IBrandingColortextlinkbox = iBrandingColortextlinkbox;
            this.IBrandingColortextbutton = iBrandingColortextbutton;
            this.IBrandingColorbackground = iBrandingColorbackground;
            this.IBrandingColorbackgroundbutton = iBrandingColorbackgroundbutton;
            this.IBrandingColorbackgroundsmallbox = iBrandingColorbackgroundsmallbox;
            this.BBrandingIsactive = bBrandingIsactive;
        }

        /// <summary>
        /// The unique ID of the Branding
        /// </summary>
        /// <value>The unique ID of the Branding</value>
        </example> }}
		/* <example>78</example>*/
        [DataMember(Name = "pkiBrandingID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiBrandingID { get; set; }

        /// <summary>
        /// The Description of the Branding in the language of the requester
        /// </summary>
        /// <value>The Description of the Branding in the language of the requester</value>
        </example> }}
		/* <example>Company X</example>*/
        [DataMember(Name = "sBrandingDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SBrandingDescriptionX { get; set; }

        /// <summary>
        /// The color of the text. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text. This is a RGB color converted into integer</value>
        </example> }}
		/* <example>3752795</example>*/
        [DataMember(Name = "iBrandingColortext", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortext { get; set; }

        /// <summary>
        /// The color of the text in the link box. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text in the link box. This is a RGB color converted into integer</value>
        </example> }}
		/* <example>0</example>*/
        [DataMember(Name = "iBrandingColortextlinkbox", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortextlinkbox { get; set; }

        /// <summary>
        /// The color of the text in the button. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the text in the button. This is a RGB color converted into integer</value>
        </example> }}
		/* <example>16777215</example>*/
        [DataMember(Name = "iBrandingColortextbutton", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColortextbutton { get; set; }

        /// <summary>
        /// The color of the background. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background. This is a RGB color converted into integer</value>
        </example> }}
		/* <example>15658734</example>*/
        [DataMember(Name = "iBrandingColorbackground", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackground { get; set; }

        /// <summary>
        /// The color of the background of the button. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background of the button. This is a RGB color converted into integer</value>
        </example> }}
		/* <example>13577007</example>*/
        [DataMember(Name = "iBrandingColorbackgroundbutton", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackgroundbutton { get; set; }

        /// <summary>
        /// The color of the background of the small box. This is a RGB color converted into integer
        /// </summary>
        /// <value>The color of the background of the small box. This is a RGB color converted into integer</value>
        </example> }}
		/* <example>16777215</example>*/
        [DataMember(Name = "iBrandingColorbackgroundsmallbox", IsRequired = true, EmitDefaultValue = true)]
        public int IBrandingColorbackgroundsmallbox { get; set; }

        /// <summary>
        /// Whether the Branding is active or not
        /// </summary>
        /// <value>Whether the Branding is active or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bBrandingIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BBrandingIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandingListElement {\n");
            sb.Append("  PkiBrandingID: ").Append(PkiBrandingID).Append("\n");
            sb.Append("  SBrandingDescriptionX: ").Append(SBrandingDescriptionX).Append("\n");
            sb.Append("  IBrandingColortext: ").Append(IBrandingColortext).Append("\n");
            sb.Append("  IBrandingColortextlinkbox: ").Append(IBrandingColortextlinkbox).Append("\n");
            sb.Append("  IBrandingColortextbutton: ").Append(IBrandingColortextbutton).Append("\n");
            sb.Append("  IBrandingColorbackground: ").Append(IBrandingColorbackground).Append("\n");
            sb.Append("  IBrandingColorbackgroundbutton: ").Append(IBrandingColorbackgroundbutton).Append("\n");
            sb.Append("  IBrandingColorbackgroundsmallbox: ").Append(IBrandingColorbackgroundsmallbox).Append("\n");
            sb.Append("  BBrandingIsactive: ").Append(BBrandingIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandingListElement);
        }

        /// <summary>
        /// Returns true if BrandingListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandingListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandingListElement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiBrandingID == input.PkiBrandingID ||
                    this.PkiBrandingID.Equals(input.PkiBrandingID)
                ) && 
                (
                    this.SBrandingDescriptionX == input.SBrandingDescriptionX ||
                    (this.SBrandingDescriptionX != null &&
                    this.SBrandingDescriptionX.Equals(input.SBrandingDescriptionX))
                ) && 
                (
                    this.IBrandingColortext == input.IBrandingColortext ||
                    this.IBrandingColortext.Equals(input.IBrandingColortext)
                ) && 
                (
                    this.IBrandingColortextlinkbox == input.IBrandingColortextlinkbox ||
                    this.IBrandingColortextlinkbox.Equals(input.IBrandingColortextlinkbox)
                ) && 
                (
                    this.IBrandingColortextbutton == input.IBrandingColortextbutton ||
                    this.IBrandingColortextbutton.Equals(input.IBrandingColortextbutton)
                ) && 
                (
                    this.IBrandingColorbackground == input.IBrandingColorbackground ||
                    this.IBrandingColorbackground.Equals(input.IBrandingColorbackground)
                ) && 
                (
                    this.IBrandingColorbackgroundbutton == input.IBrandingColorbackgroundbutton ||
                    this.IBrandingColorbackgroundbutton.Equals(input.IBrandingColorbackgroundbutton)
                ) && 
                (
                    this.IBrandingColorbackgroundsmallbox == input.IBrandingColorbackgroundsmallbox ||
                    this.IBrandingColorbackgroundsmallbox.Equals(input.IBrandingColorbackgroundsmallbox)
                ) && 
                (
                    this.BBrandingIsactive == input.BBrandingIsactive ||
                    this.BBrandingIsactive.Equals(input.BBrandingIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiBrandingID.GetHashCode();
                if (this.SBrandingDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SBrandingDescriptionX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IBrandingColortext.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColortextlinkbox.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColortextbutton.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColorbackground.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColorbackgroundbutton.GetHashCode();
                hashCode = (hashCode * 59) + this.IBrandingColorbackgroundsmallbox.GetHashCode();
                hashCode = (hashCode * 59) + this.BBrandingIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiBrandingID (int) minimum
            if (this.PkiBrandingID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiBrandingID, must be a value greater than or equal to 0.", new [] { "PkiBrandingID" });
            }

            // IBrandingColortext (int) maximum
            if (this.IBrandingColortext > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortext, must be a value less than or equal to 16777215.", new [] { "IBrandingColortext" });
            }

            // IBrandingColortext (int) minimum
            if (this.IBrandingColortext < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortext, must be a value greater than or equal to 0.", new [] { "IBrandingColortext" });
            }

            // IBrandingColortextlinkbox (int) maximum
            if (this.IBrandingColortextlinkbox > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextlinkbox, must be a value less than or equal to 16777215.", new [] { "IBrandingColortextlinkbox" });
            }

            // IBrandingColortextlinkbox (int) minimum
            if (this.IBrandingColortextlinkbox < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextlinkbox, must be a value greater than or equal to 0.", new [] { "IBrandingColortextlinkbox" });
            }

            // IBrandingColortextbutton (int) maximum
            if (this.IBrandingColortextbutton > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextbutton, must be a value less than or equal to 16777215.", new [] { "IBrandingColortextbutton" });
            }

            // IBrandingColortextbutton (int) minimum
            if (this.IBrandingColortextbutton < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColortextbutton, must be a value greater than or equal to 0.", new [] { "IBrandingColortextbutton" });
            }

            // IBrandingColorbackground (int) maximum
            if (this.IBrandingColorbackground > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackground, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackground" });
            }

            // IBrandingColorbackground (int) minimum
            if (this.IBrandingColorbackground < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackground, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackground" });
            }

            // IBrandingColorbackgroundbutton (int) maximum
            if (this.IBrandingColorbackgroundbutton > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundbutton, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackgroundbutton" });
            }

            // IBrandingColorbackgroundbutton (int) minimum
            if (this.IBrandingColorbackgroundbutton < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundbutton, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackgroundbutton" });
            }

            // IBrandingColorbackgroundsmallbox (int) maximum
            if (this.IBrandingColorbackgroundsmallbox > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundsmallbox, must be a value less than or equal to 16777215.", new [] { "IBrandingColorbackgroundsmallbox" });
            }

            // IBrandingColorbackgroundsmallbox (int) minimum
            if (this.IBrandingColorbackgroundsmallbox < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IBrandingColorbackgroundsmallbox, must be a value greater than or equal to 0.", new [] { "IBrandingColorbackgroundsmallbox" });
            }

            yield break;
        }
    }

}
