/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Communicationimage Object
    /// </summary>
    [DataContract]
    public partial class CommunicationimageResponse :  IEquatable<CommunicationimageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationimageResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationimageResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationimageResponse" /> class.
        /// </summary>
        /// <param name="pkiCommunicationimageID">The unique ID of the Communicationimage (required).</param>
        /// <param name="fkiImageID">The unique ID of the Image (required).</param>
        /// <param name="sCommunicationimageName">The Name of the Communicationimage.</param>
        public CommunicationimageResponse(int pkiCommunicationimageID = default(int), int fkiImageID = default(int), string sCommunicationimageName = default(string))
        {
            // to ensure "pkiCommunicationimageID" is required (not null)
            if (pkiCommunicationimageID == null)
            {
                throw new InvalidDataException("pkiCommunicationimageID is a required property for CommunicationimageResponse and cannot be null");
            }
            else
            {
                this.PkiCommunicationimageID = pkiCommunicationimageID;
            }

            // to ensure "fkiImageID" is required (not null)
            if (fkiImageID == null)
            {
                throw new InvalidDataException("fkiImageID is a required property for CommunicationimageResponse and cannot be null");
            }
            else
            {
                this.FkiImageID = fkiImageID;
            }

            this.SCommunicationimageName = sCommunicationimageName;
        }

        /// <summary>
        /// The unique ID of the Communicationimage
        /// </summary>
        /// <value>The unique ID of the Communicationimage</value>
        [DataMember(Name="pkiCommunicationimageID", EmitDefaultValue=true)]
        public int PkiCommunicationimageID { get; set; }

        /// <summary>
        /// The unique ID of the Image
        /// </summary>
        /// <value>The unique ID of the Image</value>
        [DataMember(Name="fkiImageID", EmitDefaultValue=true)]
        public int FkiImageID { get; set; }

        /// <summary>
        /// The Name of the Communicationimage
        /// </summary>
        /// <value>The Name of the Communicationimage</value>
        [DataMember(Name="sCommunicationimageName", EmitDefaultValue=false)]
        public string SCommunicationimageName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationimageResponse {\n");
            sb.Append("  PkiCommunicationimageID: ").Append(PkiCommunicationimageID).Append("\n");
            sb.Append("  FkiImageID: ").Append(FkiImageID).Append("\n");
            sb.Append("  SCommunicationimageName: ").Append(SCommunicationimageName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationimageResponse);
        }

        /// <summary>
        /// Returns true if CommunicationimageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationimageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationimageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiCommunicationimageID == input.PkiCommunicationimageID ||
                    (this.PkiCommunicationimageID != null &&
                    this.PkiCommunicationimageID.Equals(input.PkiCommunicationimageID))
                ) && 
                (
                    this.FkiImageID == input.FkiImageID ||
                    (this.FkiImageID != null &&
                    this.FkiImageID.Equals(input.FkiImageID))
                ) && 
                (
                    this.SCommunicationimageName == input.SCommunicationimageName ||
                    (this.SCommunicationimageName != null &&
                    this.SCommunicationimageName.Equals(input.SCommunicationimageName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiCommunicationimageID != null)
                    hashCode = hashCode * 59 + this.PkiCommunicationimageID.GetHashCode();
                if (this.FkiImageID != null)
                    hashCode = hashCode * 59 + this.FkiImageID.GetHashCode();
                if (this.SCommunicationimageName != null)
                    hashCode = hashCode * 59 + this.SCommunicationimageName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
