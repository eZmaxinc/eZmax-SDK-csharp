/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignsignergroupmembership Object
    /// </summary>
    [DataContract]
    public partial class EzsignsignergroupmembershipResponseCompound :  IEquatable<EzsignsignergroupmembershipResponseCompound>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupmembershipResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignergroupmembershipResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupmembershipResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignergroupmembershipID">The unique ID of the Ezsignsignergroupmembership (required).</param>
        /// <param name="fkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup (required).</param>
        /// <param name="fkiEzsignsignerID">The unique ID of the Ezsignsigner.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup.</param>
        public EzsignsignergroupmembershipResponseCompound(int pkiEzsignsignergroupmembershipID = default(int), int fkiEzsignsignergroupID = default(int), int fkiEzsignsignerID = default(int), int fkiUserID = default(int), int fkiUsergroupID = default(int))
        {
            // to ensure "pkiEzsignsignergroupmembershipID" is required (not null)
            if (pkiEzsignsignergroupmembershipID == null)
            {
                throw new InvalidDataException("pkiEzsignsignergroupmembershipID is a required property for EzsignsignergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.PkiEzsignsignergroupmembershipID = pkiEzsignsignergroupmembershipID;
            }

            // to ensure "fkiEzsignsignergroupID" is required (not null)
            if (fkiEzsignsignergroupID == null)
            {
                throw new InvalidDataException("fkiEzsignsignergroupID is a required property for EzsignsignergroupmembershipResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsignsignergroupID = fkiEzsignsignergroupID;
            }

            this.FkiEzsignsignerID = fkiEzsignsignerID;
            this.FkiUserID = fkiUserID;
            this.FkiUsergroupID = fkiUsergroupID;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignergroupmembership
        /// </summary>
        /// <value>The unique ID of the Ezsignsignergroupmembership</value>
        [DataMember(Name="pkiEzsignsignergroupmembershipID", EmitDefaultValue=true)]
        public int PkiEzsignsignergroupmembershipID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignsignergroup
        /// </summary>
        /// <value>The unique ID of the Ezsignsignergroup</value>
        [DataMember(Name="fkiEzsignsignergroupID", EmitDefaultValue=true)]
        public int FkiEzsignsignergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignsigner
        /// </summary>
        /// <value>The unique ID of the Ezsignsigner</value>
        [DataMember(Name="fkiEzsignsignerID", EmitDefaultValue=false)]
        public int FkiEzsignsignerID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        [DataMember(Name="fkiUsergroupID", EmitDefaultValue=false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignergroupmembershipResponseCompound {\n");
            sb.Append("  PkiEzsignsignergroupmembershipID: ").Append(PkiEzsignsignergroupmembershipID).Append("\n");
            sb.Append("  FkiEzsignsignergroupID: ").Append(FkiEzsignsignergroupID).Append("\n");
            sb.Append("  FkiEzsignsignerID: ").Append(FkiEzsignsignerID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignergroupmembershipResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsignsignergroupmembershipResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignergroupmembershipResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignergroupmembershipResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignergroupmembershipID == input.PkiEzsignsignergroupmembershipID ||
                    (this.PkiEzsignsignergroupmembershipID != null &&
                    this.PkiEzsignsignergroupmembershipID.Equals(input.PkiEzsignsignergroupmembershipID))
                ) && 
                (
                    this.FkiEzsignsignergroupID == input.FkiEzsignsignergroupID ||
                    (this.FkiEzsignsignergroupID != null &&
                    this.FkiEzsignsignergroupID.Equals(input.FkiEzsignsignergroupID))
                ) && 
                (
                    this.FkiEzsignsignerID == input.FkiEzsignsignerID ||
                    (this.FkiEzsignsignerID != null &&
                    this.FkiEzsignsignerID.Equals(input.FkiEzsignsignerID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.FkiUsergroupID == input.FkiUsergroupID ||
                    (this.FkiUsergroupID != null &&
                    this.FkiUsergroupID.Equals(input.FkiUsergroupID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignergroupmembershipID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignergroupmembershipID.GetHashCode();
                if (this.FkiEzsignsignergroupID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignsignergroupID.GetHashCode();
                if (this.FkiEzsignsignerID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignsignerID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.FkiUsergroupID != null)
                    hashCode = hashCode * 59 + this.FkiUsergroupID.GetHashCode();
                return hashCode;
            }
        }
    }

}
