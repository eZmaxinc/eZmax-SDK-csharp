/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Subnet Object
    /// </summary>
    [DataContract(Name = "subnet-Request")]
    public partial class SubnetRequest : IEquatable<SubnetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubnetRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubnetRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubnetRequest" /> class.
        /// </summary>
        /// <param name="pkiSubnetID">The unique ID of the Subnet.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey.</param>
        /// <param name="objSubnetDescription">objSubnetDescription (required).</param>
        /// <param name="iSubnetNetwork">The network of the Subnet in integer form. For example 8.8.8.0 would be 134744064 (required).</param>
        /// <param name="iSubnetMask">The mask of the Subnet  in integer form. For example 255.255.255.0 would be 4294967040 (required).</param>
        public SubnetRequest(int pkiSubnetID = default(int), int fkiUserID = default(int), int fkiApikeyID = default(int), MultilingualSubnetDescription objSubnetDescription = default(MultilingualSubnetDescription), long iSubnetNetwork = default(long), long iSubnetMask = default(long))
        {
            // to ensure "objSubnetDescription" is required (not null)
            if (objSubnetDescription == null)
            {
                throw new ArgumentNullException("objSubnetDescription is a required property for SubnetRequest and cannot be null");
            }
            this.ObjSubnetDescription = objSubnetDescription;
            this.ISubnetNetwork = iSubnetNetwork;
            this.ISubnetMask = iSubnetMask;
            this.PkiSubnetID = pkiSubnetID;
            this.FkiUserID = fkiUserID;
            this.FkiApikeyID = fkiApikeyID;
        }

        /// <summary>
        /// The unique ID of the Subnet
        /// </summary>
        /// <value>The unique ID of the Subnet</value>
        /// <example>3</example>
        [DataMember(Name = "pkiSubnetID", EmitDefaultValue = false)]
        public int PkiSubnetID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /// <example>70</example>
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        /// <example>99</example>
        [DataMember(Name = "fkiApikeyID", EmitDefaultValue = false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// Gets or Sets ObjSubnetDescription
        /// </summary>
        [DataMember(Name = "objSubnetDescription", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualSubnetDescription ObjSubnetDescription { get; set; }

        /// <summary>
        /// The network of the Subnet in integer form. For example 8.8.8.0 would be 134744064
        /// </summary>
        /// <value>The network of the Subnet in integer form. For example 8.8.8.0 would be 134744064</value>
        /// <example>134744064</example>
        [DataMember(Name = "iSubnetNetwork", IsRequired = true, EmitDefaultValue = true)]
        public long ISubnetNetwork { get; set; }

        /// <summary>
        /// The mask of the Subnet  in integer form. For example 255.255.255.0 would be 4294967040
        /// </summary>
        /// <value>The mask of the Subnet  in integer form. For example 255.255.255.0 would be 4294967040</value>
        /// <example>4294967040</example>
        [DataMember(Name = "iSubnetMask", IsRequired = true, EmitDefaultValue = true)]
        public long ISubnetMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubnetRequest {\n");
            sb.Append("  PkiSubnetID: ").Append(PkiSubnetID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  ObjSubnetDescription: ").Append(ObjSubnetDescription).Append("\n");
            sb.Append("  ISubnetNetwork: ").Append(ISubnetNetwork).Append("\n");
            sb.Append("  ISubnetMask: ").Append(ISubnetMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubnetRequest);
        }

        /// <summary>
        /// Returns true if SubnetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubnetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubnetRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiSubnetID == input.PkiSubnetID ||
                    this.PkiSubnetID.Equals(input.PkiSubnetID)
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    this.FkiUserID.Equals(input.FkiUserID)
                ) && 
                (
                    this.FkiApikeyID == input.FkiApikeyID ||
                    this.FkiApikeyID.Equals(input.FkiApikeyID)
                ) && 
                (
                    this.ObjSubnetDescription == input.ObjSubnetDescription ||
                    (this.ObjSubnetDescription != null &&
                    this.ObjSubnetDescription.Equals(input.ObjSubnetDescription))
                ) && 
                (
                    this.ISubnetNetwork == input.ISubnetNetwork ||
                    this.ISubnetNetwork.Equals(input.ISubnetNetwork)
                ) && 
                (
                    this.ISubnetMask == input.ISubnetMask ||
                    this.ISubnetMask.Equals(input.ISubnetMask)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiSubnetID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiUserID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiApikeyID.GetHashCode();
                if (this.ObjSubnetDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ObjSubnetDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ISubnetNetwork.GetHashCode();
                hashCode = (hashCode * 59) + this.ISubnetMask.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSubnetID (int) maximum
            if (this.PkiSubnetID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSubnetID, must be a value less than or equal to 65535.", new [] { "PkiSubnetID" });
            }

            // PkiSubnetID (int) minimum
            if (this.PkiSubnetID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSubnetID, must be a value greater than or equal to 0.", new [] { "PkiSubnetID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiApikeyID (int) minimum
            if (this.FkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiApikeyID, must be a value greater than or equal to 0.", new [] { "FkiApikeyID" });
            }

            // ISubnetNetwork (long) maximum
            if (this.ISubnetNetwork > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetNetwork, must be a value less than or equal to 4294967295.", new [] { "ISubnetNetwork" });
            }

            // ISubnetNetwork (long) minimum
            if (this.ISubnetNetwork < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetNetwork, must be a value greater than or equal to 0.", new [] { "ISubnetNetwork" });
            }

            // ISubnetMask (long) maximum
            if (this.ISubnetMask > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetMask, must be a value less than or equal to 4294967295.", new [] { "ISubnetMask" });
            }

            // ISubnetMask (long) minimum
            if (this.ISubnetMask < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetMask, must be a value greater than or equal to 0.", new [] { "ISubnetMask" });
            }

            yield break;
        }
    }

}
