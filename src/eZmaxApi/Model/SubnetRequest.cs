/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Subnet Object
    /// </summary>
    [DataContract(Name = "subnet-Request")]
    public partial class SubnetRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubnetRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubnetRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubnetRequest" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Subnet.</param>
        /// <param name="">The unique ID of the User.</param>
        /// <param name="">The unique ID of the Apikey.</param>
        /// <param name=""> (required).</param>
        /// <param name="">The network of the Subnet in integer form. For example 8.8.8.0 would be 134744064 (required).</param>
        /// <param name="">The mask of the Subnet  in integer form. For example 255.255.255.0 would be 4294967040 (required).</param>
        public SubnetRequest(int  = default(int), int  = default(int), int  = default(int), MultilingualSubnetDescription  = default(MultilingualSubnetDescription), long  = default(long), long  = default(long))
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for SubnetRequest and cannot be null");
            }
            this.ObjSubnetDescription = ;
            this.ISubnetNetwork = ;
            this.ISubnetMask = ;
            this.PkiSubnetID = ;
            this.FkiUserID = ;
            this.FkiApikeyID = ;
        }

        /// <summary>
        /// The unique ID of the Subnet
        /// </summary>
        /// <value>The unique ID of the Subnet</value>
        /* <example>3</example>*/
        [DataMember(Name = "pkiSubnetID", EmitDefaultValue = false)]
        public int PkiSubnetID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiApikeyID", EmitDefaultValue = false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// Gets or Sets ObjSubnetDescription
        /// </summary>
        [DataMember(Name = "objSubnetDescription", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualSubnetDescription ObjSubnetDescription { get; set; }

        /// <summary>
        /// The network of the Subnet in integer form. For example 8.8.8.0 would be 134744064
        /// </summary>
        /// <value>The network of the Subnet in integer form. For example 8.8.8.0 would be 134744064</value>
        /* <example>134744064</example>*/
        [DataMember(Name = "iSubnetNetwork", IsRequired = true, EmitDefaultValue = true)]
        public long ISubnetNetwork { get; set; }

        /// <summary>
        /// The mask of the Subnet  in integer form. For example 255.255.255.0 would be 4294967040
        /// </summary>
        /// <value>The mask of the Subnet  in integer form. For example 255.255.255.0 would be 4294967040</value>
        /* <example>4294967040</example>*/
        [DataMember(Name = "iSubnetMask", IsRequired = true, EmitDefaultValue = true)]
        public long ISubnetMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubnetRequest {\n");
            sb.Append("  PkiSubnetID: ").Append(PkiSubnetID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  ObjSubnetDescription: ").Append(ObjSubnetDescription).Append("\n");
            sb.Append("  ISubnetNetwork: ").Append(ISubnetNetwork).Append("\n");
            sb.Append("  ISubnetMask: ").Append(ISubnetMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSubnetID (int) maximum
            if (this.PkiSubnetID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSubnetID, must be a value less than or equal to 65535.", new [] { "PkiSubnetID" });
            }

            // PkiSubnetID (int) minimum
            if (this.PkiSubnetID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSubnetID, must be a value greater than or equal to 0.", new [] { "PkiSubnetID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiApikeyID (int) minimum
            if (this.FkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiApikeyID, must be a value greater than or equal to 0.", new [] { "FkiApikeyID" });
            }

            // ISubnetNetwork (long) maximum
            if (this.ISubnetNetwork > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetNetwork, must be a value less than or equal to 4294967295.", new [] { "ISubnetNetwork" });
            }

            // ISubnetNetwork (long) minimum
            if (this.ISubnetNetwork < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetNetwork, must be a value greater than or equal to 0.", new [] { "ISubnetNetwork" });
            }

            // ISubnetMask (long) maximum
            if (this.ISubnetMask > (long)4294967295)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetMask, must be a value less than or equal to 4294967295.", new [] { "ISubnetMask" });
            }

            // ISubnetMask (long) minimum
            if (this.ISubnetMask < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ISubnetMask, must be a value greater than or equal to 0.", new [] { "ISubnetMask" });
            }

            yield break;
        }
    }

}
