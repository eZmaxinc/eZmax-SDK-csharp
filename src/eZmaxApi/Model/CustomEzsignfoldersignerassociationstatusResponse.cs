/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignfoldersignerassociationstatus Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "Custom-Ezsignfoldersignerassociationstatus-Response")]
    public partial class CustomEzsignfoldersignerassociationstatusResponse : IEquatable<CustomEzsignfoldersignerassociationstatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationstatusResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignfoldersignerassociationstatusResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationstatusResponse" /> class.
        /// </summary>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="sEzsignfoldersignerassociationstatusLastname">The last name of the Ezsignsigner.</param>
        /// <param name="sEzsignfoldersignerassociationstatusFirstname">The first name of the Ezsignsigner.</param>
        /// <param name="sEzsignfoldersignerassociationstatusDescriptionX">The description of the Ezsignsigner.</param>
        /// <param name="aObjEzsignsignaturestatus">aObjEzsignsignaturestatus (required).</param>
        public CustomEzsignfoldersignerassociationstatusResponse(int fkiEzsignfoldersignerassociationID = default(int), string sEzsignfoldersignerassociationstatusLastname = default(string), string sEzsignfoldersignerassociationstatusFirstname = default(string), string sEzsignfoldersignerassociationstatusDescriptionX = default(string), List<CustomEzsignsignaturestatusResponse> aObjEzsignsignaturestatus = default(List<CustomEzsignsignaturestatusResponse>))
        {
            this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
            // to ensure "aObjEzsignsignaturestatus" is required (not null)
            if (aObjEzsignsignaturestatus == null)
            {
                throw new ArgumentNullException("aObjEzsignsignaturestatus is a required property for CustomEzsignfoldersignerassociationstatusResponse and cannot be null");
            }
            this.AObjEzsignsignaturestatus = aObjEzsignsignaturestatus;
            this.SEzsignfoldersignerassociationstatusLastname = sEzsignfoldersignerassociationstatusLastname;
            this.SEzsignfoldersignerassociationstatusFirstname = sEzsignfoldersignerassociationstatusFirstname;
            this.SEzsignfoldersignerassociationstatusDescriptionX = sEzsignfoldersignerassociationstatusDescriptionX;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        /// <example>20</example>
        [DataMember(Name = "fkiEzsignfoldersignerassociationID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The last name of the Ezsignsigner
        /// </summary>
        /// <value>The last name of the Ezsignsigner</value>
        /// <example>Doe</example>
        [DataMember(Name = "sEzsignfoldersignerassociationstatusLastname", EmitDefaultValue = false)]
        [Obsolete]
        public string SEzsignfoldersignerassociationstatusLastname { get; set; }

        /// <summary>
        /// The first name of the Ezsignsigner
        /// </summary>
        /// <value>The first name of the Ezsignsigner</value>
        /// <example>John</example>
        [DataMember(Name = "sEzsignfoldersignerassociationstatusFirstname", EmitDefaultValue = false)]
        [Obsolete]
        public string SEzsignfoldersignerassociationstatusFirstname { get; set; }

        /// <summary>
        /// The description of the Ezsignsigner
        /// </summary>
        /// <value>The description of the Ezsignsigner</value>
        /// <example>John Doe</example>
        [DataMember(Name = "sEzsignfoldersignerassociationstatusDescriptionX", EmitDefaultValue = false)]
        public string SEzsignfoldersignerassociationstatusDescriptionX { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignsignaturestatus
        /// </summary>
        [DataMember(Name = "a_objEzsignsignaturestatus", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomEzsignsignaturestatusResponse> AObjEzsignsignaturestatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzsignfoldersignerassociationstatusResponse {\n");
            sb.Append("  FkiEzsignfoldersignerassociationID: ").Append(FkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  SEzsignfoldersignerassociationstatusLastname: ").Append(SEzsignfoldersignerassociationstatusLastname).Append("\n");
            sb.Append("  SEzsignfoldersignerassociationstatusFirstname: ").Append(SEzsignfoldersignerassociationstatusFirstname).Append("\n");
            sb.Append("  SEzsignfoldersignerassociationstatusDescriptionX: ").Append(SEzsignfoldersignerassociationstatusDescriptionX).Append("\n");
            sb.Append("  AObjEzsignsignaturestatus: ").Append(AObjEzsignsignaturestatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignfoldersignerassociationstatusResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignfoldersignerassociationstatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignfoldersignerassociationstatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignfoldersignerassociationstatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FkiEzsignfoldersignerassociationID == input.FkiEzsignfoldersignerassociationID ||
                    this.FkiEzsignfoldersignerassociationID.Equals(input.FkiEzsignfoldersignerassociationID)
                ) && 
                (
                    this.SEzsignfoldersignerassociationstatusLastname == input.SEzsignfoldersignerassociationstatusLastname ||
                    (this.SEzsignfoldersignerassociationstatusLastname != null &&
                    this.SEzsignfoldersignerassociationstatusLastname.Equals(input.SEzsignfoldersignerassociationstatusLastname))
                ) && 
                (
                    this.SEzsignfoldersignerassociationstatusFirstname == input.SEzsignfoldersignerassociationstatusFirstname ||
                    (this.SEzsignfoldersignerassociationstatusFirstname != null &&
                    this.SEzsignfoldersignerassociationstatusFirstname.Equals(input.SEzsignfoldersignerassociationstatusFirstname))
                ) && 
                (
                    this.SEzsignfoldersignerassociationstatusDescriptionX == input.SEzsignfoldersignerassociationstatusDescriptionX ||
                    (this.SEzsignfoldersignerassociationstatusDescriptionX != null &&
                    this.SEzsignfoldersignerassociationstatusDescriptionX.Equals(input.SEzsignfoldersignerassociationstatusDescriptionX))
                ) && 
                (
                    this.AObjEzsignsignaturestatus == input.AObjEzsignsignaturestatus ||
                    this.AObjEzsignsignaturestatus != null &&
                    input.AObjEzsignsignaturestatus != null &&
                    this.AObjEzsignsignaturestatus.SequenceEqual(input.AObjEzsignsignaturestatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.FkiEzsignfoldersignerassociationID.GetHashCode();
                if (this.SEzsignfoldersignerassociationstatusLastname != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfoldersignerassociationstatusLastname.GetHashCode();
                }
                if (this.SEzsignfoldersignerassociationstatusFirstname != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfoldersignerassociationstatusFirstname.GetHashCode();
                }
                if (this.SEzsignfoldersignerassociationstatusDescriptionX != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignfoldersignerassociationstatusDescriptionX.GetHashCode();
                }
                if (this.AObjEzsignsignaturestatus != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignsignaturestatus.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiEzsignfoldersignerassociationID (int) minimum
            if (this.FkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationID" });
            }

            yield break;
        }
    }

}
