/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.6
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Gives informations about the user that created the object and the last user to have modified it.  If the object was never modified after creation, objAuditdetailModified won&#39;t be returned. 
    /// </summary>
    [DataContract]
    public partial class CommonAudit :  IEquatable<CommonAudit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonAudit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonAudit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonAudit" /> class.
        /// </summary>
        /// <param name="objAuditdetailCreated">objAuditdetailCreated (required).</param>
        /// <param name="objAuditdetailModified">objAuditdetailModified.</param>
        public CommonAudit(CommonAuditdetail objAuditdetailCreated = default(CommonAuditdetail), CommonAuditdetail objAuditdetailModified = default(CommonAuditdetail))
        {
            // to ensure "objAuditdetailCreated" is required (not null)
            if (objAuditdetailCreated == null)
            {
                throw new InvalidDataException("objAuditdetailCreated is a required property for CommonAudit and cannot be null");
            }
            else
            {
                this.ObjAuditdetailCreated = objAuditdetailCreated;
            }

            this.ObjAuditdetailModified = objAuditdetailModified;
        }

        /// <summary>
        /// Gets or Sets ObjAuditdetailCreated
        /// </summary>
        [DataMember(Name="objAuditdetailCreated", EmitDefaultValue=true)]
        public CommonAuditdetail ObjAuditdetailCreated { get; set; }

        /// <summary>
        /// Gets or Sets ObjAuditdetailModified
        /// </summary>
        [DataMember(Name="objAuditdetailModified", EmitDefaultValue=false)]
        public CommonAuditdetail ObjAuditdetailModified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonAudit {\n");
            sb.Append("  ObjAuditdetailCreated: ").Append(ObjAuditdetailCreated).Append("\n");
            sb.Append("  ObjAuditdetailModified: ").Append(ObjAuditdetailModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonAudit);
        }

        /// <summary>
        /// Returns true if CommonAudit instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonAudit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonAudit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjAuditdetailCreated == input.ObjAuditdetailCreated ||
                    (this.ObjAuditdetailCreated != null &&
                    this.ObjAuditdetailCreated.Equals(input.ObjAuditdetailCreated))
                ) && 
                (
                    this.ObjAuditdetailModified == input.ObjAuditdetailModified ||
                    (this.ObjAuditdetailModified != null &&
                    this.ObjAuditdetailModified.Equals(input.ObjAuditdetailModified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjAuditdetailCreated != null)
                    hashCode = hashCode * 59 + this.ObjAuditdetailCreated.GetHashCode();
                if (this.ObjAuditdetailModified != null)
                    hashCode = hashCode * 59 + this.ObjAuditdetailModified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
