/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Branding List Element
    /// </summary>
    [DataContract(Name = "apikey-ListElement")]
    public partial class ApikeyListElement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApikeyListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApikeyListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApikeyListElement" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Apikey (required).</param>
        /// <param name="">The description of the Apikey in the language of the requester (required).</param>
        /// <param name="">The first name of the user (required).</param>
        /// <param name="">The last name of the user (required).</param>
        /// <param name="">Whether the apikey is active or not (required).</param>
        /// <param name="">Whether the apikey is signed or not (required).</param>
        public ApikeyListElement(int  = default(int), string  = default(string), string  = default(string), string  = default(string), bool  = default(bool), bool  = default(bool))
        {
            this.PkiApikeyID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ApikeyListElement and cannot be null");
            }
            this.SApikeyDescriptionX = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ApikeyListElement and cannot be null");
            }
            this.SUserFirstname = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for ApikeyListElement and cannot be null");
            }
            this.SUserLastname = ;
            this.BApikeyIsactive = ;
            this.BApikeyIssigned = ;
        }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        /* <example>99</example>*/
        [DataMember(Name = "pkiApikeyID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiApikeyID { get; set; }

        /// <summary>
        /// The description of the Apikey in the language of the requester
        /// </summary>
        /// <value>The description of the Apikey in the language of the requester</value>
        /* <example>Project X</example>*/
        [DataMember(Name = "sApikeyDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SApikeyDescriptionX { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        /* <example>John</example>*/
        [DataMember(Name = "sUserFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sUserLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// Whether the apikey is active or not
        /// </summary>
        /// <value>Whether the apikey is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bApikeyIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BApikeyIsactive { get; set; }

        /// <summary>
        /// Whether the apikey is signed or not
        /// </summary>
        /// <value>Whether the apikey is signed or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bApikeyIssigned", IsRequired = true, EmitDefaultValue = true)]
        public bool BApikeyIssigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApikeyListElement {\n");
            sb.Append("  PkiApikeyID: ").Append(PkiApikeyID).Append("\n");
            sb.Append("  SApikeyDescriptionX: ").Append(SApikeyDescriptionX).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  BApikeyIsactive: ").Append(BApikeyIsactive).Append("\n");
            sb.Append("  BApikeyIssigned: ").Append(BApikeyIssigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiApikeyID (int) minimum
            if (this.PkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiApikeyID, must be a value greater than or equal to 0.", new [] { "PkiApikeyID" });
            }

            yield break;
        }
    }

}
