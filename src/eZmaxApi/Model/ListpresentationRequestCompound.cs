/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.7
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Listpresentation Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class ListpresentationRequestCompound :  IEquatable<ListpresentationRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListpresentationRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListpresentationRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListpresentationRequestCompound" /> class.
        /// </summary>
        /// <param name="sListpresentationDescription">A descriptive for the list presentation (required).</param>
        /// <param name="sListpresentationFilter">The filter to apply to the request to limit results. (required).</param>
        /// <param name="sListpresentationOrderby">The order by the user chose (required).</param>
        /// <param name="aSColumnName">An array of column names that the user chose to bee visible (required).</param>
        /// <param name="iListpresentationRowMax">The maximum numbers of results to be returned (required).</param>
        /// <param name="iListpresentationRowOffset">The starting element from where to start retrieving the results. For example if you started at iRowOffset&#x3D;0 and asked for iRowMax&#x3D;100, to get the next 100 results, you could specify iRowOffset&#x3D;100&amp;iRowMax&#x3D;100, (required).</param>
        /// <param name="bListpresentationDefault">Set to true if the user chose this Listpresentation as the default one. A single element should be set to true (required).</param>
        public ListpresentationRequestCompound(string sListpresentationDescription = default(string), string sListpresentationFilter = default(string), string sListpresentationOrderby = default(string), List<string> aSColumnName = default(List<string>), int iListpresentationRowMax = default(int), int iListpresentationRowOffset = default(int), bool bListpresentationDefault = default(bool))
        {
            // to ensure "sListpresentationDescription" is required (not null)
            if (sListpresentationDescription == null)
            {
                throw new InvalidDataException("sListpresentationDescription is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.SListpresentationDescription = sListpresentationDescription;
            }

            // to ensure "sListpresentationFilter" is required (not null)
            if (sListpresentationFilter == null)
            {
                throw new InvalidDataException("sListpresentationFilter is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.SListpresentationFilter = sListpresentationFilter;
            }

            // to ensure "sListpresentationOrderby" is required (not null)
            if (sListpresentationOrderby == null)
            {
                throw new InvalidDataException("sListpresentationOrderby is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.SListpresentationOrderby = sListpresentationOrderby;
            }

            // to ensure "aSColumnName" is required (not null)
            if (aSColumnName == null)
            {
                throw new InvalidDataException("aSColumnName is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.ASColumnName = aSColumnName;
            }

            // to ensure "iListpresentationRowMax" is required (not null)
            if (iListpresentationRowMax == null)
            {
                throw new InvalidDataException("iListpresentationRowMax is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.IListpresentationRowMax = iListpresentationRowMax;
            }

            // to ensure "iListpresentationRowOffset" is required (not null)
            if (iListpresentationRowOffset == null)
            {
                throw new InvalidDataException("iListpresentationRowOffset is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.IListpresentationRowOffset = iListpresentationRowOffset;
            }

            // to ensure "bListpresentationDefault" is required (not null)
            if (bListpresentationDefault == null)
            {
                throw new InvalidDataException("bListpresentationDefault is a required property for ListpresentationRequestCompound and cannot be null");
            }
            else
            {
                this.BListpresentationDefault = bListpresentationDefault;
            }

        }

        /// <summary>
        /// A descriptive for the list presentation
        /// </summary>
        /// <value>A descriptive for the list presentation</value>
        [DataMember(Name="sListpresentationDescription", EmitDefaultValue=true)]
        public string SListpresentationDescription { get; set; }

        /// <summary>
        /// The filter to apply to the request to limit results.
        /// </summary>
        /// <value>The filter to apply to the request to limit results.</value>
        [DataMember(Name="sListpresentationFilter", EmitDefaultValue=true)]
        public string SListpresentationFilter { get; set; }

        /// <summary>
        /// The order by the user chose
        /// </summary>
        /// <value>The order by the user chose</value>
        [DataMember(Name="sListpresentationOrderby", EmitDefaultValue=true)]
        public string SListpresentationOrderby { get; set; }

        /// <summary>
        /// An array of column names that the user chose to bee visible
        /// </summary>
        /// <value>An array of column names that the user chose to bee visible</value>
        [DataMember(Name="a_sColumnName", EmitDefaultValue=true)]
        public List<string> ASColumnName { get; set; }

        /// <summary>
        /// The maximum numbers of results to be returned
        /// </summary>
        /// <value>The maximum numbers of results to be returned</value>
        [DataMember(Name="iListpresentationRowMax", EmitDefaultValue=true)]
        public int IListpresentationRowMax { get; set; }

        /// <summary>
        /// The starting element from where to start retrieving the results. For example if you started at iRowOffset&#x3D;0 and asked for iRowMax&#x3D;100, to get the next 100 results, you could specify iRowOffset&#x3D;100&amp;iRowMax&#x3D;100,
        /// </summary>
        /// <value>The starting element from where to start retrieving the results. For example if you started at iRowOffset&#x3D;0 and asked for iRowMax&#x3D;100, to get the next 100 results, you could specify iRowOffset&#x3D;100&amp;iRowMax&#x3D;100,</value>
        [DataMember(Name="iListpresentationRowOffset", EmitDefaultValue=true)]
        public int IListpresentationRowOffset { get; set; }

        /// <summary>
        /// Set to true if the user chose this Listpresentation as the default one. A single element should be set to true
        /// </summary>
        /// <value>Set to true if the user chose this Listpresentation as the default one. A single element should be set to true</value>
        [DataMember(Name="bListpresentationDefault", EmitDefaultValue=true)]
        public bool BListpresentationDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListpresentationRequestCompound {\n");
            sb.Append("  SListpresentationDescription: ").Append(SListpresentationDescription).Append("\n");
            sb.Append("  SListpresentationFilter: ").Append(SListpresentationFilter).Append("\n");
            sb.Append("  SListpresentationOrderby: ").Append(SListpresentationOrderby).Append("\n");
            sb.Append("  ASColumnName: ").Append(ASColumnName).Append("\n");
            sb.Append("  IListpresentationRowMax: ").Append(IListpresentationRowMax).Append("\n");
            sb.Append("  IListpresentationRowOffset: ").Append(IListpresentationRowOffset).Append("\n");
            sb.Append("  BListpresentationDefault: ").Append(BListpresentationDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListpresentationRequestCompound);
        }

        /// <summary>
        /// Returns true if ListpresentationRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ListpresentationRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListpresentationRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SListpresentationDescription == input.SListpresentationDescription ||
                    (this.SListpresentationDescription != null &&
                    this.SListpresentationDescription.Equals(input.SListpresentationDescription))
                ) && 
                (
                    this.SListpresentationFilter == input.SListpresentationFilter ||
                    (this.SListpresentationFilter != null &&
                    this.SListpresentationFilter.Equals(input.SListpresentationFilter))
                ) && 
                (
                    this.SListpresentationOrderby == input.SListpresentationOrderby ||
                    (this.SListpresentationOrderby != null &&
                    this.SListpresentationOrderby.Equals(input.SListpresentationOrderby))
                ) && 
                (
                    this.ASColumnName == input.ASColumnName ||
                    this.ASColumnName != null &&
                    input.ASColumnName != null &&
                    this.ASColumnName.SequenceEqual(input.ASColumnName)
                ) && 
                (
                    this.IListpresentationRowMax == input.IListpresentationRowMax ||
                    (this.IListpresentationRowMax != null &&
                    this.IListpresentationRowMax.Equals(input.IListpresentationRowMax))
                ) && 
                (
                    this.IListpresentationRowOffset == input.IListpresentationRowOffset ||
                    (this.IListpresentationRowOffset != null &&
                    this.IListpresentationRowOffset.Equals(input.IListpresentationRowOffset))
                ) && 
                (
                    this.BListpresentationDefault == input.BListpresentationDefault ||
                    (this.BListpresentationDefault != null &&
                    this.BListpresentationDefault.Equals(input.BListpresentationDefault))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SListpresentationDescription != null)
                    hashCode = hashCode * 59 + this.SListpresentationDescription.GetHashCode();
                if (this.SListpresentationFilter != null)
                    hashCode = hashCode * 59 + this.SListpresentationFilter.GetHashCode();
                if (this.SListpresentationOrderby != null)
                    hashCode = hashCode * 59 + this.SListpresentationOrderby.GetHashCode();
                if (this.ASColumnName != null)
                    hashCode = hashCode * 59 + this.ASColumnName.GetHashCode();
                if (this.IListpresentationRowMax != null)
                    hashCode = hashCode * 59 + this.IListpresentationRowMax.GetHashCode();
                if (this.IListpresentationRowOffset != null)
                    hashCode = hashCode * 59 + this.IListpresentationRowOffset.GetHashCode();
                if (this.BListpresentationDefault != null)
                    hashCode = hashCode * 59 + this.BListpresentationDefault.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
