/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Discussionmembership Object
    /// </summary>
    [DataContract(Name = "discussionmembership-Request")]
    public partial class DiscussionmembershipRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscussionmembershipRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DiscussionmembershipRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscussionmembershipRequest" /> class.
        /// </summary>
        /// <param name="pkiDiscussionmembershipID">The unique ID of the Discussionmembership.</param>
        /// <param name="fkiDiscussionID">The unique ID of the Discussion (required).</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="fkiUsergroupID">The unique ID of the Usergroup.</param>
        /// <param name="fkiModulesectionID">The unique ID of the Modulesection.</param>
        /// <param name="dtDiscussionmembershipJoined">The joined date of the Discussionmembership (required).</param>
        public DiscussionmembershipRequest(int pkiDiscussionmembershipID = default(int), int fkiDiscussionID = default(int), int fkiUserID = default(int), int fkiUsergroupID = default(int), int fkiModulesectionID = default(int), string dtDiscussionmembershipJoined = default(string))
        {
            this.FkiDiscussionID = fkiDiscussionID;
            // to ensure "dtDiscussionmembershipJoined" is required (not null)
            if (dtDiscussionmembershipJoined == null)
            {
                throw new ArgumentNullException("dtDiscussionmembershipJoined is a required property for DiscussionmembershipRequest and cannot be null");
            }
            this.DtDiscussionmembershipJoined = dtDiscussionmembershipJoined;
            this.PkiDiscussionmembershipID = pkiDiscussionmembershipID;
            this.FkiUserID = fkiUserID;
            this.FkiUsergroupID = fkiUsergroupID;
            this.FkiModulesectionID = fkiModulesectionID;
        }

        /// <summary>
        /// The unique ID of the Discussionmembership
        /// </summary>
        /// <value>The unique ID of the Discussionmembership</value>
        /* <example>165</example>*/
        [DataMember(Name = "pkiDiscussionmembershipID", EmitDefaultValue = false)]
        public int PkiDiscussionmembershipID { get; set; }

        /// <summary>
        /// The unique ID of the Discussion
        /// </summary>
        /// <value>The unique ID of the Discussion</value>
        /* <example>125</example>*/
        [DataMember(Name = "fkiDiscussionID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiDiscussionID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUsergroupID", EmitDefaultValue = false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Modulesection
        /// </summary>
        /// <value>The unique ID of the Modulesection</value>
        /* <example>53</example>*/
        [DataMember(Name = "fkiModulesectionID", EmitDefaultValue = false)]
        public int FkiModulesectionID { get; set; }

        /// <summary>
        /// The joined date of the Discussionmembership
        /// </summary>
        /// <value>The joined date of the Discussionmembership</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtDiscussionmembershipJoined", IsRequired = true, EmitDefaultValue = true)]
        public string DtDiscussionmembershipJoined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscussionmembershipRequest {\n");
            sb.Append("  PkiDiscussionmembershipID: ").Append(PkiDiscussionmembershipID).Append("\n");
            sb.Append("  FkiDiscussionID: ").Append(FkiDiscussionID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiModulesectionID: ").Append(FkiModulesectionID).Append("\n");
            sb.Append("  DtDiscussionmembershipJoined: ").Append(DtDiscussionmembershipJoined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiDiscussionmembershipID (int) maximum
            if (this.PkiDiscussionmembershipID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiDiscussionmembershipID, must be a value less than or equal to 16777215.", new [] { "PkiDiscussionmembershipID" });
            }

            // PkiDiscussionmembershipID (int) minimum
            if (this.PkiDiscussionmembershipID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiDiscussionmembershipID, must be a value greater than or equal to 0.", new [] { "PkiDiscussionmembershipID" });
            }

            // FkiDiscussionID (int) maximum
            if (this.FkiDiscussionID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiDiscussionID, must be a value less than or equal to 16777215.", new [] { "FkiDiscussionID" });
            }

            // FkiDiscussionID (int) minimum
            if (this.FkiDiscussionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiDiscussionID, must be a value greater than or equal to 0.", new [] { "FkiDiscussionID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiUsergroupID (int) maximum
            if (this.FkiUsergroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value less than or equal to 255.", new [] { "FkiUsergroupID" });
            }

            // FkiUsergroupID (int) minimum
            if (this.FkiUsergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value greater than or equal to 0.", new [] { "FkiUsergroupID" });
            }

            // FkiModulesectionID (int) minimum
            if (this.FkiModulesectionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModulesectionID, must be a value greater than or equal to 0.", new [] { "FkiModulesectionID" });
            }

            if (this.DtDiscussionmembershipJoined != null) {
                // DtDiscussionmembershipJoined (string) pattern
                Regex regexDtDiscussionmembershipJoined = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
                if (!regexDtDiscussionmembershipJoined.Match(this.DtDiscussionmembershipJoined).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtDiscussionmembershipJoined, must match a pattern of " + regexDtDiscussionmembershipJoined, new [] { "DtDiscussionmembershipJoined" });
                }
            }

            yield break;
        }
    }

}
