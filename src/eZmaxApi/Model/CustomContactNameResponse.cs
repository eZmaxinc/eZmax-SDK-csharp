/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom ContactName Object
    /// </summary>
    [DataContract(Name = "Custom-ContactName-Response")]
    public partial class CustomContactNameResponse : IEquatable<CustomContactNameResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomContactNameResponse" /> class.
        /// </summary>
        /// <param name="sContactFirstname">The First name of the contact.</param>
        /// <param name="sContactLastname">The Last name of the contact.</param>
        /// <param name="sContactCompany">The Company name of the contact.</param>
        public CustomContactNameResponse(string sContactFirstname = default(string), string sContactLastname = default(string), string sContactCompany = default(string))
        {
            this.SContactFirstname = sContactFirstname;
            this.SContactLastname = sContactLastname;
            this.SContactCompany = sContactCompany;
        }

        /// <summary>
        /// The First name of the contact
        /// </summary>
        /// <value>The First name of the contact</value>
		/* <example>John</example>*/
        [DataMember(Name = "sContactFirstname", EmitDefaultValue = false)]
        public string SContactFirstname { get; set; }

        /// <summary>
        /// The Last name of the contact
        /// </summary>
        /// <value>The Last name of the contact</value>
		/* <example>Doe</example>*/
        [DataMember(Name = "sContactLastname", EmitDefaultValue = false)]
        public string SContactLastname { get; set; }

        /// <summary>
        /// The Company name of the contact
        /// </summary>
        /// <value>The Company name of the contact</value>
		/* <example>eZmax Solutions Inc.</example>*/
        [DataMember(Name = "sContactCompany", EmitDefaultValue = false)]
        public string SContactCompany { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomContactNameResponse {\n");
            sb.Append("  SContactFirstname: ").Append(SContactFirstname).Append("\n");
            sb.Append("  SContactLastname: ").Append(SContactLastname).Append("\n");
            sb.Append("  SContactCompany: ").Append(SContactCompany).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomContactNameResponse);
        }

        /// <summary>
        /// Returns true if CustomContactNameResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomContactNameResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomContactNameResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SContactFirstname == input.SContactFirstname ||
                    (this.SContactFirstname != null &&
                    this.SContactFirstname.Equals(input.SContactFirstname))
                ) && 
                (
                    this.SContactLastname == input.SContactLastname ||
                    (this.SContactLastname != null &&
                    this.SContactLastname.Equals(input.SContactLastname))
                ) && 
                (
                    this.SContactCompany == input.SContactCompany ||
                    (this.SContactCompany != null &&
                    this.SContactCompany.Equals(input.SContactCompany))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SContactFirstname != null)
                {
                    hashCode = (hashCode * 59) + this.SContactFirstname.GetHashCode();
                }
                if (this.SContactLastname != null)
                {
                    hashCode = (hashCode * 59) + this.SContactLastname.GetHashCode();
                }
                if (this.SContactCompany != null)
                {
                    hashCode = (hashCode * 59) + this.SContactCompany.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
