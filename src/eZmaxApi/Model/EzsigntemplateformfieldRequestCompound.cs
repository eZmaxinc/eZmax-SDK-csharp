/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigntemplateformfield Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsigntemplateformfield-RequestCompound")]
    public partial class EzsigntemplateformfieldRequestCompound : EzsigntemplateformfieldRequest, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateformfieldRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldRequestCompound" /> class.
        /// </summary>
        /// <param name="aObjEzsigntemplateelementdependency">aObjEzsigntemplateelementdependency.</param>
        /// <param name="pkiEzsigntemplateformfieldID">The unique ID of the Ezsigntemplateformfield.</param>
        /// <param name="eEzsigntemplateformfieldPositioning">eEzsigntemplateformfieldPositioning.</param>
        /// <param name="iEzsigntemplatedocumentpagePagenumber">The page number in the Ezsigntemplatedocument (required).</param>
        /// <param name="sEzsigntemplateformfieldLabel">The Label for the Ezsigntemplateformfield (required).</param>
        /// <param name="sEzsigntemplateformfieldValue">The value for the Ezsigntemplateformfield.</param>
        /// <param name="iEzsigntemplateformfieldX">The X coordinate (Horizontal) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate..</param>
        /// <param name="iEzsigntemplateformfieldY">The Y coordinate (Vertical) where to put the Ezsigntemplateformfield on the Ezsigntemplatepage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplateformfield 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate..</param>
        /// <param name="iEzsigntemplateformfieldWidth">The Width of the Ezsigntemplateformfield in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsigntemplateformfieldHeight">The Height of the Ezsigntemplateformfield in pixels calculated at 100 DPI  (required).</param>
        /// <param name="bEzsigntemplateformfieldAutocomplete">Whether the Ezsigntemplateformfield allows the use of the autocomplete of the browser.  This can only be set if eEzsigntemplateformfieldgroupType is **Text**.</param>
        /// <param name="bEzsigntemplateformfieldSelected">Whether the Ezsigntemplateformfield is selected or not by default.  This can only be set if eEzsigntemplateformfieldgroupType is **Checkbox** or **Radio**.</param>
        /// <param name="eEzsigntemplateformfieldDependencyrequirement">eEzsigntemplateformfieldDependencyrequirement.</param>
        /// <param name="sEzsigntemplateformfieldPositioningpattern">The string pattern to search for the positioning. **This is not a regexp**  This will be required if **eEzsigntemplateformfieldPositioning** is set to **PerCoordinates**.</param>
        /// <param name="iEzsigntemplateformfieldPositioningoffsetx">The offset X  This will be required if **eEzsigntemplateformfieldPositioning** is set to **PerCoordinates**.</param>
        /// <param name="iEzsigntemplateformfieldPositioningoffsety">The offset Y  This will be required if **eEzsigntemplateformfieldPositioning** is set to **PerCoordinates**.</param>
        /// <param name="eEzsigntemplateformfieldPositioningoccurence">eEzsigntemplateformfieldPositioningoccurence.</param>
        /// <param name="eEzsigntemplateformfieldHorizontalalignment">eEzsigntemplateformfieldHorizontalalignment.</param>
        /// <param name="objTextstylestatic">objTextstylestatic.</param>
        public EzsigntemplateformfieldRequestCompound(List<EzsigntemplateelementdependencyRequestCompound> aObjEzsigntemplateelementdependency = default(List<EzsigntemplateelementdependencyRequestCompound>), int pkiEzsigntemplateformfieldID = default(int), FieldEEzsigntemplateformfieldPositioning? eEzsigntemplateformfieldPositioning = default(FieldEEzsigntemplateformfieldPositioning?), int iEzsigntemplatedocumentpagePagenumber = default(int), string sEzsigntemplateformfieldLabel = default(string), string sEzsigntemplateformfieldValue = default(string), int iEzsigntemplateformfieldX = default(int), int iEzsigntemplateformfieldY = default(int), int iEzsigntemplateformfieldWidth = default(int), int iEzsigntemplateformfieldHeight = default(int), bool bEzsigntemplateformfieldAutocomplete = default(bool), bool bEzsigntemplateformfieldSelected = default(bool), FieldEEzsigntemplateformfieldDependencyrequirement? eEzsigntemplateformfieldDependencyrequirement = default(FieldEEzsigntemplateformfieldDependencyrequirement?), string sEzsigntemplateformfieldPositioningpattern = default(string), int iEzsigntemplateformfieldPositioningoffsetx = default(int), int iEzsigntemplateformfieldPositioningoffsety = default(int), FieldEEzsigntemplateformfieldPositioningoccurence? eEzsigntemplateformfieldPositioningoccurence = default(FieldEEzsigntemplateformfieldPositioningoccurence?), EnumHorizontalalignment? eEzsigntemplateformfieldHorizontalalignment = default(EnumHorizontalalignment?), TextstylestaticRequestCompound objTextstylestatic = default(TextstylestaticRequestCompound)) : base()
        {
            this.AObjEzsigntemplateelementdependency = aObjEzsigntemplateelementdependency;
        }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplateelementdependency
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplateelementdependency", EmitDefaultValue = false)]
        public List<EzsigntemplateelementdependencyRequestCompound> AObjEzsigntemplateelementdependency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateformfieldRequestCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AObjEzsigntemplateelementdependency: ").Append(AObjEzsigntemplateelementdependency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
