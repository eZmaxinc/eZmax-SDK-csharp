/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.12
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigntemplatesignaturecustomdate Object
    /// </summary>
    [DataContract]
    public partial class EzsigntemplatesignaturecustomdateResponse :  IEquatable<EzsigntemplatesignaturecustomdateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignaturecustomdateResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatesignaturecustomdateResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignaturecustomdateResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatesignaturecustomdateID">The unique ID of the Ezsigntemplatesignaturecustomdate (required).</param>
        /// <param name="iEzsigntemplatesignaturecustomdateX">The X coordinate (Horizontal) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsigntemplatesignaturecustomdateY">The Y coordinate (Vertical) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="sEzsigntemplatesignaturecustomdateFormat">The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST |  (required).</param>
        public EzsigntemplatesignaturecustomdateResponse(int pkiEzsigntemplatesignaturecustomdateID = default(int), int iEzsigntemplatesignaturecustomdateX = default(int), int iEzsigntemplatesignaturecustomdateY = default(int), string sEzsigntemplatesignaturecustomdateFormat = default(string))
        {
            // to ensure "pkiEzsigntemplatesignaturecustomdateID" is required (not null)
            if (pkiEzsigntemplatesignaturecustomdateID == null)
            {
                throw new InvalidDataException("pkiEzsigntemplatesignaturecustomdateID is a required property for EzsigntemplatesignaturecustomdateResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigntemplatesignaturecustomdateID = pkiEzsigntemplatesignaturecustomdateID;
            }

            // to ensure "iEzsigntemplatesignaturecustomdateX" is required (not null)
            if (iEzsigntemplatesignaturecustomdateX == null)
            {
                throw new InvalidDataException("iEzsigntemplatesignaturecustomdateX is a required property for EzsigntemplatesignaturecustomdateResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplatesignaturecustomdateX = iEzsigntemplatesignaturecustomdateX;
            }

            // to ensure "iEzsigntemplatesignaturecustomdateY" is required (not null)
            if (iEzsigntemplatesignaturecustomdateY == null)
            {
                throw new InvalidDataException("iEzsigntemplatesignaturecustomdateY is a required property for EzsigntemplatesignaturecustomdateResponse and cannot be null");
            }
            else
            {
                this.IEzsigntemplatesignaturecustomdateY = iEzsigntemplatesignaturecustomdateY;
            }

            // to ensure "sEzsigntemplatesignaturecustomdateFormat" is required (not null)
            if (sEzsigntemplatesignaturecustomdateFormat == null)
            {
                throw new InvalidDataException("sEzsigntemplatesignaturecustomdateFormat is a required property for EzsigntemplatesignaturecustomdateResponse and cannot be null");
            }
            else
            {
                this.SEzsigntemplatesignaturecustomdateFormat = sEzsigntemplatesignaturecustomdateFormat;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesignaturecustomdate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesignaturecustomdate</value>
        [DataMember(Name="pkiEzsigntemplatesignaturecustomdateID", EmitDefaultValue=true)]
        public int PkiEzsigntemplatesignaturecustomdateID { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsigntemplatesignaturecustomdateX", EmitDefaultValue=true)]
        public int IEzsigntemplatesignaturecustomdateX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsigntemplatesignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignaturecustomdate 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsigntemplatesignaturecustomdateY", EmitDefaultValue=true)]
        public int IEzsigntemplatesignaturecustomdateY { get; set; }

        /// <summary>
        /// The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | 
        /// </summary>
        /// <value>The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | </value>
        [DataMember(Name="sEzsigntemplatesignaturecustomdateFormat", EmitDefaultValue=true)]
        public string SEzsigntemplatesignaturecustomdateFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplatesignaturecustomdateResponse {\n");
            sb.Append("  PkiEzsigntemplatesignaturecustomdateID: ").Append(PkiEzsigntemplatesignaturecustomdateID).Append("\n");
            sb.Append("  IEzsigntemplatesignaturecustomdateX: ").Append(IEzsigntemplatesignaturecustomdateX).Append("\n");
            sb.Append("  IEzsigntemplatesignaturecustomdateY: ").Append(IEzsigntemplatesignaturecustomdateY).Append("\n");
            sb.Append("  SEzsigntemplatesignaturecustomdateFormat: ").Append(SEzsigntemplatesignaturecustomdateFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatesignaturecustomdateResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplatesignaturecustomdateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatesignaturecustomdateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatesignaturecustomdateResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigntemplatesignaturecustomdateID == input.PkiEzsigntemplatesignaturecustomdateID ||
                    (this.PkiEzsigntemplatesignaturecustomdateID != null &&
                    this.PkiEzsigntemplatesignaturecustomdateID.Equals(input.PkiEzsigntemplatesignaturecustomdateID))
                ) && 
                (
                    this.IEzsigntemplatesignaturecustomdateX == input.IEzsigntemplatesignaturecustomdateX ||
                    (this.IEzsigntemplatesignaturecustomdateX != null &&
                    this.IEzsigntemplatesignaturecustomdateX.Equals(input.IEzsigntemplatesignaturecustomdateX))
                ) && 
                (
                    this.IEzsigntemplatesignaturecustomdateY == input.IEzsigntemplatesignaturecustomdateY ||
                    (this.IEzsigntemplatesignaturecustomdateY != null &&
                    this.IEzsigntemplatesignaturecustomdateY.Equals(input.IEzsigntemplatesignaturecustomdateY))
                ) && 
                (
                    this.SEzsigntemplatesignaturecustomdateFormat == input.SEzsigntemplatesignaturecustomdateFormat ||
                    (this.SEzsigntemplatesignaturecustomdateFormat != null &&
                    this.SEzsigntemplatesignaturecustomdateFormat.Equals(input.SEzsigntemplatesignaturecustomdateFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigntemplatesignaturecustomdateID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplatesignaturecustomdateID.GetHashCode();
                if (this.IEzsigntemplatesignaturecustomdateX != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatesignaturecustomdateX.GetHashCode();
                if (this.IEzsigntemplatesignaturecustomdateY != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplatesignaturecustomdateY.GetHashCode();
                if (this.SEzsigntemplatesignaturecustomdateFormat != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplatesignaturecustomdateFormat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntemplatesignaturecustomdateID (int) minimum
            if(this.PkiEzsigntemplatesignaturecustomdateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatesignaturecustomdateID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatesignaturecustomdateID" });
            }



            // IEzsigntemplatesignaturecustomdateX (int) minimum
            if(this.IEzsigntemplatesignaturecustomdateX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatesignaturecustomdateX, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatesignaturecustomdateX" });
            }



            // IEzsigntemplatesignaturecustomdateY (int) minimum
            if(this.IEzsigntemplatesignaturecustomdateY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatesignaturecustomdateY, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatesignaturecustomdateY" });
            }

            yield break;
        }
    }

}
