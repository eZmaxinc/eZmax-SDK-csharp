/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplateglobal Object
    /// </summary>
    [DataContract(Name = "ezsigntemplateglobal-Response")]
    public partial class EzsigntemplateglobalResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigntemplateglobalModule
        /// </summary>
        [DataMember(Name = "eEzsigntemplateglobalModule", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplateglobalModule EEzsigntemplateglobalModule { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateglobalSupplier
        /// </summary>
        [DataMember(Name = "eEzsigntemplateglobalSupplier", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplateglobalSupplier EEzsigntemplateglobalSupplier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateglobalResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateglobalResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateglobalResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateglobalID">The unique ID of the Ezsigntemplateglobal (required).</param>
        /// <param name="fkiEzsigntemplateglobaldocumentID">The unique ID of the Ezsigntemplateglobaldocument (required).</param>
        /// <param name="fkiModuleID">The unique ID of the Module (required).</param>
        /// <param name="sModuleNameX">The Name of the Module in the language of the requester.</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="eEzsigntemplateglobalModule">eEzsigntemplateglobalModule (required).</param>
        /// <param name="eEzsigntemplateglobalSupplier">eEzsigntemplateglobalSupplier (required).</param>
        /// <param name="sEzsigntemplateglobalCode">The Code of the Ezsigntemplateglobal (required).</param>
        /// <param name="sEzsigntemplateglobalDescription">The description of the Ezsigntemplate (required).</param>
        public EzsigntemplateglobalResponse(int pkiEzsigntemplateglobalID = default(int), int fkiEzsigntemplateglobaldocumentID = default(int), int fkiModuleID = default(int), string sModuleNameX = default(string), int fkiLanguageID = default(int), string sLanguageNameX = default(string), FieldEEzsigntemplateglobalModule eEzsigntemplateglobalModule = default(FieldEEzsigntemplateglobalModule), FieldEEzsigntemplateglobalSupplier eEzsigntemplateglobalSupplier = default(FieldEEzsigntemplateglobalSupplier), string sEzsigntemplateglobalCode = default(string), string sEzsigntemplateglobalDescription = default(string))
        {
            this.PkiEzsigntemplateglobalID = pkiEzsigntemplateglobalID;
            this.FkiEzsigntemplateglobaldocumentID = fkiEzsigntemplateglobaldocumentID;
            this.FkiModuleID = fkiModuleID;
            this.FkiLanguageID = fkiLanguageID;
            // to ensure "sLanguageNameX" is required (not null)
            if (sLanguageNameX == null)
            {
                throw new ArgumentNullException("sLanguageNameX is a required property for EzsigntemplateglobalResponse and cannot be null");
            }
            this.SLanguageNameX = sLanguageNameX;
            this.EEzsigntemplateglobalModule = eEzsigntemplateglobalModule;
            this.EEzsigntemplateglobalSupplier = eEzsigntemplateglobalSupplier;
            // to ensure "sEzsigntemplateglobalCode" is required (not null)
            if (sEzsigntemplateglobalCode == null)
            {
                throw new ArgumentNullException("sEzsigntemplateglobalCode is a required property for EzsigntemplateglobalResponse and cannot be null");
            }
            this.SEzsigntemplateglobalCode = sEzsigntemplateglobalCode;
            // to ensure "sEzsigntemplateglobalDescription" is required (not null)
            if (sEzsigntemplateglobalDescription == null)
            {
                throw new ArgumentNullException("sEzsigntemplateglobalDescription is a required property for EzsigntemplateglobalResponse and cannot be null");
            }
            this.SEzsigntemplateglobalDescription = sEzsigntemplateglobalDescription;
            this.SModuleNameX = sModuleNameX;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateglobal
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateglobal</value>
        /* <example>36</example>*/
        [DataMember(Name = "pkiEzsigntemplateglobalID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplateglobalID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplateglobaldocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateglobaldocument</value>
        /* <example>133</example>*/
        [DataMember(Name = "fkiEzsigntemplateglobaldocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigntemplateglobaldocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Module
        /// </summary>
        /// <value>The unique ID of the Module</value>
        /* <example>40</example>*/
        [DataMember(Name = "fkiModuleID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiModuleID { get; set; }

        /// <summary>
        /// The Name of the Module in the language of the requester
        /// </summary>
        /// <value>The Name of the Module in the language of the requester</value>
        /* <example>Purchase</example>*/
        [DataMember(Name = "sModuleNameX", EmitDefaultValue = false)]
        public string SModuleNameX { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiLanguageID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiLanguageID { get; set; }

        /// <summary>
        /// The Name of the Language in the language of the requester
        /// </summary>
        /// <value>The Name of the Language in the language of the requester</value>
        /* <example>English</example>*/
        [DataMember(Name = "sLanguageNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SLanguageNameX { get; set; }

        /// <summary>
        /// The Code of the Ezsigntemplateglobal
        /// </summary>
        /// <value>The Code of the Ezsigntemplateglobal</value>
        /* <example>DR-FR</example>*/
        [DataMember(Name = "sEzsigntemplateglobalCode", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplateglobalCode { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplate
        /// </summary>
        /// <value>The description of the Ezsigntemplate</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzsigntemplateglobalDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplateglobalDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateglobalResponse {\n");
            sb.Append("  PkiEzsigntemplateglobalID: ").Append(PkiEzsigntemplateglobalID).Append("\n");
            sb.Append("  FkiEzsigntemplateglobaldocumentID: ").Append(FkiEzsigntemplateglobaldocumentID).Append("\n");
            sb.Append("  FkiModuleID: ").Append(FkiModuleID).Append("\n");
            sb.Append("  SModuleNameX: ").Append(SModuleNameX).Append("\n");
            sb.Append("  FkiLanguageID: ").Append(FkiLanguageID).Append("\n");
            sb.Append("  SLanguageNameX: ").Append(SLanguageNameX).Append("\n");
            sb.Append("  EEzsigntemplateglobalModule: ").Append(EEzsigntemplateglobalModule).Append("\n");
            sb.Append("  EEzsigntemplateglobalSupplier: ").Append(EEzsigntemplateglobalSupplier).Append("\n");
            sb.Append("  SEzsigntemplateglobalCode: ").Append(SEzsigntemplateglobalCode).Append("\n");
            sb.Append("  SEzsigntemplateglobalDescription: ").Append(SEzsigntemplateglobalDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplateglobalID (int) minimum
            if (this.PkiEzsigntemplateglobalID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsigntemplateglobalID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateglobalID" });
            }

            // FkiEzsigntemplateglobaldocumentID (int) minimum
            if (this.FkiEzsigntemplateglobaldocumentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiEzsigntemplateglobaldocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateglobaldocumentID" });
            }

            // FkiModuleID (int) minimum
            if (this.FkiModuleID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiModuleID, must be a value greater than or equal to 0.", new [] { "FkiModuleID" });
            }

            // FkiLanguageID (int) maximum
            if (this.FkiLanguageID > (int)2)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value less than or equal to 2.", new [] { "FkiLanguageID" });
            }

            // FkiLanguageID (int) minimum
            if (this.FkiLanguageID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiLanguageID, must be a value greater than or equal to 1.", new [] { "FkiLanguageID" });
            }

            if (this.SEzsigntemplateglobalCode != null) {
                // SEzsigntemplateglobalCode (string) pattern
                Regex regexSEzsigntemplateglobalCode = new Regex(@"^.{0,10}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplateglobalCode.Match(this.SEzsigntemplateglobalCode).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplateglobalCode, must match a pattern of " + regexSEzsigntemplateglobalCode, new [] { "SEzsigntemplateglobalCode" });
                }
            }

            yield break;
        }
    }

}
