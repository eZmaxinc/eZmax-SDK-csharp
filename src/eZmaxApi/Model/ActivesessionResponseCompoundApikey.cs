/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.5
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Activesession-&gt;Apikey object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class ActivesessionResponseCompoundApikey :  IEquatable<ActivesessionResponseCompoundApikey>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundApikey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponseCompoundApikey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundApikey" /> class.
        /// </summary>
        /// <param name="pkiApikeyID">The unique ID of the Apikey (required).</param>
        /// <param name="sApikeyDescriptionX">The description of the Apikey in the language of the requester (required).</param>
        public ActivesessionResponseCompoundApikey(int pkiApikeyID = default(int), string sApikeyDescriptionX = default(string))
        {
            // to ensure "pkiApikeyID" is required (not null)
            if (pkiApikeyID == null)
            {
                throw new InvalidDataException("pkiApikeyID is a required property for ActivesessionResponseCompoundApikey and cannot be null");
            }
            else
            {
                this.PkiApikeyID = pkiApikeyID;
            }

            // to ensure "sApikeyDescriptionX" is required (not null)
            if (sApikeyDescriptionX == null)
            {
                throw new InvalidDataException("sApikeyDescriptionX is a required property for ActivesessionResponseCompoundApikey and cannot be null");
            }
            else
            {
                this.SApikeyDescriptionX = sApikeyDescriptionX;
            }

        }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        [DataMember(Name="pkiApikeyID", EmitDefaultValue=true)]
        public int PkiApikeyID { get; set; }

        /// <summary>
        /// The description of the Apikey in the language of the requester
        /// </summary>
        /// <value>The description of the Apikey in the language of the requester</value>
        [DataMember(Name="sApikeyDescriptionX", EmitDefaultValue=true)]
        public string SApikeyDescriptionX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivesessionResponseCompoundApikey {\n");
            sb.Append("  PkiApikeyID: ").Append(PkiApikeyID).Append("\n");
            sb.Append("  SApikeyDescriptionX: ").Append(SApikeyDescriptionX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivesessionResponseCompoundApikey);
        }

        /// <summary>
        /// Returns true if ActivesessionResponseCompoundApikey instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivesessionResponseCompoundApikey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivesessionResponseCompoundApikey input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiApikeyID == input.PkiApikeyID ||
                    (this.PkiApikeyID != null &&
                    this.PkiApikeyID.Equals(input.PkiApikeyID))
                ) && 
                (
                    this.SApikeyDescriptionX == input.SApikeyDescriptionX ||
                    (this.SApikeyDescriptionX != null &&
                    this.SApikeyDescriptionX.Equals(input.SApikeyDescriptionX))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiApikeyID != null)
                    hashCode = hashCode * 59 + this.PkiApikeyID.GetHashCode();
                if (this.SApikeyDescriptionX != null)
                    hashCode = hashCode * 59 + this.SApikeyDescriptionX.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
