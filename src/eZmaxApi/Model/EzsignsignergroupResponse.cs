/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignergroup Object
    /// </summary>
    [DataContract]
    public partial class EzsignsignergroupResponse :  IEquatable<EzsignsignergroupResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignergroupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignergroupResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignergroupID">The unique ID of the Ezsignsignergroup (required).</param>
        /// <param name="objEzsignsignergroupDescription">objEzsignsignergroupDescription (required).</param>
        /// <param name="sEzsignsignergroupDescriptionX">The Description of the Ezsignsignergroup in the language of the requester.</param>
        public EzsignsignergroupResponse(int pkiEzsignsignergroupID = default(int), MultilingualEzsignsignergroupDescription objEzsignsignergroupDescription = default(MultilingualEzsignsignergroupDescription), string sEzsignsignergroupDescriptionX = default(string))
        {
            // to ensure "pkiEzsignsignergroupID" is required (not null)
            if (pkiEzsignsignergroupID == null)
            {
                throw new InvalidDataException("pkiEzsignsignergroupID is a required property for EzsignsignergroupResponse and cannot be null");
            }
            else
            {
                this.PkiEzsignsignergroupID = pkiEzsignsignergroupID;
            }

            // to ensure "objEzsignsignergroupDescription" is required (not null)
            if (objEzsignsignergroupDescription == null)
            {
                throw new InvalidDataException("objEzsignsignergroupDescription is a required property for EzsignsignergroupResponse and cannot be null");
            }
            else
            {
                this.ObjEzsignsignergroupDescription = objEzsignsignergroupDescription;
            }

            this.SEzsignsignergroupDescriptionX = sEzsignsignergroupDescriptionX;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignergroup
        /// </summary>
        /// <value>The unique ID of the Ezsignsignergroup</value>
        [DataMember(Name="pkiEzsignsignergroupID", EmitDefaultValue=true)]
        public int PkiEzsignsignergroupID { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsignergroupDescription
        /// </summary>
        [DataMember(Name="objEzsignsignergroupDescription", EmitDefaultValue=true)]
        public MultilingualEzsignsignergroupDescription ObjEzsignsignergroupDescription { get; set; }

        /// <summary>
        /// The Description of the Ezsignsignergroup in the language of the requester
        /// </summary>
        /// <value>The Description of the Ezsignsignergroup in the language of the requester</value>
        [DataMember(Name="sEzsignsignergroupDescriptionX", EmitDefaultValue=false)]
        public string SEzsignsignergroupDescriptionX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignergroupResponse {\n");
            sb.Append("  PkiEzsignsignergroupID: ").Append(PkiEzsignsignergroupID).Append("\n");
            sb.Append("  ObjEzsignsignergroupDescription: ").Append(ObjEzsignsignergroupDescription).Append("\n");
            sb.Append("  SEzsignsignergroupDescriptionX: ").Append(SEzsignsignergroupDescriptionX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignergroupResponse);
        }

        /// <summary>
        /// Returns true if EzsignsignergroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignergroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignergroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignergroupID == input.PkiEzsignsignergroupID ||
                    (this.PkiEzsignsignergroupID != null &&
                    this.PkiEzsignsignergroupID.Equals(input.PkiEzsignsignergroupID))
                ) && 
                (
                    this.ObjEzsignsignergroupDescription == input.ObjEzsignsignergroupDescription ||
                    (this.ObjEzsignsignergroupDescription != null &&
                    this.ObjEzsignsignergroupDescription.Equals(input.ObjEzsignsignergroupDescription))
                ) && 
                (
                    this.SEzsignsignergroupDescriptionX == input.SEzsignsignergroupDescriptionX ||
                    (this.SEzsignsignergroupDescriptionX != null &&
                    this.SEzsignsignergroupDescriptionX.Equals(input.SEzsignsignergroupDescriptionX))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignergroupID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignergroupID.GetHashCode();
                if (this.ObjEzsignsignergroupDescription != null)
                    hashCode = hashCode * 59 + this.ObjEzsignsignergroupDescription.GetHashCode();
                if (this.SEzsignsignergroupDescriptionX != null)
                    hashCode = hashCode * 59 + this.SEzsignsignergroupDescriptionX.GetHashCode();
                return hashCode;
            }
        }
    }

}
