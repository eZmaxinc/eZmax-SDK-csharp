/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// CommunicationResponseCompoundAllOf
    /// </summary>
    [DataContract]
    public partial class CommunicationResponseCompoundAllOf :  IEquatable<CommunicationResponseCompoundAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationResponseCompoundAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommunicationResponseCompoundAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommunicationResponseCompoundAllOf" /> class.
        /// </summary>
        /// <param name="aObjCommunicationattachment">aObjCommunicationattachment (required).</param>
        /// <param name="aObjCommunicationrecipient">aObjCommunicationrecipient (required).</param>
        /// <param name="aObjCommunicationexternalrecipient">aObjCommunicationexternalrecipient (required).</param>
        public CommunicationResponseCompoundAllOf(List<CommunicationattachmentResponseCompound> aObjCommunicationattachment = default(List<CommunicationattachmentResponseCompound>), List<CommunicationrecipientResponseCompound> aObjCommunicationrecipient = default(List<CommunicationrecipientResponseCompound>), List<CommunicationexternalrecipientResponseCompound> aObjCommunicationexternalrecipient = default(List<CommunicationexternalrecipientResponseCompound>))
        {
            // to ensure "aObjCommunicationattachment" is required (not null)
            if (aObjCommunicationattachment == null)
            {
                throw new InvalidDataException("aObjCommunicationattachment is a required property for CommunicationResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.AObjCommunicationattachment = aObjCommunicationattachment;
            }

            // to ensure "aObjCommunicationrecipient" is required (not null)
            if (aObjCommunicationrecipient == null)
            {
                throw new InvalidDataException("aObjCommunicationrecipient is a required property for CommunicationResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.AObjCommunicationrecipient = aObjCommunicationrecipient;
            }

            // to ensure "aObjCommunicationexternalrecipient" is required (not null)
            if (aObjCommunicationexternalrecipient == null)
            {
                throw new InvalidDataException("aObjCommunicationexternalrecipient is a required property for CommunicationResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.AObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient;
            }

        }

        /// <summary>
        /// Gets or Sets AObjCommunicationattachment
        /// </summary>
        [DataMember(Name="a_objCommunicationattachment", EmitDefaultValue=true)]
        public List<CommunicationattachmentResponseCompound> AObjCommunicationattachment { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationrecipient
        /// </summary>
        [DataMember(Name="a_objCommunicationrecipient", EmitDefaultValue=true)]
        public List<CommunicationrecipientResponseCompound> AObjCommunicationrecipient { get; set; }

        /// <summary>
        /// Gets or Sets AObjCommunicationexternalrecipient
        /// </summary>
        [DataMember(Name="a_objCommunicationexternalrecipient", EmitDefaultValue=true)]
        public List<CommunicationexternalrecipientResponseCompound> AObjCommunicationexternalrecipient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommunicationResponseCompoundAllOf {\n");
            sb.Append("  AObjCommunicationattachment: ").Append(AObjCommunicationattachment).Append("\n");
            sb.Append("  AObjCommunicationrecipient: ").Append(AObjCommunicationrecipient).Append("\n");
            sb.Append("  AObjCommunicationexternalrecipient: ").Append(AObjCommunicationexternalrecipient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommunicationResponseCompoundAllOf);
        }

        /// <summary>
        /// Returns true if CommunicationResponseCompoundAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CommunicationResponseCompoundAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommunicationResponseCompoundAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AObjCommunicationattachment == input.AObjCommunicationattachment ||
                    this.AObjCommunicationattachment != null &&
                    input.AObjCommunicationattachment != null &&
                    this.AObjCommunicationattachment.SequenceEqual(input.AObjCommunicationattachment)
                ) && 
                (
                    this.AObjCommunicationrecipient == input.AObjCommunicationrecipient ||
                    this.AObjCommunicationrecipient != null &&
                    input.AObjCommunicationrecipient != null &&
                    this.AObjCommunicationrecipient.SequenceEqual(input.AObjCommunicationrecipient)
                ) && 
                (
                    this.AObjCommunicationexternalrecipient == input.AObjCommunicationexternalrecipient ||
                    this.AObjCommunicationexternalrecipient != null &&
                    input.AObjCommunicationexternalrecipient != null &&
                    this.AObjCommunicationexternalrecipient.SequenceEqual(input.AObjCommunicationexternalrecipient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AObjCommunicationattachment != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationattachment.GetHashCode();
                if (this.AObjCommunicationrecipient != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationrecipient.GetHashCode();
                if (this.AObjCommunicationexternalrecipient != null)
                    hashCode = hashCode * 59 + this.AObjCommunicationexternalrecipient.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
