/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignannotation Object and children
    /// </summary>
    [DataContract(Name = "ezsignannotation-RequestCompound")]
    public partial class EzsignannotationRequestCompound : EzsignannotationRequest, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignannotationRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignannotationRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignannotationRequestCompound" /> class.
        /// </summary>
        /// <param name="objTextstylestatic">objTextstylestatic.</param>
        /// <param name="pkiEzsignannotationID">The unique ID of the Ezsignannotation.</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="eEzsignannotationHorizontalalignment">eEzsignannotationHorizontalalignment.</param>
        /// <param name="eEzsignannotationVerticalalignment">eEzsignannotationVerticalalignment.</param>
        /// <param name="eEzsignannotationType">eEzsignannotationType (required).</param>
        /// <param name="iEzsignannotationX">The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignannotationY">The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignannotationWidth">The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width..</param>
        /// <param name="iEzsignannotationHeight">The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**.</param>
        /// <param name="sEzsignannotationText">The Text of the Ezsignannotation.</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        public EzsignannotationRequestCompound(TextstylestaticRequestCompound objTextstylestatic = default(TextstylestaticRequestCompound), int pkiEzsignannotationID = default(int), int fkiEzsigndocumentID = default(int), EnumHorizontalalignment? eEzsignannotationHorizontalalignment = default(EnumHorizontalalignment?), EnumVerticalalignment? eEzsignannotationVerticalalignment = default(EnumVerticalalignment?), FieldEEzsignannotationType eEzsignannotationType = default(FieldEEzsignannotationType), int iEzsignannotationX = default(int), int iEzsignannotationY = default(int), int iEzsignannotationWidth = default(int), int iEzsignannotationHeight = default(int), string sEzsignannotationText = default(string), int iEzsignpagePagenumber = default(int)) : base()
        {
            this.ObjTextstylestatic = objTextstylestatic;
        }

        /// <summary>
        /// Gets or Sets ObjTextstylestatic
        /// </summary>
        [DataMember(Name = "objTextstylestatic", EmitDefaultValue = false)]
        public TextstylestaticRequestCompound ObjTextstylestatic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignannotationRequestCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ObjTextstylestatic: ").Append(ObjTextstylestatic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
