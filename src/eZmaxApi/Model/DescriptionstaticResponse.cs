/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Descriptionstatic Object
    /// </summary>
    [DataContract]
    public partial class DescriptionstaticResponse :  IEquatable<DescriptionstaticResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DescriptionstaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DescriptionstaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DescriptionstaticResponse" /> class.
        /// </summary>
        /// <param name="pkiDescriptionstaticID">The unique ID of the Descriptionstatic (required).</param>
        /// <param name="sDescriptionstaticDescription">The description of the Descriptionstatic (required).</param>
        public DescriptionstaticResponse(int pkiDescriptionstaticID = default(int), string sDescriptionstaticDescription = default(string))
        {
            // to ensure "pkiDescriptionstaticID" is required (not null)
            if (pkiDescriptionstaticID == null)
            {
                throw new InvalidDataException("pkiDescriptionstaticID is a required property for DescriptionstaticResponse and cannot be null");
            }
            else
            {
                this.PkiDescriptionstaticID = pkiDescriptionstaticID;
            }

            // to ensure "sDescriptionstaticDescription" is required (not null)
            if (sDescriptionstaticDescription == null)
            {
                throw new InvalidDataException("sDescriptionstaticDescription is a required property for DescriptionstaticResponse and cannot be null");
            }
            else
            {
                this.SDescriptionstaticDescription = sDescriptionstaticDescription;
            }

        }

        /// <summary>
        /// The unique ID of the Descriptionstatic
        /// </summary>
        /// <value>The unique ID of the Descriptionstatic</value>
        [DataMember(Name="pkiDescriptionstaticID", EmitDefaultValue=true)]
        public int PkiDescriptionstaticID { get; set; }

        /// <summary>
        /// The description of the Descriptionstatic
        /// </summary>
        /// <value>The description of the Descriptionstatic</value>
        [DataMember(Name="sDescriptionstaticDescription", EmitDefaultValue=true)]
        public string SDescriptionstaticDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DescriptionstaticResponse {\n");
            sb.Append("  PkiDescriptionstaticID: ").Append(PkiDescriptionstaticID).Append("\n");
            sb.Append("  SDescriptionstaticDescription: ").Append(SDescriptionstaticDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DescriptionstaticResponse);
        }

        /// <summary>
        /// Returns true if DescriptionstaticResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DescriptionstaticResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DescriptionstaticResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiDescriptionstaticID == input.PkiDescriptionstaticID ||
                    (this.PkiDescriptionstaticID != null &&
                    this.PkiDescriptionstaticID.Equals(input.PkiDescriptionstaticID))
                ) && 
                (
                    this.SDescriptionstaticDescription == input.SDescriptionstaticDescription ||
                    (this.SDescriptionstaticDescription != null &&
                    this.SDescriptionstaticDescription.Equals(input.SDescriptionstaticDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiDescriptionstaticID != null)
                    hashCode = hashCode * 59 + this.PkiDescriptionstaticID.GetHashCode();
                if (this.SDescriptionstaticDescription != null)
                    hashCode = hashCode * 59 + this.SDescriptionstaticDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiDescriptionstaticID (int) minimum
            if(this.PkiDescriptionstaticID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiDescriptionstaticID, must be a value greater than or equal to 0.", new [] { "PkiDescriptionstaticID" });
            }

            yield break;
        }
    }

}
