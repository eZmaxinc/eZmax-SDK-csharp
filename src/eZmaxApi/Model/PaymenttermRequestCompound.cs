/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Paymentterm Object and children
    /// </summary>
    [DataContract]
    public partial class PaymenttermRequestCompound :  IEquatable<PaymenttermRequestCompound>
    {
        /// <summary>
        /// Gets or Sets EPaymenttermType
        /// </summary>
        [DataMember(Name="ePaymenttermType", EmitDefaultValue=true)]
        public FieldEPaymenttermType EPaymenttermType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymenttermRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymenttermRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymenttermRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiPaymenttermID">The unique ID of the Paymentterm.</param>
        /// <param name="sPaymenttermCode">The code of the Paymentterm (required).</param>
        /// <param name="ePaymenttermType">ePaymenttermType (required).</param>
        /// <param name="iPaymenttermDay">The day of the Paymentterm (required).</param>
        /// <param name="objPaymenttermDescription">objPaymenttermDescription (required).</param>
        /// <param name="bPaymenttermIsactive">Whether the Paymentterm is active or not (required).</param>
        public PaymenttermRequestCompound(int pkiPaymenttermID = default(int), string sPaymenttermCode = default(string), FieldEPaymenttermType ePaymenttermType = default(FieldEPaymenttermType), int iPaymenttermDay = default(int), MultilingualPaymenttermDescription objPaymenttermDescription = default(MultilingualPaymenttermDescription), bool bPaymenttermIsactive = default(bool))
        {
            // to ensure "sPaymenttermCode" is required (not null)
            if (sPaymenttermCode == null)
            {
                throw new InvalidDataException("sPaymenttermCode is a required property for PaymenttermRequestCompound and cannot be null");
            }
            else
            {
                this.SPaymenttermCode = sPaymenttermCode;
            }

            // to ensure "ePaymenttermType" is required (not null)
            if (ePaymenttermType == null)
            {
                throw new InvalidDataException("ePaymenttermType is a required property for PaymenttermRequestCompound and cannot be null");
            }
            else
            {
                this.EPaymenttermType = ePaymenttermType;
            }

            // to ensure "iPaymenttermDay" is required (not null)
            if (iPaymenttermDay == null)
            {
                throw new InvalidDataException("iPaymenttermDay is a required property for PaymenttermRequestCompound and cannot be null");
            }
            else
            {
                this.IPaymenttermDay = iPaymenttermDay;
            }

            // to ensure "objPaymenttermDescription" is required (not null)
            if (objPaymenttermDescription == null)
            {
                throw new InvalidDataException("objPaymenttermDescription is a required property for PaymenttermRequestCompound and cannot be null");
            }
            else
            {
                this.ObjPaymenttermDescription = objPaymenttermDescription;
            }

            // to ensure "bPaymenttermIsactive" is required (not null)
            if (bPaymenttermIsactive == null)
            {
                throw new InvalidDataException("bPaymenttermIsactive is a required property for PaymenttermRequestCompound and cannot be null");
            }
            else
            {
                this.BPaymenttermIsactive = bPaymenttermIsactive;
            }

            this.PkiPaymenttermID = pkiPaymenttermID;
        }

        /// <summary>
        /// The unique ID of the Paymentterm
        /// </summary>
        /// <value>The unique ID of the Paymentterm</value>
        [DataMember(Name="pkiPaymenttermID", EmitDefaultValue=false)]
        public int PkiPaymenttermID { get; set; }

        /// <summary>
        /// The code of the Paymentterm
        /// </summary>
        /// <value>The code of the Paymentterm</value>
        [DataMember(Name="sPaymenttermCode", EmitDefaultValue=true)]
        public string SPaymenttermCode { get; set; }


        /// <summary>
        /// The day of the Paymentterm
        /// </summary>
        /// <value>The day of the Paymentterm</value>
        [DataMember(Name="iPaymenttermDay", EmitDefaultValue=true)]
        public int IPaymenttermDay { get; set; }

        /// <summary>
        /// Gets or Sets ObjPaymenttermDescription
        /// </summary>
        [DataMember(Name="objPaymenttermDescription", EmitDefaultValue=true)]
        public MultilingualPaymenttermDescription ObjPaymenttermDescription { get; set; }

        /// <summary>
        /// Whether the Paymentterm is active or not
        /// </summary>
        /// <value>Whether the Paymentterm is active or not</value>
        [DataMember(Name="bPaymenttermIsactive", EmitDefaultValue=true)]
        public bool BPaymenttermIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymenttermRequestCompound {\n");
            sb.Append("  PkiPaymenttermID: ").Append(PkiPaymenttermID).Append("\n");
            sb.Append("  SPaymenttermCode: ").Append(SPaymenttermCode).Append("\n");
            sb.Append("  EPaymenttermType: ").Append(EPaymenttermType).Append("\n");
            sb.Append("  IPaymenttermDay: ").Append(IPaymenttermDay).Append("\n");
            sb.Append("  ObjPaymenttermDescription: ").Append(ObjPaymenttermDescription).Append("\n");
            sb.Append("  BPaymenttermIsactive: ").Append(BPaymenttermIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymenttermRequestCompound);
        }

        /// <summary>
        /// Returns true if PaymenttermRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymenttermRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymenttermRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiPaymenttermID == input.PkiPaymenttermID ||
                    (this.PkiPaymenttermID != null &&
                    this.PkiPaymenttermID.Equals(input.PkiPaymenttermID))
                ) && 
                (
                    this.SPaymenttermCode == input.SPaymenttermCode ||
                    (this.SPaymenttermCode != null &&
                    this.SPaymenttermCode.Equals(input.SPaymenttermCode))
                ) && 
                (
                    this.EPaymenttermType == input.EPaymenttermType ||
                    (this.EPaymenttermType != null &&
                    this.EPaymenttermType.Equals(input.EPaymenttermType))
                ) && 
                (
                    this.IPaymenttermDay == input.IPaymenttermDay ||
                    (this.IPaymenttermDay != null &&
                    this.IPaymenttermDay.Equals(input.IPaymenttermDay))
                ) && 
                (
                    this.ObjPaymenttermDescription == input.ObjPaymenttermDescription ||
                    (this.ObjPaymenttermDescription != null &&
                    this.ObjPaymenttermDescription.Equals(input.ObjPaymenttermDescription))
                ) && 
                (
                    this.BPaymenttermIsactive == input.BPaymenttermIsactive ||
                    (this.BPaymenttermIsactive != null &&
                    this.BPaymenttermIsactive.Equals(input.BPaymenttermIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiPaymenttermID != null)
                    hashCode = hashCode * 59 + this.PkiPaymenttermID.GetHashCode();
                if (this.SPaymenttermCode != null)
                    hashCode = hashCode * 59 + this.SPaymenttermCode.GetHashCode();
                if (this.EPaymenttermType != null)
                    hashCode = hashCode * 59 + this.EPaymenttermType.GetHashCode();
                if (this.IPaymenttermDay != null)
                    hashCode = hashCode * 59 + this.IPaymenttermDay.GetHashCode();
                if (this.ObjPaymenttermDescription != null)
                    hashCode = hashCode * 59 + this.ObjPaymenttermDescription.GetHashCode();
                if (this.BPaymenttermIsactive != null)
                    hashCode = hashCode * 59 + this.BPaymenttermIsactive.GetHashCode();
                return hashCode;
            }
        }
    }

}
