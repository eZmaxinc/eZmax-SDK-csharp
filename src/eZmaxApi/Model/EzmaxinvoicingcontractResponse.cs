/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxinvoicingcontract Object
    /// </summary>
    [DataContract]
    public partial class EzmaxinvoicingcontractResponse :  IEquatable<EzmaxinvoicingcontractResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EEzmaxinvoicingcontractPaymenttype
        /// </summary>
        [DataMember(Name="eEzmaxinvoicingcontractPaymenttype", EmitDefaultValue=true)]
        public FieldEEzmaxinvoicingcontractPaymenttype EEzmaxinvoicingcontractPaymenttype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingcontractResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxinvoicingcontractResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingcontractResponse" /> class.
        /// </summary>
        /// <param name="pkiEzmaxinvoicingcontractID">The unique ID of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="eEzmaxinvoicingcontractPaymenttype">eEzmaxinvoicingcontractPaymenttype (required).</param>
        /// <param name="iEzmaxinvoicingcontractLength">The length in years of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="dtEzmaxinvoicingcontractStart">The start date of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="dtEzmaxinvoicingcontractEnd">The end date of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="dEzmaxinvoicingcontractLicense">The price of the license (required).</param>
        /// <param name="dEzmaxinvoicingcontract121qa">The price for 121QA (required).</param>
        /// <param name="bEzmaxinvoicingcontractEzsignallagents">Whether eZsign is for all agents (required).</param>
        /// <param name="objAudit">objAudit (required).</param>
        public EzmaxinvoicingcontractResponse(int pkiEzmaxinvoicingcontractID = default(int), FieldEEzmaxinvoicingcontractPaymenttype eEzmaxinvoicingcontractPaymenttype = default(FieldEEzmaxinvoicingcontractPaymenttype), int iEzmaxinvoicingcontractLength = default(int), string dtEzmaxinvoicingcontractStart = default(string), string dtEzmaxinvoicingcontractEnd = default(string), string dEzmaxinvoicingcontractLicense = default(string), string dEzmaxinvoicingcontract121qa = default(string), bool bEzmaxinvoicingcontractEzsignallagents = default(bool), CommonAudit objAudit = default(CommonAudit))
        {
            // to ensure "pkiEzmaxinvoicingcontractID" is required (not null)
            if (pkiEzmaxinvoicingcontractID == null)
            {
                throw new InvalidDataException("pkiEzmaxinvoicingcontractID is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.PkiEzmaxinvoicingcontractID = pkiEzmaxinvoicingcontractID;
            }

            // to ensure "eEzmaxinvoicingcontractPaymenttype" is required (not null)
            if (eEzmaxinvoicingcontractPaymenttype == null)
            {
                throw new InvalidDataException("eEzmaxinvoicingcontractPaymenttype is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.EEzmaxinvoicingcontractPaymenttype = eEzmaxinvoicingcontractPaymenttype;
            }

            // to ensure "iEzmaxinvoicingcontractLength" is required (not null)
            if (iEzmaxinvoicingcontractLength == null)
            {
                throw new InvalidDataException("iEzmaxinvoicingcontractLength is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.IEzmaxinvoicingcontractLength = iEzmaxinvoicingcontractLength;
            }

            // to ensure "dtEzmaxinvoicingcontractStart" is required (not null)
            if (dtEzmaxinvoicingcontractStart == null)
            {
                throw new InvalidDataException("dtEzmaxinvoicingcontractStart is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.DtEzmaxinvoicingcontractStart = dtEzmaxinvoicingcontractStart;
            }

            // to ensure "dtEzmaxinvoicingcontractEnd" is required (not null)
            if (dtEzmaxinvoicingcontractEnd == null)
            {
                throw new InvalidDataException("dtEzmaxinvoicingcontractEnd is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.DtEzmaxinvoicingcontractEnd = dtEzmaxinvoicingcontractEnd;
            }

            // to ensure "dEzmaxinvoicingcontractLicense" is required (not null)
            if (dEzmaxinvoicingcontractLicense == null)
            {
                throw new InvalidDataException("dEzmaxinvoicingcontractLicense is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.DEzmaxinvoicingcontractLicense = dEzmaxinvoicingcontractLicense;
            }

            // to ensure "dEzmaxinvoicingcontract121qa" is required (not null)
            if (dEzmaxinvoicingcontract121qa == null)
            {
                throw new InvalidDataException("dEzmaxinvoicingcontract121qa is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.DEzmaxinvoicingcontract121qa = dEzmaxinvoicingcontract121qa;
            }

            // to ensure "bEzmaxinvoicingcontractEzsignallagents" is required (not null)
            if (bEzmaxinvoicingcontractEzsignallagents == null)
            {
                throw new InvalidDataException("bEzmaxinvoicingcontractEzsignallagents is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.BEzmaxinvoicingcontractEzsignallagents = bEzmaxinvoicingcontractEzsignallagents;
            }

            // to ensure "objAudit" is required (not null)
            if (objAudit == null)
            {
                throw new InvalidDataException("objAudit is a required property for EzmaxinvoicingcontractResponse and cannot be null");
            }
            else
            {
                this.ObjAudit = objAudit;
            }

        }

        /// <summary>
        /// The unique ID of the Ezmaxinvoicingcontract
        /// </summary>
        /// <value>The unique ID of the Ezmaxinvoicingcontract</value>
        [DataMember(Name="pkiEzmaxinvoicingcontractID", EmitDefaultValue=true)]
        public int PkiEzmaxinvoicingcontractID { get; set; }


        /// <summary>
        /// The length in years of the Ezmaxinvoicingcontract
        /// </summary>
        /// <value>The length in years of the Ezmaxinvoicingcontract</value>
        [DataMember(Name="iEzmaxinvoicingcontractLength", EmitDefaultValue=true)]
        public int IEzmaxinvoicingcontractLength { get; set; }

        /// <summary>
        /// The start date of the Ezmaxinvoicingcontract
        /// </summary>
        /// <value>The start date of the Ezmaxinvoicingcontract</value>
        [DataMember(Name="dtEzmaxinvoicingcontractStart", EmitDefaultValue=true)]
        public string DtEzmaxinvoicingcontractStart { get; set; }

        /// <summary>
        /// The end date of the Ezmaxinvoicingcontract
        /// </summary>
        /// <value>The end date of the Ezmaxinvoicingcontract</value>
        [DataMember(Name="dtEzmaxinvoicingcontractEnd", EmitDefaultValue=true)]
        public string DtEzmaxinvoicingcontractEnd { get; set; }

        /// <summary>
        /// The price of the license
        /// </summary>
        /// <value>The price of the license</value>
        [DataMember(Name="dEzmaxinvoicingcontractLicense", EmitDefaultValue=true)]
        public string DEzmaxinvoicingcontractLicense { get; set; }

        /// <summary>
        /// The price for 121QA
        /// </summary>
        /// <value>The price for 121QA</value>
        [DataMember(Name="dEzmaxinvoicingcontract121qa", EmitDefaultValue=true)]
        public string DEzmaxinvoicingcontract121qa { get; set; }

        /// <summary>
        /// Whether eZsign is for all agents
        /// </summary>
        /// <value>Whether eZsign is for all agents</value>
        [DataMember(Name="bEzmaxinvoicingcontractEzsignallagents", EmitDefaultValue=true)]
        public bool BEzmaxinvoicingcontractEzsignallagents { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name="objAudit", EmitDefaultValue=true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzmaxinvoicingcontractResponse {\n");
            sb.Append("  PkiEzmaxinvoicingcontractID: ").Append(PkiEzmaxinvoicingcontractID).Append("\n");
            sb.Append("  EEzmaxinvoicingcontractPaymenttype: ").Append(EEzmaxinvoicingcontractPaymenttype).Append("\n");
            sb.Append("  IEzmaxinvoicingcontractLength: ").Append(IEzmaxinvoicingcontractLength).Append("\n");
            sb.Append("  DtEzmaxinvoicingcontractStart: ").Append(DtEzmaxinvoicingcontractStart).Append("\n");
            sb.Append("  DtEzmaxinvoicingcontractEnd: ").Append(DtEzmaxinvoicingcontractEnd).Append("\n");
            sb.Append("  DEzmaxinvoicingcontractLicense: ").Append(DEzmaxinvoicingcontractLicense).Append("\n");
            sb.Append("  DEzmaxinvoicingcontract121qa: ").Append(DEzmaxinvoicingcontract121qa).Append("\n");
            sb.Append("  BEzmaxinvoicingcontractEzsignallagents: ").Append(BEzmaxinvoicingcontractEzsignallagents).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzmaxinvoicingcontractResponse);
        }

        /// <summary>
        /// Returns true if EzmaxinvoicingcontractResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzmaxinvoicingcontractResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzmaxinvoicingcontractResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzmaxinvoicingcontractID == input.PkiEzmaxinvoicingcontractID ||
                    (this.PkiEzmaxinvoicingcontractID != null &&
                    this.PkiEzmaxinvoicingcontractID.Equals(input.PkiEzmaxinvoicingcontractID))
                ) && 
                (
                    this.EEzmaxinvoicingcontractPaymenttype == input.EEzmaxinvoicingcontractPaymenttype ||
                    (this.EEzmaxinvoicingcontractPaymenttype != null &&
                    this.EEzmaxinvoicingcontractPaymenttype.Equals(input.EEzmaxinvoicingcontractPaymenttype))
                ) && 
                (
                    this.IEzmaxinvoicingcontractLength == input.IEzmaxinvoicingcontractLength ||
                    (this.IEzmaxinvoicingcontractLength != null &&
                    this.IEzmaxinvoicingcontractLength.Equals(input.IEzmaxinvoicingcontractLength))
                ) && 
                (
                    this.DtEzmaxinvoicingcontractStart == input.DtEzmaxinvoicingcontractStart ||
                    (this.DtEzmaxinvoicingcontractStart != null &&
                    this.DtEzmaxinvoicingcontractStart.Equals(input.DtEzmaxinvoicingcontractStart))
                ) && 
                (
                    this.DtEzmaxinvoicingcontractEnd == input.DtEzmaxinvoicingcontractEnd ||
                    (this.DtEzmaxinvoicingcontractEnd != null &&
                    this.DtEzmaxinvoicingcontractEnd.Equals(input.DtEzmaxinvoicingcontractEnd))
                ) && 
                (
                    this.DEzmaxinvoicingcontractLicense == input.DEzmaxinvoicingcontractLicense ||
                    (this.DEzmaxinvoicingcontractLicense != null &&
                    this.DEzmaxinvoicingcontractLicense.Equals(input.DEzmaxinvoicingcontractLicense))
                ) && 
                (
                    this.DEzmaxinvoicingcontract121qa == input.DEzmaxinvoicingcontract121qa ||
                    (this.DEzmaxinvoicingcontract121qa != null &&
                    this.DEzmaxinvoicingcontract121qa.Equals(input.DEzmaxinvoicingcontract121qa))
                ) && 
                (
                    this.BEzmaxinvoicingcontractEzsignallagents == input.BEzmaxinvoicingcontractEzsignallagents ||
                    (this.BEzmaxinvoicingcontractEzsignallagents != null &&
                    this.BEzmaxinvoicingcontractEzsignallagents.Equals(input.BEzmaxinvoicingcontractEzsignallagents))
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzmaxinvoicingcontractID != null)
                    hashCode = hashCode * 59 + this.PkiEzmaxinvoicingcontractID.GetHashCode();
                if (this.EEzmaxinvoicingcontractPaymenttype != null)
                    hashCode = hashCode * 59 + this.EEzmaxinvoicingcontractPaymenttype.GetHashCode();
                if (this.IEzmaxinvoicingcontractLength != null)
                    hashCode = hashCode * 59 + this.IEzmaxinvoicingcontractLength.GetHashCode();
                if (this.DtEzmaxinvoicingcontractStart != null)
                    hashCode = hashCode * 59 + this.DtEzmaxinvoicingcontractStart.GetHashCode();
                if (this.DtEzmaxinvoicingcontractEnd != null)
                    hashCode = hashCode * 59 + this.DtEzmaxinvoicingcontractEnd.GetHashCode();
                if (this.DEzmaxinvoicingcontractLicense != null)
                    hashCode = hashCode * 59 + this.DEzmaxinvoicingcontractLicense.GetHashCode();
                if (this.DEzmaxinvoicingcontract121qa != null)
                    hashCode = hashCode * 59 + this.DEzmaxinvoicingcontract121qa.GetHashCode();
                if (this.BEzmaxinvoicingcontractEzsignallagents != null)
                    hashCode = hashCode * 59 + this.BEzmaxinvoicingcontractEzsignallagents.GetHashCode();
                if (this.ObjAudit != null)
                    hashCode = hashCode * 59 + this.ObjAudit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzmaxinvoicingcontractID (int) minimum
            if(this.PkiEzmaxinvoicingcontractID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzmaxinvoicingcontractID, must be a value greater than or equal to 1.", new [] { "PkiEzmaxinvoicingcontractID" });
            }



            // IEzmaxinvoicingcontractLength (int) minimum
            if(this.IEzmaxinvoicingcontractLength < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzmaxinvoicingcontractLength, must be a value greater than or equal to 1.", new [] { "IEzmaxinvoicingcontractLength" });
            }



            // DEzmaxinvoicingcontractLicense (string) pattern
            Regex regexDEzmaxinvoicingcontractLicense = new Regex(@"^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$", RegexOptions.CultureInvariant);
            if (false == regexDEzmaxinvoicingcontractLicense.Match(this.DEzmaxinvoicingcontractLicense).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzmaxinvoicingcontractLicense, must match a pattern of " + regexDEzmaxinvoicingcontractLicense, new [] { "DEzmaxinvoicingcontractLicense" });
            }



            // DEzmaxinvoicingcontract121qa (string) pattern
            Regex regexDEzmaxinvoicingcontract121qa = new Regex(@"^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$", RegexOptions.CultureInvariant);
            if (false == regexDEzmaxinvoicingcontract121qa.Match(this.DEzmaxinvoicingcontract121qa).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzmaxinvoicingcontract121qa, must match a pattern of " + regexDEzmaxinvoicingcontract121qa, new [] { "DEzmaxinvoicingcontract121qa" });
            }

            yield break;
        }
    }

}
