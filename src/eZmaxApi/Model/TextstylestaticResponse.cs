/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Textstylestatic Object
    /// </summary>
    [DataContract(Name = "textstylestatic-Response")]
    public partial class TextstylestaticResponse : IEquatable<TextstylestaticResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextstylestaticResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextstylestaticResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextstylestaticResponse" /> class.
        /// </summary>
        /// <param name="pkiTextstylestaticID">The unique ID of the Textstylestatic.</param>
        /// <param name="fkiFontID">The unique ID of the Font (required).</param>
        /// <param name="bTextstylestaticBold">Whether the Textstylestatic is Bold or not (required).</param>
        /// <param name="bTextstylestaticUnderline">Whether the Textstylestatic is Underline or not (required).</param>
        /// <param name="bTextstylestaticItalic">Whether the Textstylestatic is Italic or not (required).</param>
        /// <param name="bTextstylestaticStrikethrough">Whether the Textstylestatic is Strikethrough or not (required).</param>
        /// <param name="iTextstylestaticFontcolor">The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795 (required).</param>
        /// <param name="iTextstylestaticSize">The Size for the Font of the Textstylestatic (required).</param>
        public TextstylestaticResponse(int pkiTextstylestaticID = default(int), int fkiFontID = default(int), bool bTextstylestaticBold = default(bool), bool bTextstylestaticUnderline = default(bool), bool bTextstylestaticItalic = default(bool), bool bTextstylestaticStrikethrough = default(bool), int iTextstylestaticFontcolor = default(int), int iTextstylestaticSize = default(int))
        {
            this.FkiFontID = fkiFontID;
            this.BTextstylestaticBold = bTextstylestaticBold;
            this.BTextstylestaticUnderline = bTextstylestaticUnderline;
            this.BTextstylestaticItalic = bTextstylestaticItalic;
            this.BTextstylestaticStrikethrough = bTextstylestaticStrikethrough;
            this.ITextstylestaticFontcolor = iTextstylestaticFontcolor;
            this.ITextstylestaticSize = iTextstylestaticSize;
            this.PkiTextstylestaticID = pkiTextstylestaticID;
        }

        /// <summary>
        /// The unique ID of the Textstylestatic
        /// </summary>
        /// <value>The unique ID of the Textstylestatic</value>
        </example> }}
		/* <example>216</example>*/
        [DataMember(Name = "pkiTextstylestaticID", EmitDefaultValue = false)]
        public int PkiTextstylestaticID { get; set; }

        /// <summary>
        /// The unique ID of the Font
        /// </summary>
        /// <value>The unique ID of the Font</value>
        </example> }}
		/* <example>1</example>*/
        [DataMember(Name = "fkiFontID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiFontID { get; set; }

        /// <summary>
        /// Whether the Textstylestatic is Bold or not
        /// </summary>
        /// <value>Whether the Textstylestatic is Bold or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bTextstylestaticBold", IsRequired = true, EmitDefaultValue = true)]
        public bool BTextstylestaticBold { get; set; }

        /// <summary>
        /// Whether the Textstylestatic is Underline or not
        /// </summary>
        /// <value>Whether the Textstylestatic is Underline or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bTextstylestaticUnderline", IsRequired = true, EmitDefaultValue = true)]
        public bool BTextstylestaticUnderline { get; set; }

        /// <summary>
        /// Whether the Textstylestatic is Italic or not
        /// </summary>
        /// <value>Whether the Textstylestatic is Italic or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bTextstylestaticItalic", IsRequired = true, EmitDefaultValue = true)]
        public bool BTextstylestaticItalic { get; set; }

        /// <summary>
        /// Whether the Textstylestatic is Strikethrough or not
        /// </summary>
        /// <value>Whether the Textstylestatic is Strikethrough or not</value>
        </example> }}
		/* <example>true</example>*/
        [DataMember(Name = "bTextstylestaticStrikethrough", IsRequired = true, EmitDefaultValue = true)]
        public bool BTextstylestaticStrikethrough { get; set; }

        /// <summary>
        /// The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795
        /// </summary>
        /// <value>The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795</value>
        </example> }}
		/* <example>3752795</example>*/
        [DataMember(Name = "iTextstylestaticFontcolor", IsRequired = true, EmitDefaultValue = true)]
        public int ITextstylestaticFontcolor { get; set; }

        /// <summary>
        /// The Size for the Font of the Textstylestatic
        /// </summary>
        /// <value>The Size for the Font of the Textstylestatic</value>
        </example> }}
		/* <example>12</example>*/
        [DataMember(Name = "iTextstylestaticSize", IsRequired = true, EmitDefaultValue = true)]
        public int ITextstylestaticSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextstylestaticResponse {\n");
            sb.Append("  PkiTextstylestaticID: ").Append(PkiTextstylestaticID).Append("\n");
            sb.Append("  FkiFontID: ").Append(FkiFontID).Append("\n");
            sb.Append("  BTextstylestaticBold: ").Append(BTextstylestaticBold).Append("\n");
            sb.Append("  BTextstylestaticUnderline: ").Append(BTextstylestaticUnderline).Append("\n");
            sb.Append("  BTextstylestaticItalic: ").Append(BTextstylestaticItalic).Append("\n");
            sb.Append("  BTextstylestaticStrikethrough: ").Append(BTextstylestaticStrikethrough).Append("\n");
            sb.Append("  ITextstylestaticFontcolor: ").Append(ITextstylestaticFontcolor).Append("\n");
            sb.Append("  ITextstylestaticSize: ").Append(ITextstylestaticSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextstylestaticResponse);
        }

        /// <summary>
        /// Returns true if TextstylestaticResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TextstylestaticResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextstylestaticResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiTextstylestaticID == input.PkiTextstylestaticID ||
                    this.PkiTextstylestaticID.Equals(input.PkiTextstylestaticID)
                ) && 
                (
                    this.FkiFontID == input.FkiFontID ||
                    this.FkiFontID.Equals(input.FkiFontID)
                ) && 
                (
                    this.BTextstylestaticBold == input.BTextstylestaticBold ||
                    this.BTextstylestaticBold.Equals(input.BTextstylestaticBold)
                ) && 
                (
                    this.BTextstylestaticUnderline == input.BTextstylestaticUnderline ||
                    this.BTextstylestaticUnderline.Equals(input.BTextstylestaticUnderline)
                ) && 
                (
                    this.BTextstylestaticItalic == input.BTextstylestaticItalic ||
                    this.BTextstylestaticItalic.Equals(input.BTextstylestaticItalic)
                ) && 
                (
                    this.BTextstylestaticStrikethrough == input.BTextstylestaticStrikethrough ||
                    this.BTextstylestaticStrikethrough.Equals(input.BTextstylestaticStrikethrough)
                ) && 
                (
                    this.ITextstylestaticFontcolor == input.ITextstylestaticFontcolor ||
                    this.ITextstylestaticFontcolor.Equals(input.ITextstylestaticFontcolor)
                ) && 
                (
                    this.ITextstylestaticSize == input.ITextstylestaticSize ||
                    this.ITextstylestaticSize.Equals(input.ITextstylestaticSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiTextstylestaticID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiFontID.GetHashCode();
                hashCode = (hashCode * 59) + this.BTextstylestaticBold.GetHashCode();
                hashCode = (hashCode * 59) + this.BTextstylestaticUnderline.GetHashCode();
                hashCode = (hashCode * 59) + this.BTextstylestaticItalic.GetHashCode();
                hashCode = (hashCode * 59) + this.BTextstylestaticStrikethrough.GetHashCode();
                hashCode = (hashCode * 59) + this.ITextstylestaticFontcolor.GetHashCode();
                hashCode = (hashCode * 59) + this.ITextstylestaticSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiTextstylestaticID (int) minimum
            if (this.PkiTextstylestaticID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiTextstylestaticID, must be a value greater than or equal to 0.", new [] { "PkiTextstylestaticID" });
            }

            // FkiFontID (int) minimum
            if (this.FkiFontID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiFontID, must be a value greater than or equal to 0.", new [] { "FkiFontID" });
            }

            // ITextstylestaticFontcolor (int) maximum
            if (this.ITextstylestaticFontcolor > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ITextstylestaticFontcolor, must be a value less than or equal to 16777215.", new [] { "ITextstylestaticFontcolor" });
            }

            // ITextstylestaticFontcolor (int) minimum
            if (this.ITextstylestaticFontcolor < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ITextstylestaticFontcolor, must be a value greater than or equal to 0.", new [] { "ITextstylestaticFontcolor" });
            }

            // ITextstylestaticSize (int) maximum
            if (this.ITextstylestaticSize > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ITextstylestaticSize, must be a value less than or equal to 255.", new [] { "ITextstylestaticSize" });
            }

            // ITextstylestaticSize (int) minimum
            if (this.ITextstylestaticSize < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ITextstylestaticSize, must be a value greater than or equal to 1.", new [] { "ITextstylestaticSize" });
            }

            yield break;
        }
    }

}
