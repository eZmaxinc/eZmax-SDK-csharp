/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignbulksend List Element
    /// </summary>
    [DataContract]
    public partial class EzsignbulksendListElement :  IEquatable<EzsignbulksendListElement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignbulksendListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendListElement" /> class.
        /// </summary>
        /// <param name="pkiEzsignbulksendID">The unique ID of the Ezsignbulksend (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="sEzsignbulksendDescription">The description of the Ezsignbulksend (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="bEzsignbulksendNeedvalidation">Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation (required).</param>
        /// <param name="iEzsignbulksendtransmission">The total number of Ezsignbulksendtransmissions in the Ezsignbulksend (required).</param>
        /// <param name="iEzsignfolder">The total number of Ezsignfolders in the Ezsignbulksend (required).</param>
        /// <param name="iEzsigndocument">The total number of Ezsigndocuments in the Ezsignbulksend (required).</param>
        /// <param name="iEzsignsignature">The total number of Ezsignsignature in the Ezsignbulksend (required).</param>
        /// <param name="iEzsignsignatureSigned">The total number of already signed Ezsignsignature blocks in the Ezsignbulksend (required).</param>
        /// <param name="bEzsignbulksendIsactive">Whether the Ezsignbulksend is active or not (required).</param>
        public EzsignbulksendListElement(int pkiEzsignbulksendID = default(int), int fkiEzsignfoldertypeID = default(int), string sEzsignbulksendDescription = default(string), string sEzsignfoldertypeNameX = default(string), bool bEzsignbulksendNeedvalidation = default(bool), int iEzsignbulksendtransmission = default(int), int iEzsignfolder = default(int), int iEzsigndocument = default(int), int iEzsignsignature = default(int), int iEzsignsignatureSigned = default(int), bool bEzsignbulksendIsactive = default(bool))
        {
            // to ensure "pkiEzsignbulksendID" is required (not null)
            if (pkiEzsignbulksendID == null)
            {
                throw new InvalidDataException("pkiEzsignbulksendID is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.PkiEzsignbulksendID = pkiEzsignbulksendID;
            }

            // to ensure "fkiEzsignfoldertypeID" is required (not null)
            if (fkiEzsignfoldertypeID == null)
            {
                throw new InvalidDataException("fkiEzsignfoldertypeID is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.FkiEzsignfoldertypeID = fkiEzsignfoldertypeID;
            }

            // to ensure "sEzsignbulksendDescription" is required (not null)
            if (sEzsignbulksendDescription == null)
            {
                throw new InvalidDataException("sEzsignbulksendDescription is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.SEzsignbulksendDescription = sEzsignbulksendDescription;
            }

            // to ensure "sEzsignfoldertypeNameX" is required (not null)
            if (sEzsignfoldertypeNameX == null)
            {
                throw new InvalidDataException("sEzsignfoldertypeNameX is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX;
            }

            // to ensure "bEzsignbulksendNeedvalidation" is required (not null)
            if (bEzsignbulksendNeedvalidation == null)
            {
                throw new InvalidDataException("bEzsignbulksendNeedvalidation is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.BEzsignbulksendNeedvalidation = bEzsignbulksendNeedvalidation;
            }

            // to ensure "iEzsignbulksendtransmission" is required (not null)
            if (iEzsignbulksendtransmission == null)
            {
                throw new InvalidDataException("iEzsignbulksendtransmission is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.IEzsignbulksendtransmission = iEzsignbulksendtransmission;
            }

            // to ensure "iEzsignfolder" is required (not null)
            if (iEzsignfolder == null)
            {
                throw new InvalidDataException("iEzsignfolder is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.IEzsignfolder = iEzsignfolder;
            }

            // to ensure "iEzsigndocument" is required (not null)
            if (iEzsigndocument == null)
            {
                throw new InvalidDataException("iEzsigndocument is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.IEzsigndocument = iEzsigndocument;
            }

            // to ensure "iEzsignsignature" is required (not null)
            if (iEzsignsignature == null)
            {
                throw new InvalidDataException("iEzsignsignature is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.IEzsignsignature = iEzsignsignature;
            }

            // to ensure "iEzsignsignatureSigned" is required (not null)
            if (iEzsignsignatureSigned == null)
            {
                throw new InvalidDataException("iEzsignsignatureSigned is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.IEzsignsignatureSigned = iEzsignsignatureSigned;
            }

            // to ensure "bEzsignbulksendIsactive" is required (not null)
            if (bEzsignbulksendIsactive == null)
            {
                throw new InvalidDataException("bEzsignbulksendIsactive is a required property for EzsignbulksendListElement and cannot be null");
            }
            else
            {
                this.BEzsignbulksendIsactive = bEzsignbulksendIsactive;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsignbulksend
        /// </summary>
        /// <value>The unique ID of the Ezsignbulksend</value>
        [DataMember(Name="pkiEzsignbulksendID", EmitDefaultValue=true)]
        public int PkiEzsignbulksendID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        [DataMember(Name="fkiEzsignfoldertypeID", EmitDefaultValue=true)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The description of the Ezsignbulksend
        /// </summary>
        /// <value>The description of the Ezsignbulksend</value>
        [DataMember(Name="sEzsignbulksendDescription", EmitDefaultValue=true)]
        public string SEzsignbulksendDescription { get; set; }

        /// <summary>
        /// The name of the Ezsignfoldertype in the language of the requester
        /// </summary>
        /// <value>The name of the Ezsignfoldertype in the language of the requester</value>
        [DataMember(Name="sEzsignfoldertypeNameX", EmitDefaultValue=true)]
        public string SEzsignfoldertypeNameX { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation</value>
        [DataMember(Name="bEzsignbulksendNeedvalidation", EmitDefaultValue=true)]
        public bool BEzsignbulksendNeedvalidation { get; set; }

        /// <summary>
        /// The total number of Ezsignbulksendtransmissions in the Ezsignbulksend
        /// </summary>
        /// <value>The total number of Ezsignbulksendtransmissions in the Ezsignbulksend</value>
        [DataMember(Name="iEzsignbulksendtransmission", EmitDefaultValue=true)]
        public int IEzsignbulksendtransmission { get; set; }

        /// <summary>
        /// The total number of Ezsignfolders in the Ezsignbulksend
        /// </summary>
        /// <value>The total number of Ezsignfolders in the Ezsignbulksend</value>
        [DataMember(Name="iEzsignfolder", EmitDefaultValue=true)]
        public int IEzsignfolder { get; set; }

        /// <summary>
        /// The total number of Ezsigndocuments in the Ezsignbulksend
        /// </summary>
        /// <value>The total number of Ezsigndocuments in the Ezsignbulksend</value>
        [DataMember(Name="iEzsigndocument", EmitDefaultValue=true)]
        public int IEzsigndocument { get; set; }

        /// <summary>
        /// The total number of Ezsignsignature in the Ezsignbulksend
        /// </summary>
        /// <value>The total number of Ezsignsignature in the Ezsignbulksend</value>
        [DataMember(Name="iEzsignsignature", EmitDefaultValue=true)]
        public int IEzsignsignature { get; set; }

        /// <summary>
        /// The total number of already signed Ezsignsignature blocks in the Ezsignbulksend
        /// </summary>
        /// <value>The total number of already signed Ezsignsignature blocks in the Ezsignbulksend</value>
        [DataMember(Name="iEzsignsignatureSigned", EmitDefaultValue=true)]
        public int IEzsignsignatureSigned { get; set; }

        /// <summary>
        /// Whether the Ezsignbulksend is active or not
        /// </summary>
        /// <value>Whether the Ezsignbulksend is active or not</value>
        [DataMember(Name="bEzsignbulksendIsactive", EmitDefaultValue=true)]
        public bool BEzsignbulksendIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignbulksendListElement {\n");
            sb.Append("  PkiEzsignbulksendID: ").Append(PkiEzsignbulksendID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  SEzsignbulksendDescription: ").Append(SEzsignbulksendDescription).Append("\n");
            sb.Append("  SEzsignfoldertypeNameX: ").Append(SEzsignfoldertypeNameX).Append("\n");
            sb.Append("  BEzsignbulksendNeedvalidation: ").Append(BEzsignbulksendNeedvalidation).Append("\n");
            sb.Append("  IEzsignbulksendtransmission: ").Append(IEzsignbulksendtransmission).Append("\n");
            sb.Append("  IEzsignfolder: ").Append(IEzsignfolder).Append("\n");
            sb.Append("  IEzsigndocument: ").Append(IEzsigndocument).Append("\n");
            sb.Append("  IEzsignsignature: ").Append(IEzsignsignature).Append("\n");
            sb.Append("  IEzsignsignatureSigned: ").Append(IEzsignsignatureSigned).Append("\n");
            sb.Append("  BEzsignbulksendIsactive: ").Append(BEzsignbulksendIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignbulksendListElement);
        }

        /// <summary>
        /// Returns true if EzsignbulksendListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignbulksendListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignbulksendListElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignbulksendID == input.PkiEzsignbulksendID ||
                    (this.PkiEzsignbulksendID != null &&
                    this.PkiEzsignbulksendID.Equals(input.PkiEzsignbulksendID))
                ) && 
                (
                    this.FkiEzsignfoldertypeID == input.FkiEzsignfoldertypeID ||
                    (this.FkiEzsignfoldertypeID != null &&
                    this.FkiEzsignfoldertypeID.Equals(input.FkiEzsignfoldertypeID))
                ) && 
                (
                    this.SEzsignbulksendDescription == input.SEzsignbulksendDescription ||
                    (this.SEzsignbulksendDescription != null &&
                    this.SEzsignbulksendDescription.Equals(input.SEzsignbulksendDescription))
                ) && 
                (
                    this.SEzsignfoldertypeNameX == input.SEzsignfoldertypeNameX ||
                    (this.SEzsignfoldertypeNameX != null &&
                    this.SEzsignfoldertypeNameX.Equals(input.SEzsignfoldertypeNameX))
                ) && 
                (
                    this.BEzsignbulksendNeedvalidation == input.BEzsignbulksendNeedvalidation ||
                    (this.BEzsignbulksendNeedvalidation != null &&
                    this.BEzsignbulksendNeedvalidation.Equals(input.BEzsignbulksendNeedvalidation))
                ) && 
                (
                    this.IEzsignbulksendtransmission == input.IEzsignbulksendtransmission ||
                    (this.IEzsignbulksendtransmission != null &&
                    this.IEzsignbulksendtransmission.Equals(input.IEzsignbulksendtransmission))
                ) && 
                (
                    this.IEzsignfolder == input.IEzsignfolder ||
                    (this.IEzsignfolder != null &&
                    this.IEzsignfolder.Equals(input.IEzsignfolder))
                ) && 
                (
                    this.IEzsigndocument == input.IEzsigndocument ||
                    (this.IEzsigndocument != null &&
                    this.IEzsigndocument.Equals(input.IEzsigndocument))
                ) && 
                (
                    this.IEzsignsignature == input.IEzsignsignature ||
                    (this.IEzsignsignature != null &&
                    this.IEzsignsignature.Equals(input.IEzsignsignature))
                ) && 
                (
                    this.IEzsignsignatureSigned == input.IEzsignsignatureSigned ||
                    (this.IEzsignsignatureSigned != null &&
                    this.IEzsignsignatureSigned.Equals(input.IEzsignsignatureSigned))
                ) && 
                (
                    this.BEzsignbulksendIsactive == input.BEzsignbulksendIsactive ||
                    (this.BEzsignbulksendIsactive != null &&
                    this.BEzsignbulksendIsactive.Equals(input.BEzsignbulksendIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignbulksendID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignbulksendID.GetHashCode();
                if (this.FkiEzsignfoldertypeID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfoldertypeID.GetHashCode();
                if (this.SEzsignbulksendDescription != null)
                    hashCode = hashCode * 59 + this.SEzsignbulksendDescription.GetHashCode();
                if (this.SEzsignfoldertypeNameX != null)
                    hashCode = hashCode * 59 + this.SEzsignfoldertypeNameX.GetHashCode();
                if (this.BEzsignbulksendNeedvalidation != null)
                    hashCode = hashCode * 59 + this.BEzsignbulksendNeedvalidation.GetHashCode();
                if (this.IEzsignbulksendtransmission != null)
                    hashCode = hashCode * 59 + this.IEzsignbulksendtransmission.GetHashCode();
                if (this.IEzsignfolder != null)
                    hashCode = hashCode * 59 + this.IEzsignfolder.GetHashCode();
                if (this.IEzsigndocument != null)
                    hashCode = hashCode * 59 + this.IEzsigndocument.GetHashCode();
                if (this.IEzsignsignature != null)
                    hashCode = hashCode * 59 + this.IEzsignsignature.GetHashCode();
                if (this.IEzsignsignatureSigned != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureSigned.GetHashCode();
                if (this.BEzsignbulksendIsactive != null)
                    hashCode = hashCode * 59 + this.BEzsignbulksendIsactive.GetHashCode();
                return hashCode;
            }
        }
    }

}
