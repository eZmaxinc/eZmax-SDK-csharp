/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignfoldersignerassociation Object
    /// </summary>
    [DataContract(Name = "ezsignfoldersignerassociation-ResponseCompound")]
    public partial class EzsignfoldersignerassociationResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfoldersignerassociationResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationResponseCompound" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="">If this flag is true the signatory is part of a delayed send. (required).</param>
        /// <param name="">If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain&#39;t required to sign the document. (required).</param>
        /// <param name="">A custom text message that will be added to the email sent. (required).</param>
        /// <param name="">If the Ezsignfoldersignerassociation is allowed to sign in person or not (required).</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        public EzsignfoldersignerassociationResponseCompound(int  = default(int), int  = default(int), bool  = default(bool), bool  = default(bool), string  = default(string), bool  = default(bool), EzsignsignergroupResponseCompound  = default(EzsignsignergroupResponseCompound), EzsignfoldersignerassociationResponseCompoundUser  = default(EzsignfoldersignerassociationResponseCompoundUser), EzsignsignerResponseCompound  = default(EzsignsignerResponseCompound))
        {
            this.PkiEzsignfoldersignerassociationID = ;
            this.FkiEzsignfolderID = ;
            this.BEzsignfoldersignerassociationDelayedsend = ;
            this.BEzsignfoldersignerassociationReceivecopy = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsignfoldersignerassociationResponseCompound and cannot be null");
            }
            this.TEzsignfoldersignerassociationMessage = ;
            this.BEzsignfoldersignerassociationAllowsigninginperson = ;
            this.ObjEzsignsignergroup = ;
            this.ObjUser = ;
            this.ObjEzsignsigner = ;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        /* <example>20</example>*/
        [DataMember(Name = "pkiEzsignfoldersignerassociationID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// If this flag is true the signatory is part of a delayed send.
        /// </summary>
        /// <value>If this flag is true the signatory is part of a delayed send.</value>
        [DataMember(Name = "bEzsignfoldersignerassociationDelayedsend", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldersignerassociationDelayedsend { get; set; }

        /// <summary>
        /// If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain&#39;t required to sign the document.
        /// </summary>
        /// <value>If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain&#39;t required to sign the document.</value>
        [DataMember(Name = "bEzsignfoldersignerassociationReceivecopy", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldersignerassociationReceivecopy { get; set; }

        /// <summary>
        /// A custom text message that will be added to the email sent.
        /// </summary>
        /// <value>A custom text message that will be added to the email sent.</value>
        /* <example>Hi John,

This is the document I need you to review.

Could you sign it before Monday please.

Best Regards.

Mary</example>*/
        [DataMember(Name = "tEzsignfoldersignerassociationMessage", IsRequired = true, EmitDefaultValue = true)]
        public string TEzsignfoldersignerassociationMessage { get; set; }

        /// <summary>
        /// If the Ezsignfoldersignerassociation is allowed to sign in person or not
        /// </summary>
        /// <value>If the Ezsignfoldersignerassociation is allowed to sign in person or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsignfoldersignerassociationAllowsigninginperson", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsignfoldersignerassociationAllowsigninginperson { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsignergroup
        /// </summary>
        [DataMember(Name = "objEzsignsignergroup", EmitDefaultValue = false)]
        public EzsignsignergroupResponseCompound ObjEzsignsignergroup { get; set; }

        /// <summary>
        /// Gets or Sets ObjUser
        /// </summary>
        [DataMember(Name = "objUser", EmitDefaultValue = false)]
        public EzsignfoldersignerassociationResponseCompoundUser ObjUser { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsigner
        /// </summary>
        [DataMember(Name = "objEzsignsigner", EmitDefaultValue = false)]
        public EzsignsignerResponseCompound ObjEzsignsigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignfoldersignerassociationResponseCompound {\n");
            sb.Append("  PkiEzsignfoldersignerassociationID: ").Append(PkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationDelayedsend: ").Append(BEzsignfoldersignerassociationDelayedsend).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationReceivecopy: ").Append(BEzsignfoldersignerassociationReceivecopy).Append("\n");
            sb.Append("  TEzsignfoldersignerassociationMessage: ").Append(TEzsignfoldersignerassociationMessage).Append("\n");
            sb.Append("  BEzsignfoldersignerassociationAllowsigninginperson: ").Append(BEzsignfoldersignerassociationAllowsigninginperson).Append("\n");
            sb.Append("  ObjEzsignsignergroup: ").Append(ObjEzsignsignergroup).Append("\n");
            sb.Append("  ObjUser: ").Append(ObjUser).Append("\n");
            sb.Append("  ObjEzsignsigner: ").Append(ObjEzsignsigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfoldersignerassociationID (int) minimum
            if (this.PkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldersignerassociationID" });
            }

            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
