/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepackage Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatepackage-ResponseCompound")]
    public partial class EzsigntemplatepackageResponseCompound : EzsigntemplatepackageResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepackageResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageResponseCompound" /> class.
        /// </summary>
        /// <param name="aObjEzsigntemplatepackagesigner">aObjEzsigntemplatepackagesigner (required).</param>
        /// <param name="aObjEzsigntemplatepackagemembership">aObjEzsigntemplatepackagemembership (required).</param>
        /// <param name="pkiEzsigntemplatepackageID">The unique ID of the Ezsigntemplatepackage (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="fkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument.</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sEzdoctemplatedocumentNameX">The name of the Ezdoctemplatedocument in the language of the requester.</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="sEzsigntemplatepackageDescription">The description of the Ezsigntemplatepackage (required).</param>
        /// <param name="bEzsigntemplatepackageAdminonly">Whether the Ezsigntemplatepackage can be accessed by admin users only (eUserType&#x3D;Normal) (required).</param>
        /// <param name="bEzsigntemplatepackageNeedvalidation">Whether the Ezsignbulksend was automatically modified and needs a manual validation (required).</param>
        /// <param name="bEzsigntemplatepackageIsactive">Whether the Ezsigntemplatepackage is active or not (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="bEzsigntemplatepackageEditallowed">Whether the Ezsigntemplatepackage if allowed to edit or not (required).</param>
        public EzsigntemplatepackageResponseCompound(List<EzsigntemplatepackagesignerResponseCompound> aObjEzsigntemplatepackagesigner = default(List<EzsigntemplatepackagesignerResponseCompound>), List<EzsigntemplatepackagemembershipResponseCompound> aObjEzsigntemplatepackagemembership = default(List<EzsigntemplatepackagemembershipResponseCompound>), int pkiEzsigntemplatepackageID = default(int), int fkiEzsignfoldertypeID = default(int), int fkiEzdoctemplatedocumentID = default(int), int fkiLanguageID = default(int), string sEzdoctemplatedocumentNameX = default(string), string sLanguageNameX = default(string), string sEzsigntemplatepackageDescription = default(string), bool bEzsigntemplatepackageAdminonly = default(bool), bool bEzsigntemplatepackageNeedvalidation = default(bool), bool bEzsigntemplatepackageIsactive = default(bool), string sEzsignfoldertypeNameX = default(string), bool bEzsigntemplatepackageEditallowed = default(bool)) : base()
        {
            // to ensure "aObjEzsigntemplatepackagesigner" is required (not null)
            if (aObjEzsigntemplatepackagesigner == null)
            {
                throw new ArgumentNullException("aObjEzsigntemplatepackagesigner is a required property for EzsigntemplatepackageResponseCompound and cannot be null");
            }
            this.AObjEzsigntemplatepackagesigner = aObjEzsigntemplatepackagesigner;
            // to ensure "aObjEzsigntemplatepackagemembership" is required (not null)
            if (aObjEzsigntemplatepackagemembership == null)
            {
                throw new ArgumentNullException("aObjEzsigntemplatepackagemembership is a required property for EzsigntemplatepackageResponseCompound and cannot be null");
            }
            this.AObjEzsigntemplatepackagemembership = aObjEzsigntemplatepackagemembership;
        }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplatepackagesigner
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplatepackagesigner", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsigntemplatepackagesignerResponseCompound> AObjEzsigntemplatepackagesigner { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplatepackagemembership
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplatepackagemembership", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsigntemplatepackagemembershipResponseCompound> AObjEzsigntemplatepackagemembership { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepackageResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AObjEzsigntemplatepackagesigner: ").Append(AObjEzsigntemplatepackagesigner).Append("\n");
            sb.Append("  AObjEzsigntemplatepackagemembership: ").Append(AObjEzsigntemplatepackagemembership).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
