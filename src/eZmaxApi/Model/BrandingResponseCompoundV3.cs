/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Branding Object
    /// </summary>
    [DataContract(Name = "branding-ResponseCompoundV3")]
    public partial class BrandingResponseCompoundV3 : BrandingResponseV3, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingResponseCompoundV3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandingResponseCompoundV3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingResponseCompoundV3" /> class.
        /// </summary>
        /// <param name="sBrandingLogourl">The url of the picture used as logo in the Branding.</param>
        /// <param name="sBrandingLogoemailurl">The url of the picture used in email as logo in the Branding.</param>
        /// <param name="sBrandingLogointerfaceurl">The url of the picture used as logo in the Branding.</param>
        /// <param name="pkiBrandingID">The unique ID of the Branding (required).</param>
        /// <param name="fkiEmailID">The unique ID of the Email.</param>
        /// <param name="objBrandingDescription">objBrandingDescription (required).</param>
        /// <param name="sBrandingDescriptionX">The Description of the Branding in the language of the requester (required).</param>
        /// <param name="sBrandingName">The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty.</param>
        /// <param name="sEmailAddress">The email address..</param>
        /// <param name="eBrandingLogo">eBrandingLogo (required).</param>
        /// <param name="eBrandingAlignlogo">eBrandingAlignlogo (required).</param>
        /// <param name="iBrandingColor">The primary color. This is a RGB color converted into integer (required).</param>
        /// <param name="bBrandingIsactive">Whether the Branding is active or not (required).</param>
        public BrandingResponseCompoundV3(string sBrandingLogourl = default(string), string sBrandingLogoemailurl = default(string), string sBrandingLogointerfaceurl = default(string), int pkiBrandingID = default(int), int fkiEmailID = default(int), MultilingualBrandingDescription objBrandingDescription = default(MultilingualBrandingDescription), string sBrandingDescriptionX = default(string), string sBrandingName = default(string), string sEmailAddress = default(string), FieldEBrandingLogo eBrandingLogo = default(FieldEBrandingLogo), FieldEBrandingAlignlogo eBrandingAlignlogo = default(FieldEBrandingAlignlogo), int iBrandingColor = default(int), bool bBrandingIsactive = default(bool)) : base()
        {
            this.SBrandingLogourl = sBrandingLogourl;
            this.SBrandingLogoemailurl = sBrandingLogoemailurl;
            this.SBrandingLogointerfaceurl = sBrandingLogointerfaceurl;
        }

        /// <summary>
        /// The url of the picture used as logo in the Branding
        /// </summary>
        /// <value>The url of the picture used as logo in the Branding</value>
        /* <example>http://www.example.com/logo.jpg</example>*/
        [DataMember(Name = "sBrandingLogourl", EmitDefaultValue = false)]
        public string SBrandingLogourl { get; set; }

        /// <summary>
        /// The url of the picture used in email as logo in the Branding
        /// </summary>
        /// <value>The url of the picture used in email as logo in the Branding</value>
        /* <example>http://www.example.com/logo.jpg</example>*/
        [DataMember(Name = "sBrandingLogoemailurl", EmitDefaultValue = false)]
        public string SBrandingLogoemailurl { get; set; }

        /// <summary>
        /// The url of the picture used as logo in the Branding
        /// </summary>
        /// <value>The url of the picture used as logo in the Branding</value>
        /* <example>http://www.example.com/logo.jpg</example>*/
        [DataMember(Name = "sBrandingLogointerfaceurl", EmitDefaultValue = false)]
        public string SBrandingLogointerfaceurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrandingResponseCompoundV3 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SBrandingLogourl: ").Append(SBrandingLogourl).Append("\n");
            sb.Append("  SBrandingLogoemailurl: ").Append(SBrandingLogoemailurl).Append("\n");
            sb.Append("  SBrandingLogointerfaceurl: ").Append(SBrandingLogointerfaceurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            if (this.SBrandingLogourl != null) {
                // SBrandingLogourl (string) pattern
                Regex regexSBrandingLogourl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSBrandingLogourl.Match(this.SBrandingLogourl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBrandingLogourl, must match a pattern of " + regexSBrandingLogourl, new [] { "SBrandingLogourl" });
                }
            }

            if (this.SBrandingLogoemailurl != null) {
                // SBrandingLogoemailurl (string) pattern
                Regex regexSBrandingLogoemailurl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSBrandingLogoemailurl.Match(this.SBrandingLogoemailurl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBrandingLogoemailurl, must match a pattern of " + regexSBrandingLogoemailurl, new [] { "SBrandingLogoemailurl" });
                }
            }

            if (this.SBrandingLogointerfaceurl != null) {
                // SBrandingLogointerfaceurl (string) pattern
                Regex regexSBrandingLogointerfaceurl = new Regex(@"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", RegexOptions.CultureInvariant);
                if (!regexSBrandingLogointerfaceurl.Match(this.SBrandingLogointerfaceurl).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SBrandingLogointerfaceurl, must match a pattern of " + regexSBrandingLogointerfaceurl, new [] { "SBrandingLogointerfaceurl" });
                }
            }

            yield break;
        }
    }

}
