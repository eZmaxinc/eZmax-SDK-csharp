/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A form Data Document Object 
    /// </summary>
    [DataContract(Name = "Custom-FormDataDocument-Response")]
    public partial class CustomFormDataDocumentResponse : IEquatable<CustomFormDataDocumentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormDataDocumentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFormDataDocumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormDataDocumentResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="sEzsigndocumentName">The name of the document that will be presented to Ezsignfoldersignerassociations (required).</param>
        /// <param name="dtModifiedDate">The date and time at which the object was last modified (required).</param>
        /// <param name="aObjFormDataSigner">aObjFormDataSigner (required).</param>
        public CustomFormDataDocumentResponse(int pkiEzsigndocumentID = default(int), int fkiEzsignfolderID = default(int), string sEzsigndocumentName = default(string), string dtModifiedDate = default(string), List<CustomFormDataSignerResponse> aObjFormDataSigner = default(List<CustomFormDataSignerResponse>))
        {
            this.PkiEzsigndocumentID = pkiEzsigndocumentID;
            this.FkiEzsignfolderID = fkiEzsignfolderID;
            // to ensure "sEzsigndocumentName" is required (not null)
            if (sEzsigndocumentName == null)
            {
                throw new ArgumentNullException("sEzsigndocumentName is a required property for CustomFormDataDocumentResponse and cannot be null");
            }
            this.SEzsigndocumentName = sEzsigndocumentName;
            // to ensure "dtModifiedDate" is required (not null)
            if (dtModifiedDate == null)
            {
                throw new ArgumentNullException("dtModifiedDate is a required property for CustomFormDataDocumentResponse and cannot be null");
            }
            this.DtModifiedDate = dtModifiedDate;
            // to ensure "aObjFormDataSigner" is required (not null)
            if (aObjFormDataSigner == null)
            {
                throw new ArgumentNullException("aObjFormDataSigner is a required property for CustomFormDataDocumentResponse and cannot be null");
            }
            this.AObjFormDataSigner = aObjFormDataSigner;
        }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        /* <example>97</example>*/
        [DataMember(Name = "pkiEzsigndocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// The name of the document that will be presented to Ezsignfoldersignerassociations
        /// </summary>
        /// <value>The name of the document that will be presented to Ezsignfoldersignerassociations</value>
        /* <example>Contract #123</example>*/
        [DataMember(Name = "sEzsigndocumentName", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigndocumentName { get; set; }

        /// <summary>
        /// The date and time at which the object was last modified
        /// </summary>
        /// <value>The date and time at which the object was last modified</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtModifiedDate", IsRequired = true, EmitDefaultValue = true)]
        public string DtModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets AObjFormDataSigner
        /// </summary>
        [DataMember(Name = "a_objFormDataSigner", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomFormDataSignerResponse> AObjFormDataSigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFormDataDocumentResponse {\n");
            sb.Append("  PkiEzsigndocumentID: ").Append(PkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("  SEzsigndocumentName: ").Append(SEzsigndocumentName).Append("\n");
            sb.Append("  DtModifiedDate: ").Append(DtModifiedDate).Append("\n");
            sb.Append("  AObjFormDataSigner: ").Append(AObjFormDataSigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFormDataDocumentResponse);
        }

        /// <summary>
        /// Returns true if CustomFormDataDocumentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFormDataDocumentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFormDataDocumentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigndocumentID == input.PkiEzsigndocumentID ||
                    this.PkiEzsigndocumentID.Equals(input.PkiEzsigndocumentID)
                ) && 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID)
                ) && 
                (
                    this.SEzsigndocumentName == input.SEzsigndocumentName ||
                    (this.SEzsigndocumentName != null &&
                    this.SEzsigndocumentName.Equals(input.SEzsigndocumentName))
                ) && 
                (
                    this.DtModifiedDate == input.DtModifiedDate ||
                    (this.DtModifiedDate != null &&
                    this.DtModifiedDate.Equals(input.DtModifiedDate))
                ) && 
                (
                    this.AObjFormDataSigner == input.AObjFormDataSigner ||
                    this.AObjFormDataSigner != null &&
                    input.AObjFormDataSigner != null &&
                    this.AObjFormDataSigner.SequenceEqual(input.AObjFormDataSigner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigndocumentID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfolderID.GetHashCode();
                if (this.SEzsigndocumentName != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigndocumentName.GetHashCode();
                }
                if (this.DtModifiedDate != null)
                {
                    hashCode = (hashCode * 59) + this.DtModifiedDate.GetHashCode();
                }
                if (this.AObjFormDataSigner != null)
                {
                    hashCode = (hashCode * 59) + this.AObjFormDataSigner.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigndocumentID (int) minimum
            if (this.PkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzsigndocumentID" });
            }

            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
