/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Creditcardtype AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "creditcardtype-AutocompleteElement-Response")]
    public partial class CreditcardtypeAutocompleteElementResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ECreditcardtypeCodename
        /// </summary>
        [DataMember(Name = "eCreditcardtypeCodename", IsRequired = true, EmitDefaultValue = true)]
        public FieldECreditcardtypeCodename ECreditcardtypeCodename { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardtypeAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditcardtypeAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditcardtypeAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sCreditcardtypeName">The name of the Creditcardtype (required).</param>
        /// <param name="pkiCreditcardtypeID">The unique ID of the Creditcardtype (required).</param>
        /// <param name="eCreditcardtypeCodename">eCreditcardtypeCodename (required).</param>
        public CreditcardtypeAutocompleteElementResponse(string sCreditcardtypeName = default(string), int pkiCreditcardtypeID = default(int), FieldECreditcardtypeCodename eCreditcardtypeCodename = default(FieldECreditcardtypeCodename))
        {
            // to ensure "sCreditcardtypeName" is required (not null)
            if (sCreditcardtypeName == null)
            {
                throw new ArgumentNullException("sCreditcardtypeName is a required property for CreditcardtypeAutocompleteElementResponse and cannot be null");
            }
            this.SCreditcardtypeName = sCreditcardtypeName;
            this.PkiCreditcardtypeID = pkiCreditcardtypeID;
            this.ECreditcardtypeCodename = eCreditcardtypeCodename;
        }

        /// <summary>
        /// The name of the Creditcardtype
        /// </summary>
        /// <value>The name of the Creditcardtype</value>
        /* <example>Visa</example>*/
        [DataMember(Name = "sCreditcardtypeName", IsRequired = true, EmitDefaultValue = true)]
        public string SCreditcardtypeName { get; set; }

        /// <summary>
        /// The unique ID of the Creditcardtype
        /// </summary>
        /// <value>The unique ID of the Creditcardtype</value>
        /* <example>2</example>*/
        [DataMember(Name = "pkiCreditcardtypeID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCreditcardtypeID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditcardtypeAutocompleteElementResponse {\n");
            sb.Append("  SCreditcardtypeName: ").Append(SCreditcardtypeName).Append("\n");
            sb.Append("  PkiCreditcardtypeID: ").Append(PkiCreditcardtypeID).Append("\n");
            sb.Append("  ECreditcardtypeCodename: ").Append(ECreditcardtypeCodename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SCreditcardtypeName != null) {
                // SCreditcardtypeName (string) pattern
                Regex regexSCreditcardtypeName = new Regex(@"^.{1,30}$", RegexOptions.CultureInvariant);
                if (!regexSCreditcardtypeName.Match(this.SCreditcardtypeName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCreditcardtypeName, must match a pattern of " + regexSCreditcardtypeName, new [] { "SCreditcardtypeName" });
                }
            }

            // PkiCreditcardtypeID (int) maximum
            if (this.PkiCreditcardtypeID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCreditcardtypeID, must be a value less than or equal to 255.", new [] { "PkiCreditcardtypeID" });
            }

            // PkiCreditcardtypeID (int) minimum
            if (this.PkiCreditcardtypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCreditcardtypeID, must be a value greater than or equal to 0.", new [] { "PkiCreditcardtypeID" });
            }

            yield break;
        }
    }

}
