/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions
    /// </summary>
    [DataContract(Name = "ezsigntemplatedocument-getWordsPositions-v1-Request")]
    public partial class EzsigntemplatedocumentGetWordsPositionsV1Request : IValidatableObject
    {
        /// <summary>
        /// Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.
        /// </summary>
        /// <value>Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EGetEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,

            /// <summary>
            /// Enum Words for value: Words
            /// </summary>
            [EnumMember(Value = "Words")]
            Words = 2
        }


        /// <summary>
        /// Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.
        /// </summary>
        /// <value>Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.</value>
        [DataMember(Name = "eGet", IsRequired = true, EmitDefaultValue = true)]
        public EGetEnum EGet { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentGetWordsPositionsV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentGetWordsPositionsV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentGetWordsPositionsV1Request" /> class.
        /// </summary>
        /// <param name="eGet">Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*. (required).</param>
        /// <param name="bWordCaseSensitive">IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive. (required).</param>
        /// <param name="aSWord">Array of words to find in the document.</param>
        public EzsigntemplatedocumentGetWordsPositionsV1Request(EGetEnum eGet = default(EGetEnum), bool bWordCaseSensitive = default(bool), List<string> aSWord = default(List<string>))
        {
            this.EGet = eGet;
            this.BWordCaseSensitive = bWordCaseSensitive;
            this.ASWord = aSWord;
        }

        /// <summary>
        /// IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive.
        /// </summary>
        /// <value>IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive.</value>
        [DataMember(Name = "bWordCaseSensitive", IsRequired = true, EmitDefaultValue = true)]
        public bool BWordCaseSensitive { get; set; }

        /// <summary>
        /// Array of words to find in the document
        /// </summary>
        /// <value>Array of words to find in the document</value>
        [DataMember(Name = "a_sWord", EmitDefaultValue = false)]
        public List<string> ASWord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentGetWordsPositionsV1Request {\n");
            sb.Append("  EGet: ").Append(EGet).Append("\n");
            sb.Append("  BWordCaseSensitive: ").Append(BWordCaseSensitive).Append("\n");
            sb.Append("  ASWord: ").Append(ASWord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
