/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions
    /// </summary>
    [DataContract]
    public partial class EzsigntemplatedocumentGetWordsPositionsV1Request :  IEquatable<EzsigntemplatedocumentGetWordsPositionsV1Request>
    {
        /// <summary>
        /// Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.
        /// </summary>
        /// <value>Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EGetEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,

            /// <summary>
            /// Enum Words for value: Words
            /// </summary>
            [EnumMember(Value = "Words")]
            Words = 2

        }

        /// <summary>
        /// Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.
        /// </summary>
        /// <value>Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.</value>
        [DataMember(Name="eGet", EmitDefaultValue=true)]
        public EGetEnum EGet { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentGetWordsPositionsV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatedocumentGetWordsPositionsV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatedocumentGetWordsPositionsV1Request" /> class.
        /// </summary>
        /// <param name="eGet">Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*. (required).</param>
        /// <param name="bWordCaseSensitive">IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive. (required).</param>
        /// <param name="aSWord">Array of words to find in the document.</param>
        public EzsigntemplatedocumentGetWordsPositionsV1Request(EGetEnum eGet = default(EGetEnum), bool bWordCaseSensitive = default(bool), List<string> aSWord = default(List<string>))
        {
            // to ensure "eGet" is required (not null)
            if (eGet == null)
            {
                throw new InvalidDataException("eGet is a required property for EzsigntemplatedocumentGetWordsPositionsV1Request and cannot be null");
            }
            else
            {
                this.EGet = eGet;
            }

            // to ensure "bWordCaseSensitive" is required (not null)
            if (bWordCaseSensitive == null)
            {
                throw new InvalidDataException("bWordCaseSensitive is a required property for EzsigntemplatedocumentGetWordsPositionsV1Request and cannot be null");
            }
            else
            {
                this.BWordCaseSensitive = bWordCaseSensitive;
            }

            this.ASWord = aSWord;
        }


        /// <summary>
        /// IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive.
        /// </summary>
        /// <value>IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive.</value>
        [DataMember(Name="bWordCaseSensitive", EmitDefaultValue=true)]
        public bool BWordCaseSensitive { get; set; }

        /// <summary>
        /// Array of words to find in the document
        /// </summary>
        /// <value>Array of words to find in the document</value>
        [DataMember(Name="a_sWord", EmitDefaultValue=false)]
        public List<string> ASWord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplatedocumentGetWordsPositionsV1Request {\n");
            sb.Append("  EGet: ").Append(EGet).Append("\n");
            sb.Append("  BWordCaseSensitive: ").Append(BWordCaseSensitive).Append("\n");
            sb.Append("  ASWord: ").Append(ASWord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatedocumentGetWordsPositionsV1Request);
        }

        /// <summary>
        /// Returns true if EzsigntemplatedocumentGetWordsPositionsV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatedocumentGetWordsPositionsV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatedocumentGetWordsPositionsV1Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EGet == input.EGet ||
                    (this.EGet != null &&
                    this.EGet.Equals(input.EGet))
                ) && 
                (
                    this.BWordCaseSensitive == input.BWordCaseSensitive ||
                    (this.BWordCaseSensitive != null &&
                    this.BWordCaseSensitive.Equals(input.BWordCaseSensitive))
                ) && 
                (
                    this.ASWord == input.ASWord ||
                    this.ASWord != null &&
                    input.ASWord != null &&
                    this.ASWord.SequenceEqual(input.ASWord)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EGet != null)
                    hashCode = hashCode * 59 + this.EGet.GetHashCode();
                if (this.BWordCaseSensitive != null)
                    hashCode = hashCode * 59 + this.BWordCaseSensitive.GetHashCode();
                if (this.ASWord != null)
                    hashCode = hashCode * 59 + this.ASWord.GetHashCode();
                return hashCode;
            }
        }
    }

}
