/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Permission Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "permission-ResponseCompound")]
    public partial class PermissionResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PermissionResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionResponseCompound" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Permission (required).</param>
        /// <param name="">The unique ID of the User.</param>
        /// <param name="">The unique ID of the Apikey.</param>
        /// <param name="">The unique ID of the Usergroup.</param>
        /// <param name="">The unique ID of the Company.</param>
        /// <param name="">The unique ID of the Modulesection (required).</param>
        /// <param name="">The Name of the Company in the language of the requester.</param>
        public PermissionResponseCompound(int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), string  = default(string))
        {
            this.PkiPermissionID = ;
            this.FkiModulesectionID = ;
            this.FkiUserID = ;
            this.FkiApikeyID = ;
            this.FkiUsergroupID = ;
            this.FkiCompanyID = ;
            this.SCompanyNameX = ;
        }

        /// <summary>
        /// The unique ID of the Permission
        /// </summary>
        /// <value>The unique ID of the Permission</value>
        /* <example>31</example>*/
        [DataMember(Name = "pkiPermissionID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiPermissionID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", EmitDefaultValue = false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiApikeyID", EmitDefaultValue = false)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// The unique ID of the Usergroup
        /// </summary>
        /// <value>The unique ID of the Usergroup</value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUsergroupID", EmitDefaultValue = false)]
        public int FkiUsergroupID { get; set; }

        /// <summary>
        /// The unique ID of the Company
        /// </summary>
        /// <value>The unique ID of the Company</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiCompanyID", EmitDefaultValue = false)]
        public int FkiCompanyID { get; set; }

        /// <summary>
        /// The unique ID of the Modulesection
        /// </summary>
        /// <value>The unique ID of the Modulesection</value>
        /* <example>53</example>*/
        [DataMember(Name = "fkiModulesectionID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiModulesectionID { get; set; }

        /// <summary>
        /// The Name of the Company in the language of the requester
        /// </summary>
        /// <value>The Name of the Company in the language of the requester</value>
        /* <example>Acme inc.</example>*/
        [DataMember(Name = "sCompanyNameX", EmitDefaultValue = false)]
        public string SCompanyNameX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermissionResponseCompound {\n");
            sb.Append("  PkiPermissionID: ").Append(PkiPermissionID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  FkiUsergroupID: ").Append(FkiUsergroupID).Append("\n");
            sb.Append("  FkiCompanyID: ").Append(FkiCompanyID).Append("\n");
            sb.Append("  FkiModulesectionID: ").Append(FkiModulesectionID).Append("\n");
            sb.Append("  SCompanyNameX: ").Append(SCompanyNameX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiPermissionID (int) maximum
            if (this.PkiPermissionID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPermissionID, must be a value less than or equal to 65535.", new [] { "PkiPermissionID" });
            }

            // PkiPermissionID (int) minimum
            if (this.PkiPermissionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiPermissionID, must be a value greater than or equal to 0.", new [] { "PkiPermissionID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiApikeyID (int) minimum
            if (this.FkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiApikeyID, must be a value greater than or equal to 0.", new [] { "FkiApikeyID" });
            }

            // FkiUsergroupID (int) maximum
            if (this.FkiUsergroupID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value less than or equal to 255.", new [] { "FkiUsergroupID" });
            }

            // FkiUsergroupID (int) minimum
            if (this.FkiUsergroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUsergroupID, must be a value greater than or equal to 0.", new [] { "FkiUsergroupID" });
            }

            // FkiCompanyID (int) maximum
            if (this.FkiCompanyID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyID, must be a value less than or equal to 255.", new [] { "FkiCompanyID" });
            }

            // FkiCompanyID (int) minimum
            if (this.FkiCompanyID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiCompanyID, must be a value greater than or equal to 1.", new [] { "FkiCompanyID" });
            }

            // FkiModulesectionID (int) minimum
            if (this.FkiModulesectionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiModulesectionID, must be a value greater than or equal to 0.", new [] { "FkiModulesectionID" });
            }

            yield break;
        }
    }

}
