/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignature Object
    /// </summary>
    [DataContract]
    public partial class EzsignsignatureResponse :  IEquatable<EzsignsignatureResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EEzsignsignatureType
        /// </summary>
        [DataMember(Name="eEzsignsignatureType", EmitDefaultValue=true)]
        public FieldEEzsignsignatureType EEzsignsignatureType { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureTooltipposition
        /// </summary>
        [DataMember(Name="eEzsignsignatureTooltipposition", EmitDefaultValue=false)]
        public FieldEEzsignsignatureTooltipposition? EEzsignsignatureTooltipposition { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureFont
        /// </summary>
        [DataMember(Name="eEzsignsignatureFont", EmitDefaultValue=false)]
        public FieldEEzsignsignatureFont? EEzsignsignatureFont { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureAttachmentnamesource
        /// </summary>
        [DataMember(Name="eEzsignsignatureAttachmentnamesource", EmitDefaultValue=false)]
        public FieldEEzsignsignatureAttachmentnamesource? EEzsignsignatureAttachmentnamesource { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignsignatureTextvalidation
        /// </summary>
        [DataMember(Name="eEzsignsignatureTextvalidation", EmitDefaultValue=false)]
        public EnumTextvalidation? EEzsignsignatureTextvalidation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="iEzsignsignatureX">The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignsignatureY">The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignsignatureHeight">The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight..</param>
        /// <param name="iEzsignsignatureWidth">The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth..</param>
        /// <param name="iEzsignsignatureStep">The step when the Ezsignsigner will be invited to sign (required).</param>
        /// <param name="eEzsignsignatureType">eEzsignsignatureType (required).</param>
        /// <param name="tEzsignsignatureTooltip">A tooltip that will be presented to Ezsignsigner about the Ezsignsignature.</param>
        /// <param name="eEzsignsignatureTooltipposition">eEzsignsignatureTooltipposition.</param>
        /// <param name="eEzsignsignatureFont">eEzsignsignatureFont.</param>
        /// <param name="iEzsignsignatureValidationstep">The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="sEzsignsignatureAttachmentdescription">The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="eEzsignsignatureAttachmentnamesource">eEzsignsignatureAttachmentnamesource.</param>
        /// <param name="bEzsignsignatureRequired">Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments..</param>
        /// <param name="fkiEzsignfoldersignerassociationIDValidation">The unique ID of the Ezsignfoldersignerassociation.</param>
        /// <param name="dtEzsignsignatureDate">The date the Ezsignsignature was signed.</param>
        /// <param name="iEzsignsignatureattachmentCount">The count of Ezsignsignatureattachment.</param>
        /// <param name="sEzsignsignatureDescription">The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**.</param>
        /// <param name="eEzsignsignatureTextvalidation">eEzsignsignatureTextvalidation.</param>
        /// <param name="sEzsignsignatureRegexp">A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**.</param>
        /// <param name="objContactName">objContactName (required).</param>
        /// <param name="objSignature">objSignature.</param>
// TEST_IGNORE_ME
/* hasMoreNonReadOnly: isPrimitiveType:false isModel:true isContainer: isString:false isNumeric:false isInteger:false isShort:false isLong:false isUnboundedInteger:false isNumber:false isFloat:false isDouble:false isDecimal:false isByteArray: isBinary: isFile: isBoolean:false isDate:false isDateTime:false isUuid:false isUri: isEmail: isNull:false isFreeFormObject: isAnyType:false isArray:false isMap:true isEnum:false isReadOnly: isWriteOnly: isNullable:false isSelfReference: isCircularReference: isDiscriminator: hasValidation:false isInherited: hasRequired:true hasMultipleTypes:false hasItems:false
openApiType                         : 
baseName                            : 
complexType                         : 
getter                              : 
setter                              : 
dataType                            : Object
datatypeWithEnum                    : 
name                                : ezsignsignature-Response
defaultValue                        : 
defaultValueWithParam               : 
baseType                            : 
example                             : 
jsonSchema                          : 
exclusiveMinimum                    : false
exclusiveMaximum                    : false
required                            : 
deprecated                          : 
hasMoreNonReadOnly                  : 
vars                                : [CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;pkiEzsignsignatureID&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getPkiEzsignsignatureID&#39;, setter&#x3D;&#39;setPkiEzsignsignatureID&#39;, description&#x3D;&#39;The unique ID of the Ezsignsignature&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;PkiEzsignsignatureID&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.pkiEzsignsignatureID;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsignsignature&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;49&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsignsignature&quot;,
  &quot;example&quot; : 49
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;null, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;PkiEzsignsignatureID&#39;, nameInSnakeCase&#x3D;&#39;PKI_EZSIGNSIGNATURE_I_D&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;fkiEzsigndocumentID&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getFkiEzsigndocumentID&#39;, setter&#x3D;&#39;setFkiEzsigndocumentID&#39;, description&#x3D;&#39;The unique ID of the Ezsigndocument&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;FkiEzsigndocumentID&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.fkiEzsigndocumentID;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsigndocument&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;97&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsigndocument&quot;,
  &quot;example&quot; : 97
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;FkiEzsigndocumentID&#39;, nameInSnakeCase&#x3D;&#39;FKI_EZSIGNDOCUMENT_I_D&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;fkiEzsignfoldersignerassociationID&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getFkiEzsignfoldersignerassociationID&#39;, setter&#x3D;&#39;setFkiEzsignfoldersignerassociationID&#39;, description&#x3D;&#39;The unique ID of the Ezsignfoldersignerassociation&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;FkiEzsignfoldersignerassociationID&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.fkiEzsignfoldersignerassociationID;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsignfoldersignerassociation&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;20&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsignfoldersignerassociation&quot;,
  &quot;example&quot; : 20
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;FkiEzsignfoldersignerassociationID&#39;, nameInSnakeCase&#x3D;&#39;FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignpagePagenumber&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignpagePagenumber&#39;, setter&#x3D;&#39;setIEzsignpagePagenumber&#39;, description&#x3D;&#39;The page number in the Ezsigndocument&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignpagePagenumber&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignpagePagenumber;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The page number in the Ezsigndocument&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;1&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 1,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The page number in the Ezsigndocument&quot;,
  &quot;example&quot; : 1
}&#39;, minimum&#x3D;&#39;1&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignpagePagenumber&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNPAGE_PAGENUMBER&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureX&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureX&#39;, setter&#x3D;&#39;setIEzsignsignatureX&#39;, description&#x3D;&#39;The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureX&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureX;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The X coordinate (Horizontal) where to put the Ezsignsignature on the page.

Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use &quot;200&quot; for the X coordinate.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;200&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The X coordinate (Horizontal) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.&quot;,
  &quot;example&quot; : 200
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureX&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_X&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureY&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureY&#39;, setter&#x3D;&#39;setIEzsignsignatureY&#39;, description&#x3D;&#39;The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureY&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureY;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The Y coordinate (Vertical) where to put the Ezsignsignature on the page.

Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use &quot;300&quot; for the Y coordinate.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;300&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The Y coordinate (Vertical) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.&quot;,
  &quot;example&quot; : 300
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureY&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_Y&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureHeight&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureHeight&#39;, setter&#x3D;&#39;setIEzsignsignatureHeight&#39;, description&#x3D;&#39;The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureHeight&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureHeight;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The height of the Ezsignsignature.

Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use &quot;200&quot; for the iEzsignsignatureHeight.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;200&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The height of the Ezsignsignature.\n\nSize is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.&quot;,
  &quot;example&quot; : 200
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureHeight&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_HEIGHT&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureWidth&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureWidth&#39;, setter&#x3D;&#39;setIEzsignsignatureWidth&#39;, description&#x3D;&#39;The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureWidth&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureWidth;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The width of the Ezsignsignature.

Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use &quot;200&quot; for the iEzsignsignatureWidth.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;200&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The width of the Ezsignsignature.\n\nSize is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.&quot;,
  &quot;example&quot; : 200
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureWidth&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_WIDTH&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureStep&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureStep&#39;, setter&#x3D;&#39;setIEzsignsignatureStep&#39;, description&#x3D;&#39;The step when the Ezsignsigner will be invited to sign&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureStep&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureStep;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The step when the Ezsignsigner will be invited to sign&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;1&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The step when the Ezsignsigner will be invited to sign&quot;,
  &quot;example&quot; : 1
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureStep&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_STEP&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;FieldEEzsignsignatureType&#39;, baseName&#x3D;&#39;eEzsignsignatureType&#39;, complexType&#x3D;&#39;FieldEEzsignsignatureType&#39;, getter&#x3D;&#39;getEEzsignsignatureType&#39;, setter&#x3D;&#39;setEEzsignsignatureType&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;FieldEEzsignsignatureType&#39;, datatypeWithEnum&#x3D;&#39;FieldEEzsignsignatureType&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;EEzsignsignatureType&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.eEzsignsignatureType;&#39;, baseType&#x3D;&#39;FieldEEzsignsignatureType&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Field-eEzsignsignatureType&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;true, isInnerEnum&#x3D;false, isEnumRef&#x3D;true, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;{values&#x3D;[Acknowledgement, City, Handwritten, Initials, Name, Attachments, AttachmentsConfirmation, FieldText, FieldTextarea], enumVars&#x3D;[{name&#x3D;Acknowledgement, isString&#x3D;true, value&#x3D;Acknowledgement}, {name&#x3D;City, isString&#x3D;true, value&#x3D;City}, {name&#x3D;Handwritten, isString&#x3D;true, value&#x3D;Handwritten}, {name&#x3D;Initials, isString&#x3D;true, value&#x3D;Initials}, {name&#x3D;Name, isString&#x3D;true, value&#x3D;Name}, {name&#x3D;Attachments, isString&#x3D;true, value&#x3D;Attachments}, {name&#x3D;AttachmentsConfirmation, isString&#x3D;true, value&#x3D;AttachmentsConfirmation}, {name&#x3D;FieldText, isString&#x3D;true, value&#x3D;FieldText}, {name&#x3D;FieldTextarea, isString&#x3D;true, value&#x3D;FieldTextarea}]}, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;EEzsignsignatureType&#39;, nameInSnakeCase&#x3D;&#39;E_EZSIGNSIGNATURE_TYPE&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Field-eEzsignsignatureType, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;string&#39;, baseName&#x3D;&#39;tEzsignsignatureTooltip&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getTEzsignsignatureTooltip&#39;, setter&#x3D;&#39;setTEzsignsignatureTooltip&#39;, description&#x3D;&#39;A tooltip that will be presented to Ezsignsigner about the Ezsignsignature&#39;, dataType&#x3D;&#39;string&#39;, datatypeWithEnum&#x3D;&#39;string&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;TEzsignsignatureTooltip&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.tEzsignsignatureTooltip;&#39;, baseType&#x3D;&#39;string&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;A tooltip that will be presented to Ezsignsigner about the Ezsignsignature&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;&quot;Please sign here if you agree to the terms&quot;&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;string&quot;,
  &quot;description&quot; : &quot;A tooltip that will be presented to Ezsignsigner about the Ezsignsignature&quot;,
  &quot;example&quot; : &quot;Please sign here if you agree to the terms&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;true, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-is-value-type&#x3D;false}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;TEzsignsignatureTooltip&#39;, nameInSnakeCase&#x3D;&#39;T_EZSIGNSIGNATURE_TOOLTIP&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;FieldEEzsignsignatureTooltipposition&#39;, baseName&#x3D;&#39;eEzsignsignatureTooltipposition&#39;, complexType&#x3D;&#39;FieldEEzsignsignatureTooltipposition&#39;, getter&#x3D;&#39;getEEzsignsignatureTooltipposition&#39;, setter&#x3D;&#39;setEEzsignsignatureTooltipposition&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;FieldEEzsignsignatureTooltipposition&#39;, datatypeWithEnum&#x3D;&#39;FieldEEzsignsignatureTooltipposition&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;EEzsignsignatureTooltipposition&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.eEzsignsignatureTooltipposition;&#39;, baseType&#x3D;&#39;FieldEEzsignsignatureTooltipposition&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Field-eEzsignsignatureTooltipposition&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;true, isInnerEnum&#x3D;false, isEnumRef&#x3D;true, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;{values&#x3D;[TopLeft, TopCenter, TopRight, MiddleLeft, MiddleRight, BottomLeft, BottomCenter, BottomRight], enumVars&#x3D;[{name&#x3D;TopLeft, isString&#x3D;true, value&#x3D;TopLeft}, {name&#x3D;TopCenter, isString&#x3D;true, value&#x3D;TopCenter}, {name&#x3D;TopRight, isString&#x3D;true, value&#x3D;TopRight}, {name&#x3D;MiddleLeft, isString&#x3D;true, value&#x3D;MiddleLeft}, {name&#x3D;MiddleRight, isString&#x3D;true, value&#x3D;MiddleRight}, {name&#x3D;BottomLeft, isString&#x3D;true, value&#x3D;BottomLeft}, {name&#x3D;BottomCenter, isString&#x3D;true, value&#x3D;BottomCenter}, {name&#x3D;BottomRight, isString&#x3D;true, value&#x3D;BottomRight}]}, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;EEzsignsignatureTooltipposition&#39;, nameInSnakeCase&#x3D;&#39;E_EZSIGNSIGNATURE_TOOLTIPPOSITION&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Field-eEzsignsignatureTooltipposition, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;FieldEEzsignsignatureFont&#39;, baseName&#x3D;&#39;eEzsignsignatureFont&#39;, complexType&#x3D;&#39;FieldEEzsignsignatureFont&#39;, getter&#x3D;&#39;getEEzsignsignatureFont&#39;, setter&#x3D;&#39;setEEzsignsignatureFont&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;FieldEEzsignsignatureFont&#39;, datatypeWithEnum&#x3D;&#39;FieldEEzsignsignatureFont&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;EEzsignsignatureFont&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.eEzsignsignatureFont;&#39;, baseType&#x3D;&#39;FieldEEzsignsignatureFont&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Field-eEzsignsignatureFont&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;true, isInnerEnum&#x3D;false, isEnumRef&#x3D;true, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;{values&#x3D;[Normal, Cursive], enumVars&#x3D;[{name&#x3D;Normal, isString&#x3D;true, value&#x3D;Normal}, {name&#x3D;Cursive, isString&#x3D;true, value&#x3D;Cursive}]}, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;EEzsignsignatureFont&#39;, nameInSnakeCase&#x3D;&#39;E_EZSIGNSIGNATURE_FONT&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Field-eEzsignsignatureFont, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureValidationstep&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureValidationstep&#39;, setter&#x3D;&#39;setIEzsignsignatureValidationstep&#39;, description&#x3D;&#39;The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureValidationstep&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureValidationstep;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;1&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments&quot;,
  &quot;example&quot; : 1
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureValidationstep&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_VALIDATIONSTEP&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;string&#39;, baseName&#x3D;&#39;sEzsignsignatureAttachmentdescription&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getSEzsignsignatureAttachmentdescription&#39;, setter&#x3D;&#39;setSEzsignsignatureAttachmentdescription&#39;, description&#x3D;&#39;The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments&#39;, dataType&#x3D;&#39;string&#39;, datatypeWithEnum&#x3D;&#39;string&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;SEzsignsignatureAttachmentdescription&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.sEzsignsignatureAttachmentdescription;&#39;, baseType&#x3D;&#39;string&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;&quot;Attachment&quot;&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;string&quot;,
  &quot;description&quot; : &quot;The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments&quot;,
  &quot;example&quot; : &quot;Attachment&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;true, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-is-value-type&#x3D;false}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;SEzsignsignatureAttachmentdescription&#39;, nameInSnakeCase&#x3D;&#39;S_EZSIGNSIGNATURE_ATTACHMENTDESCRIPTION&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;FieldEEzsignsignatureAttachmentnamesource&#39;, baseName&#x3D;&#39;eEzsignsignatureAttachmentnamesource&#39;, complexType&#x3D;&#39;FieldEEzsignsignatureAttachmentnamesource&#39;, getter&#x3D;&#39;getEEzsignsignatureAttachmentnamesource&#39;, setter&#x3D;&#39;setEEzsignsignatureAttachmentnamesource&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;FieldEEzsignsignatureAttachmentnamesource&#39;, datatypeWithEnum&#x3D;&#39;FieldEEzsignsignatureAttachmentnamesource&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;EEzsignsignatureAttachmentnamesource&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.eEzsignsignatureAttachmentnamesource;&#39;, baseType&#x3D;&#39;FieldEEzsignsignatureAttachmentnamesource&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Field-eEzsignsignatureAttachmentnamesource&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;true, isInnerEnum&#x3D;false, isEnumRef&#x3D;true, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;{values&#x3D;[Description, Customer, DescriptionCustomer], enumVars&#x3D;[{name&#x3D;Description, isString&#x3D;true, value&#x3D;Description}, {name&#x3D;Customer, isString&#x3D;true, value&#x3D;Customer}, {name&#x3D;DescriptionCustomer, isString&#x3D;true, value&#x3D;DescriptionCustomer}]}, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;EEzsignsignatureAttachmentnamesource&#39;, nameInSnakeCase&#x3D;&#39;E_EZSIGNSIGNATURE_ATTACHMENTNAMESOURCE&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Field-eEzsignsignatureAttachmentnamesource, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;boolean&#39;, baseName&#x3D;&#39;bEzsignsignatureRequired&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getBEzsignsignatureRequired&#39;, setter&#x3D;&#39;setBEzsignsignatureRequired&#39;, description&#x3D;&#39;Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.&#39;, dataType&#x3D;&#39;bool&#39;, datatypeWithEnum&#x3D;&#39;bool&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;BEzsignsignatureRequired&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.bEzsignsignatureRequired;&#39;, baseType&#x3D;&#39;bool&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;boolean&quot;,
  &quot;description&quot; : &quot;Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;true, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;BEzsignsignatureRequired&#39;, nameInSnakeCase&#x3D;&#39;B_EZSIGNSIGNATURE_REQUIRED&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;fkiEzsignfoldersignerassociationIDValidation&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getFkiEzsignfoldersignerassociationIDValidation&#39;, setter&#x3D;&#39;setFkiEzsignfoldersignerassociationIDValidation&#39;, description&#x3D;&#39;The unique ID of the Ezsignfoldersignerassociation&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;FkiEzsignfoldersignerassociationIDValidation&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.fkiEzsignfoldersignerassociationIDValidation;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsignfoldersignerassociation&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;20&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsignfoldersignerassociation&quot;,
  &quot;example&quot; : 20
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;FkiEzsignfoldersignerassociationIDValidation&#39;, nameInSnakeCase&#x3D;&#39;FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D_VALIDATION&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;string&#39;, baseName&#x3D;&#39;dtEzsignsignatureDate&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getDtEzsignsignatureDate&#39;, setter&#x3D;&#39;setDtEzsignsignatureDate&#39;, description&#x3D;&#39;The date the Ezsignsignature was signed&#39;, dataType&#x3D;&#39;string&#39;, datatypeWithEnum&#x3D;&#39;string&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;DtEzsignsignatureDate&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.dtEzsignsignatureDate;&#39;, baseType&#x3D;&#39;string&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The date the Ezsignsignature was signed&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/&#39;, example&#x3D;&#39;&quot;2020-12-31 23:59:59&quot;&#39;, jsonSchema&#x3D;&#39;{
  &quot;pattern&quot; : &quot;^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$&quot;,
  &quot;type&quot; : &quot;string&quot;,
  &quot;description&quot; : &quot;The date the Ezsignsignature was signed&quot;,
  &quot;example&quot; : &quot;2020-12-31 23:59:59&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;true, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;null, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-regex&#x3D;^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$, x-modifiers&#x3D;[CultureInvariant], x-is-value-type&#x3D;false}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;DtEzsignsignatureDate&#39;, nameInSnakeCase&#x3D;&#39;DT_EZSIGNSIGNATURE_DATE&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureattachmentCount&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureattachmentCount&#39;, setter&#x3D;&#39;setIEzsignsignatureattachmentCount&#39;, description&#x3D;&#39;The count of Ezsignsignatureattachment&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureattachmentCount&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureattachmentCount;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The count of Ezsignsignatureattachment&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;7&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The count of Ezsignsignatureattachment&quot;,
  &quot;example&quot; : 7
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;null, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureattachmentCount&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATUREATTACHMENT_COUNT&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;string&#39;, baseName&#x3D;&#39;sEzsignsignatureDescription&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getSEzsignsignatureDescription&#39;, setter&#x3D;&#39;setSEzsignsignatureDescription&#39;, description&#x3D;&#39;The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**&#39;, dataType&#x3D;&#39;string&#39;, datatypeWithEnum&#x3D;&#39;string&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;SEzsignsignatureDescription&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.sEzsignsignatureDescription;&#39;, baseType&#x3D;&#39;string&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;&quot;Montreal&quot;&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;string&quot;,
  &quot;description&quot; : &quot;The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**&quot;,
  &quot;example&quot; : &quot;Montreal&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;true, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;null, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-is-value-type&#x3D;false}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;SEzsignsignatureDescription&#39;, nameInSnakeCase&#x3D;&#39;S_EZSIGNSIGNATURE_DESCRIPTION&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;EnumTextvalidation&#39;, baseName&#x3D;&#39;eEzsignsignatureTextvalidation&#39;, complexType&#x3D;&#39;EnumTextvalidation&#39;, getter&#x3D;&#39;getEEzsignsignatureTextvalidation&#39;, setter&#x3D;&#39;setEEzsignsignatureTextvalidation&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;EnumTextvalidation&#39;, datatypeWithEnum&#x3D;&#39;EnumTextvalidation&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;EEzsignsignatureTextvalidation&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.eEzsignsignatureTextvalidation;&#39;, baseType&#x3D;&#39;EnumTextvalidation&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Enum-Textvalidation&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;true, isInnerEnum&#x3D;false, isEnumRef&#x3D;true, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;{values&#x3D;[None, Date (YYYY-MM-DD), Date (MM/DD/YYYY), Date (MM/DD/YY), Date (DD/MM/YYYY), Date (DD/MM/YY), Email, Letters, Numbers, Zip, Zip+4, PostalCode, Custom], enumVars&#x3D;[{name&#x3D;None, isString&#x3D;true, value&#x3D;None}, {name&#x3D;DateYYYYMMDD, isString&#x3D;true, value&#x3D;Date (YYYY-MM-DD)}, {name&#x3D;DateMMDDYYYY, isString&#x3D;true, value&#x3D;Date (MM/DD/YYYY)}, {name&#x3D;DateMMDDYY, isString&#x3D;true, value&#x3D;Date (MM/DD/YY)}, {name&#x3D;DateDDMMYYYY, isString&#x3D;true, value&#x3D;Date (DD/MM/YYYY)}, {name&#x3D;DateDDMMYY, isString&#x3D;true, value&#x3D;Date (DD/MM/YY)}, {name&#x3D;Email, isString&#x3D;true, value&#x3D;Email}, {name&#x3D;Letters, isString&#x3D;true, value&#x3D;Letters}, {name&#x3D;Numbers, isString&#x3D;true, value&#x3D;Numbers}, {name&#x3D;Zip, isString&#x3D;true, value&#x3D;Zip}, {name&#x3D;Zip4, isString&#x3D;true, value&#x3D;Zip+4}, {name&#x3D;PostalCode, isString&#x3D;true, value&#x3D;PostalCode}, {name&#x3D;Custom, isString&#x3D;true, value&#x3D;Custom}]}, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-csharp-value-type&#x3D;true, x-emit-default-value&#x3D;false, x-is-value-type&#x3D;true}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;EEzsignsignatureTextvalidation&#39;, nameInSnakeCase&#x3D;&#39;E_EZSIGNSIGNATURE_TEXTVALIDATION&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Enum-Textvalidation, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;string&#39;, baseName&#x3D;&#39;sEzsignsignatureRegexp&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getSEzsignsignatureRegexp&#39;, setter&#x3D;&#39;setSEzsignsignatureRegexp&#39;, description&#x3D;&#39;A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**&#39;, dataType&#x3D;&#39;string&#39;, datatypeWithEnum&#x3D;&#39;string&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;SEzsignsignatureRegexp&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.sEzsignsignatureRegexp;&#39;, baseType&#x3D;&#39;string&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;A regular expression to indicate what values are acceptable for the Ezsignsignature.

This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;&quot;/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/&quot;&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;string&quot;,
  &quot;description&quot; : &quot;A regular expression to indicate what values are acceptable for the Ezsignsignature.\n\nThis can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**&quot;,
  &quot;example&quot; : &quot;/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;true, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-is-value-type&#x3D;false}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;SEzsignsignatureRegexp&#39;, nameInSnakeCase&#x3D;&#39;S_EZSIGNSIGNATURE_REGEXP&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;CustomContactNameResponse&#39;, baseName&#x3D;&#39;objContactName&#39;, complexType&#x3D;&#39;CustomContactNameResponse&#39;, getter&#x3D;&#39;getObjContactName&#39;, setter&#x3D;&#39;setObjContactName&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;CustomContactNameResponse&#39;, datatypeWithEnum&#x3D;&#39;CustomContactNameResponse&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;ObjContactName&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.objContactName;&#39;, baseType&#x3D;&#39;CustomContactNameResponse&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Custom-ContactName-Response&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;false, isModel&#x3D;true, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-is-value-type&#x3D;false}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;ObjContactName&#39;, nameInSnakeCase&#x3D;&#39;OBJ_CONTACT_NAME&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Custom-ContactName-Response, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;SignatureResponseCompound&#39;, baseName&#x3D;&#39;objSignature&#39;, complexType&#x3D;&#39;SignatureResponseCompound&#39;, getter&#x3D;&#39;getObjSignature&#39;, setter&#x3D;&#39;setObjSignature&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;SignatureResponseCompound&#39;, datatypeWithEnum&#x3D;&#39;SignatureResponseCompound&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;ObjSignature&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.objSignature;&#39;, baseType&#x3D;&#39;SignatureResponseCompound&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/signature-ResponseCompound&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;false, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;false, isModel&#x3D;true, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;null, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{x-emit-default-value&#x3D;false, x-is-value-type&#x3D;false}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;ObjSignature&#39;, nameInSnakeCase&#x3D;&#39;OBJ_SIGNATURE&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/signature-ResponseCompound, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}]
requiredVars                        : [CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;pkiEzsignsignatureID&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getPkiEzsignsignatureID&#39;, setter&#x3D;&#39;setPkiEzsignsignatureID&#39;, description&#x3D;&#39;The unique ID of the Ezsignsignature&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;PkiEzsignsignatureID&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.pkiEzsignsignatureID;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsignsignature&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;49&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsignsignature&quot;,
  &quot;example&quot; : 49
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;null, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;PkiEzsignsignatureID&#39;, nameInSnakeCase&#x3D;&#39;PKI_EZSIGNSIGNATURE_I_D&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;fkiEzsigndocumentID&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getFkiEzsigndocumentID&#39;, setter&#x3D;&#39;setFkiEzsigndocumentID&#39;, description&#x3D;&#39;The unique ID of the Ezsigndocument&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;FkiEzsigndocumentID&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.fkiEzsigndocumentID;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsigndocument&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;97&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsigndocument&quot;,
  &quot;example&quot; : 97
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;FkiEzsigndocumentID&#39;, nameInSnakeCase&#x3D;&#39;FKI_EZSIGNDOCUMENT_I_D&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;fkiEzsignfoldersignerassociationID&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getFkiEzsignfoldersignerassociationID&#39;, setter&#x3D;&#39;setFkiEzsignfoldersignerassociationID&#39;, description&#x3D;&#39;The unique ID of the Ezsignfoldersignerassociation&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;FkiEzsignfoldersignerassociationID&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.fkiEzsignfoldersignerassociationID;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The unique ID of the Ezsignfoldersignerassociation&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;20&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The unique ID of the Ezsignfoldersignerassociation&quot;,
  &quot;example&quot; : 20
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;FkiEzsignfoldersignerassociationID&#39;, nameInSnakeCase&#x3D;&#39;FKI_EZSIGNFOLDERSIGNERASSOCIATION_I_D&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignpagePagenumber&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignpagePagenumber&#39;, setter&#x3D;&#39;setIEzsignpagePagenumber&#39;, description&#x3D;&#39;The page number in the Ezsigndocument&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignpagePagenumber&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignpagePagenumber;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The page number in the Ezsigndocument&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;1&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 1,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The page number in the Ezsigndocument&quot;,
  &quot;example&quot; : 1
}&#39;, minimum&#x3D;&#39;1&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignpagePagenumber&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNPAGE_PAGENUMBER&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureX&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureX&#39;, setter&#x3D;&#39;setIEzsignsignatureX&#39;, description&#x3D;&#39;The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureX&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureX;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The X coordinate (Horizontal) where to put the Ezsignsignature on the page.

Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use &quot;200&quot; for the X coordinate.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;200&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The X coordinate (Horizontal) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.&quot;,
  &quot;example&quot; : 200
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureX&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_X&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureY&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureY&#39;, setter&#x3D;&#39;setIEzsignsignatureY&#39;, description&#x3D;&#39;The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureY&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureY;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The Y coordinate (Vertical) where to put the Ezsignsignature on the page.

Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use &quot;300&quot; for the Y coordinate.&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;300&#39;, jsonSchema&#x3D;&#39;{
  &quot;minimum&quot; : 0,
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The Y coordinate (Vertical) where to put the Ezsignsignature on the page.\n\nCoordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.&quot;,
  &quot;example&quot; : 300
}&#39;, minimum&#x3D;&#39;0&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;true, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureY&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_Y&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;integer&#39;, baseName&#x3D;&#39;iEzsignsignatureStep&#39;, complexType&#x3D;&#39;null&#39;, getter&#x3D;&#39;getIEzsignsignatureStep&#39;, setter&#x3D;&#39;setIEzsignsignatureStep&#39;, description&#x3D;&#39;The step when the Ezsignsigner will be invited to sign&#39;, dataType&#x3D;&#39;int&#39;, datatypeWithEnum&#x3D;&#39;int&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;IEzsignsignatureStep&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.iEzsignsignatureStep;&#39;, baseType&#x3D;&#39;int&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;The step when the Ezsignsigner will be invited to sign&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;1&#39;, jsonSchema&#x3D;&#39;{
  &quot;type&quot; : &quot;integer&quot;,
  &quot;description&quot; : &quot;The step when the Ezsignsigner will be invited to sign&quot;,
  &quot;example&quot; : 1
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;true, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;true, isInteger&#x3D;true, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;true, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;IEzsignsignatureStep&#39;, nameInSnakeCase&#x3D;&#39;I_EZSIGNSIGNATURE_STEP&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;null, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;FieldEEzsignsignatureType&#39;, baseName&#x3D;&#39;eEzsignsignatureType&#39;, complexType&#x3D;&#39;FieldEEzsignsignatureType&#39;, getter&#x3D;&#39;getEEzsignsignatureType&#39;, setter&#x3D;&#39;setEEzsignsignatureType&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;FieldEEzsignsignatureType&#39;, datatypeWithEnum&#x3D;&#39;FieldEEzsignsignatureType&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;EEzsignsignatureType&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.eEzsignsignatureType;&#39;, baseType&#x3D;&#39;FieldEEzsignsignatureType&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Field-eEzsignsignatureType&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;false, isModel&#x3D;false, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;true, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;{enumVars&#x3D;[{name&#x3D;Acknowledgement, isString&#x3D;true, value&#x3D;Acknowledgement}, {name&#x3D;City, isString&#x3D;true, value&#x3D;City}, {name&#x3D;Handwritten, isString&#x3D;true, value&#x3D;Handwritten}, {name&#x3D;Initials, isString&#x3D;true, value&#x3D;Initials}, {name&#x3D;Name, isString&#x3D;true, value&#x3D;Name}, {name&#x3D;Attachments, isString&#x3D;true, value&#x3D;Attachments}, {name&#x3D;AttachmentsConfirmation, isString&#x3D;true, value&#x3D;AttachmentsConfirmation}, {name&#x3D;FieldText, isString&#x3D;true, value&#x3D;FieldText}, {name&#x3D;FieldTextarea, isString&#x3D;true, value&#x3D;FieldTextarea}], values&#x3D;[Acknowledgement, City, Handwritten, Initials, Name, Attachments, AttachmentsConfirmation, FieldText, FieldTextarea]}, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;EEzsignsignatureType&#39;, nameInSnakeCase&#x3D;&#39;E_EZSIGNSIGNATURE_TYPE&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Field-eEzsignsignatureType, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}, CodegenProperty{openApiType&#x3D;&#39;CustomContactNameResponse&#39;, baseName&#x3D;&#39;objContactName&#39;, complexType&#x3D;&#39;CustomContactNameResponse&#39;, getter&#x3D;&#39;getObjContactName&#39;, setter&#x3D;&#39;setObjContactName&#39;, description&#x3D;&#39;null&#39;, dataType&#x3D;&#39;CustomContactNameResponse&#39;, datatypeWithEnum&#x3D;&#39;CustomContactNameResponse&#39;, dataFormat&#x3D;&#39;null&#39;, name&#x3D;&#39;ObjContactName&#39;, min&#x3D;&#39;null&#39;, max&#x3D;&#39;null&#39;, defaultValue&#x3D;&#39;null&#39;, defaultValueWithParam&#x3D;&#39; &#x3D; data.objContactName;&#39;, baseType&#x3D;&#39;CustomContactNameResponse&#39;, containerType&#x3D;&#39;null&#39;, title&#x3D;&#39;null&#39;, unescapedDescription&#x3D;&#39;null&#39;, maxLength&#x3D;null, minLength&#x3D;null, pattern&#x3D;&#39;null&#39;, example&#x3D;&#39;null&#39;, jsonSchema&#x3D;&#39;{
  &quot;$ref&quot; : &quot;#/components/schemas/Custom-ContactName-Response&quot;
}&#39;, minimum&#x3D;&#39;null&#39;, maximum&#x3D;&#39;null&#39;, exclusiveMinimum&#x3D;false, exclusiveMaximum&#x3D;false, required&#x3D;true, deprecated&#x3D;false, hasMoreNonReadOnly&#x3D;false, isPrimitiveType&#x3D;false, isModel&#x3D;true, isContainer&#x3D;false, isString&#x3D;false, isNumeric&#x3D;false, isInteger&#x3D;false, isShort&#x3D;false, isLong&#x3D;false, isUnboundedInteger&#x3D;false, isNumber&#x3D;false, isFloat&#x3D;false, isDouble&#x3D;false, isDecimal&#x3D;false, isByteArray&#x3D;false, isBinary&#x3D;false, isFile&#x3D;false, isBoolean&#x3D;false, isDate&#x3D;false, isDateTime&#x3D;false, isUuid&#x3D;false, isUri&#x3D;false, isEmail&#x3D;false, isPassword&#x3D;false, isFreeFormObject&#x3D;false, isArray&#x3D;false, isMap&#x3D;false, isEnum&#x3D;false, isInnerEnum&#x3D;false, isEnumRef&#x3D;false, isAnyType&#x3D;false, isReadOnly&#x3D;false, isWriteOnly&#x3D;false, isNullable&#x3D;false, isSelfReference&#x3D;false, isCircularReference&#x3D;false, isDiscriminator&#x3D;false, isNew&#x3D;false, isOverridden&#x3D;false, _enum&#x3D;null, allowableValues&#x3D;null, items&#x3D;null, additionalProperties&#x3D;null, vars&#x3D;[], requiredVars&#x3D;[], mostInnerItems&#x3D;null, vendorExtensions&#x3D;{}, hasValidation&#x3D;false, isInherited&#x3D;false, discriminatorValue&#x3D;&#39;null&#39;, nameInCamelCase&#x3D;&#39;ObjContactName&#39;, nameInSnakeCase&#x3D;&#39;OBJ_CONTACT_NAME&#39;, enumName&#x3D;&#39;null&#39;, maxItems&#x3D;null, minItems&#x3D;null, maxProperties&#x3D;null, minProperties&#x3D;null, uniqueItems&#x3D;false, uniqueItemsBoolean&#x3D;null, multipleOf&#x3D;null, isXmlAttribute&#x3D;false, xmlPrefix&#x3D;&#39;null&#39;, xmlName&#x3D;&#39;null&#39;, xmlNamespace&#x3D;&#39;null&#39;, isXmlWrapped&#x3D;false, isNull&#x3D;false, isVoid&#x3D;false, getAdditionalPropertiesIsAnyType&#x3D;false, getHasVars&#x3D;false, getHasRequired&#x3D;false, getHasDiscriminatorWithNonEmptyMapping&#x3D;false, composedSchemas&#x3D;null, hasMultipleTypes&#x3D;false, requiredVarsMap&#x3D;null, ref&#x3D;#/components/schemas/Custom-ContactName-Response, schemaIsFromAdditionalProperties&#x3D;false, isBooleanSchemaTrue&#x3D;false, isBooleanSchemaFalse&#x3D;false, format&#x3D;null, dependentRequired&#x3D;null, contains&#x3D;null}]
vendorExtensions                    : {}
hasValidation                       : false
nameInCamelCase                     : 
nameInSnakeCase                     : 
uniqueItems                         : false
items :
    
additionalPropertiesIsAnyType       : false
hasVars                             : true
hasRequired                         : true
hasDiscriminatorWithNonEmptyMapping : false
hasMultipleTypes                    : false
hasItems                            : false
iexclusiveMaximum                   : 
datatype                            : 
*/
        public EzsignsignatureResponse(int pkiEzsignsignatureID = default(int), int fkiEzsigndocumentID = default(int), int fkiEzsignfoldersignerassociationID = default(int), int iEzsignpagePagenumber = default(int), int iEzsignsignatureX = default(int), int iEzsignsignatureY = default(int), int iEzsignsignatureHeight = default(int), int iEzsignsignatureWidth = default(int), int iEzsignsignatureStep = default(int), FieldEEzsignsignatureType eEzsignsignatureType = default(FieldEEzsignsignatureType), string tEzsignsignatureTooltip = default(string), FieldEEzsignsignatureTooltipposition? eEzsignsignatureTooltipposition = default(FieldEEzsignsignatureTooltipposition?), FieldEEzsignsignatureFont? eEzsignsignatureFont = default(FieldEEzsignsignatureFont?), int iEzsignsignatureValidationstep = default(int), string sEzsignsignatureAttachmentdescription = default(string), FieldEEzsignsignatureAttachmentnamesource? eEzsignsignatureAttachmentnamesource = default(FieldEEzsignsignatureAttachmentnamesource?), bool bEzsignsignatureRequired = default(bool), int fkiEzsignfoldersignerassociationIDValidation = default(int), string dtEzsignsignatureDate = default(string), int iEzsignsignatureattachmentCount = default(int), string sEzsignsignatureDescription = default(string), EnumTextvalidation? eEzsignsignatureTextvalidation = default(EnumTextvalidation?), string sEzsignsignatureRegexp = default(string), CustomContactNameResponse objContactName = default(CustomContactNameResponse), SignatureResponseCompound objSignature = default(SignatureResponseCompound))
        {
            // to ensure "pkiEzsignsignatureID" is required (not null)
            if (pkiEzsignsignatureID == null)
            {
                throw new InvalidDataException("pkiEzsignsignatureID is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.PkiEzsignsignatureID = pkiEzsignsignatureID;
            }

            // to ensure "fkiEzsigndocumentID" is required (not null)
            if (fkiEzsigndocumentID == null)
            {
                throw new InvalidDataException("fkiEzsigndocumentID is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            }

            // to ensure "fkiEzsignfoldersignerassociationID" is required (not null)
            if (fkiEzsignfoldersignerassociationID == null)
            {
                throw new InvalidDataException("fkiEzsignfoldersignerassociationID is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
            }

            // to ensure "iEzsignpagePagenumber" is required (not null)
            if (iEzsignpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsignpagePagenumber is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            }

            // to ensure "iEzsignsignatureX" is required (not null)
            if (iEzsignsignatureX == null)
            {
                throw new InvalidDataException("iEzsignsignatureX is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.IEzsignsignatureX = iEzsignsignatureX;
            }

            // to ensure "iEzsignsignatureY" is required (not null)
            if (iEzsignsignatureY == null)
            {
                throw new InvalidDataException("iEzsignsignatureY is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.IEzsignsignatureY = iEzsignsignatureY;
            }

            // to ensure "iEzsignsignatureStep" is required (not null)
            if (iEzsignsignatureStep == null)
            {
                throw new InvalidDataException("iEzsignsignatureStep is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.IEzsignsignatureStep = iEzsignsignatureStep;
            }

            // to ensure "eEzsignsignatureType" is required (not null)
            if (eEzsignsignatureType == null)
            {
                throw new InvalidDataException("eEzsignsignatureType is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.EEzsignsignatureType = eEzsignsignatureType;
            }

            // to ensure "objContactName" is required (not null)
            if (objContactName == null)
            {
                throw new InvalidDataException("objContactName is a required property for EzsignsignatureResponse and cannot be null");
            }
            else
            {
                this.ObjContactName = objContactName;
            }

            this.IEzsignsignatureHeight = iEzsignsignatureHeight;
            this.IEzsignsignatureWidth = iEzsignsignatureWidth;
            this.TEzsignsignatureTooltip = tEzsignsignatureTooltip;
            this.EEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
            this.EEzsignsignatureFont = eEzsignsignatureFont;
            this.IEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
            this.SEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
            this.EEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
            this.BEzsignsignatureRequired = bEzsignsignatureRequired;
            this.FkiEzsignfoldersignerassociationIDValidation = fkiEzsignfoldersignerassociationIDValidation;
            this.DtEzsignsignatureDate = dtEzsignsignatureDate;
            this.IEzsignsignatureattachmentCount = iEzsignsignatureattachmentCount;
            this.SEzsignsignatureDescription = sEzsignsignatureDescription;
            this.EEzsignsignatureTextvalidation = eEzsignsignatureTextvalidation;
            this.SEzsignsignatureRegexp = sEzsignsignatureRegexp;
            this.ObjSignature = objSignature;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignature
        /// </summary>
        /// <value>The unique ID of the Ezsignsignature</value>
        [DataMember(Name="pkiEzsignsignatureID", EmitDefaultValue=true)]
        public int PkiEzsignsignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        [DataMember(Name="fkiEzsigndocumentID", EmitDefaultValue=true)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        [DataMember(Name="fkiEzsignfoldersignerassociationID", EmitDefaultValue=true)]
        public int FkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        [DataMember(Name="iEzsignpagePagenumber", EmitDefaultValue=true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsignsignatureX", EmitDefaultValue=true)]
        public int IEzsignsignatureX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsignsignatureY", EmitDefaultValue=true)]
        public int IEzsignsignatureY { get; set; }

        /// <summary>
        /// The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.
        /// </summary>
        /// <value>The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureHeight.</value>
        [DataMember(Name="iEzsignsignatureHeight", EmitDefaultValue=false)]
        public int IEzsignsignatureHeight { get; set; }

        /// <summary>
        /// The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.
        /// </summary>
        /// <value>The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \&quot;200\&quot; for the iEzsignsignatureWidth.</value>
        [DataMember(Name="iEzsignsignatureWidth", EmitDefaultValue=false)]
        public int IEzsignsignatureWidth { get; set; }

        /// <summary>
        /// The step when the Ezsignsigner will be invited to sign
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to sign</value>
        [DataMember(Name="iEzsignsignatureStep", EmitDefaultValue=true)]
        public int IEzsignsignatureStep { get; set; }


        /// <summary>
        /// A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsignsigner about the Ezsignsignature</value>
        [DataMember(Name="tEzsignsignatureTooltip", EmitDefaultValue=false)]
        public string TEzsignsignatureTooltip { get; set; }



        /// <summary>
        /// The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments</value>
        [DataMember(Name="iEzsignsignatureValidationstep", EmitDefaultValue=false)]
        public int IEzsignsignatureValidationstep { get; set; }

        /// <summary>
        /// The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
        /// </summary>
        /// <value>The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments</value>
        [DataMember(Name="sEzsignsignatureAttachmentdescription", EmitDefaultValue=false)]
        public string SEzsignsignatureAttachmentdescription { get; set; }


        /// <summary>
        /// Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.
        /// </summary>
        /// <value>Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.</value>
        [DataMember(Name="bEzsignsignatureRequired", EmitDefaultValue=false)]
        public bool BEzsignsignatureRequired { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        [DataMember(Name="fkiEzsignfoldersignerassociationIDValidation", EmitDefaultValue=false)]
        public int FkiEzsignfoldersignerassociationIDValidation { get; set; }

        /// <summary>
        /// The date the Ezsignsignature was signed
        /// </summary>
        /// <value>The date the Ezsignsignature was signed</value>
        [DataMember(Name="dtEzsignsignatureDate", EmitDefaultValue=false)]
        public string DtEzsignsignatureDate { get; set; }

        /// <summary>
        /// The count of Ezsignsignatureattachment
        /// </summary>
        /// <value>The count of Ezsignsignatureattachment</value>
        [DataMember(Name="iEzsignsignatureattachmentCount", EmitDefaultValue=false)]
        public int IEzsignsignatureattachmentCount { get; set; }

        /// <summary>
        /// The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**
        /// </summary>
        /// <value>The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**</value>
        [DataMember(Name="sEzsignsignatureDescription", EmitDefaultValue=false)]
        public string SEzsignsignatureDescription { get; set; }


        /// <summary>
        /// A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
        /// </summary>
        /// <value>A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**</value>
        [DataMember(Name="sEzsignsignatureRegexp", EmitDefaultValue=false)]
        public string SEzsignsignatureRegexp { get; set; }

        /// <summary>
        /// Gets or Sets ObjContactName
        /// </summary>
        [DataMember(Name="objContactName", EmitDefaultValue=true)]
        public CustomContactNameResponse ObjContactName { get; set; }

        /// <summary>
        /// Gets or Sets ObjSignature
        /// </summary>
        [DataMember(Name="objSignature", EmitDefaultValue=false)]
        public SignatureResponseCompound ObjSignature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignatureResponse {\n");
            sb.Append("  PkiEzsignsignatureID: ").Append(PkiEzsignsignatureID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationID: ").Append(FkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  IEzsignsignatureX: ").Append(IEzsignsignatureX).Append("\n");
            sb.Append("  IEzsignsignatureY: ").Append(IEzsignsignatureY).Append("\n");
            sb.Append("  IEzsignsignatureHeight: ").Append(IEzsignsignatureHeight).Append("\n");
            sb.Append("  IEzsignsignatureWidth: ").Append(IEzsignsignatureWidth).Append("\n");
            sb.Append("  IEzsignsignatureStep: ").Append(IEzsignsignatureStep).Append("\n");
            sb.Append("  EEzsignsignatureType: ").Append(EEzsignsignatureType).Append("\n");
            sb.Append("  TEzsignsignatureTooltip: ").Append(TEzsignsignatureTooltip).Append("\n");
            sb.Append("  EEzsignsignatureTooltipposition: ").Append(EEzsignsignatureTooltipposition).Append("\n");
            sb.Append("  EEzsignsignatureFont: ").Append(EEzsignsignatureFont).Append("\n");
            sb.Append("  IEzsignsignatureValidationstep: ").Append(IEzsignsignatureValidationstep).Append("\n");
            sb.Append("  SEzsignsignatureAttachmentdescription: ").Append(SEzsignsignatureAttachmentdescription).Append("\n");
            sb.Append("  EEzsignsignatureAttachmentnamesource: ").Append(EEzsignsignatureAttachmentnamesource).Append("\n");
            sb.Append("  BEzsignsignatureRequired: ").Append(BEzsignsignatureRequired).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationIDValidation: ").Append(FkiEzsignfoldersignerassociationIDValidation).Append("\n");
            sb.Append("  DtEzsignsignatureDate: ").Append(DtEzsignsignatureDate).Append("\n");
            sb.Append("  IEzsignsignatureattachmentCount: ").Append(IEzsignsignatureattachmentCount).Append("\n");
            sb.Append("  SEzsignsignatureDescription: ").Append(SEzsignsignatureDescription).Append("\n");
            sb.Append("  EEzsignsignatureTextvalidation: ").Append(EEzsignsignatureTextvalidation).Append("\n");
            sb.Append("  SEzsignsignatureRegexp: ").Append(SEzsignsignatureRegexp).Append("\n");
            sb.Append("  ObjContactName: ").Append(ObjContactName).Append("\n");
            sb.Append("  ObjSignature: ").Append(ObjSignature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignatureResponse);
        }

        /// <summary>
        /// Returns true if EzsignsignatureResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignatureResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignatureResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignatureID == input.PkiEzsignsignatureID ||
                    (this.PkiEzsignsignatureID != null &&
                    this.PkiEzsignsignatureID.Equals(input.PkiEzsignsignatureID))
                ) && 
                (
                    this.FkiEzsigndocumentID == input.FkiEzsigndocumentID ||
                    (this.FkiEzsigndocumentID != null &&
                    this.FkiEzsigndocumentID.Equals(input.FkiEzsigndocumentID))
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationID == input.FkiEzsignfoldersignerassociationID ||
                    (this.FkiEzsignfoldersignerassociationID != null &&
                    this.FkiEzsignfoldersignerassociationID.Equals(input.FkiEzsignfoldersignerassociationID))
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    (this.IEzsignpagePagenumber != null &&
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber))
                ) && 
                (
                    this.IEzsignsignatureX == input.IEzsignsignatureX ||
                    (this.IEzsignsignatureX != null &&
                    this.IEzsignsignatureX.Equals(input.IEzsignsignatureX))
                ) && 
                (
                    this.IEzsignsignatureY == input.IEzsignsignatureY ||
                    (this.IEzsignsignatureY != null &&
                    this.IEzsignsignatureY.Equals(input.IEzsignsignatureY))
                ) && 
                (
                    this.IEzsignsignatureHeight == input.IEzsignsignatureHeight ||
                    (this.IEzsignsignatureHeight != null &&
                    this.IEzsignsignatureHeight.Equals(input.IEzsignsignatureHeight))
                ) && 
                (
                    this.IEzsignsignatureWidth == input.IEzsignsignatureWidth ||
                    (this.IEzsignsignatureWidth != null &&
                    this.IEzsignsignatureWidth.Equals(input.IEzsignsignatureWidth))
                ) && 
                (
                    this.IEzsignsignatureStep == input.IEzsignsignatureStep ||
                    (this.IEzsignsignatureStep != null &&
                    this.IEzsignsignatureStep.Equals(input.IEzsignsignatureStep))
                ) && 
                (
                    this.EEzsignsignatureType == input.EEzsignsignatureType ||
                    (this.EEzsignsignatureType != null &&
                    this.EEzsignsignatureType.Equals(input.EEzsignsignatureType))
                ) && 
                (
                    this.TEzsignsignatureTooltip == input.TEzsignsignatureTooltip ||
                    (this.TEzsignsignatureTooltip != null &&
                    this.TEzsignsignatureTooltip.Equals(input.TEzsignsignatureTooltip))
                ) && 
                (
                    this.EEzsignsignatureTooltipposition == input.EEzsignsignatureTooltipposition ||
                    (this.EEzsignsignatureTooltipposition != null &&
                    this.EEzsignsignatureTooltipposition.Equals(input.EEzsignsignatureTooltipposition))
                ) && 
                (
                    this.EEzsignsignatureFont == input.EEzsignsignatureFont ||
                    (this.EEzsignsignatureFont != null &&
                    this.EEzsignsignatureFont.Equals(input.EEzsignsignatureFont))
                ) && 
                (
                    this.IEzsignsignatureValidationstep == input.IEzsignsignatureValidationstep ||
                    (this.IEzsignsignatureValidationstep != null &&
                    this.IEzsignsignatureValidationstep.Equals(input.IEzsignsignatureValidationstep))
                ) && 
                (
                    this.SEzsignsignatureAttachmentdescription == input.SEzsignsignatureAttachmentdescription ||
                    (this.SEzsignsignatureAttachmentdescription != null &&
                    this.SEzsignsignatureAttachmentdescription.Equals(input.SEzsignsignatureAttachmentdescription))
                ) && 
                (
                    this.EEzsignsignatureAttachmentnamesource == input.EEzsignsignatureAttachmentnamesource ||
                    (this.EEzsignsignatureAttachmentnamesource != null &&
                    this.EEzsignsignatureAttachmentnamesource.Equals(input.EEzsignsignatureAttachmentnamesource))
                ) && 
                (
                    this.BEzsignsignatureRequired == input.BEzsignsignatureRequired ||
                    (this.BEzsignsignatureRequired != null &&
                    this.BEzsignsignatureRequired.Equals(input.BEzsignsignatureRequired))
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationIDValidation == input.FkiEzsignfoldersignerassociationIDValidation ||
                    (this.FkiEzsignfoldersignerassociationIDValidation != null &&
                    this.FkiEzsignfoldersignerassociationIDValidation.Equals(input.FkiEzsignfoldersignerassociationIDValidation))
                ) && 
                (
                    this.DtEzsignsignatureDate == input.DtEzsignsignatureDate ||
                    (this.DtEzsignsignatureDate != null &&
                    this.DtEzsignsignatureDate.Equals(input.DtEzsignsignatureDate))
                ) && 
                (
                    this.IEzsignsignatureattachmentCount == input.IEzsignsignatureattachmentCount ||
                    (this.IEzsignsignatureattachmentCount != null &&
                    this.IEzsignsignatureattachmentCount.Equals(input.IEzsignsignatureattachmentCount))
                ) && 
                (
                    this.SEzsignsignatureDescription == input.SEzsignsignatureDescription ||
                    (this.SEzsignsignatureDescription != null &&
                    this.SEzsignsignatureDescription.Equals(input.SEzsignsignatureDescription))
                ) && 
                (
                    this.EEzsignsignatureTextvalidation == input.EEzsignsignatureTextvalidation ||
                    (this.EEzsignsignatureTextvalidation != null &&
                    this.EEzsignsignatureTextvalidation.Equals(input.EEzsignsignatureTextvalidation))
                ) && 
                (
                    this.SEzsignsignatureRegexp == input.SEzsignsignatureRegexp ||
                    (this.SEzsignsignatureRegexp != null &&
                    this.SEzsignsignatureRegexp.Equals(input.SEzsignsignatureRegexp))
                ) && 
                (
                    this.ObjContactName == input.ObjContactName ||
                    (this.ObjContactName != null &&
                    this.ObjContactName.Equals(input.ObjContactName))
                ) && 
                (
                    this.ObjSignature == input.ObjSignature ||
                    (this.ObjSignature != null &&
                    this.ObjSignature.Equals(input.ObjSignature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignatureID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignatureID.GetHashCode();
                if (this.FkiEzsigndocumentID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigndocumentID.GetHashCode();
                if (this.FkiEzsignfoldersignerassociationID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfoldersignerassociationID.GetHashCode();
                if (this.IEzsignpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsignpagePagenumber.GetHashCode();
                if (this.IEzsignsignatureX != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureX.GetHashCode();
                if (this.IEzsignsignatureY != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureY.GetHashCode();
                if (this.IEzsignsignatureHeight != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureHeight.GetHashCode();
                if (this.IEzsignsignatureWidth != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureWidth.GetHashCode();
                if (this.IEzsignsignatureStep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureStep.GetHashCode();
                if (this.EEzsignsignatureType != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureType.GetHashCode();
                if (this.TEzsignsignatureTooltip != null)
                    hashCode = hashCode * 59 + this.TEzsignsignatureTooltip.GetHashCode();
                if (this.EEzsignsignatureTooltipposition != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureTooltipposition.GetHashCode();
                if (this.EEzsignsignatureFont != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureFont.GetHashCode();
                if (this.IEzsignsignatureValidationstep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureValidationstep.GetHashCode();
                if (this.SEzsignsignatureAttachmentdescription != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureAttachmentdescription.GetHashCode();
                if (this.EEzsignsignatureAttachmentnamesource != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureAttachmentnamesource.GetHashCode();
                if (this.BEzsignsignatureRequired != null)
                    hashCode = hashCode * 59 + this.BEzsignsignatureRequired.GetHashCode();
                if (this.FkiEzsignfoldersignerassociationIDValidation != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfoldersignerassociationIDValidation.GetHashCode();
                if (this.DtEzsignsignatureDate != null)
                    hashCode = hashCode * 59 + this.DtEzsignsignatureDate.GetHashCode();
                if (this.IEzsignsignatureattachmentCount != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureattachmentCount.GetHashCode();
                if (this.SEzsignsignatureDescription != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureDescription.GetHashCode();
                if (this.EEzsignsignatureTextvalidation != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureTextvalidation.GetHashCode();
                if (this.SEzsignsignatureRegexp != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureRegexp.GetHashCode();
                if (this.ObjContactName != null)
                    hashCode = hashCode * 59 + this.ObjContactName.GetHashCode();
                if (this.ObjSignature != null)
                    hashCode = hashCode * 59 + this.ObjSignature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsignsignatureID (int) minimum
            if(this.PkiEzsignsignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignsignatureID, must be a value greater than or equal to 0.", new [] { "PkiEzsignsignatureID" });
            }



            // FkiEzsigndocumentID (int) minimum
            if(this.FkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigndocumentID" });
            }



            // FkiEzsignfoldersignerassociationID (int) minimum
            if(this.FkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationID" });
            }



            // IEzsignpagePagenumber (int) minimum
            if(this.IEzsignpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }



            // IEzsignsignatureX (int) minimum
            if(this.IEzsignsignatureX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignsignatureX, must be a value greater than or equal to 0.", new [] { "IEzsignsignatureX" });
            }



            // IEzsignsignatureY (int) minimum
            if(this.IEzsignsignatureY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignsignatureY, must be a value greater than or equal to 0.", new [] { "IEzsignsignatureY" });
            }



            // IEzsignsignatureHeight (int) minimum
            if(this.IEzsignsignatureHeight < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignsignatureHeight, must be a value greater than or equal to 0.", new [] { "IEzsignsignatureHeight" });
            }



            // IEzsignsignatureWidth (int) minimum
            if(this.IEzsignsignatureWidth < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignsignatureWidth, must be a value greater than or equal to 0.", new [] { "IEzsignsignatureWidth" });
            }



            // FkiEzsignfoldersignerassociationIDValidation (int) minimum
            if(this.FkiEzsignfoldersignerassociationIDValidation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationIDValidation, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationIDValidation" });
            }



            // DtEzsignsignatureDate (string) pattern
            Regex regexDtEzsignsignatureDate = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", RegexOptions.CultureInvariant);
            if (false == regexDtEzsignsignatureDate.Match(this.DtEzsignsignatureDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtEzsignsignatureDate, must match a pattern of " + regexDtEzsignsignatureDate, new [] { "DtEzsignsignatureDate" });
            }

            yield break;
        }
    }

}
