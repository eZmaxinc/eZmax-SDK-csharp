/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom Dnsrecord Object
    /// </summary>
    [DataContract(Name = "Custom-Dnsrecord-Response")]
    public partial class CustomDnsrecordResponse : IValidatableObject
    {
        /// <summary>
        /// The type of the Dnsrecord
        /// </summary>
        /// <value>The type of the Dnsrecord</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EDnsrecordTypeEnum
        {
            /// <summary>
            /// Enum CNAME for value: CNAME
            /// </summary>
            [EnumMember(Value = "CNAME")]
            CNAME = 1,

            /// <summary>
            /// Enum MX for value: MX
            /// </summary>
            [EnumMember(Value = "MX")]
            MX = 2,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            [EnumMember(Value = "TXT")]
            TXT = 3
        }


        /// <summary>
        /// The type of the Dnsrecord
        /// </summary>
        /// <value>The type of the Dnsrecord</value>
        [DataMember(Name = "eDnsrecordType", IsRequired = true, EmitDefaultValue = true)]
        public EDnsrecordTypeEnum EDnsrecordType { get; set; }
        /// <summary>
        /// The validation of the Dnsrecord
        /// </summary>
        /// <value>The validation of the Dnsrecord</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EDnsrecordValidationEnum
        {
            /// <summary>
            /// Enum Match for value: Match
            /// </summary>
            [EnumMember(Value = "Match")]
            Match = 1,

            /// <summary>
            /// Enum Mismatch for value: Mismatch
            /// </summary>
            [EnumMember(Value = "Mismatch")]
            Mismatch = 2,

            /// <summary>
            /// Enum NotFound for value: NotFound
            /// </summary>
            [EnumMember(Value = "NotFound")]
            NotFound = 3
        }


        /// <summary>
        /// The validation of the Dnsrecord
        /// </summary>
        /// <value>The validation of the Dnsrecord</value>
        [DataMember(Name = "eDnsrecordValidation", IsRequired = true, EmitDefaultValue = true)]
        public EDnsrecordValidationEnum EDnsrecordValidation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDnsrecordResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomDnsrecordResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomDnsrecordResponse" /> class.
        /// </summary>
        /// <param name="eDnsrecordType">The type of the Dnsrecord (required).</param>
        /// <param name="eDnsrecordValidation">The validation of the Dnsrecord (required).</param>
        /// <param name="sDnsrecordName">The name of the Dnsrecord (required).</param>
        /// <param name="sDnsrecordValue">The value of the Dnsrecord.</param>
        /// <param name="sDnsrecordExpectedvalue">The expected value of the Dnsrecord.</param>
        /// <param name="bDnsrecordMustMatch">Whether the Dnsrecord must match or not (required).</param>
        public CustomDnsrecordResponse(EDnsrecordTypeEnum eDnsrecordType = default(EDnsrecordTypeEnum), EDnsrecordValidationEnum eDnsrecordValidation = default(EDnsrecordValidationEnum), string sDnsrecordName = default(string), string sDnsrecordValue = default(string), string sDnsrecordExpectedvalue = default(string), bool bDnsrecordMustMatch = default(bool))
        {
            this.EDnsrecordType = eDnsrecordType;
            this.EDnsrecordValidation = eDnsrecordValidation;
            // to ensure "sDnsrecordName" is required (not null)
            if (sDnsrecordName == null)
            {
                throw new ArgumentNullException("sDnsrecordName is a required property for CustomDnsrecordResponse and cannot be null");
            }
            this.SDnsrecordName = sDnsrecordName;
            this.BDnsrecordMustMatch = bDnsrecordMustMatch;
            this.SDnsrecordValue = sDnsrecordValue;
            this.SDnsrecordExpectedvalue = sDnsrecordExpectedvalue;
        }

        /// <summary>
        /// The name of the Dnsrecord
        /// </summary>
        /// <value>The name of the Dnsrecord</value>
        [DataMember(Name = "sDnsrecordName", IsRequired = true, EmitDefaultValue = true)]
        public string SDnsrecordName { get; set; }

        /// <summary>
        /// The value of the Dnsrecord
        /// </summary>
        /// <value>The value of the Dnsrecord</value>
        [DataMember(Name = "sDnsrecordValue", EmitDefaultValue = false)]
        public string SDnsrecordValue { get; set; }

        /// <summary>
        /// The expected value of the Dnsrecord
        /// </summary>
        /// <value>The expected value of the Dnsrecord</value>
        [DataMember(Name = "sDnsrecordExpectedvalue", EmitDefaultValue = false)]
        public string SDnsrecordExpectedvalue { get; set; }

        /// <summary>
        /// Whether the Dnsrecord must match or not
        /// </summary>
        /// <value>Whether the Dnsrecord must match or not</value>
        [DataMember(Name = "bDnsrecordMustMatch", IsRequired = true, EmitDefaultValue = true)]
        public bool BDnsrecordMustMatch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomDnsrecordResponse {\n");
            sb.Append("  EDnsrecordType: ").Append(EDnsrecordType).Append("\n");
            sb.Append("  EDnsrecordValidation: ").Append(EDnsrecordValidation).Append("\n");
            sb.Append("  SDnsrecordName: ").Append(SDnsrecordName).Append("\n");
            sb.Append("  SDnsrecordValue: ").Append(SDnsrecordValue).Append("\n");
            sb.Append("  SDnsrecordExpectedvalue: ").Append(SDnsrecordExpectedvalue).Append("\n");
            sb.Append("  BDnsrecordMustMatch: ").Append(BDnsrecordMustMatch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
