/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsigntemplateformfieldgroupsigner Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class EzsigntemplateformfieldgroupsignerRequestCompound :  IEquatable<EzsigntemplateformfieldgroupsignerRequestCompound>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldgroupsignerRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateformfieldgroupsignerRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldgroupsignerRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateformfieldgroupsignerID">The unique ID of the Ezsigntemplateformfieldgroupsigner.</param>
        /// <param name="fkiEzsigntemplatesignerID">The unique ID of the Ezsigntemplatesigner (required).</param>
        public EzsigntemplateformfieldgroupsignerRequestCompound(int pkiEzsigntemplateformfieldgroupsignerID = default(int), int fkiEzsigntemplatesignerID = default(int))
        {
            // to ensure "fkiEzsigntemplatesignerID" is required (not null)
            if (fkiEzsigntemplatesignerID == null)
            {
                throw new InvalidDataException("fkiEzsigntemplatesignerID is a required property for EzsigntemplateformfieldgroupsignerRequestCompound and cannot be null");
            }
            else
            {
                this.FkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID;
            }

            this.PkiEzsigntemplateformfieldgroupsignerID = pkiEzsigntemplateformfieldgroupsignerID;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfieldgroupsigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfieldgroupsigner</value>
        [DataMember(Name="pkiEzsigntemplateformfieldgroupsignerID", EmitDefaultValue=false)]
        public int PkiEzsigntemplateformfieldgroupsignerID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesigner</value>
        [DataMember(Name="fkiEzsigntemplatesignerID", EmitDefaultValue=true)]
        public int FkiEzsigntemplatesignerID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplateformfieldgroupsignerRequestCompound {\n");
            sb.Append("  PkiEzsigntemplateformfieldgroupsignerID: ").Append(PkiEzsigntemplateformfieldgroupsignerID).Append("\n");
            sb.Append("  FkiEzsigntemplatesignerID: ").Append(FkiEzsigntemplatesignerID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplateformfieldgroupsignerRequestCompound);
        }

        /// <summary>
        /// Returns true if EzsigntemplateformfieldgroupsignerRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplateformfieldgroupsignerRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplateformfieldgroupsignerRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigntemplateformfieldgroupsignerID == input.PkiEzsigntemplateformfieldgroupsignerID ||
                    (this.PkiEzsigntemplateformfieldgroupsignerID != null &&
                    this.PkiEzsigntemplateformfieldgroupsignerID.Equals(input.PkiEzsigntemplateformfieldgroupsignerID))
                ) && 
                (
                    this.FkiEzsigntemplatesignerID == input.FkiEzsigntemplatesignerID ||
                    (this.FkiEzsigntemplatesignerID != null &&
                    this.FkiEzsigntemplatesignerID.Equals(input.FkiEzsigntemplatesignerID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigntemplateformfieldgroupsignerID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplateformfieldgroupsignerID.GetHashCode();
                if (this.FkiEzsigntemplatesignerID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplatesignerID.GetHashCode();
                return hashCode;
            }
        }
    }

}
