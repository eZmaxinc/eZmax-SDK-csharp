/*
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.6
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Generic AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class CustomAutocompleteElementResponse :  IEquatable<CustomAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sCategory">The Category for the dropdown or an empty string if not categorized (required).</param>
        /// <param name="sLabel">The Description of the element (required).</param>
        /// <param name="mValue">The Unique ID of the element (required).</param>
        public CustomAutocompleteElementResponse(string sCategory = default(string), string sLabel = default(string), string mValue = default(string))
        {
            // to ensure "sCategory" is required (not null)
            if (sCategory == null)
            {
                throw new InvalidDataException("sCategory is a required property for CustomAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SCategory = sCategory;
            }

            // to ensure "sLabel" is required (not null)
            if (sLabel == null)
            {
                throw new InvalidDataException("sLabel is a required property for CustomAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SLabel = sLabel;
            }

            // to ensure "mValue" is required (not null)
            if (mValue == null)
            {
                throw new InvalidDataException("mValue is a required property for CustomAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.MValue = mValue;
            }

        }

        /// <summary>
        /// The Category for the dropdown or an empty string if not categorized
        /// </summary>
        /// <value>The Category for the dropdown or an empty string if not categorized</value>
        [DataMember(Name="sCategory", EmitDefaultValue=true)]
        public string SCategory { get; set; }

        /// <summary>
        /// The Description of the element
        /// </summary>
        /// <value>The Description of the element</value>
        [DataMember(Name="sLabel", EmitDefaultValue=true)]
        public string SLabel { get; set; }

        /// <summary>
        /// The Unique ID of the element
        /// </summary>
        /// <value>The Unique ID of the element</value>
        [DataMember(Name="mValue", EmitDefaultValue=true)]
        public string MValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAutocompleteElementResponse {\n");
            sb.Append("  SCategory: ").Append(SCategory).Append("\n");
            sb.Append("  SLabel: ").Append(SLabel).Append("\n");
            sb.Append("  MValue: ").Append(MValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if CustomAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SCategory == input.SCategory ||
                    (this.SCategory != null &&
                    this.SCategory.Equals(input.SCategory))
                ) && 
                (
                    this.SLabel == input.SLabel ||
                    (this.SLabel != null &&
                    this.SLabel.Equals(input.SLabel))
                ) && 
                (
                    this.MValue == input.MValue ||
                    (this.MValue != null &&
                    this.MValue.Equals(input.MValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SCategory != null)
                    hashCode = hashCode * 59 + this.SCategory.GetHashCode();
                if (this.SLabel != null)
                    hashCode = hashCode * 59 + this.SLabel.GetHashCode();
                if (this.MValue != null)
                    hashCode = hashCode * 59 + this.MValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
