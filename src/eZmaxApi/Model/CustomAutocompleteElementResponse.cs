/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Generic AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "Custom-AutocompleteElement-Response")]
    public partial class CustomAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sCategory">The Category for the dropdown or an empty string if not categorized (required).</param>
        /// <param name="sLabel">The Description of the element (required).</param>
        /// <param name="sValue">The Unique ID of the element (required).</param>
        /// <param name="mValue">The Unique ID of the element.</param>
        /// <param name="bActive">Indicates if the element is active (required).</param>
        public CustomAutocompleteElementResponse(string sCategory = default(string), string sLabel = default(string), string sValue = default(string), string mValue = default(string), bool bActive = default(bool))
        {
            // to ensure "sCategory" is required (not null)
            if (sCategory == null)
            {
                throw new ArgumentNullException("sCategory is a required property for CustomAutocompleteElementResponse and cannot be null");
            }
            this.SCategory = sCategory;
            // to ensure "sLabel" is required (not null)
            if (sLabel == null)
            {
                throw new ArgumentNullException("sLabel is a required property for CustomAutocompleteElementResponse and cannot be null");
            }
            this.SLabel = sLabel;
            // to ensure "sValue" is required (not null)
            if (sValue == null)
            {
                throw new ArgumentNullException("sValue is a required property for CustomAutocompleteElementResponse and cannot be null");
            }
            this.SValue = sValue;
            this.BActive = bActive;
            this.MValue = mValue;
        }

        /// <summary>
        /// The Category for the dropdown or an empty string if not categorized
        /// </summary>
        /// <value>The Category for the dropdown or an empty string if not categorized</value>
        [DataMember(Name = "sCategory", IsRequired = true, EmitDefaultValue = true)]
        public string SCategory { get; set; }

        /// <summary>
        /// The Description of the element
        /// </summary>
        /// <value>The Description of the element</value>
        [DataMember(Name = "sLabel", IsRequired = true, EmitDefaultValue = true)]
        public string SLabel { get; set; }

        /// <summary>
        /// The Unique ID of the element
        /// </summary>
        /// <value>The Unique ID of the element</value>
        [DataMember(Name = "sValue", IsRequired = true, EmitDefaultValue = true)]
        public string SValue { get; set; }

        /// <summary>
        /// The Unique ID of the element
        /// </summary>
        /// <value>The Unique ID of the element</value>
        [DataMember(Name = "mValue", EmitDefaultValue = false)]
        [Obsolete]
        public string MValue { get; set; }

        /// <summary>
        /// Indicates if the element is active
        /// </summary>
        /// <value>Indicates if the element is active</value>
        [DataMember(Name = "bActive", IsRequired = true, EmitDefaultValue = true)]
        public bool BActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomAutocompleteElementResponse {\n");
            sb.Append("  SCategory: ").Append(SCategory).Append("\n");
            sb.Append("  SLabel: ").Append(SLabel).Append("\n");
            sb.Append("  SValue: ").Append(SValue).Append("\n");
            sb.Append("  MValue: ").Append(MValue).Append("\n");
            sb.Append("  BActive: ").Append(BActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
