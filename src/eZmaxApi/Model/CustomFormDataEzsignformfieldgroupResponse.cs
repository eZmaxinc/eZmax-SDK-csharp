/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An FormDataSigner-&gt;Ezsignformfieldgroup Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "Custom-FormDataEzsignformfieldgroup-Response")]
    public partial class CustomFormDataEzsignformfieldgroupResponse : IEquatable<CustomFormDataEzsignformfieldgroupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormDataEzsignformfieldgroupResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFormDataEzsignformfieldgroupResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormDataEzsignformfieldgroupResponse" /> class.
        /// </summary>
        /// <param name="sEzsignformfieldgroupLabel">The Label for the Ezsignformfieldgroup (required).</param>
        /// <param name="aObjEzsignformfield">aObjEzsignformfield (required).</param>
        public CustomFormDataEzsignformfieldgroupResponse(string sEzsignformfieldgroupLabel = default(string), List<CustomFormDataEzsignformfieldResponse> aObjEzsignformfield = default(List<CustomFormDataEzsignformfieldResponse>))
        {
            // to ensure "sEzsignformfieldgroupLabel" is required (not null)
            if (sEzsignformfieldgroupLabel == null)
            {
                throw new ArgumentNullException("sEzsignformfieldgroupLabel is a required property for CustomFormDataEzsignformfieldgroupResponse and cannot be null");
            }
            this.SEzsignformfieldgroupLabel = sEzsignformfieldgroupLabel;
            // to ensure "aObjEzsignformfield" is required (not null)
            if (aObjEzsignformfield == null)
            {
                throw new ArgumentNullException("aObjEzsignformfield is a required property for CustomFormDataEzsignformfieldgroupResponse and cannot be null");
            }
            this.AObjEzsignformfield = aObjEzsignformfield;
        }

        /// <summary>
        /// The Label for the Ezsignformfieldgroup
        /// </summary>
        /// <value>The Label for the Ezsignformfieldgroup</value>
		/* <example>Allergies</example>*/
        [DataMember(Name = "sEzsignformfieldgroupLabel", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignformfieldgroupLabel { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsignformfield
        /// </summary>
        [DataMember(Name = "a_objEzsignformfield", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomFormDataEzsignformfieldResponse> AObjEzsignformfield { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFormDataEzsignformfieldgroupResponse {\n");
            sb.Append("  SEzsignformfieldgroupLabel: ").Append(SEzsignformfieldgroupLabel).Append("\n");
            sb.Append("  AObjEzsignformfield: ").Append(AObjEzsignformfield).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFormDataEzsignformfieldgroupResponse);
        }

        /// <summary>
        /// Returns true if CustomFormDataEzsignformfieldgroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFormDataEzsignformfieldgroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFormDataEzsignformfieldgroupResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SEzsignformfieldgroupLabel == input.SEzsignformfieldgroupLabel ||
                    (this.SEzsignformfieldgroupLabel != null &&
                    this.SEzsignformfieldgroupLabel.Equals(input.SEzsignformfieldgroupLabel))
                ) && 
                (
                    this.AObjEzsignformfield == input.AObjEzsignformfield ||
                    this.AObjEzsignformfield != null &&
                    input.AObjEzsignformfield != null &&
                    this.AObjEzsignformfield.SequenceEqual(input.AObjEzsignformfield)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SEzsignformfieldgroupLabel != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsignformfieldgroupLabel.GetHashCode();
                }
                if (this.AObjEzsignformfield != null)
                {
                    hashCode = (hashCode * 59) + this.AObjEzsignformfield.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SEzsignformfieldgroupLabel (string) maxLength
            if (this.SEzsignformfieldgroupLabel != null && this.SEzsignformfieldgroupLabel.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignformfieldgroupLabel, length must be less than 50.", new [] { "SEzsignformfieldgroupLabel" });
            }

            // SEzsignformfieldgroupLabel (string) minLength
            if (this.SEzsignformfieldgroupLabel != null && this.SEzsignformfieldgroupLabel.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignformfieldgroupLabel, length must be greater than 1.", new [] { "SEzsignformfieldgroupLabel" });
            }

            yield break;
        }
    }

}
