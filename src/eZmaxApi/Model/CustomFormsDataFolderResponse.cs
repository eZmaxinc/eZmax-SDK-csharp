/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A forms Data Folder Object
    /// </summary>
    [DataContract(Name = "Custom-FormsDataFolder-Response")]
    public partial class CustomFormsDataFolderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormsDataFolderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFormsDataFolderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormsDataFolderResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsignfolder (required).</param>
        /// <param name="">The description of the Ezsignfolder (required).</param>
        /// <param name=""> (required).</param>
        public CustomFormsDataFolderResponse(int  = default(int), string  = default(string), List<CustomFormDataDocumentResponse>  = default(List<CustomFormDataDocumentResponse>))
        {
            this.PkiEzsignfolderID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CustomFormsDataFolderResponse and cannot be null");
            }
            this.SEzsignfolderDescription = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CustomFormsDataFolderResponse and cannot be null");
            }
            this.AObjFormDataDocument = ;
        }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        /* <example>33</example>*/
        [DataMember(Name = "pkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfolderID { get; set; }

        /// <summary>
        /// The description of the Ezsignfolder
        /// </summary>
        /// <value>The description of the Ezsignfolder</value>
        /* <example>Test eZsign Folder</example>*/
        [DataMember(Name = "sEzsignfolderDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignfolderDescription { get; set; }

        /// <summary>
        /// Gets or Sets AObjFormDataDocument
        /// </summary>
        [DataMember(Name = "a_objFormDataDocument", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomFormDataDocumentResponse> AObjFormDataDocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFormsDataFolderResponse {\n");
            sb.Append("  PkiEzsignfolderID: ").Append(PkiEzsignfolderID).Append("\n");
            sb.Append("  SEzsignfolderDescription: ").Append(SEzsignfolderDescription).Append("\n");
            sb.Append("  AObjFormDataDocument: ").Append(AObjFormDataDocument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfolderID (int) minimum
            if (this.PkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfolderID" });
            }

            if (this.SEzsignfolderDescription != null) {
                // SEzsignfolderDescription (string) pattern
                Regex regexSEzsignfolderDescription = new Regex(@"^.{0,75}$", RegexOptions.CultureInvariant);
                if (!regexSEzsignfolderDescription.Match(this.SEzsignfolderDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignfolderDescription, must match a pattern of " + regexSEzsignfolderDescription, new [] { "SEzsignfolderDescription" });
                }
            }

            yield break;
        }
    }

}
