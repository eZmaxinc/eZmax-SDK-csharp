/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsignannotation Object
    /// </summary>
    [DataContract]
    public partial class EzsignannotationResponseCompound :  IEquatable<EzsignannotationResponseCompound>
    {
        /// <summary>
        /// Gets or Sets EEzsignannotationHorizontalalignment
        /// </summary>
        [DataMember(Name="eEzsignannotationHorizontalalignment", EmitDefaultValue=false)]
        public EnumHorizontalalignment? EEzsignannotationHorizontalalignment { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignannotationVerticalalignment
        /// </summary>
        [DataMember(Name="eEzsignannotationVerticalalignment", EmitDefaultValue=false)]
        public EnumVerticalalignment? EEzsignannotationVerticalalignment { get; set; }
        /// <summary>
        /// Gets or Sets EEzsignannotationType
        /// </summary>
        [DataMember(Name="eEzsignannotationType", EmitDefaultValue=true)]
        public FieldEEzsignannotationType EEzsignannotationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignannotationResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignannotationResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignannotationResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignannotationID">The unique ID of the Ezsignannotation (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="eEzsignannotationHorizontalalignment">eEzsignannotationHorizontalalignment.</param>
        /// <param name="eEzsignannotationVerticalalignment">eEzsignannotationVerticalalignment.</param>
        /// <param name="eEzsignannotationType">eEzsignannotationType (required).</param>
        /// <param name="iEzsignannotationX">The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignannotationY">The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignannotationWidth">The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width..</param>
        /// <param name="iEzsignannotationHeight">The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**.</param>
        /// <param name="sEzsignannotationText">The Text of the Ezsignannotation.</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="objTextstylestatic">objTextstylestatic.</param>
        public EzsignannotationResponseCompound(int pkiEzsignannotationID = default(int), int fkiEzsigndocumentID = default(int), EnumHorizontalalignment? eEzsignannotationHorizontalalignment = default(EnumHorizontalalignment?), EnumVerticalalignment? eEzsignannotationVerticalalignment = default(EnumVerticalalignment?), FieldEEzsignannotationType eEzsignannotationType = default(FieldEEzsignannotationType), int iEzsignannotationX = default(int), int iEzsignannotationY = default(int), int iEzsignannotationWidth = default(int), int iEzsignannotationHeight = default(int), string sEzsignannotationText = default(string), int iEzsignpagePagenumber = default(int), TextstylestaticResponseCompound objTextstylestatic = default(TextstylestaticResponseCompound))
        {
            // to ensure "pkiEzsignannotationID" is required (not null)
            if (pkiEzsignannotationID == null)
            {
                throw new InvalidDataException("pkiEzsignannotationID is a required property for EzsignannotationResponseCompound and cannot be null");
            }
            else
            {
                this.PkiEzsignannotationID = pkiEzsignannotationID;
            }

            // to ensure "fkiEzsigndocumentID" is required (not null)
            if (fkiEzsigndocumentID == null)
            {
                throw new InvalidDataException("fkiEzsigndocumentID is a required property for EzsignannotationResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            }

            // to ensure "eEzsignannotationType" is required (not null)
            if (eEzsignannotationType == null)
            {
                throw new InvalidDataException("eEzsignannotationType is a required property for EzsignannotationResponseCompound and cannot be null");
            }
            else
            {
                this.EEzsignannotationType = eEzsignannotationType;
            }

            // to ensure "iEzsignannotationX" is required (not null)
            if (iEzsignannotationX == null)
            {
                throw new InvalidDataException("iEzsignannotationX is a required property for EzsignannotationResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignannotationX = iEzsignannotationX;
            }

            // to ensure "iEzsignannotationY" is required (not null)
            if (iEzsignannotationY == null)
            {
                throw new InvalidDataException("iEzsignannotationY is a required property for EzsignannotationResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignannotationY = iEzsignannotationY;
            }

            // to ensure "iEzsignpagePagenumber" is required (not null)
            if (iEzsignpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsignpagePagenumber is a required property for EzsignannotationResponseCompound and cannot be null");
            }
            else
            {
                this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            }

            this.EEzsignannotationHorizontalalignment = eEzsignannotationHorizontalalignment;
            this.EEzsignannotationVerticalalignment = eEzsignannotationVerticalalignment;
            this.IEzsignannotationWidth = iEzsignannotationWidth;
            this.IEzsignannotationHeight = iEzsignannotationHeight;
            this.SEzsignannotationText = sEzsignannotationText;
            this.ObjTextstylestatic = objTextstylestatic;
        }

        /// <summary>
        /// The unique ID of the Ezsignannotation
        /// </summary>
        /// <value>The unique ID of the Ezsignannotation</value>
        [DataMember(Name="pkiEzsignannotationID", EmitDefaultValue=true)]
        public int PkiEzsignannotationID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        [DataMember(Name="fkiEzsigndocumentID", EmitDefaultValue=true)]
        public int FkiEzsigndocumentID { get; set; }




        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsignannotationX", EmitDefaultValue=true)]
        public int IEzsignannotationX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsignannotationY", EmitDefaultValue=true)]
        public int IEzsignannotationY { get; set; }

        /// <summary>
        /// The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width.
        /// </summary>
        /// <value>The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \&quot;300\&quot; for the Width.</value>
        [DataMember(Name="iEzsignannotationWidth", EmitDefaultValue=false)]
        public int IEzsignannotationWidth { get; set; }

        /// <summary>
        /// The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**
        /// </summary>
        /// <value>The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \&quot;200\&quot; for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**</value>
        [DataMember(Name="iEzsignannotationHeight", EmitDefaultValue=false)]
        public int IEzsignannotationHeight { get; set; }

        /// <summary>
        /// The Text of the Ezsignannotation
        /// </summary>
        /// <value>The Text of the Ezsignannotation</value>
        [DataMember(Name="sEzsignannotationText", EmitDefaultValue=false)]
        public string SEzsignannotationText { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        [DataMember(Name="iEzsignpagePagenumber", EmitDefaultValue=true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// Gets or Sets ObjTextstylestatic
        /// </summary>
        [DataMember(Name="objTextstylestatic", EmitDefaultValue=false)]
        public TextstylestaticResponseCompound ObjTextstylestatic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignannotationResponseCompound {\n");
            sb.Append("  PkiEzsignannotationID: ").Append(PkiEzsignannotationID).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  EEzsignannotationHorizontalalignment: ").Append(EEzsignannotationHorizontalalignment).Append("\n");
            sb.Append("  EEzsignannotationVerticalalignment: ").Append(EEzsignannotationVerticalalignment).Append("\n");
            sb.Append("  EEzsignannotationType: ").Append(EEzsignannotationType).Append("\n");
            sb.Append("  IEzsignannotationX: ").Append(IEzsignannotationX).Append("\n");
            sb.Append("  IEzsignannotationY: ").Append(IEzsignannotationY).Append("\n");
            sb.Append("  IEzsignannotationWidth: ").Append(IEzsignannotationWidth).Append("\n");
            sb.Append("  IEzsignannotationHeight: ").Append(IEzsignannotationHeight).Append("\n");
            sb.Append("  SEzsignannotationText: ").Append(SEzsignannotationText).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  ObjTextstylestatic: ").Append(ObjTextstylestatic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignannotationResponseCompound);
        }

        /// <summary>
        /// Returns true if EzsignannotationResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignannotationResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignannotationResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignannotationID == input.PkiEzsignannotationID ||
                    (this.PkiEzsignannotationID != null &&
                    this.PkiEzsignannotationID.Equals(input.PkiEzsignannotationID))
                ) && 
                (
                    this.FkiEzsigndocumentID == input.FkiEzsigndocumentID ||
                    (this.FkiEzsigndocumentID != null &&
                    this.FkiEzsigndocumentID.Equals(input.FkiEzsigndocumentID))
                ) && 
                (
                    this.EEzsignannotationHorizontalalignment == input.EEzsignannotationHorizontalalignment ||
                    (this.EEzsignannotationHorizontalalignment != null &&
                    this.EEzsignannotationHorizontalalignment.Equals(input.EEzsignannotationHorizontalalignment))
                ) && 
                (
                    this.EEzsignannotationVerticalalignment == input.EEzsignannotationVerticalalignment ||
                    (this.EEzsignannotationVerticalalignment != null &&
                    this.EEzsignannotationVerticalalignment.Equals(input.EEzsignannotationVerticalalignment))
                ) && 
                (
                    this.EEzsignannotationType == input.EEzsignannotationType ||
                    (this.EEzsignannotationType != null &&
                    this.EEzsignannotationType.Equals(input.EEzsignannotationType))
                ) && 
                (
                    this.IEzsignannotationX == input.IEzsignannotationX ||
                    (this.IEzsignannotationX != null &&
                    this.IEzsignannotationX.Equals(input.IEzsignannotationX))
                ) && 
                (
                    this.IEzsignannotationY == input.IEzsignannotationY ||
                    (this.IEzsignannotationY != null &&
                    this.IEzsignannotationY.Equals(input.IEzsignannotationY))
                ) && 
                (
                    this.IEzsignannotationWidth == input.IEzsignannotationWidth ||
                    (this.IEzsignannotationWidth != null &&
                    this.IEzsignannotationWidth.Equals(input.IEzsignannotationWidth))
                ) && 
                (
                    this.IEzsignannotationHeight == input.IEzsignannotationHeight ||
                    (this.IEzsignannotationHeight != null &&
                    this.IEzsignannotationHeight.Equals(input.IEzsignannotationHeight))
                ) && 
                (
                    this.SEzsignannotationText == input.SEzsignannotationText ||
                    (this.SEzsignannotationText != null &&
                    this.SEzsignannotationText.Equals(input.SEzsignannotationText))
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    (this.IEzsignpagePagenumber != null &&
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber))
                ) && 
                (
                    this.ObjTextstylestatic == input.ObjTextstylestatic ||
                    (this.ObjTextstylestatic != null &&
                    this.ObjTextstylestatic.Equals(input.ObjTextstylestatic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignannotationID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignannotationID.GetHashCode();
                if (this.FkiEzsigndocumentID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigndocumentID.GetHashCode();
                if (this.EEzsignannotationHorizontalalignment != null)
                    hashCode = hashCode * 59 + this.EEzsignannotationHorizontalalignment.GetHashCode();
                if (this.EEzsignannotationVerticalalignment != null)
                    hashCode = hashCode * 59 + this.EEzsignannotationVerticalalignment.GetHashCode();
                if (this.EEzsignannotationType != null)
                    hashCode = hashCode * 59 + this.EEzsignannotationType.GetHashCode();
                if (this.IEzsignannotationX != null)
                    hashCode = hashCode * 59 + this.IEzsignannotationX.GetHashCode();
                if (this.IEzsignannotationY != null)
                    hashCode = hashCode * 59 + this.IEzsignannotationY.GetHashCode();
                if (this.IEzsignannotationWidth != null)
                    hashCode = hashCode * 59 + this.IEzsignannotationWidth.GetHashCode();
                if (this.IEzsignannotationHeight != null)
                    hashCode = hashCode * 59 + this.IEzsignannotationHeight.GetHashCode();
                if (this.SEzsignannotationText != null)
                    hashCode = hashCode * 59 + this.SEzsignannotationText.GetHashCode();
                if (this.IEzsignpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsignpagePagenumber.GetHashCode();
                if (this.ObjTextstylestatic != null)
                    hashCode = hashCode * 59 + this.ObjTextstylestatic.GetHashCode();
                return hashCode;
            }
        }
    }

}
