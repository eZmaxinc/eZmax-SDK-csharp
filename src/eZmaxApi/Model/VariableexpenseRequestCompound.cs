/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Variableexpense Object and children
    /// </summary>
    [DataContract]
    public partial class VariableexpenseRequestCompound :  IEquatable<VariableexpenseRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EVariableexpenseTaxable
        /// </summary>
        [DataMember(Name="eVariableexpenseTaxable", EmitDefaultValue=true)]
        public FieldEVariableexpenseTaxable EVariableexpenseTaxable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableexpenseRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VariableexpenseRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableexpenseRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiVariableexpenseID">The unique ID of the Variableexpense.</param>
        /// <param name="sVariableexpenseCode">The code of the Variableexpense (required).</param>
        /// <param name="objVariableexpenseDescription">objVariableexpenseDescription (required).</param>
        /// <param name="eVariableexpenseTaxable">eVariableexpenseTaxable (required).</param>
        /// <param name="bVariableexpenseIsactive">Whether the variableexpense is active or not (required).</param>
        public VariableexpenseRequestCompound(int pkiVariableexpenseID = default(int), string sVariableexpenseCode = default(string), MultilingualVariableexpenseDescription objVariableexpenseDescription = default(MultilingualVariableexpenseDescription), FieldEVariableexpenseTaxable eVariableexpenseTaxable = default(FieldEVariableexpenseTaxable), bool bVariableexpenseIsactive = default(bool))
        {
            // to ensure "sVariableexpenseCode" is required (not null)
            if (sVariableexpenseCode == null)
            {
                throw new InvalidDataException("sVariableexpenseCode is a required property for VariableexpenseRequestCompound and cannot be null");
            }
            else
            {
                this.SVariableexpenseCode = sVariableexpenseCode;
            }

            // to ensure "objVariableexpenseDescription" is required (not null)
            if (objVariableexpenseDescription == null)
            {
                throw new InvalidDataException("objVariableexpenseDescription is a required property for VariableexpenseRequestCompound and cannot be null");
            }
            else
            {
                this.ObjVariableexpenseDescription = objVariableexpenseDescription;
            }

            // to ensure "eVariableexpenseTaxable" is required (not null)
            if (eVariableexpenseTaxable == null)
            {
                throw new InvalidDataException("eVariableexpenseTaxable is a required property for VariableexpenseRequestCompound and cannot be null");
            }
            else
            {
                this.EVariableexpenseTaxable = eVariableexpenseTaxable;
            }

            // to ensure "bVariableexpenseIsactive" is required (not null)
            if (bVariableexpenseIsactive == null)
            {
                throw new InvalidDataException("bVariableexpenseIsactive is a required property for VariableexpenseRequestCompound and cannot be null");
            }
            else
            {
                this.BVariableexpenseIsactive = bVariableexpenseIsactive;
            }

            this.PkiVariableexpenseID = pkiVariableexpenseID;
        }

        /// <summary>
        /// The unique ID of the Variableexpense
        /// </summary>
        /// <value>The unique ID of the Variableexpense</value>
        [DataMember(Name="pkiVariableexpenseID", EmitDefaultValue=false)]
        public int PkiVariableexpenseID { get; set; }

        /// <summary>
        /// The code of the Variableexpense
        /// </summary>
        /// <value>The code of the Variableexpense</value>
        [DataMember(Name="sVariableexpenseCode", EmitDefaultValue=true)]
        public string SVariableexpenseCode { get; set; }

        /// <summary>
        /// Gets or Sets ObjVariableexpenseDescription
        /// </summary>
        [DataMember(Name="objVariableexpenseDescription", EmitDefaultValue=true)]
        public MultilingualVariableexpenseDescription ObjVariableexpenseDescription { get; set; }


        /// <summary>
        /// Whether the variableexpense is active or not
        /// </summary>
        /// <value>Whether the variableexpense is active or not</value>
        [DataMember(Name="bVariableexpenseIsactive", EmitDefaultValue=true)]
        public bool BVariableexpenseIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableexpenseRequestCompound {\n");
            sb.Append("  PkiVariableexpenseID: ").Append(PkiVariableexpenseID).Append("\n");
            sb.Append("  SVariableexpenseCode: ").Append(SVariableexpenseCode).Append("\n");
            sb.Append("  ObjVariableexpenseDescription: ").Append(ObjVariableexpenseDescription).Append("\n");
            sb.Append("  EVariableexpenseTaxable: ").Append(EVariableexpenseTaxable).Append("\n");
            sb.Append("  BVariableexpenseIsactive: ").Append(BVariableexpenseIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariableexpenseRequestCompound);
        }

        /// <summary>
        /// Returns true if VariableexpenseRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of VariableexpenseRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableexpenseRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiVariableexpenseID == input.PkiVariableexpenseID ||
                    (this.PkiVariableexpenseID != null &&
                    this.PkiVariableexpenseID.Equals(input.PkiVariableexpenseID))
                ) && 
                (
                    this.SVariableexpenseCode == input.SVariableexpenseCode ||
                    (this.SVariableexpenseCode != null &&
                    this.SVariableexpenseCode.Equals(input.SVariableexpenseCode))
                ) && 
                (
                    this.ObjVariableexpenseDescription == input.ObjVariableexpenseDescription ||
                    (this.ObjVariableexpenseDescription != null &&
                    this.ObjVariableexpenseDescription.Equals(input.ObjVariableexpenseDescription))
                ) && 
                (
                    this.EVariableexpenseTaxable == input.EVariableexpenseTaxable ||
                    (this.EVariableexpenseTaxable != null &&
                    this.EVariableexpenseTaxable.Equals(input.EVariableexpenseTaxable))
                ) && 
                (
                    this.BVariableexpenseIsactive == input.BVariableexpenseIsactive ||
                    (this.BVariableexpenseIsactive != null &&
                    this.BVariableexpenseIsactive.Equals(input.BVariableexpenseIsactive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiVariableexpenseID != null)
                    hashCode = hashCode * 59 + this.PkiVariableexpenseID.GetHashCode();
                if (this.SVariableexpenseCode != null)
                    hashCode = hashCode * 59 + this.SVariableexpenseCode.GetHashCode();
                if (this.ObjVariableexpenseDescription != null)
                    hashCode = hashCode * 59 + this.ObjVariableexpenseDescription.GetHashCode();
                if (this.EVariableexpenseTaxable != null)
                    hashCode = hashCode * 59 + this.EVariableexpenseTaxable.GetHashCode();
                if (this.BVariableexpenseIsactive != null)
                    hashCode = hashCode * 59 + this.BVariableexpenseIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiVariableexpenseID (int) maximum
            if(this.PkiVariableexpenseID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiVariableexpenseID, must be a value less than or equal to 255.", new [] { "PkiVariableexpenseID" });
            }

            // PkiVariableexpenseID (int) minimum
            if(this.PkiVariableexpenseID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiVariableexpenseID, must be a value greater than or equal to 1.", new [] { "PkiVariableexpenseID" });
            }



            // SVariableexpenseCode (string) pattern
            Regex regexSVariableexpenseCode = new Regex(@"^.{0,5}$", RegexOptions.CultureInvariant);
            if (false == regexSVariableexpenseCode.Match(this.SVariableexpenseCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SVariableexpenseCode, must match a pattern of " + regexSVariableexpenseCode, new [] { "SVariableexpenseCode" });
            }

            yield break;
        }
    }

}
