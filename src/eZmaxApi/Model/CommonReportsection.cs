/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A section in a Report. Each Reportsection shares Reportcolumns disposition with all its Reportsubsection 
    /// </summary>
    [DataContract(Name = "Common-Reportsection")]
    public partial class CommonReportsection : IEquatable<CommonReportsection>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EReportsectionHorizontalalignment
        /// </summary>
        [DataMember(Name = "eReportsectionHorizontalalignment", IsRequired = true, EmitDefaultValue = true)]
        public EnumHorizontalalignment EReportsectionHorizontalalignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportsection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonReportsection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportsection" /> class.
        /// </summary>
        /// <param name="aObjReportsubsection">aObjReportsubsection (required).</param>
        /// <param name="aObjReportcolumn">aObjReportcolumn (required).</param>
        /// <param name="eReportsectionHorizontalalignment">eReportsectionHorizontalalignment (required).</param>
        /// <param name="iReportsectionColumncount">The number of Reportcolumns in the Reportsection (required).</param>
        /// <param name="iReportsectionWidth">The combined width of all the Reportcolumns in the Reportsection (required).</param>
        public CommonReportsection(List<CommonReportsubsection> aObjReportsubsection = default(List<CommonReportsubsection>), List<CommonReportcolumn> aObjReportcolumn = default(List<CommonReportcolumn>), EnumHorizontalalignment eReportsectionHorizontalalignment = default(EnumHorizontalalignment), int iReportsectionColumncount = default(int), int iReportsectionWidth = default(int))
        {
            // to ensure "aObjReportsubsection" is required (not null)
            if (aObjReportsubsection == null)
            {
                throw new ArgumentNullException("aObjReportsubsection is a required property for CommonReportsection and cannot be null");
            }
            this.AObjReportsubsection = aObjReportsubsection;
            // to ensure "aObjReportcolumn" is required (not null)
            if (aObjReportcolumn == null)
            {
                throw new ArgumentNullException("aObjReportcolumn is a required property for CommonReportsection and cannot be null");
            }
            this.AObjReportcolumn = aObjReportcolumn;
            this.EReportsectionHorizontalalignment = eReportsectionHorizontalalignment;
            this.IReportsectionColumncount = iReportsectionColumncount;
            this.IReportsectionWidth = iReportsectionWidth;
        }

        /// <summary>
        /// Gets or Sets AObjReportsubsection
        /// </summary>
        [DataMember(Name = "a_objReportsubsection", IsRequired = true, EmitDefaultValue = true)]
        public List<CommonReportsubsection> AObjReportsubsection { get; set; }

        /// <summary>
        /// Gets or Sets AObjReportcolumn
        /// </summary>
        [DataMember(Name = "a_objReportcolumn", IsRequired = true, EmitDefaultValue = true)]
        public List<CommonReportcolumn> AObjReportcolumn { get; set; }

        /// <summary>
        /// The number of Reportcolumns in the Reportsection
        /// </summary>
        /// <value>The number of Reportcolumns in the Reportsection</value>
		/* <example>5</example>*/
        [DataMember(Name = "iReportsectionColumncount", IsRequired = true, EmitDefaultValue = true)]
        public int IReportsectionColumncount { get; set; }

        /// <summary>
        /// The combined width of all the Reportcolumns in the Reportsection
        /// </summary>
        /// <value>The combined width of all the Reportcolumns in the Reportsection</value>
		/* <example>1200</example>*/
        [DataMember(Name = "iReportsectionWidth", IsRequired = true, EmitDefaultValue = true)]
        public int IReportsectionWidth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonReportsection {\n");
            sb.Append("  AObjReportsubsection: ").Append(AObjReportsubsection).Append("\n");
            sb.Append("  AObjReportcolumn: ").Append(AObjReportcolumn).Append("\n");
            sb.Append("  EReportsectionHorizontalalignment: ").Append(EReportsectionHorizontalalignment).Append("\n");
            sb.Append("  IReportsectionColumncount: ").Append(IReportsectionColumncount).Append("\n");
            sb.Append("  IReportsectionWidth: ").Append(IReportsectionWidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonReportsection);
        }

        /// <summary>
        /// Returns true if CommonReportsection instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonReportsection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonReportsection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AObjReportsubsection == input.AObjReportsubsection ||
                    this.AObjReportsubsection != null &&
                    input.AObjReportsubsection != null &&
                    this.AObjReportsubsection.SequenceEqual(input.AObjReportsubsection)
                ) && 
                (
                    this.AObjReportcolumn == input.AObjReportcolumn ||
                    this.AObjReportcolumn != null &&
                    input.AObjReportcolumn != null &&
                    this.AObjReportcolumn.SequenceEqual(input.AObjReportcolumn)
                ) && 
                (
                    this.EReportsectionHorizontalalignment == input.EReportsectionHorizontalalignment ||
                    this.EReportsectionHorizontalalignment.Equals(input.EReportsectionHorizontalalignment)
                ) && 
                (
                    this.IReportsectionColumncount == input.IReportsectionColumncount ||
                    this.IReportsectionColumncount.Equals(input.IReportsectionColumncount)
                ) && 
                (
                    this.IReportsectionWidth == input.IReportsectionWidth ||
                    this.IReportsectionWidth.Equals(input.IReportsectionWidth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AObjReportsubsection != null)
                {
                    hashCode = (hashCode * 59) + this.AObjReportsubsection.GetHashCode();
                }
                if (this.AObjReportcolumn != null)
                {
                    hashCode = (hashCode * 59) + this.AObjReportcolumn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EReportsectionHorizontalalignment.GetHashCode();
                hashCode = (hashCode * 59) + this.IReportsectionColumncount.GetHashCode();
                hashCode = (hashCode * 59) + this.IReportsectionWidth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
