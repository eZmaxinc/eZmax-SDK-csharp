/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A section in a Report. Each Reportsection shares Reportcolumns disposition with all its Reportsubsection 
    /// </summary>
    [DataContract(Name = "Common-Reportsection")]
    public partial class CommonReportsection : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EReportsectionHorizontalalignment
        /// </summary>
        [DataMember(Name = "eReportsectionHorizontalalignment", IsRequired = true, EmitDefaultValue = true)]
        public EnumHorizontalalignment EReportsectionHorizontalalignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportsection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonReportsection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonReportsection" /> class.
        /// </summary>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The number of Reportcolumns in the Reportsection (required).</param>
        /// <param name="">The combined width of all the Reportcolumns in the Reportsection (required).</param>
        public CommonReportsection(List<CommonReportsubsection>  = default(List<CommonReportsubsection>), List<CommonReportcolumn>  = default(List<CommonReportcolumn>), EnumHorizontalalignment  = default(EnumHorizontalalignment), int  = default(int), int  = default(int))
        {
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CommonReportsection and cannot be null");
            }
            this.AObjReportsubsection = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for CommonReportsection and cannot be null");
            }
            this.AObjReportcolumn = ;
            this.EReportsectionHorizontalalignment = ;
            this.IReportsectionColumncount = ;
            this.IReportsectionWidth = ;
        }

        /// <summary>
        /// Gets or Sets AObjReportsubsection
        /// </summary>
        [DataMember(Name = "a_objReportsubsection", IsRequired = true, EmitDefaultValue = true)]
        public List<CommonReportsubsection> AObjReportsubsection { get; set; }

        /// <summary>
        /// Gets or Sets AObjReportcolumn
        /// </summary>
        [DataMember(Name = "a_objReportcolumn", IsRequired = true, EmitDefaultValue = true)]
        public List<CommonReportcolumn> AObjReportcolumn { get; set; }

        /// <summary>
        /// The number of Reportcolumns in the Reportsection
        /// </summary>
        /// <value>The number of Reportcolumns in the Reportsection</value>
        /* <example>5</example>*/
        [DataMember(Name = "iReportsectionColumncount", IsRequired = true, EmitDefaultValue = true)]
        public int IReportsectionColumncount { get; set; }

        /// <summary>
        /// The combined width of all the Reportcolumns in the Reportsection
        /// </summary>
        /// <value>The combined width of all the Reportcolumns in the Reportsection</value>
        /* <example>1200</example>*/
        [DataMember(Name = "iReportsectionWidth", IsRequired = true, EmitDefaultValue = true)]
        public int IReportsectionWidth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonReportsection {\n");
            sb.Append("  AObjReportsubsection: ").Append(AObjReportsubsection).Append("\n");
            sb.Append("  AObjReportcolumn: ").Append(AObjReportcolumn).Append("\n");
            sb.Append("  EReportsectionHorizontalalignment: ").Append(EReportsectionHorizontalalignment).Append("\n");
            sb.Append("  IReportsectionColumncount: ").Append(IReportsectionColumncount).Append("\n");
            sb.Append("  IReportsectionWidth: ").Append(IReportsectionWidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
