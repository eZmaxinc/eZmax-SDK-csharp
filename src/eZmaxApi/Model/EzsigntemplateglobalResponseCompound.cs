/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplateglobal Object
    /// </summary>
    [DataContract(Name = "ezsigntemplateglobal-ResponseCompound")]
    public partial class EzsigntemplateglobalResponseCompound : EzsigntemplateglobalResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateglobalResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateglobalResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateglobalResponseCompound" /> class.
        /// </summary>
        /// <param name="objEzsigntemplateglobaldocument">objEzsigntemplateglobaldocument.</param>
        /// <param name="aObjEzsigntemplateglobalsigner">aObjEzsigntemplateglobalsigner (required).</param>
        /// <param name="pkiEzsigntemplateglobalID">The unique ID of the Ezsigntemplateglobal (required).</param>
        /// <param name="fkiEzsigntemplateglobaldocumentID">The unique ID of the Ezsigntemplateglobaldocument (required).</param>
        /// <param name="fkiModuleID">The unique ID of the Module (required).</param>
        /// <param name="sModuleNameX">The Name of the Module in the language of the requester.</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="eEzsigntemplateglobalModule">eEzsigntemplateglobalModule (required).</param>
        /// <param name="eEzsigntemplateglobalSupplier">eEzsigntemplateglobalSupplier (required).</param>
        /// <param name="sEzsigntemplateglobalCode">The Code of the Ezsigntemplateglobal (required).</param>
        /// <param name="sEzsigntemplateglobalDescription">The description of the Ezsigntemplate (required).</param>
        public EzsigntemplateglobalResponseCompound(EzsigntemplateglobaldocumentResponse objEzsigntemplateglobaldocument = default(EzsigntemplateglobaldocumentResponse), List<EzsigntemplateglobalsignerResponseCompound> aObjEzsigntemplateglobalsigner = default(List<EzsigntemplateglobalsignerResponseCompound>), int pkiEzsigntemplateglobalID = default(int), int fkiEzsigntemplateglobaldocumentID = default(int), int fkiModuleID = default(int), string sModuleNameX = default(string), int fkiLanguageID = default(int), string sLanguageNameX = default(string), FieldEEzsigntemplateglobalModule eEzsigntemplateglobalModule = default(FieldEEzsigntemplateglobalModule), FieldEEzsigntemplateglobalSupplier eEzsigntemplateglobalSupplier = default(FieldEEzsigntemplateglobalSupplier), string sEzsigntemplateglobalCode = default(string), string sEzsigntemplateglobalDescription = default(string)) : base()
        {
            // to ensure "aObjEzsigntemplateglobalsigner" is required (not null)
            if (aObjEzsigntemplateglobalsigner == null)
            {
                throw new ArgumentNullException("aObjEzsigntemplateglobalsigner is a required property for EzsigntemplateglobalResponseCompound and cannot be null");
            }
            this.AObjEzsigntemplateglobalsigner = aObjEzsigntemplateglobalsigner;
            this.ObjEzsigntemplateglobaldocument = objEzsigntemplateglobaldocument;
        }

        /// <summary>
        /// Gets or Sets ObjEzsigntemplateglobaldocument
        /// </summary>
        [DataMember(Name = "objEzsigntemplateglobaldocument", EmitDefaultValue = false)]
        public EzsigntemplateglobaldocumentResponse ObjEzsigntemplateglobaldocument { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplateglobalsigner
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplateglobalsigner", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsigntemplateglobalsignerResponseCompound> AObjEzsigntemplateglobalsigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateglobalResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ObjEzsigntemplateglobaldocument: ").Append(ObjEzsigntemplateglobaldocument).Append("\n");
            sb.Append("  AObjEzsigntemplateglobalsigner: ").Append(AObjEzsigntemplateglobalsigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
