/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Apikey Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class ApikeyResponseCompound :  IEquatable<ApikeyResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApikeyResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApikeyResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApikeyResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiApikeyID">The unique ID of the Apikey (required).</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="objApikeyDescription">objApikeyDescription (required).</param>
        /// <param name="sComputedToken">The secret token for the API key.  This will be returned only on creation..</param>
        /// <param name="bApikeyIsactive">Whether the apikey is active or not (required).</param>
        /// <param name="objAudit">objAudit (required).</param>
        public ApikeyResponseCompound(int pkiApikeyID = default(int), int fkiUserID = default(int), MultilingualApikeyDescription objApikeyDescription = default(MultilingualApikeyDescription), string sComputedToken = default(string), bool bApikeyIsactive = default(bool), CommonAudit objAudit = default(CommonAudit))
        {
            // to ensure "pkiApikeyID" is required (not null)
            if (pkiApikeyID == null)
            {
                throw new InvalidDataException("pkiApikeyID is a required property for ApikeyResponseCompound and cannot be null");
            }
            else
            {
                this.PkiApikeyID = pkiApikeyID;
            }

            // to ensure "fkiUserID" is required (not null)
            if (fkiUserID == null)
            {
                throw new InvalidDataException("fkiUserID is a required property for ApikeyResponseCompound and cannot be null");
            }
            else
            {
                this.FkiUserID = fkiUserID;
            }

            // to ensure "objApikeyDescription" is required (not null)
            if (objApikeyDescription == null)
            {
                throw new InvalidDataException("objApikeyDescription is a required property for ApikeyResponseCompound and cannot be null");
            }
            else
            {
                this.ObjApikeyDescription = objApikeyDescription;
            }

            // to ensure "bApikeyIsactive" is required (not null)
            if (bApikeyIsactive == null)
            {
                throw new InvalidDataException("bApikeyIsactive is a required property for ApikeyResponseCompound and cannot be null");
            }
            else
            {
                this.BApikeyIsactive = bApikeyIsactive;
            }

            // to ensure "objAudit" is required (not null)
            if (objAudit == null)
            {
                throw new InvalidDataException("objAudit is a required property for ApikeyResponseCompound and cannot be null");
            }
            else
            {
                this.ObjAudit = objAudit;
            }

            this.SComputedToken = sComputedToken;
        }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        [DataMember(Name="pkiApikeyID", EmitDefaultValue=true)]
        public int PkiApikeyID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// Gets or Sets ObjApikeyDescription
        /// </summary>
        [DataMember(Name="objApikeyDescription", EmitDefaultValue=true)]
        public MultilingualApikeyDescription ObjApikeyDescription { get; set; }

        /// <summary>
        /// The secret token for the API key.  This will be returned only on creation.
        /// </summary>
        /// <value>The secret token for the API key.  This will be returned only on creation.</value>
        [DataMember(Name="sComputedToken", EmitDefaultValue=false)]
        public string SComputedToken { get; set; }

        /// <summary>
        /// Whether the apikey is active or not
        /// </summary>
        /// <value>Whether the apikey is active or not</value>
        [DataMember(Name="bApikeyIsactive", EmitDefaultValue=true)]
        public bool BApikeyIsactive { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name="objAudit", EmitDefaultValue=true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApikeyResponseCompound {\n");
            sb.Append("  PkiApikeyID: ").Append(PkiApikeyID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  ObjApikeyDescription: ").Append(ObjApikeyDescription).Append("\n");
            sb.Append("  SComputedToken: ").Append(SComputedToken).Append("\n");
            sb.Append("  BApikeyIsactive: ").Append(BApikeyIsactive).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApikeyResponseCompound);
        }

        /// <summary>
        /// Returns true if ApikeyResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ApikeyResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApikeyResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiApikeyID == input.PkiApikeyID ||
                    (this.PkiApikeyID != null &&
                    this.PkiApikeyID.Equals(input.PkiApikeyID))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.ObjApikeyDescription == input.ObjApikeyDescription ||
                    (this.ObjApikeyDescription != null &&
                    this.ObjApikeyDescription.Equals(input.ObjApikeyDescription))
                ) && 
                (
                    this.SComputedToken == input.SComputedToken ||
                    (this.SComputedToken != null &&
                    this.SComputedToken.Equals(input.SComputedToken))
                ) && 
                (
                    this.BApikeyIsactive == input.BApikeyIsactive ||
                    (this.BApikeyIsactive != null &&
                    this.BApikeyIsactive.Equals(input.BApikeyIsactive))
                ) && 
                (
                    this.ObjAudit == input.ObjAudit ||
                    (this.ObjAudit != null &&
                    this.ObjAudit.Equals(input.ObjAudit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiApikeyID != null)
                    hashCode = hashCode * 59 + this.PkiApikeyID.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.ObjApikeyDescription != null)
                    hashCode = hashCode * 59 + this.ObjApikeyDescription.GetHashCode();
                if (this.SComputedToken != null)
                    hashCode = hashCode * 59 + this.SComputedToken.GetHashCode();
                if (this.BApikeyIsactive != null)
                    hashCode = hashCode * 59 + this.BApikeyIsactive.GetHashCode();
                if (this.ObjAudit != null)
                    hashCode = hashCode * 59 + this.ObjAudit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiApikeyID (int) minimum
            if(this.PkiApikeyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiApikeyID, must be a value greater than or equal to 0.", new [] { "PkiApikeyID" });
            }



            // FkiUserID (int) minimum
            if(this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            yield break;
        }
    }

}
