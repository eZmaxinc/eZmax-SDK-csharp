/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A custom Ezsignfoldersignerassociation Object
    /// </summary>
    [DataContract(Name = "Custom-Ezsignfoldersignerassociationmine-Response")]
    public partial class CustomEzsignfoldersignerassociationmineResponse : IEquatable<CustomEzsignfoldersignerassociationmineResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationmineResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzsignfoldersignerassociationmineResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzsignfoldersignerassociationmineResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="fkiEzsignfolderID">The unique ID of the Ezsignfolder (required).</param>
        public CustomEzsignfoldersignerassociationmineResponse(int pkiEzsignfoldersignerassociationID = default(int), int fkiEzsignfolderID = default(int))
        {
            this.PkiEzsignfoldersignerassociationID = pkiEzsignfoldersignerassociationID;
            this.FkiEzsignfolderID = fkiEzsignfolderID;
        }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        </example> }}
		/* <example>20</example>*/
        [DataMember(Name = "pkiEzsignfoldersignerassociationID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfolder
        /// </summary>
        /// <value>The unique ID of the Ezsignfolder</value>
        </example> }}
		/* <example>33</example>*/
        [DataMember(Name = "fkiEzsignfolderID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfolderID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzsignfoldersignerassociationmineResponse {\n");
            sb.Append("  PkiEzsignfoldersignerassociationID: ").Append(PkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  FkiEzsignfolderID: ").Append(FkiEzsignfolderID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzsignfoldersignerassociationmineResponse);
        }

        /// <summary>
        /// Returns true if CustomEzsignfoldersignerassociationmineResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzsignfoldersignerassociationmineResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzsignfoldersignerassociationmineResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsignfoldersignerassociationID == input.PkiEzsignfoldersignerassociationID ||
                    this.PkiEzsignfoldersignerassociationID.Equals(input.PkiEzsignfoldersignerassociationID)
                ) && 
                (
                    this.FkiEzsignfolderID == input.FkiEzsignfolderID ||
                    this.FkiEzsignfolderID.Equals(input.FkiEzsignfolderID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsignfoldersignerassociationID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsignfolderID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignfoldersignerassociationID (int) minimum
            if (this.PkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "PkiEzsignfoldersignerassociationID" });
            }

            // FkiEzsignfolderID (int) minimum
            if (this.FkiEzsignfolderID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfolderID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfolderID" });
            }

            yield break;
        }
    }

}
