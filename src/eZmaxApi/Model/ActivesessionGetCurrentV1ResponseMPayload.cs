/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Payload for GET /1/object/activesession/getCurrent
    /// </summary>
    [DataContract(Name = "activesession-getCurrent-v1-Response-mPayload")]
    public partial class ActivesessionGetCurrentV1ResponseMPayload : ActivesessionResponseCompound, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionGetCurrentV1ResponseMPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionGetCurrentV1ResponseMPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionGetCurrentV1ResponseMPayload" /> class.
        /// </summary>
        /// <param name="eActivesessionUsertype">eActivesessionUsertype (required).</param>
        /// <param name="eActivesessionOrigin">eActivesessionOrigin (required).</param>
        /// <param name="eActivesessionWeekdaystart">eActivesessionWeekdaystart (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sCompanyNameX">The Name of the Company in the language of the requester (required).</param>
        /// <param name="sDepartmentNameX">The Name of the Department in the language of the requester (required).</param>
        /// <param name="bActivesessionDebug">Whether the active session is in debug or not (required).</param>
        /// <param name="bActivesessionIssuperadmin">Whether the active session is superadmin or not (required).</param>
        /// <param name="bActivesessionAttachment">Can access attachment when we clone a user.</param>
        /// <param name="bActivesessionCanafe">Can access canafe when we clone a user.</param>
        /// <param name="bActivesessionFinancial">Can access financial element when we clone a user.</param>
        /// <param name="bActivesessionRealestatecompleted">Can access closed realestate folders when we clone a user.</param>
        /// <param name="eActivesessionEzsign">eActivesessionEzsign.</param>
        /// <param name="eActivesessionEzsignaccess">eActivesessionEzsignaccess (required).</param>
        /// <param name="eActivesessionEzsignprepaid">eActivesessionEzsignprepaid.</param>
        /// <param name="eActivesessionRealestateinprogress">eActivesessionRealestateinprogress.</param>
        /// <param name="pksCustomerCode">The customer code assigned to your account (required).</param>
        /// <param name="fkiSystemconfigurationtypeID">The unique ID of the Systemconfigurationtype (required).</param>
        /// <param name="fkiSignatureID">The unique ID of the Signature.</param>
        /// <param name="fkiEzsignuserID">The unique ID of the Ezsignuser.</param>
        /// <param name="bSystemconfigurationEzsignpaidbyoffice">Whether if Ezsign is paid by the company or not.</param>
        /// <param name="eSystemconfigurationEzsignofficeplan">eSystemconfigurationEzsignofficeplan.</param>
        /// <param name="eUserEzsignaccess">eUserEzsignaccess (required).</param>
        /// <param name="eUserEzsignprepaid">eUserEzsignprepaid.</param>
        /// <param name="bUserEzsigntrial">Whether the User&#39;s eZsign subscription is a trial.</param>
        /// <param name="dtUserEzsignprepaidexpiration">The eZsign prepaid expiration date.</param>
        /// <param name="aPkiPermissionID">An array of permissions granted to the user or api key (required).</param>
        /// <param name="objUserReal">objUserReal (required).</param>
        /// <param name="objUserCloned">objUserCloned.</param>
        /// <param name="objApikey">objApikey.</param>
        /// <param name="aEModuleInternalname">An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. (required).</param>
        public ActivesessionGetCurrentV1ResponseMPayload(FieldEActivesessionUsertype eActivesessionUsertype = default(FieldEActivesessionUsertype), FieldEActivesessionOrigin eActivesessionOrigin = default(FieldEActivesessionOrigin), FieldEActivesessionWeekdaystart eActivesessionWeekdaystart = default(FieldEActivesessionWeekdaystart), int fkiLanguageID = default(int), string sCompanyNameX = default(string), string sDepartmentNameX = default(string), bool bActivesessionDebug = default(bool), bool bActivesessionIssuperadmin = default(bool), bool bActivesessionAttachment = default(bool), bool bActivesessionCanafe = default(bool), bool bActivesessionFinancial = default(bool), bool bActivesessionRealestatecompleted = default(bool), FieldEActivesessionEzsign? eActivesessionEzsign = default(FieldEActivesessionEzsign?), FieldEActivesessionEzsignaccess eActivesessionEzsignaccess = default(FieldEActivesessionEzsignaccess), FieldEActivesessionEzsignprepaid? eActivesessionEzsignprepaid = default(FieldEActivesessionEzsignprepaid?), FieldEActivesessionRealestateinprogress? eActivesessionRealestateinprogress = default(FieldEActivesessionRealestateinprogress?), string pksCustomerCode = default(string), int fkiSystemconfigurationtypeID = default(int), int fkiSignatureID = default(int), int fkiEzsignuserID = default(int), bool bSystemconfigurationEzsignpaidbyoffice = default(bool), FieldESystemconfigurationEzsignofficeplan? eSystemconfigurationEzsignofficeplan = default(FieldESystemconfigurationEzsignofficeplan?), FieldEUserEzsignaccess eUserEzsignaccess = default(FieldEUserEzsignaccess), FieldEUserEzsignprepaid? eUserEzsignprepaid = default(FieldEUserEzsignprepaid?), bool bUserEzsigntrial = default(bool), string dtUserEzsignprepaidexpiration = default(string), List<int> aPkiPermissionID = default(List<int>), ActivesessionResponseCompoundUser objUserReal = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundUser objUserCloned = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundApikey objApikey = default(ActivesessionResponseCompoundApikey), List<string> aEModuleInternalname = default(List<string>)) : base()
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivesessionGetCurrentV1ResponseMPayload {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
