/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepackage AutocompleteElement Response
    /// </summary>
    [DataContract]
    public partial class EzsigntemplatepackageAutocompleteElementResponse :  IEquatable<EzsigntemplatepackageAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name="eEzsignfoldertypePrivacylevel", EmitDefaultValue=true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepackageAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="sEzsigntemplatepackageDescription">The description of the Ezsigntemplatepackage (required).</param>
        /// <param name="pkiEzsigntemplatepackageID">The unique ID of the Ezsigntemplatepackage (required).</param>
        /// <param name="bEzsigntemplatepackageIsactive">Whether the Ezsigntemplatepackage is active or not (required).</param>
        /// <param name="bDisabled">Indicates if the element is disabled in the context (required).</param>
        public EzsigntemplatepackageAutocompleteElementResponse(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), string sEzsigntemplatepackageDescription = default(string), int pkiEzsigntemplatepackageID = default(int), bool bEzsigntemplatepackageIsactive = default(bool), bool bDisabled = default(bool))
        {
            // to ensure "eEzsignfoldertypePrivacylevel" is required (not null)
            if (eEzsignfoldertypePrivacylevel == null)
            {
                throw new InvalidDataException("eEzsignfoldertypePrivacylevel is a required property for EzsigntemplatepackageAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            }

            // to ensure "sEzsigntemplatepackageDescription" is required (not null)
            if (sEzsigntemplatepackageDescription == null)
            {
                throw new InvalidDataException("sEzsigntemplatepackageDescription is a required property for EzsigntemplatepackageAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.SEzsigntemplatepackageDescription = sEzsigntemplatepackageDescription;
            }

            // to ensure "pkiEzsigntemplatepackageID" is required (not null)
            if (pkiEzsigntemplatepackageID == null)
            {
                throw new InvalidDataException("pkiEzsigntemplatepackageID is a required property for EzsigntemplatepackageAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.PkiEzsigntemplatepackageID = pkiEzsigntemplatepackageID;
            }

            // to ensure "bEzsigntemplatepackageIsactive" is required (not null)
            if (bEzsigntemplatepackageIsactive == null)
            {
                throw new InvalidDataException("bEzsigntemplatepackageIsactive is a required property for EzsigntemplatepackageAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BEzsigntemplatepackageIsactive = bEzsigntemplatepackageIsactive;
            }

            // to ensure "bDisabled" is required (not null)
            if (bDisabled == null)
            {
                throw new InvalidDataException("bDisabled is a required property for EzsigntemplatepackageAutocompleteElementResponse and cannot be null");
            }
            else
            {
                this.BDisabled = bDisabled;
            }

        }


        /// <summary>
        /// The description of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The description of the Ezsigntemplatepackage</value>
        [DataMember(Name="sEzsigntemplatepackageDescription", EmitDefaultValue=true)]
        public string SEzsigntemplatepackageDescription { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackage</value>
        [DataMember(Name="pkiEzsigntemplatepackageID", EmitDefaultValue=true)]
        public int PkiEzsigntemplatepackageID { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage is active or not
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage is active or not</value>
        [DataMember(Name="bEzsigntemplatepackageIsactive", EmitDefaultValue=true)]
        public bool BEzsigntemplatepackageIsactive { get; set; }

        /// <summary>
        /// Indicates if the element is disabled in the context
        /// </summary>
        /// <value>Indicates if the element is disabled in the context</value>
        [DataMember(Name="bDisabled", EmitDefaultValue=true)]
        public bool BDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplatepackageAutocompleteElementResponse {\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsigntemplatepackageDescription: ").Append(SEzsigntemplatepackageDescription).Append("\n");
            sb.Append("  PkiEzsigntemplatepackageID: ").Append(PkiEzsigntemplatepackageID).Append("\n");
            sb.Append("  BEzsigntemplatepackageIsactive: ").Append(BEzsigntemplatepackageIsactive).Append("\n");
            sb.Append("  BDisabled: ").Append(BDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatepackageAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if EzsigntemplatepackageAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatepackageAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatepackageAutocompleteElementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EEzsignfoldertypePrivacylevel == input.EEzsignfoldertypePrivacylevel ||
                    (this.EEzsignfoldertypePrivacylevel != null &&
                    this.EEzsignfoldertypePrivacylevel.Equals(input.EEzsignfoldertypePrivacylevel))
                ) && 
                (
                    this.SEzsigntemplatepackageDescription == input.SEzsigntemplatepackageDescription ||
                    (this.SEzsigntemplatepackageDescription != null &&
                    this.SEzsigntemplatepackageDescription.Equals(input.SEzsigntemplatepackageDescription))
                ) && 
                (
                    this.PkiEzsigntemplatepackageID == input.PkiEzsigntemplatepackageID ||
                    (this.PkiEzsigntemplatepackageID != null &&
                    this.PkiEzsigntemplatepackageID.Equals(input.PkiEzsigntemplatepackageID))
                ) && 
                (
                    this.BEzsigntemplatepackageIsactive == input.BEzsigntemplatepackageIsactive ||
                    (this.BEzsigntemplatepackageIsactive != null &&
                    this.BEzsigntemplatepackageIsactive.Equals(input.BEzsigntemplatepackageIsactive))
                ) && 
                (
                    this.BDisabled == input.BDisabled ||
                    (this.BDisabled != null &&
                    this.BDisabled.Equals(input.BDisabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EEzsignfoldertypePrivacylevel != null)
                    hashCode = hashCode * 59 + this.EEzsignfoldertypePrivacylevel.GetHashCode();
                if (this.SEzsigntemplatepackageDescription != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplatepackageDescription.GetHashCode();
                if (this.PkiEzsigntemplatepackageID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplatepackageID.GetHashCode();
                if (this.BEzsigntemplatepackageIsactive != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplatepackageIsactive.GetHashCode();
                if (this.BDisabled != null)
                    hashCode = hashCode * 59 + this.BDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntemplatepackageID (int) minimum
            if(this.PkiEzsigntemplatepackageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatepackageID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatepackageID" });
            }

            yield break;
        }
    }

}
