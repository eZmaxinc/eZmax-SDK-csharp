/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepackage AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "ezsigntemplatepackage-AutocompleteElement-Response")]
    public partial class EzsigntemplatepackageAutocompleteElementResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignfoldertypePrivacylevel
        /// </summary>
        [DataMember(Name = "eEzsignfoldertypePrivacylevel", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignfoldertypePrivacylevel EEzsignfoldertypePrivacylevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepackageAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepackageAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="eEzsignfoldertypePrivacylevel">eEzsignfoldertypePrivacylevel (required).</param>
        /// <param name="sEzsigntemplatepackageDescription">The description of the Ezsigntemplatepackage (required).</param>
        /// <param name="pkiEzsigntemplatepackageID">The unique ID of the Ezsigntemplatepackage (required).</param>
        /// <param name="bEzsigntemplatepackageIsactive">Whether the Ezsigntemplatepackage is active or not (required).</param>
        /// <param name="bDisabled">Indicates if the element is disabled in the context (required).</param>
        public EzsigntemplatepackageAutocompleteElementResponse(FieldEEzsignfoldertypePrivacylevel eEzsignfoldertypePrivacylevel = default(FieldEEzsignfoldertypePrivacylevel), string sEzsigntemplatepackageDescription = default(string), int pkiEzsigntemplatepackageID = default(int), bool bEzsigntemplatepackageIsactive = default(bool), bool bDisabled = default(bool))
        {
            this.EEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel;
            // to ensure "sEzsigntemplatepackageDescription" is required (not null)
            if (sEzsigntemplatepackageDescription == null)
            {
                throw new ArgumentNullException("sEzsigntemplatepackageDescription is a required property for EzsigntemplatepackageAutocompleteElementResponse and cannot be null");
            }
            this.SEzsigntemplatepackageDescription = sEzsigntemplatepackageDescription;
            this.PkiEzsigntemplatepackageID = pkiEzsigntemplatepackageID;
            this.BEzsigntemplatepackageIsactive = bEzsigntemplatepackageIsactive;
            this.BDisabled = bDisabled;
        }

        /// <summary>
        /// The description of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The description of the Ezsigntemplatepackage</value>
        /* <example>Package for new clients</example>*/
        [DataMember(Name = "sEzsigntemplatepackageDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatepackageDescription { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackage</value>
        /* <example>99</example>*/
        [DataMember(Name = "pkiEzsigntemplatepackageID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplatepackageID { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplatepackage is active or not
        /// </summary>
        /// <value>Whether the Ezsigntemplatepackage is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsigntemplatepackageIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatepackageIsactive { get; set; }

        /// <summary>
        /// Indicates if the element is disabled in the context
        /// </summary>
        /// <value>Indicates if the element is disabled in the context</value>
        [DataMember(Name = "bDisabled", IsRequired = true, EmitDefaultValue = true)]
        public bool BDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepackageAutocompleteElementResponse {\n");
            sb.Append("  EEzsignfoldertypePrivacylevel: ").Append(EEzsignfoldertypePrivacylevel).Append("\n");
            sb.Append("  SEzsigntemplatepackageDescription: ").Append(SEzsigntemplatepackageDescription).Append("\n");
            sb.Append("  PkiEzsigntemplatepackageID: ").Append(PkiEzsigntemplatepackageID).Append("\n");
            sb.Append("  BEzsigntemplatepackageIsactive: ").Append(BEzsigntemplatepackageIsactive).Append("\n");
            sb.Append("  BDisabled: ").Append(BDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SEzsigntemplatepackageDescription != null) {
                // SEzsigntemplatepackageDescription (string) pattern
                Regex regexSEzsigntemplatepackageDescription = new Regex(@"^.{0,80}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplatepackageDescription.Match(this.SEzsigntemplatepackageDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplatepackageDescription, must match a pattern of " + regexSEzsigntemplatepackageDescription, new [] { "SEzsigntemplatepackageDescription" });
                }
            }

            // PkiEzsigntemplatepackageID (int) minimum
            if (this.PkiEzsigntemplatepackageID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsigntemplatepackageID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatepackageID" });
            }

            yield break;
        }
    }

}
