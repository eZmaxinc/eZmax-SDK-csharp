/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignaturecustomdate Object
    /// </summary>
    [DataContract]
    public partial class EzsignsignaturecustomdateRequest :  IEquatable<EzsignsignaturecustomdateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignaturecustomdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignaturecustomdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignaturecustomdateRequest" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignaturecustomdateID">The unique ID of the Ezsignsignaturecustomdate.</param>
        /// <param name="iEzsignsignaturecustomdateX">The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignsignaturecustomdateY">The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="sEzsignsignaturecustomdateFormat">The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST |  (required).</param>
        public EzsignsignaturecustomdateRequest(int pkiEzsignsignaturecustomdateID = default(int), int iEzsignsignaturecustomdateX = default(int), int iEzsignsignaturecustomdateY = default(int), string sEzsignsignaturecustomdateFormat = default(string))
        {
            // to ensure "iEzsignsignaturecustomdateX" is required (not null)
            if (iEzsignsignaturecustomdateX == null)
            {
                throw new InvalidDataException("iEzsignsignaturecustomdateX is a required property for EzsignsignaturecustomdateRequest and cannot be null");
            }
            else
            {
                this.IEzsignsignaturecustomdateX = iEzsignsignaturecustomdateX;
            }

            // to ensure "iEzsignsignaturecustomdateY" is required (not null)
            if (iEzsignsignaturecustomdateY == null)
            {
                throw new InvalidDataException("iEzsignsignaturecustomdateY is a required property for EzsignsignaturecustomdateRequest and cannot be null");
            }
            else
            {
                this.IEzsignsignaturecustomdateY = iEzsignsignaturecustomdateY;
            }

            // to ensure "sEzsignsignaturecustomdateFormat" is required (not null)
            if (sEzsignsignaturecustomdateFormat == null)
            {
                throw new InvalidDataException("sEzsignsignaturecustomdateFormat is a required property for EzsignsignaturecustomdateRequest and cannot be null");
            }
            else
            {
                this.SEzsignsignaturecustomdateFormat = sEzsignsignaturecustomdateFormat;
            }

            this.PkiEzsignsignaturecustomdateID = pkiEzsignsignaturecustomdateID;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignaturecustomdate
        /// </summary>
        /// <value>The unique ID of the Ezsignsignaturecustomdate</value>
        [DataMember(Name="pkiEzsignsignaturecustomdateID", EmitDefaultValue=false)]
        public int PkiEzsignsignaturecustomdateID { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsignsignaturecustomdateX", EmitDefaultValue=true)]
        public int IEzsignsignaturecustomdateX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsignsignaturecustomdateY", EmitDefaultValue=true)]
        public int IEzsignsignaturecustomdateY { get; set; }

        /// <summary>
        /// The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | 
        /// </summary>
        /// <value>The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \&quot;Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\&quot; would become \&quot;Signature date: 01/06/2022 08:07\&quot;  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | </value>
        [DataMember(Name="sEzsignsignaturecustomdateFormat", EmitDefaultValue=true)]
        public string SEzsignsignaturecustomdateFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignaturecustomdateRequest {\n");
            sb.Append("  PkiEzsignsignaturecustomdateID: ").Append(PkiEzsignsignaturecustomdateID).Append("\n");
            sb.Append("  IEzsignsignaturecustomdateX: ").Append(IEzsignsignaturecustomdateX).Append("\n");
            sb.Append("  IEzsignsignaturecustomdateY: ").Append(IEzsignsignaturecustomdateY).Append("\n");
            sb.Append("  SEzsignsignaturecustomdateFormat: ").Append(SEzsignsignaturecustomdateFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignaturecustomdateRequest);
        }

        /// <summary>
        /// Returns true if EzsignsignaturecustomdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignaturecustomdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignaturecustomdateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignaturecustomdateID == input.PkiEzsignsignaturecustomdateID ||
                    (this.PkiEzsignsignaturecustomdateID != null &&
                    this.PkiEzsignsignaturecustomdateID.Equals(input.PkiEzsignsignaturecustomdateID))
                ) && 
                (
                    this.IEzsignsignaturecustomdateX == input.IEzsignsignaturecustomdateX ||
                    (this.IEzsignsignaturecustomdateX != null &&
                    this.IEzsignsignaturecustomdateX.Equals(input.IEzsignsignaturecustomdateX))
                ) && 
                (
                    this.IEzsignsignaturecustomdateY == input.IEzsignsignaturecustomdateY ||
                    (this.IEzsignsignaturecustomdateY != null &&
                    this.IEzsignsignaturecustomdateY.Equals(input.IEzsignsignaturecustomdateY))
                ) && 
                (
                    this.SEzsignsignaturecustomdateFormat == input.SEzsignsignaturecustomdateFormat ||
                    (this.SEzsignsignaturecustomdateFormat != null &&
                    this.SEzsignsignaturecustomdateFormat.Equals(input.SEzsignsignaturecustomdateFormat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignaturecustomdateID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignaturecustomdateID.GetHashCode();
                if (this.IEzsignsignaturecustomdateX != null)
                    hashCode = hashCode * 59 + this.IEzsignsignaturecustomdateX.GetHashCode();
                if (this.IEzsignsignaturecustomdateY != null)
                    hashCode = hashCode * 59 + this.IEzsignsignaturecustomdateY.GetHashCode();
                if (this.SEzsignsignaturecustomdateFormat != null)
                    hashCode = hashCode * 59 + this.SEzsignsignaturecustomdateFormat.GetHashCode();
                return hashCode;
            }
        }
    }

}
