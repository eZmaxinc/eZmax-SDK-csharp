/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// EzsignfoldersignerassociationResponseCompoundAllOf
    /// </summary>
    [DataContract]
    public partial class EzsignfoldersignerassociationResponseCompoundAllOf :  IEquatable<EzsignfoldersignerassociationResponseCompoundAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfoldersignerassociationResponseCompoundAllOf" /> class.
        /// </summary>
        /// <param name="objEzsignsignergroup">objEzsignsignergroup.</param>
        /// <param name="objUser">objUser.</param>
        /// <param name="objUsergroup">objUsergroup.</param>
        /// <param name="objEzsignsigner">objEzsignsigner.</param>
        public EzsignfoldersignerassociationResponseCompoundAllOf(EzsignsignergroupResponseCompound objEzsignsignergroup = default(EzsignsignergroupResponseCompound), EzsignfoldersignerassociationResponseCompoundUser objUser = default(EzsignfoldersignerassociationResponseCompoundUser), UsergroupResponseCompound objUsergroup = default(UsergroupResponseCompound), EzsignsignerResponseCompound objEzsignsigner = default(EzsignsignerResponseCompound))
        {
            this.ObjEzsignsignergroup = objEzsignsignergroup;
            this.ObjUser = objUser;
            this.ObjUsergroup = objUsergroup;
            this.ObjEzsignsigner = objEzsignsigner;
        }

        /// <summary>
        /// Gets or Sets ObjEzsignsignergroup
        /// </summary>
        [DataMember(Name="objEzsignsignergroup", EmitDefaultValue=false)]
        public EzsignsignergroupResponseCompound ObjEzsignsignergroup { get; set; }

        /// <summary>
        /// Gets or Sets ObjUser
        /// </summary>
        [DataMember(Name="objUser", EmitDefaultValue=false)]
        public EzsignfoldersignerassociationResponseCompoundUser ObjUser { get; set; }

        /// <summary>
        /// Gets or Sets ObjUsergroup
        /// </summary>
        [DataMember(Name="objUsergroup", EmitDefaultValue=false)]
        public UsergroupResponseCompound ObjUsergroup { get; set; }

        /// <summary>
        /// Gets or Sets ObjEzsignsigner
        /// </summary>
        [DataMember(Name="objEzsignsigner", EmitDefaultValue=false)]
        public EzsignsignerResponseCompound ObjEzsignsigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfoldersignerassociationResponseCompoundAllOf {\n");
            sb.Append("  ObjEzsignsignergroup: ").Append(ObjEzsignsignergroup).Append("\n");
            sb.Append("  ObjUser: ").Append(ObjUser).Append("\n");
            sb.Append("  ObjUsergroup: ").Append(ObjUsergroup).Append("\n");
            sb.Append("  ObjEzsignsigner: ").Append(ObjEzsignsigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfoldersignerassociationResponseCompoundAllOf);
        }

        /// <summary>
        /// Returns true if EzsignfoldersignerassociationResponseCompoundAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfoldersignerassociationResponseCompoundAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfoldersignerassociationResponseCompoundAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjEzsignsignergroup == input.ObjEzsignsignergroup ||
                    (this.ObjEzsignsignergroup != null &&
                    this.ObjEzsignsignergroup.Equals(input.ObjEzsignsignergroup))
                ) && 
                (
                    this.ObjUser == input.ObjUser ||
                    (this.ObjUser != null &&
                    this.ObjUser.Equals(input.ObjUser))
                ) && 
                (
                    this.ObjUsergroup == input.ObjUsergroup ||
                    (this.ObjUsergroup != null &&
                    this.ObjUsergroup.Equals(input.ObjUsergroup))
                ) && 
                (
                    this.ObjEzsignsigner == input.ObjEzsignsigner ||
                    (this.ObjEzsignsigner != null &&
                    this.ObjEzsignsigner.Equals(input.ObjEzsignsigner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjEzsignsignergroup != null)
                    hashCode = hashCode * 59 + this.ObjEzsignsignergroup.GetHashCode();
                if (this.ObjUser != null)
                    hashCode = hashCode * 59 + this.ObjUser.GetHashCode();
                if (this.ObjUsergroup != null)
                    hashCode = hashCode * 59 + this.ObjUsergroup.GetHashCode();
                if (this.ObjEzsignsigner != null)
                    hashCode = hashCode * 59 + this.ObjEzsignsigner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
