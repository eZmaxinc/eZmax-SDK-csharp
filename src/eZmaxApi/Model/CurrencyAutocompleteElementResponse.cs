/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Currency AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "currency-AutocompleteElement-Response")]
    public partial class CurrencyAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencyAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiCurrencyID">The unique ID of the Currency. (required).</param>
        /// <param name="sCurrencyDescriptionX">The description of the Currency in the language of the requester (required).</param>
        /// <param name="bCurrencyIsactive">Whether the Currency is active or not (required).</param>
        public CurrencyAutocompleteElementResponse(int pkiCurrencyID = default(int), string sCurrencyDescriptionX = default(string), bool bCurrencyIsactive = default(bool))
        {
            this.PkiCurrencyID = pkiCurrencyID;
            // to ensure "sCurrencyDescriptionX" is required (not null)
            if (sCurrencyDescriptionX == null)
            {
                throw new ArgumentNullException("sCurrencyDescriptionX is a required property for CurrencyAutocompleteElementResponse and cannot be null");
            }
            this.SCurrencyDescriptionX = sCurrencyDescriptionX;
            this.BCurrencyIsactive = bCurrencyIsactive;
        }

        /// <summary>
        /// The unique ID of the Currency.
        /// </summary>
        /// <value>The unique ID of the Currency.</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiCurrencyID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCurrencyID { get; set; }

        /// <summary>
        /// The description of the Currency in the language of the requester
        /// </summary>
        /// <value>The description of the Currency in the language of the requester</value>
        /* <example>Canadian</example>*/
        [DataMember(Name = "sCurrencyDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SCurrencyDescriptionX { get; set; }

        /// <summary>
        /// Whether the Currency is active or not
        /// </summary>
        /// <value>Whether the Currency is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCurrencyIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BCurrencyIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrencyAutocompleteElementResponse {\n");
            sb.Append("  PkiCurrencyID: ").Append(PkiCurrencyID).Append("\n");
            sb.Append("  SCurrencyDescriptionX: ").Append(SCurrencyDescriptionX).Append("\n");
            sb.Append("  BCurrencyIsactive: ").Append(BCurrencyIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCurrencyID (int) minimum
            if (this.PkiCurrencyID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiCurrencyID, must be a value greater than or equal to 0.", new [] { "PkiCurrencyID" });
            }

            if (this.SCurrencyDescriptionX != null) {
                // SCurrencyDescriptionX (string) pattern
                Regex regexSCurrencyDescriptionX = new Regex(@"^.{1,20}$", RegexOptions.CultureInvariant);
                if (!regexSCurrencyDescriptionX.Match(this.SCurrencyDescriptionX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCurrencyDescriptionX, must match a pattern of " + regexSCurrencyDescriptionX, new [] { "SCurrencyDescriptionX" });
                }
            }

            yield break;
        }
    }

}
