/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Webhook Object
    /// </summary>
    [DataContract(Name = "webhook-ResponseCompound")]
    public partial class WebhookResponseCompound : WebhookResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookResponseCompound" /> class.
        /// </summary>
        /// <param name="sWebhookEvent">The concatenated string to describe the Webhook event.</param>
        /// <param name="aObjWebhookheader">aObjWebhookheader.</param>
        /// <param name="pkiWebhookID">The unique ID of the Webhook (required).</param>
        /// <param name="fkiAuthenticationexternalID">The unique ID of the Authenticationexternal.</param>
        /// <param name="sWebhookDescription">The description of the Webhook (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester.</param>
        /// <param name="eWebhookModule">eWebhookModule (required).</param>
        /// <param name="eWebhookEzsignevent">eWebhookEzsignevent.</param>
        /// <param name="eWebhookManagementevent">eWebhookManagementevent.</param>
        /// <param name="sWebhookUrl">The URL of the Webhook callback (required).</param>
        /// <param name="sWebhookEmailfailed">The email that will receive the Webhook in case all attempts fail (required).</param>
        /// <param name="sWebhookApikey">The Apikey for the Webhook.  This will be hidden if we are not creating or regenerating the Apikey..</param>
        /// <param name="sWebhookSecret">The Secret for the Webhook.  This will be hidden if we are not creating or regenerating the Apikey..</param>
        /// <param name="bWebhookIsactive">Whether the Webhook is active or not (required).</param>
        /// <param name="bWebhookIssigned">Whether the requests will be signed or not (required).</param>
        /// <param name="bWebhookSkipsslvalidation">Wheter the server&#39;s SSL certificate should be validated or not. Not recommended to skip for production use (required).</param>
        /// <param name="sAuthenticationexternalDescription">The description of the Authenticationexternal.</param>
        /// <param name="objAudit">objAudit (required).</param>
        public WebhookResponseCompound(string sWebhookEvent = default(string), List<WebhookheaderResponseCompound> aObjWebhookheader = default(List<WebhookheaderResponseCompound>), int pkiWebhookID = default(int), int fkiAuthenticationexternalID = default(int), string sWebhookDescription = default(string), int fkiEzsignfoldertypeID = default(int), string sEzsignfoldertypeNameX = default(string), FieldEWebhookModule eWebhookModule = default(FieldEWebhookModule), FieldEWebhookEzsignevent? eWebhookEzsignevent = default(FieldEWebhookEzsignevent?), FieldEWebhookManagementevent? eWebhookManagementevent = default(FieldEWebhookManagementevent?), string sWebhookUrl = default(string), string sWebhookEmailfailed = default(string), string sWebhookApikey = default(string), string sWebhookSecret = default(string), bool bWebhookIsactive = default(bool), bool bWebhookIssigned = default(bool), bool bWebhookSkipsslvalidation = default(bool), string sAuthenticationexternalDescription = default(string), CommonAudit objAudit = default(CommonAudit)) : base()
        {
            this.SWebhookEvent = sWebhookEvent;
            this.AObjWebhookheader = aObjWebhookheader;
        }

        /// <summary>
        /// The concatenated string to describe the Webhook event
        /// </summary>
        /// <value>The concatenated string to describe the Webhook event</value>
        /* <example>Ezsign-DocumentCompleted</example>*/
        [DataMember(Name = "sWebhookEvent", EmitDefaultValue = false)]
        public string SWebhookEvent { get; set; }

        /// <summary>
        /// Gets or Sets AObjWebhookheader
        /// </summary>
        [DataMember(Name = "a_objWebhookheader", EmitDefaultValue = false)]
        public List<WebhookheaderResponseCompound> AObjWebhookheader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SWebhookEvent: ").Append(SWebhookEvent).Append("\n");
            sb.Append("  AObjWebhookheader: ").Append(AObjWebhookheader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
