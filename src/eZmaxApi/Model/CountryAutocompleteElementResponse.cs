/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Country AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "country-AutocompleteElement-Response")]
    public partial class CountryAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CountryAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiCountryID">The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States| (required).</param>
        /// <param name="sCountryNameX">The name of the Country in the language of the requester (required).</param>
        /// <param name="sCountryShortname">The shortname of the Country (required).</param>
        /// <param name="bCountryIsactive">Whether the Country is active or not (required).</param>
        public CountryAutocompleteElementResponse(int pkiCountryID = default(int), string sCountryNameX = default(string), string sCountryShortname = default(string), bool bCountryIsactive = default(bool))
        {
            this.PkiCountryID = pkiCountryID;
            // to ensure "sCountryNameX" is required (not null)
            if (sCountryNameX == null)
            {
                throw new ArgumentNullException("sCountryNameX is a required property for CountryAutocompleteElementResponse and cannot be null");
            }
            this.SCountryNameX = sCountryNameX;
            // to ensure "sCountryShortname" is required (not null)
            if (sCountryShortname == null)
            {
                throw new ArgumentNullException("sCountryShortname is a required property for CountryAutocompleteElementResponse and cannot be null");
            }
            this.SCountryShortname = sCountryShortname;
            this.BCountryIsactive = bCountryIsactive;
        }

        /// <summary>
        /// The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|
        /// </summary>
        /// <value>The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiCountryID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiCountryID { get; set; }

        /// <summary>
        /// The name of the Country in the language of the requester
        /// </summary>
        /// <value>The name of the Country in the language of the requester</value>
        /* <example>Canada</example>*/
        [DataMember(Name = "sCountryNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SCountryNameX { get; set; }

        /// <summary>
        /// The shortname of the Country
        /// </summary>
        /// <value>The shortname of the Country</value>
        /* <example>CA</example>*/
        [DataMember(Name = "sCountryShortname", IsRequired = true, EmitDefaultValue = true)]
        public string SCountryShortname { get; set; }

        /// <summary>
        /// Whether the Country is active or not
        /// </summary>
        /// <value>Whether the Country is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bCountryIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BCountryIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CountryAutocompleteElementResponse {\n");
            sb.Append("  PkiCountryID: ").Append(PkiCountryID).Append("\n");
            sb.Append("  SCountryNameX: ").Append(SCountryNameX).Append("\n");
            sb.Append("  SCountryShortname: ").Append(SCountryShortname).Append("\n");
            sb.Append("  BCountryIsactive: ").Append(BCountryIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiCountryID (int) minimum
            if (this.PkiCountryID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiCountryID, must be a value greater than or equal to 0.", new [] { "PkiCountryID" });
            }

            if (this.SCountryNameX != null) {
                // SCountryNameX (string) pattern
                Regex regexSCountryNameX = new Regex(@"^.{0,40}$", RegexOptions.CultureInvariant);
                if (!regexSCountryNameX.Match(this.SCountryNameX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCountryNameX, must match a pattern of " + regexSCountryNameX, new [] { "SCountryNameX" });
                }
            }

            if (this.SCountryShortname != null) {
                // SCountryShortname (string) pattern
                Regex regexSCountryShortname = new Regex(@"^.{1,3}$", RegexOptions.CultureInvariant);
                if (!regexSCountryShortname.Match(this.SCountryShortname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SCountryShortname, must match a pattern of " + regexSCountryShortname, new [] { "SCountryShortname" });
                }
            }

            yield break;
        }
    }

}
