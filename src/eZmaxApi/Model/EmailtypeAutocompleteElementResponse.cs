/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Emailtype AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "emailtype-AutocompleteElement-Response")]
    public partial class EmailtypeAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailtypeAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailtypeAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailtypeAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiEmailtypeID">The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| (required).</param>
        /// <param name="sEmailtypeNameX">The name of the Emailtype in the language of the requester (required).</param>
        /// <param name="bEmailtypeIsactive">Whether the Emailtype is active or not (required).</param>
        public EmailtypeAutocompleteElementResponse(int pkiEmailtypeID = default(int), string sEmailtypeNameX = default(string), bool bEmailtypeIsactive = default(bool))
        {
            this.PkiEmailtypeID = pkiEmailtypeID;
            // to ensure "sEmailtypeNameX" is required (not null)
            if (sEmailtypeNameX == null)
            {
                throw new ArgumentNullException("sEmailtypeNameX is a required property for EmailtypeAutocompleteElementResponse and cannot be null");
            }
            this.SEmailtypeNameX = sEmailtypeNameX;
            this.BEmailtypeIsactive = bEmailtypeIsactive;
        }

        /// <summary>
        /// The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
        /// </summary>
        /// <value>The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|</value>
        /* <example>1</example>*/
        [DataMember(Name = "pkiEmailtypeID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEmailtypeID { get; set; }

        /// <summary>
        /// The name of the Emailtype in the language of the requester
        /// </summary>
        /// <value>The name of the Emailtype in the language of the requester</value>
        /* <example>Office</example>*/
        [DataMember(Name = "sEmailtypeNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SEmailtypeNameX { get; set; }

        /// <summary>
        /// Whether the Emailtype is active or not
        /// </summary>
        /// <value>Whether the Emailtype is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEmailtypeIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEmailtypeIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailtypeAutocompleteElementResponse {\n");
            sb.Append("  PkiEmailtypeID: ").Append(PkiEmailtypeID).Append("\n");
            sb.Append("  SEmailtypeNameX: ").Append(SEmailtypeNameX).Append("\n");
            sb.Append("  BEmailtypeIsactive: ").Append(BEmailtypeIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEmailtypeID (int) minimum
            if (this.PkiEmailtypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEmailtypeID, must be a value greater than or equal to 0.", new [] { "PkiEmailtypeID" });
            }

            if (this.SEmailtypeNameX != null) {
                // SEmailtypeNameX (string) pattern
                Regex regexSEmailtypeNameX = new Regex(@"^.{0,15}$", RegexOptions.CultureInvariant);
                if (!regexSEmailtypeNameX.Match(this.SEmailtypeNameX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailtypeNameX, must match a pattern of " + regexSEmailtypeNameX, new [] { "SEmailtypeNameX" });
                }
            }

            yield break;
        }
    }

}
