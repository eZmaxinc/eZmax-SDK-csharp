/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsigner Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignsigner-ResponseCompound")]
    public partial class EzsignsignerResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignerResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignerResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignerResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignerID">The unique ID of the Ezsignsigner (required).</param>
        /// <param name="fkiTaxassignmentID">The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable| (required).</param>
        /// <param name="fkiSecretquestionID">The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|.</param>
        /// <param name="fkiUserlogintypeID">The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|      (required).</param>
        /// <param name="sUserlogintypeDescriptionX">The description of the Userlogintype in the language of the requester (required).</param>
        /// <param name="objContact">objContact (required).</param>
        public EzsignsignerResponseCompound(int pkiEzsignsignerID = default(int), int fkiTaxassignmentID = default(int), int fkiSecretquestionID = default(int), int fkiUserlogintypeID = default(int), string sUserlogintypeDescriptionX = default(string), EzsignsignerResponseCompoundContact objContact = default(EzsignsignerResponseCompoundContact))
        {
            this.PkiEzsignsignerID = pkiEzsignsignerID;
            this.FkiTaxassignmentID = fkiTaxassignmentID;
            this.FkiUserlogintypeID = fkiUserlogintypeID;
            // to ensure "sUserlogintypeDescriptionX" is required (not null)
            if (sUserlogintypeDescriptionX == null)
            {
                throw new ArgumentNullException("sUserlogintypeDescriptionX is a required property for EzsignsignerResponseCompound and cannot be null");
            }
            this.SUserlogintypeDescriptionX = sUserlogintypeDescriptionX;
            // to ensure "objContact" is required (not null)
            if (objContact == null)
            {
                throw new ArgumentNullException("objContact is a required property for EzsignsignerResponseCompound and cannot be null");
            }
            this.ObjContact = objContact;
            this.FkiSecretquestionID = fkiSecretquestionID;
        }

        /// <summary>
        /// The unique ID of the Ezsignsigner
        /// </summary>
        /// <value>The unique ID of the Ezsignsigner</value>
        /* <example>89</example>*/
        [DataMember(Name = "pkiEzsignsignerID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignsignerID { get; set; }

        /// <summary>
        /// The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|
        /// </summary>
        /// <value>The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiTaxassignmentID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiTaxassignmentID { get; set; }

        /// <summary>
        /// The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|
        /// </summary>
        /// <value>The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|</value>
        /* <example>7</example>*/
        [DataMember(Name = "fkiSecretquestionID", EmitDefaultValue = false)]
        public int FkiSecretquestionID { get; set; }

        /// <summary>
        /// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
        /// </summary>
        /// <value>The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     </value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUserlogintypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserlogintypeID { get; set; }

        /// <summary>
        /// The description of the Userlogintype in the language of the requester
        /// </summary>
        /// <value>The description of the Userlogintype in the language of the requester</value>
        /* <example>Email and phone or SMS</example>*/
        [DataMember(Name = "sUserlogintypeDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SUserlogintypeDescriptionX { get; set; }

        /// <summary>
        /// Gets or Sets ObjContact
        /// </summary>
        [DataMember(Name = "objContact", IsRequired = true, EmitDefaultValue = true)]
        public EzsignsignerResponseCompoundContact ObjContact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignsignerResponseCompound {\n");
            sb.Append("  PkiEzsignsignerID: ").Append(PkiEzsignsignerID).Append("\n");
            sb.Append("  FkiTaxassignmentID: ").Append(FkiTaxassignmentID).Append("\n");
            sb.Append("  FkiSecretquestionID: ").Append(FkiSecretquestionID).Append("\n");
            sb.Append("  FkiUserlogintypeID: ").Append(FkiUserlogintypeID).Append("\n");
            sb.Append("  SUserlogintypeDescriptionX: ").Append(SUserlogintypeDescriptionX).Append("\n");
            sb.Append("  ObjContact: ").Append(ObjContact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignsignerID (int) minimum
            if (this.PkiEzsignsignerID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsignsignerID, must be a value greater than or equal to 0.", new [] { "PkiEzsignsignerID" });
            }

            // FkiTaxassignmentID (int) maximum
            if (this.FkiTaxassignmentID > (int)15)
            {
                yield return new ValidationResult("Invalid value for FkiTaxassignmentID, must be a value less than or equal to 15.", new [] { "FkiTaxassignmentID" });
            }

            // FkiTaxassignmentID (int) minimum
            if (this.FkiTaxassignmentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiTaxassignmentID, must be a value greater than or equal to 0.", new [] { "FkiTaxassignmentID" });
            }

            // FkiSecretquestionID (int) minimum
            if (this.FkiSecretquestionID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiSecretquestionID, must be a value greater than or equal to 0.", new [] { "FkiSecretquestionID" });
            }

            // FkiUserlogintypeID (int) minimum
            if (this.FkiUserlogintypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiUserlogintypeID, must be a value greater than or equal to 0.", new [] { "FkiUserlogintypeID" });
            }

            yield break;
        }
    }

}
