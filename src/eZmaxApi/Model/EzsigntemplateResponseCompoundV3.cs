/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplate Object
    /// </summary>
    [DataContract(Name = "ezsigntemplate-ResponseCompoundV3")]
    public partial class EzsigntemplateResponseCompoundV3 : EzsigntemplateResponseV3, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateResponseCompoundV3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateResponseCompoundV3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateResponseCompoundV3" /> class.
        /// </summary>
        /// <param name="objEzsigntemplatedocument">objEzsigntemplatedocument.</param>
        /// <param name="aObjEzsigntemplatesigner">aObjEzsigntemplatesigner (required).</param>
        /// <param name="pkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="fkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument.</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype..</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="fkiEzdoctemplatedocumentID">The unique ID of the Ezdoctemplatedocument.</param>
        /// <param name="sEzdoctemplatedocumentNameX">The name of the Ezdoctemplatedocument in the language of the requester.</param>
        /// <param name="sLanguageNameX">The Name of the Language in the language of the requester (required).</param>
        /// <param name="sEzsigntemplateDescription">The description of the Ezsigntemplate (required).</param>
        /// <param name="sEzsigntemplateExternaldescription">The external description of the Ezsigntemplate.</param>
        /// <param name="tEzsigntemplateComment">The comment of the Ezsigntemplate.</param>
        /// <param name="eEzsigntemplateRecognition">eEzsigntemplateRecognition.</param>
        /// <param name="sEzsigntemplateFilenameregexp">The filename regexp of the Ezsigntemplate..</param>
        /// <param name="bEzsigntemplateAdminonly">Whether the Ezsigntemplate can be accessed by admin users only (eUserType&#x3D;Normal) (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester.</param>
        /// <param name="objAudit">objAudit (required).</param>
        /// <param name="bEzsigntemplateEditallowed">Whether the Ezsigntemplate if allowed to edit or not (required).</param>
        /// <param name="eEzsigntemplateType">eEzsigntemplateType.</param>
        public EzsigntemplateResponseCompoundV3(EzsigntemplatedocumentResponse objEzsigntemplatedocument = default(EzsigntemplatedocumentResponse), List<EzsigntemplatesignerResponseCompound> aObjEzsigntemplatesigner = default(List<EzsigntemplatesignerResponseCompound>), int pkiEzsigntemplateID = default(int), int fkiEzsigntemplatedocumentID = default(int), int fkiEzsignfoldertypeID = default(int), int fkiLanguageID = default(int), int fkiEzdoctemplatedocumentID = default(int), string sEzdoctemplatedocumentNameX = default(string), string sLanguageNameX = default(string), string sEzsigntemplateDescription = default(string), string sEzsigntemplateExternaldescription = default(string), string tEzsigntemplateComment = default(string), FieldEEzsigntemplateRecognition? eEzsigntemplateRecognition = default(FieldEEzsigntemplateRecognition?), string sEzsigntemplateFilenameregexp = default(string), bool bEzsigntemplateAdminonly = default(bool), string sEzsignfoldertypeNameX = default(string), CommonAudit objAudit = default(CommonAudit), bool bEzsigntemplateEditallowed = default(bool), FieldEEzsigntemplateType? eEzsigntemplateType = default(FieldEEzsigntemplateType?)) : base()
        {
            // to ensure "aObjEzsigntemplatesigner" is required (not null)
            if (aObjEzsigntemplatesigner == null)
            {
                throw new ArgumentNullException("aObjEzsigntemplatesigner is a required property for EzsigntemplateResponseCompoundV3 and cannot be null");
            }
            this.AObjEzsigntemplatesigner = aObjEzsigntemplatesigner;
            this.ObjEzsigntemplatedocument = objEzsigntemplatedocument;
        }

        /// <summary>
        /// Gets or Sets ObjEzsigntemplatedocument
        /// </summary>
        [DataMember(Name = "objEzsigntemplatedocument", EmitDefaultValue = false)]
        public EzsigntemplatedocumentResponse ObjEzsigntemplatedocument { get; set; }

        /// <summary>
        /// Gets or Sets AObjEzsigntemplatesigner
        /// </summary>
        [DataMember(Name = "a_objEzsigntemplatesigner", IsRequired = true, EmitDefaultValue = true)]
        public List<EzsigntemplatesignerResponseCompound> AObjEzsigntemplatesigner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateResponseCompoundV3 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ObjEzsigntemplatedocument: ").Append(ObjEzsigntemplatedocument).Append("\n");
            sb.Append("  AObjEzsigntemplatesigner: ").Append(AObjEzsigntemplatesigner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
