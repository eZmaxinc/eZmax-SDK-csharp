/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.9
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplateformfieldgroup Object
    /// </summary>
    [DataContract]
    public partial class EzsigntemplateformfieldgroupRequest :  IEquatable<EzsigntemplateformfieldgroupRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldgroupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateformfieldgroupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateformfieldgroupRequest" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateformfieldgroupID">The unique ID of the Ezsigntemplateformfieldgroup.</param>
        /// <param name="fkiEzsigntemplatedocumentID">The unique ID of the Ezsigntemplatedocument (required).</param>
        /// <param name="eEzsigntemplateformfieldgroupType">eEzsigntemplateformfieldgroupType (required).</param>
        /// <param name="eEzsigntemplateformfieldgroupSignerrequirement">eEzsigntemplateformfieldgroupSignerrequirement (required).</param>
        /// <param name="sEzsigntemplateformfieldgroupLabel">The Label for the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupStep">The step when the Ezsigntemplatesigner will be invited to fill the form fields (required).</param>
        /// <param name="sEzsigntemplateformfieldgroupDefaultvalue">The default value for the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupFilledmin">The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupFilledmax">The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup (required).</param>
        /// <param name="bEzsigntemplateformfieldgroupReadonly">Whether the Ezsigntemplateformfieldgroup is read only or not. (required).</param>
        /// <param name="iEzsigntemplateformfieldgroupMaxlength">The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="bEzsigntemplateformfieldgroupEncrypted">Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="sEzsigntemplateformfieldgroupRegexp">A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**.</param>
        /// <param name="tEzsigntemplateformfieldgroupTooltip">A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup.</param>
        /// <param name="eEzsigntemplateformfieldgroupTooltipposition">eEzsigntemplateformfieldgroupTooltipposition.</param>
        public EzsigntemplateformfieldgroupRequest(int pkiEzsigntemplateformfieldgroupID = default(int), int fkiEzsigntemplatedocumentID = default(int), FieldEEzsigntemplateformfieldgroupType eEzsigntemplateformfieldgroupType = default(FieldEEzsigntemplateformfieldgroupType), FieldEEzsigntemplateformfieldgroupSignerrequirement eEzsigntemplateformfieldgroupSignerrequirement = default(FieldEEzsigntemplateformfieldgroupSignerrequirement), string sEzsigntemplateformfieldgroupLabel = default(string), int iEzsigntemplateformfieldgroupStep = default(int), string sEzsigntemplateformfieldgroupDefaultvalue = default(string), int iEzsigntemplateformfieldgroupFilledmin = default(int), int iEzsigntemplateformfieldgroupFilledmax = default(int), bool bEzsigntemplateformfieldgroupReadonly = default(bool), int iEzsigntemplateformfieldgroupMaxlength = default(int), bool bEzsigntemplateformfieldgroupEncrypted = default(bool), string sEzsigntemplateformfieldgroupRegexp = default(string), string tEzsigntemplateformfieldgroupTooltip = default(string), FieldEEzsigntemplateformfieldgroupTooltipposition eEzsigntemplateformfieldgroupTooltipposition = default(FieldEEzsigntemplateformfieldgroupTooltipposition))
        {
            // to ensure "fkiEzsigntemplatedocumentID" is required (not null)
            if (fkiEzsigntemplatedocumentID == null)
            {
                throw new InvalidDataException("fkiEzsigntemplatedocumentID is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.FkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID;
            }

            // to ensure "eEzsigntemplateformfieldgroupType" is required (not null)
            if (eEzsigntemplateformfieldgroupType == null)
            {
                throw new InvalidDataException("eEzsigntemplateformfieldgroupType is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.EEzsigntemplateformfieldgroupType = eEzsigntemplateformfieldgroupType;
            }

            // to ensure "eEzsigntemplateformfieldgroupSignerrequirement" is required (not null)
            if (eEzsigntemplateformfieldgroupSignerrequirement == null)
            {
                throw new InvalidDataException("eEzsigntemplateformfieldgroupSignerrequirement is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.EEzsigntemplateformfieldgroupSignerrequirement = eEzsigntemplateformfieldgroupSignerrequirement;
            }

            // to ensure "sEzsigntemplateformfieldgroupLabel" is required (not null)
            if (sEzsigntemplateformfieldgroupLabel == null)
            {
                throw new InvalidDataException("sEzsigntemplateformfieldgroupLabel is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.SEzsigntemplateformfieldgroupLabel = sEzsigntemplateformfieldgroupLabel;
            }

            // to ensure "iEzsigntemplateformfieldgroupStep" is required (not null)
            if (iEzsigntemplateformfieldgroupStep == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldgroupStep is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldgroupStep = iEzsigntemplateformfieldgroupStep;
            }

            // to ensure "sEzsigntemplateformfieldgroupDefaultvalue" is required (not null)
            if (sEzsigntemplateformfieldgroupDefaultvalue == null)
            {
                throw new InvalidDataException("sEzsigntemplateformfieldgroupDefaultvalue is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.SEzsigntemplateformfieldgroupDefaultvalue = sEzsigntemplateformfieldgroupDefaultvalue;
            }

            // to ensure "iEzsigntemplateformfieldgroupFilledmin" is required (not null)
            if (iEzsigntemplateformfieldgroupFilledmin == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldgroupFilledmin is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldgroupFilledmin = iEzsigntemplateformfieldgroupFilledmin;
            }

            // to ensure "iEzsigntemplateformfieldgroupFilledmax" is required (not null)
            if (iEzsigntemplateformfieldgroupFilledmax == null)
            {
                throw new InvalidDataException("iEzsigntemplateformfieldgroupFilledmax is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.IEzsigntemplateformfieldgroupFilledmax = iEzsigntemplateformfieldgroupFilledmax;
            }

            // to ensure "bEzsigntemplateformfieldgroupReadonly" is required (not null)
            if (bEzsigntemplateformfieldgroupReadonly == null)
            {
                throw new InvalidDataException("bEzsigntemplateformfieldgroupReadonly is a required property for EzsigntemplateformfieldgroupRequest and cannot be null");
            }
            else
            {
                this.BEzsigntemplateformfieldgroupReadonly = bEzsigntemplateformfieldgroupReadonly;
            }

            this.PkiEzsigntemplateformfieldgroupID = pkiEzsigntemplateformfieldgroupID;
            this.IEzsigntemplateformfieldgroupMaxlength = iEzsigntemplateformfieldgroupMaxlength;
            this.BEzsigntemplateformfieldgroupEncrypted = bEzsigntemplateformfieldgroupEncrypted;
            this.SEzsigntemplateformfieldgroupRegexp = sEzsigntemplateformfieldgroupRegexp;
            this.TEzsigntemplateformfieldgroupTooltip = tEzsigntemplateformfieldgroupTooltip;
            this.EEzsigntemplateformfieldgroupTooltipposition = eEzsigntemplateformfieldgroupTooltipposition;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateformfieldgroup</value>
        [DataMember(Name="pkiEzsigntemplateformfieldgroupID", EmitDefaultValue=false)]
        public int PkiEzsigntemplateformfieldgroupID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatedocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatedocument</value>
        [DataMember(Name="fkiEzsigntemplatedocumentID", EmitDefaultValue=true)]
        public int FkiEzsigntemplatedocumentID { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupType
        /// </summary>
        [DataMember(Name="eEzsigntemplateformfieldgroupType", EmitDefaultValue=true)]
        public FieldEEzsigntemplateformfieldgroupType EEzsigntemplateformfieldgroupType { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupSignerrequirement
        /// </summary>
        [DataMember(Name="eEzsigntemplateformfieldgroupSignerrequirement", EmitDefaultValue=true)]
        public FieldEEzsigntemplateformfieldgroupSignerrequirement EEzsigntemplateformfieldgroupSignerrequirement { get; set; }

        /// <summary>
        /// The Label for the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The Label for the Ezsigntemplateformfieldgroup</value>
        [DataMember(Name="sEzsigntemplateformfieldgroupLabel", EmitDefaultValue=true)]
        public string SEzsigntemplateformfieldgroupLabel { get; set; }

        /// <summary>
        /// The step when the Ezsigntemplatesigner will be invited to fill the form fields
        /// </summary>
        /// <value>The step when the Ezsigntemplatesigner will be invited to fill the form fields</value>
        [DataMember(Name="iEzsigntemplateformfieldgroupStep", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldgroupStep { get; set; }

        /// <summary>
        /// The default value for the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The default value for the Ezsigntemplateformfieldgroup</value>
        [DataMember(Name="sEzsigntemplateformfieldgroupDefaultvalue", EmitDefaultValue=true)]
        public string SEzsigntemplateformfieldgroupDefaultvalue { get; set; }

        /// <summary>
        /// The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The minimum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup</value>
        [DataMember(Name="iEzsigntemplateformfieldgroupFilledmin", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldgroupFilledmin { get; set; }

        /// <summary>
        /// The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>The maximum number of Ezsigntemplateformfield that must be filled in the Ezsigntemplateformfieldgroup</value>
        [DataMember(Name="iEzsigntemplateformfieldgroupFilledmax", EmitDefaultValue=true)]
        public int IEzsigntemplateformfieldgroupFilledmax { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplateformfieldgroup is read only or not.
        /// </summary>
        /// <value>Whether the Ezsigntemplateformfieldgroup is read only or not.</value>
        [DataMember(Name="bEzsigntemplateformfieldgroupReadonly", EmitDefaultValue=true)]
        public bool BEzsigntemplateformfieldgroupReadonly { get; set; }

        /// <summary>
        /// The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>The maximum length for the value in the Ezsigntemplateformfieldgroup  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**</value>
        [DataMember(Name="iEzsigntemplateformfieldgroupMaxlength", EmitDefaultValue=false)]
        public int IEzsigntemplateformfieldgroupMaxlength { get; set; }

        /// <summary>
        /// Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>Whether the Ezsigntemplateformfieldgroup is encrypted in the database or not. Encrypted values are not displayed on the Ezsigndocument. This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**</value>
        [DataMember(Name="bEzsigntemplateformfieldgroupEncrypted", EmitDefaultValue=false)]
        public bool BEzsigntemplateformfieldgroupEncrypted { get; set; }

        /// <summary>
        /// A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**
        /// </summary>
        /// <value>A regular expression to indicate what values are acceptable for the Ezsigntemplateformfieldgroup.  This can only be set if eEzsigntemplateformfieldgroupType is **Text** or **Textarea**</value>
        [DataMember(Name="sEzsigntemplateformfieldgroupRegexp", EmitDefaultValue=false)]
        public string SEzsigntemplateformfieldgroupRegexp { get; set; }

        /// <summary>
        /// A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplateformfieldgroup</value>
        [DataMember(Name="tEzsigntemplateformfieldgroupTooltip", EmitDefaultValue=false)]
        public string TEzsigntemplateformfieldgroupTooltip { get; set; }

        /// <summary>
        /// Gets or Sets EEzsigntemplateformfieldgroupTooltipposition
        /// </summary>
        [DataMember(Name="eEzsigntemplateformfieldgroupTooltipposition", EmitDefaultValue=false)]
        public FieldEEzsigntemplateformfieldgroupTooltipposition EEzsigntemplateformfieldgroupTooltipposition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsigntemplateformfieldgroupRequest {\n");
            sb.Append("  PkiEzsigntemplateformfieldgroupID: ").Append(PkiEzsigntemplateformfieldgroupID).Append("\n");
            sb.Append("  FkiEzsigntemplatedocumentID: ").Append(FkiEzsigntemplatedocumentID).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupType: ").Append(EEzsigntemplateformfieldgroupType).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupSignerrequirement: ").Append(EEzsigntemplateformfieldgroupSignerrequirement).Append("\n");
            sb.Append("  SEzsigntemplateformfieldgroupLabel: ").Append(SEzsigntemplateformfieldgroupLabel).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupStep: ").Append(IEzsigntemplateformfieldgroupStep).Append("\n");
            sb.Append("  SEzsigntemplateformfieldgroupDefaultvalue: ").Append(SEzsigntemplateformfieldgroupDefaultvalue).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupFilledmin: ").Append(IEzsigntemplateformfieldgroupFilledmin).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupFilledmax: ").Append(IEzsigntemplateformfieldgroupFilledmax).Append("\n");
            sb.Append("  BEzsigntemplateformfieldgroupReadonly: ").Append(BEzsigntemplateformfieldgroupReadonly).Append("\n");
            sb.Append("  IEzsigntemplateformfieldgroupMaxlength: ").Append(IEzsigntemplateformfieldgroupMaxlength).Append("\n");
            sb.Append("  BEzsigntemplateformfieldgroupEncrypted: ").Append(BEzsigntemplateformfieldgroupEncrypted).Append("\n");
            sb.Append("  SEzsigntemplateformfieldgroupRegexp: ").Append(SEzsigntemplateformfieldgroupRegexp).Append("\n");
            sb.Append("  TEzsigntemplateformfieldgroupTooltip: ").Append(TEzsigntemplateformfieldgroupTooltip).Append("\n");
            sb.Append("  EEzsigntemplateformfieldgroupTooltipposition: ").Append(EEzsigntemplateformfieldgroupTooltipposition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplateformfieldgroupRequest);
        }

        /// <summary>
        /// Returns true if EzsigntemplateformfieldgroupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplateformfieldgroupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplateformfieldgroupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsigntemplateformfieldgroupID == input.PkiEzsigntemplateformfieldgroupID ||
                    (this.PkiEzsigntemplateformfieldgroupID != null &&
                    this.PkiEzsigntemplateformfieldgroupID.Equals(input.PkiEzsigntemplateformfieldgroupID))
                ) && 
                (
                    this.FkiEzsigntemplatedocumentID == input.FkiEzsigntemplatedocumentID ||
                    (this.FkiEzsigntemplatedocumentID != null &&
                    this.FkiEzsigntemplatedocumentID.Equals(input.FkiEzsigntemplatedocumentID))
                ) && 
                (
                    this.EEzsigntemplateformfieldgroupType == input.EEzsigntemplateformfieldgroupType ||
                    (this.EEzsigntemplateformfieldgroupType != null &&
                    this.EEzsigntemplateformfieldgroupType.Equals(input.EEzsigntemplateformfieldgroupType))
                ) && 
                (
                    this.EEzsigntemplateformfieldgroupSignerrequirement == input.EEzsigntemplateformfieldgroupSignerrequirement ||
                    (this.EEzsigntemplateformfieldgroupSignerrequirement != null &&
                    this.EEzsigntemplateformfieldgroupSignerrequirement.Equals(input.EEzsigntemplateformfieldgroupSignerrequirement))
                ) && 
                (
                    this.SEzsigntemplateformfieldgroupLabel == input.SEzsigntemplateformfieldgroupLabel ||
                    (this.SEzsigntemplateformfieldgroupLabel != null &&
                    this.SEzsigntemplateformfieldgroupLabel.Equals(input.SEzsigntemplateformfieldgroupLabel))
                ) && 
                (
                    this.IEzsigntemplateformfieldgroupStep == input.IEzsigntemplateformfieldgroupStep ||
                    (this.IEzsigntemplateformfieldgroupStep != null &&
                    this.IEzsigntemplateformfieldgroupStep.Equals(input.IEzsigntemplateformfieldgroupStep))
                ) && 
                (
                    this.SEzsigntemplateformfieldgroupDefaultvalue == input.SEzsigntemplateformfieldgroupDefaultvalue ||
                    (this.SEzsigntemplateformfieldgroupDefaultvalue != null &&
                    this.SEzsigntemplateformfieldgroupDefaultvalue.Equals(input.SEzsigntemplateformfieldgroupDefaultvalue))
                ) && 
                (
                    this.IEzsigntemplateformfieldgroupFilledmin == input.IEzsigntemplateformfieldgroupFilledmin ||
                    (this.IEzsigntemplateformfieldgroupFilledmin != null &&
                    this.IEzsigntemplateformfieldgroupFilledmin.Equals(input.IEzsigntemplateformfieldgroupFilledmin))
                ) && 
                (
                    this.IEzsigntemplateformfieldgroupFilledmax == input.IEzsigntemplateformfieldgroupFilledmax ||
                    (this.IEzsigntemplateformfieldgroupFilledmax != null &&
                    this.IEzsigntemplateformfieldgroupFilledmax.Equals(input.IEzsigntemplateformfieldgroupFilledmax))
                ) && 
                (
                    this.BEzsigntemplateformfieldgroupReadonly == input.BEzsigntemplateformfieldgroupReadonly ||
                    (this.BEzsigntemplateformfieldgroupReadonly != null &&
                    this.BEzsigntemplateformfieldgroupReadonly.Equals(input.BEzsigntemplateformfieldgroupReadonly))
                ) && 
                (
                    this.IEzsigntemplateformfieldgroupMaxlength == input.IEzsigntemplateformfieldgroupMaxlength ||
                    (this.IEzsigntemplateformfieldgroupMaxlength != null &&
                    this.IEzsigntemplateformfieldgroupMaxlength.Equals(input.IEzsigntemplateformfieldgroupMaxlength))
                ) && 
                (
                    this.BEzsigntemplateformfieldgroupEncrypted == input.BEzsigntemplateformfieldgroupEncrypted ||
                    (this.BEzsigntemplateformfieldgroupEncrypted != null &&
                    this.BEzsigntemplateformfieldgroupEncrypted.Equals(input.BEzsigntemplateformfieldgroupEncrypted))
                ) && 
                (
                    this.SEzsigntemplateformfieldgroupRegexp == input.SEzsigntemplateformfieldgroupRegexp ||
                    (this.SEzsigntemplateformfieldgroupRegexp != null &&
                    this.SEzsigntemplateformfieldgroupRegexp.Equals(input.SEzsigntemplateformfieldgroupRegexp))
                ) && 
                (
                    this.TEzsigntemplateformfieldgroupTooltip == input.TEzsigntemplateformfieldgroupTooltip ||
                    (this.TEzsigntemplateformfieldgroupTooltip != null &&
                    this.TEzsigntemplateformfieldgroupTooltip.Equals(input.TEzsigntemplateformfieldgroupTooltip))
                ) && 
                (
                    this.EEzsigntemplateformfieldgroupTooltipposition == input.EEzsigntemplateformfieldgroupTooltipposition ||
                    (this.EEzsigntemplateformfieldgroupTooltipposition != null &&
                    this.EEzsigntemplateformfieldgroupTooltipposition.Equals(input.EEzsigntemplateformfieldgroupTooltipposition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsigntemplateformfieldgroupID != null)
                    hashCode = hashCode * 59 + this.PkiEzsigntemplateformfieldgroupID.GetHashCode();
                if (this.FkiEzsigntemplatedocumentID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplatedocumentID.GetHashCode();
                if (this.EEzsigntemplateformfieldgroupType != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplateformfieldgroupType.GetHashCode();
                if (this.EEzsigntemplateformfieldgroupSignerrequirement != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplateformfieldgroupSignerrequirement.GetHashCode();
                if (this.SEzsigntemplateformfieldgroupLabel != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplateformfieldgroupLabel.GetHashCode();
                if (this.IEzsigntemplateformfieldgroupStep != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldgroupStep.GetHashCode();
                if (this.SEzsigntemplateformfieldgroupDefaultvalue != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplateformfieldgroupDefaultvalue.GetHashCode();
                if (this.IEzsigntemplateformfieldgroupFilledmin != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldgroupFilledmin.GetHashCode();
                if (this.IEzsigntemplateformfieldgroupFilledmax != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldgroupFilledmax.GetHashCode();
                if (this.BEzsigntemplateformfieldgroupReadonly != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplateformfieldgroupReadonly.GetHashCode();
                if (this.IEzsigntemplateformfieldgroupMaxlength != null)
                    hashCode = hashCode * 59 + this.IEzsigntemplateformfieldgroupMaxlength.GetHashCode();
                if (this.BEzsigntemplateformfieldgroupEncrypted != null)
                    hashCode = hashCode * 59 + this.BEzsigntemplateformfieldgroupEncrypted.GetHashCode();
                if (this.SEzsigntemplateformfieldgroupRegexp != null)
                    hashCode = hashCode * 59 + this.SEzsigntemplateformfieldgroupRegexp.GetHashCode();
                if (this.TEzsigntemplateformfieldgroupTooltip != null)
                    hashCode = hashCode * 59 + this.TEzsigntemplateformfieldgroupTooltip.GetHashCode();
                if (this.EEzsigntemplateformfieldgroupTooltipposition != null)
                    hashCode = hashCode * 59 + this.EEzsigntemplateformfieldgroupTooltipposition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsigntemplateformfieldgroupID (int) minimum
            if(this.PkiEzsigntemplateformfieldgroupID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplateformfieldgroupID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateformfieldgroupID" });
            }



            // FkiEzsigntemplatedocumentID (int) minimum
            if(this.FkiEzsigntemplatedocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatedocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatedocumentID" });
            }



            // IEzsigntemplateformfieldgroupStep (int) minimum
            if(this.IEzsigntemplateformfieldgroupStep < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupStep, must be a value greater than or equal to 1.", new [] { "IEzsigntemplateformfieldgroupStep" });
            }



            // IEzsigntemplateformfieldgroupFilledmin (int) minimum
            if(this.IEzsigntemplateformfieldgroupFilledmin < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupFilledmin, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldgroupFilledmin" });
            }



            // IEzsigntemplateformfieldgroupFilledmax (int) minimum
            if(this.IEzsigntemplateformfieldgroupFilledmax < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupFilledmax, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldgroupFilledmax" });
            }



            // IEzsigntemplateformfieldgroupMaxlength (int) minimum
            if(this.IEzsigntemplateformfieldgroupMaxlength < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplateformfieldgroupMaxlength, must be a value greater than or equal to 0.", new [] { "IEzsigntemplateformfieldgroupMaxlength" });
            }

            yield break;
        }
    }

}
