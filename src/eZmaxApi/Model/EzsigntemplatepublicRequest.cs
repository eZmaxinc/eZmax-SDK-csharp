/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepublic Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatepublic-Request")]
    public partial class EzsigntemplatepublicRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsigntemplatepublicLimittype
        /// </summary>
        [DataMember(Name = "eEzsigntemplatepublicLimittype", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsigntemplatepublicLimittype EEzsigntemplatepublicLimittype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepublicRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepublicRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepublicRequest" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezsigntemplatepublic.</param>
        /// <param name="">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="">The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|      (required).</param>
        /// <param name="">The unique ID of the Ezsigntemplate.</param>
        /// <param name="">The unique ID of the Ezsigntemplatepackage.</param>
        /// <param name="">The description of the Ezsigntemplatepublic (required).</param>
        /// <param name="">Whether the ezsigntemplatepublic is active or not (required).</param>
        /// <param name="">The note of the Ezsigntemplatepublic (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The limit of the Ezsigntemplatepublic (required).</param>
        public EzsigntemplatepublicRequest(int  = default(int), int  = default(int), int  = default(int), int  = default(int), int  = default(int), string  = default(string), bool  = default(bool), string  = default(string), FieldEEzsigntemplatepublicLimittype  = default(FieldEEzsigntemplatepublicLimittype), int  = default(int))
        {
            this.FkiEzsignfoldertypeID = ;
            this.FkiUserlogintypeID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsigntemplatepublicRequest and cannot be null");
            }
            this.SEzsigntemplatepublicDescription = ;
            this.BEzsigntemplatepublicIsactive = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzsigntemplatepublicRequest and cannot be null");
            }
            this.TEzsigntemplatepublicNote = ;
            this.EEzsigntemplatepublicLimittype = ;
            this.IEzsigntemplatepublicLimit = ;
            this.PkiEzsigntemplatepublicID = ;
            this.FkiEzsigntemplateID = ;
            this.FkiEzsigntemplatepackageID = ;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepublic
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepublic</value>
        /* <example>96</example>*/
        [DataMember(Name = "pkiEzsigntemplatepublicID", EmitDefaultValue = false)]
        public int PkiEzsigntemplatepublicID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldertype.
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldertype.</value>
        /* <example>5</example>*/
        [DataMember(Name = "fkiEzsignfoldertypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsignfoldertypeID { get; set; }

        /// <summary>
        /// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
        /// </summary>
        /// <value>The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     </value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUserlogintypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserlogintypeID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        /* <example>36</example>*/
        [DataMember(Name = "fkiEzsigntemplateID", EmitDefaultValue = false)]
        public int FkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackage</value>
        /* <example>99</example>*/
        [DataMember(Name = "fkiEzsigntemplatepackageID", EmitDefaultValue = false)]
        public int FkiEzsigntemplatepackageID { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplatepublic
        /// </summary>
        /// <value>The description of the Ezsigntemplatepublic</value>
        /* <example>Inscription form</example>*/
        [DataMember(Name = "sEzsigntemplatepublicDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatepublicDescription { get; set; }

        /// <summary>
        /// Whether the ezsigntemplatepublic is active or not
        /// </summary>
        /// <value>Whether the ezsigntemplatepublic is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzsigntemplatepublicIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzsigntemplatepublicIsactive { get; set; }

        /// <summary>
        /// The note of the Ezsigntemplatepublic
        /// </summary>
        /// <value>The note of the Ezsigntemplatepublic</value>
        /* <example>This is a note</example>*/
        [DataMember(Name = "tEzsigntemplatepublicNote", IsRequired = true, EmitDefaultValue = true)]
        public string TEzsigntemplatepublicNote { get; set; }

        /// <summary>
        /// The limit of the Ezsigntemplatepublic
        /// </summary>
        /// <value>The limit of the Ezsigntemplatepublic</value>
        /* <example>10</example>*/
        [DataMember(Name = "iEzsigntemplatepublicLimit", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplatepublicLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepublicRequest {\n");
            sb.Append("  PkiEzsigntemplatepublicID: ").Append(PkiEzsigntemplatepublicID).Append("\n");
            sb.Append("  FkiEzsignfoldertypeID: ").Append(FkiEzsignfoldertypeID).Append("\n");
            sb.Append("  FkiUserlogintypeID: ").Append(FkiUserlogintypeID).Append("\n");
            sb.Append("  FkiEzsigntemplateID: ").Append(FkiEzsigntemplateID).Append("\n");
            sb.Append("  FkiEzsigntemplatepackageID: ").Append(FkiEzsigntemplatepackageID).Append("\n");
            sb.Append("  SEzsigntemplatepublicDescription: ").Append(SEzsigntemplatepublicDescription).Append("\n");
            sb.Append("  BEzsigntemplatepublicIsactive: ").Append(BEzsigntemplatepublicIsactive).Append("\n");
            sb.Append("  TEzsigntemplatepublicNote: ").Append(TEzsigntemplatepublicNote).Append("\n");
            sb.Append("  EEzsigntemplatepublicLimittype: ").Append(EEzsigntemplatepublicLimittype).Append("\n");
            sb.Append("  IEzsigntemplatepublicLimit: ").Append(IEzsigntemplatepublicLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatepublicID (int) maximum
            if (this.PkiEzsigntemplatepublicID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatepublicID, must be a value less than or equal to 65535.", new [] { "PkiEzsigntemplatepublicID" });
            }

            // PkiEzsigntemplatepublicID (int) minimum
            if (this.PkiEzsigntemplatepublicID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatepublicID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatepublicID" });
            }

            // FkiEzsignfoldertypeID (int) maximum
            if (this.FkiEzsignfoldertypeID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value less than or equal to 65535.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiEzsignfoldertypeID (int) minimum
            if (this.FkiEzsignfoldertypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldertypeID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldertypeID" });
            }

            // FkiUserlogintypeID (int) minimum
            if (this.FkiUserlogintypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserlogintypeID, must be a value greater than or equal to 0.", new [] { "FkiUserlogintypeID" });
            }

            // FkiEzsigntemplateID (int) minimum
            if (this.FkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateID" });
            }

            // FkiEzsigntemplatepackageID (int) minimum
            if (this.FkiEzsigntemplatepackageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatepackageID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatepackageID" });
            }

            if (this.SEzsigntemplatepublicDescription != null) {
                // SEzsigntemplatepublicDescription (string) pattern
                Regex regexSEzsigntemplatepublicDescription = new Regex(@"^.{0,80}$", RegexOptions.CultureInvariant);
                if (!regexSEzsigntemplatepublicDescription.Match(this.SEzsigntemplatepublicDescription).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsigntemplatepublicDescription, must match a pattern of " + regexSEzsigntemplatepublicDescription, new [] { "SEzsigntemplatepublicDescription" });
                }
            }

            if (this.TEzsigntemplatepublicNote != null) {
                // TEzsigntemplatepublicNote (string) pattern
                Regex regexTEzsigntemplatepublicNote = new Regex(@"^.{0,65535}$", RegexOptions.CultureInvariant);
                if (!regexTEzsigntemplatepublicNote.Match(this.TEzsigntemplatepublicNote).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TEzsigntemplatepublicNote, must match a pattern of " + regexTEzsigntemplatepublicNote, new [] { "TEzsigntemplatepublicNote" });
                }
            }

            // IEzsigntemplatepublicLimit (int) maximum
            if (this.IEzsigntemplatepublicLimit > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatepublicLimit, must be a value less than or equal to 65535.", new [] { "IEzsigntemplatepublicLimit" });
            }

            // IEzsigntemplatepublicLimit (int) minimum
            if (this.IEzsigntemplatepublicLimit < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsigntemplatepublicLimit, must be a value greater than or equal to 0.", new [] { "IEzsigntemplatepublicLimit" });
            }

            yield break;
        }
    }

}
