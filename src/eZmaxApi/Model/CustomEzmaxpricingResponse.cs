/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Custom Ezmaxpricing Object
    /// </summary>
    [DataContract(Name = "Custom-Ezmaxpricing-Response")]
    public partial class CustomEzmaxpricingResponse : IEquatable<CustomEzmaxpricingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzmaxpricingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEzmaxpricingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEzmaxpricingResponse" /> class.
        /// </summary>
        /// <param name="pkiEzmaxpricingID">The unique ID of the Ezmaxpricing (required).</param>
        /// <param name="dEzmaxpricingRebateezsignallagents">The rebate offered when eZsign is taken for all agents (required).</param>
        /// <param name="dtEzmaxpricingStart">The start date of the Ezmaxpricing (required).</param>
        /// <param name="dtEzmaxpricingEnd">The end date of the Ezmaxpricing.</param>
        public CustomEzmaxpricingResponse(int pkiEzmaxpricingID = default(int), string dEzmaxpricingRebateezsignallagents = default(string), string dtEzmaxpricingStart = default(string), string dtEzmaxpricingEnd = default(string))
        {
            this.PkiEzmaxpricingID = pkiEzmaxpricingID;
            // to ensure "dEzmaxpricingRebateezsignallagents" is required (not null)
            if (dEzmaxpricingRebateezsignallagents == null)
            {
                throw new ArgumentNullException("dEzmaxpricingRebateezsignallagents is a required property for CustomEzmaxpricingResponse and cannot be null");
            }
            this.DEzmaxpricingRebateezsignallagents = dEzmaxpricingRebateezsignallagents;
            // to ensure "dtEzmaxpricingStart" is required (not null)
            if (dtEzmaxpricingStart == null)
            {
                throw new ArgumentNullException("dtEzmaxpricingStart is a required property for CustomEzmaxpricingResponse and cannot be null");
            }
            this.DtEzmaxpricingStart = dtEzmaxpricingStart;
            this.DtEzmaxpricingEnd = dtEzmaxpricingEnd;
        }

        /// <summary>
        /// The unique ID of the Ezmaxpricing
        /// </summary>
        /// <value>The unique ID of the Ezmaxpricing</value>
		/* <example>28</example>*/
        [DataMember(Name = "pkiEzmaxpricingID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzmaxpricingID { get; set; }

        /// <summary>
        /// The rebate offered when eZsign is taken for all agents
        /// </summary>
        /// <value>The rebate offered when eZsign is taken for all agents</value>
		/* <example>90.00</example>*/
        [DataMember(Name = "dEzmaxpricingRebateezsignallagents", IsRequired = true, EmitDefaultValue = true)]
        public string DEzmaxpricingRebateezsignallagents { get; set; }

        /// <summary>
        /// The start date of the Ezmaxpricing
        /// </summary>
        /// <value>The start date of the Ezmaxpricing</value>
		/* <example>2020-12-31</example>*/
        [DataMember(Name = "dtEzmaxpricingStart", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzmaxpricingStart { get; set; }

        /// <summary>
        /// The end date of the Ezmaxpricing
        /// </summary>
        /// <value>The end date of the Ezmaxpricing</value>
		/* <example>2020-12-31</example>*/
        [DataMember(Name = "dtEzmaxpricingEnd", EmitDefaultValue = false)]
        public string DtEzmaxpricingEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEzmaxpricingResponse {\n");
            sb.Append("  PkiEzmaxpricingID: ").Append(PkiEzmaxpricingID).Append("\n");
            sb.Append("  DEzmaxpricingRebateezsignallagents: ").Append(DEzmaxpricingRebateezsignallagents).Append("\n");
            sb.Append("  DtEzmaxpricingStart: ").Append(DtEzmaxpricingStart).Append("\n");
            sb.Append("  DtEzmaxpricingEnd: ").Append(DtEzmaxpricingEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEzmaxpricingResponse);
        }

        /// <summary>
        /// Returns true if CustomEzmaxpricingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEzmaxpricingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEzmaxpricingResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzmaxpricingID == input.PkiEzmaxpricingID ||
                    this.PkiEzmaxpricingID.Equals(input.PkiEzmaxpricingID)
                ) && 
                (
                    this.DEzmaxpricingRebateezsignallagents == input.DEzmaxpricingRebateezsignallagents ||
                    (this.DEzmaxpricingRebateezsignallagents != null &&
                    this.DEzmaxpricingRebateezsignallagents.Equals(input.DEzmaxpricingRebateezsignallagents))
                ) && 
                (
                    this.DtEzmaxpricingStart == input.DtEzmaxpricingStart ||
                    (this.DtEzmaxpricingStart != null &&
                    this.DtEzmaxpricingStart.Equals(input.DtEzmaxpricingStart))
                ) && 
                (
                    this.DtEzmaxpricingEnd == input.DtEzmaxpricingEnd ||
                    (this.DtEzmaxpricingEnd != null &&
                    this.DtEzmaxpricingEnd.Equals(input.DtEzmaxpricingEnd))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzmaxpricingID.GetHashCode();
                if (this.DEzmaxpricingRebateezsignallagents != null)
                {
                    hashCode = (hashCode * 59) + this.DEzmaxpricingRebateezsignallagents.GetHashCode();
                }
                if (this.DtEzmaxpricingStart != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzmaxpricingStart.GetHashCode();
                }
                if (this.DtEzmaxpricingEnd != null)
                {
                    hashCode = (hashCode * 59) + this.DtEzmaxpricingEnd.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzmaxpricingID (int) minimum
            if (this.PkiEzmaxpricingID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzmaxpricingID, must be a value greater than or equal to 1.", new [] { "PkiEzmaxpricingID" });
            }

            if (this.DEzmaxpricingRebateezsignallagents != null) {
                // DEzmaxpricingRebateezsignallagents (string) pattern
                Regex regexDEzmaxpricingRebateezsignallagents = new Regex(@"^-{0,1}[\d]{1,9}?\.[\d]{2}$", RegexOptions.CultureInvariant);
                if (!regexDEzmaxpricingRebateezsignallagents.Match(this.DEzmaxpricingRebateezsignallagents).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DEzmaxpricingRebateezsignallagents, must match a pattern of " + regexDEzmaxpricingRebateezsignallagents, new [] { "DEzmaxpricingRebateezsignallagents" });
                }
            }

            yield break;
        }
    }

}
