/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A User List Element
    /// </summary>
    [DataContract(Name = "user-ListElement")]
    public partial class UserListElement : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EUserType
        /// </summary>
        [DataMember(Name = "eUserType", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserType EUserType { get; set; }

        /// <summary>
        /// Gets or Sets EUserOrigin
        /// </summary>
        [DataMember(Name = "eUserOrigin", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserOrigin EUserOrigin { get; set; }

        /// <summary>
        /// Gets or Sets EUserEzsignaccess
        /// </summary>
        [DataMember(Name = "eUserEzsignaccess", IsRequired = true, EmitDefaultValue = true)]
        public FieldEUserEzsignaccess EUserEzsignaccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserListElement" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sUserLoginname">The login name of the User. (required).</param>
        /// <param name="bUserIsactive">Whether the User is active or not (required).</param>
        /// <param name="eUserType">eUserType (required).</param>
        /// <param name="eUserOrigin">eUserOrigin (required).</param>
        /// <param name="eUserEzsignaccess">eUserEzsignaccess (required).</param>
        /// <param name="dtUserEzsignprepaidexpiration">The eZsign prepaid expiration date.</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        /// <param name="sUserJobtitle">The job title of the user.</param>
        public UserListElement(int pkiUserID = default(int), string sUserFirstname = default(string), string sUserLastname = default(string), string sUserLoginname = default(string), bool bUserIsactive = default(bool), FieldEUserType eUserType = default(FieldEUserType), FieldEUserOrigin eUserOrigin = default(FieldEUserOrigin), FieldEUserEzsignaccess eUserEzsignaccess = default(FieldEUserEzsignaccess), string dtUserEzsignprepaidexpiration = default(string), string sEmailAddress = default(string), string sUserJobtitle = default(string))
        {
            this.PkiUserID = pkiUserID;
            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new ArgumentNullException("sUserFirstname is a required property for UserListElement and cannot be null");
            }
            this.SUserFirstname = sUserFirstname;
            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new ArgumentNullException("sUserLastname is a required property for UserListElement and cannot be null");
            }
            this.SUserLastname = sUserLastname;
            // to ensure "sUserLoginname" is required (not null)
            if (sUserLoginname == null)
            {
                throw new ArgumentNullException("sUserLoginname is a required property for UserListElement and cannot be null");
            }
            this.SUserLoginname = sUserLoginname;
            this.BUserIsactive = bUserIsactive;
            this.EUserType = eUserType;
            this.EUserOrigin = eUserOrigin;
            this.EUserEzsignaccess = eUserEzsignaccess;
            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new ArgumentNullException("sEmailAddress is a required property for UserListElement and cannot be null");
            }
            this.SEmailAddress = sEmailAddress;
            this.DtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration;
            this.SUserJobtitle = sUserJobtitle;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "pkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        /* <example>John</example>*/
        [DataMember(Name = "sUserFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sUserLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        /* <example>JohnDoe</example>*/
        [DataMember(Name = "sUserLoginname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserLoginname { get; set; }

        /// <summary>
        /// Whether the User is active or not
        /// </summary>
        /// <value>Whether the User is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bUserIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BUserIsactive { get; set; }

        /// <summary>
        /// The eZsign prepaid expiration date
        /// </summary>
        /// <value>The eZsign prepaid expiration date</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtUserEzsignprepaidexpiration", EmitDefaultValue = false)]
        public string DtUserEzsignprepaidexpiration { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// The job title of the user
        /// </summary>
        /// <value>The job title of the user</value>
        /* <example>Sales Representative</example>*/
        [DataMember(Name = "sUserJobtitle", EmitDefaultValue = false)]
        public string SUserJobtitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserListElement {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("  BUserIsactive: ").Append(BUserIsactive).Append("\n");
            sb.Append("  EUserType: ").Append(EUserType).Append("\n");
            sb.Append("  EUserOrigin: ").Append(EUserOrigin).Append("\n");
            sb.Append("  EUserEzsignaccess: ").Append(EUserEzsignaccess).Append("\n");
            sb.Append("  DtUserEzsignprepaidexpiration: ").Append(DtUserEzsignprepaidexpiration).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  SUserJobtitle: ").Append(SUserJobtitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUserID (int) minimum
            if (this.PkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserID, must be a value greater than or equal to 0.", new [] { "PkiUserID" });
            }

            if (this.SUserLoginname != null) {
                // SUserLoginname (string) pattern
                Regex regexSUserLoginname = new Regex(@"^(?:([\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20})|([a-zA-Z0-9]){1,32})$", RegexOptions.CultureInvariant);
                if (!regexSUserLoginname.Match(this.SUserLoginname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserLoginname, must match a pattern of " + regexSUserLoginname, new [] { "SUserLoginname" });
                }
            }

            if (this.DtUserEzsignprepaidexpiration != null) {
                // DtUserEzsignprepaidexpiration (string) pattern
                Regex regexDtUserEzsignprepaidexpiration = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtUserEzsignprepaidexpiration.Match(this.DtUserEzsignprepaidexpiration).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtUserEzsignprepaidexpiration, must match a pattern of " + regexDtUserEzsignprepaidexpiration, new [] { "DtUserEzsignprepaidexpiration" });
                }
            }

            if (this.SEmailAddress != null) {
                // SEmailAddress (string) pattern
                Regex regexSEmailAddress = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddress.Match(this.SEmailAddress).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddress, must match a pattern of " + regexSEmailAddress, new [] { "SEmailAddress" });
                }
            }

            if (this.SUserJobtitle != null) {
                // SUserJobtitle (string) pattern
                Regex regexSUserJobtitle = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSUserJobtitle.Match(this.SUserJobtitle).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserJobtitle, must match a pattern of " + regexSUserJobtitle, new [] { "SUserJobtitle" });
                }
            }

            yield break;
        }
    }

}
