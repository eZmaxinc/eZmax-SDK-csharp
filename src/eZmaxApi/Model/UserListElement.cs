/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A User List Element
    /// </summary>
    [DataContract]
    public partial class UserListElement :  IEquatable<UserListElement>
    {
        /// <summary>
        /// Gets or Sets EUserType
        /// </summary>
        [DataMember(Name="eUserType", EmitDefaultValue=true)]
        public FieldEUserType EUserType { get; set; }
        /// <summary>
        /// Gets or Sets EUserOrigin
        /// </summary>
        [DataMember(Name="eUserOrigin", EmitDefaultValue=true)]
        public FieldEUserOrigin EUserOrigin { get; set; }
        /// <summary>
        /// Gets or Sets EUserEzsignaccess
        /// </summary>
        [DataMember(Name="eUserEzsignaccess", EmitDefaultValue=true)]
        public FieldEUserEzsignaccess EUserEzsignaccess { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserListElement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserListElement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserListElement" /> class.
        /// </summary>
        /// <param name="pkiUserID">The unique ID of the User (required).</param>
        /// <param name="sUserFirstname">The first name of the user (required).</param>
        /// <param name="sUserLastname">The last name of the user (required).</param>
        /// <param name="sUserLoginname">The login name of the User. (required).</param>
        /// <param name="bUserIsactive">Whether the User is active or not (required).</param>
        /// <param name="eUserType">eUserType (required).</param>
        /// <param name="eUserOrigin">eUserOrigin (required).</param>
        /// <param name="eUserEzsignaccess">eUserEzsignaccess (required).</param>
        /// <param name="dtUserEzsignprepaidexpiration">The eZsign prepaid expiration date.</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        public UserListElement(int pkiUserID = default(int), string sUserFirstname = default(string), string sUserLastname = default(string), string sUserLoginname = default(string), bool bUserIsactive = default(bool), FieldEUserType eUserType = default(FieldEUserType), FieldEUserOrigin eUserOrigin = default(FieldEUserOrigin), FieldEUserEzsignaccess eUserEzsignaccess = default(FieldEUserEzsignaccess), string dtUserEzsignprepaidexpiration = default(string), string sEmailAddress = default(string))
        {
            // to ensure "pkiUserID" is required (not null)
            if (pkiUserID == null)
            {
                throw new InvalidDataException("pkiUserID is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.PkiUserID = pkiUserID;
            }

            // to ensure "sUserFirstname" is required (not null)
            if (sUserFirstname == null)
            {
                throw new InvalidDataException("sUserFirstname is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.SUserFirstname = sUserFirstname;
            }

            // to ensure "sUserLastname" is required (not null)
            if (sUserLastname == null)
            {
                throw new InvalidDataException("sUserLastname is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.SUserLastname = sUserLastname;
            }

            // to ensure "sUserLoginname" is required (not null)
            if (sUserLoginname == null)
            {
                throw new InvalidDataException("sUserLoginname is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.SUserLoginname = sUserLoginname;
            }

            // to ensure "bUserIsactive" is required (not null)
            if (bUserIsactive == null)
            {
                throw new InvalidDataException("bUserIsactive is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.BUserIsactive = bUserIsactive;
            }

            // to ensure "eUserType" is required (not null)
            if (eUserType == null)
            {
                throw new InvalidDataException("eUserType is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.EUserType = eUserType;
            }

            // to ensure "eUserOrigin" is required (not null)
            if (eUserOrigin == null)
            {
                throw new InvalidDataException("eUserOrigin is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.EUserOrigin = eUserOrigin;
            }

            // to ensure "eUserEzsignaccess" is required (not null)
            if (eUserEzsignaccess == null)
            {
                throw new InvalidDataException("eUserEzsignaccess is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.EUserEzsignaccess = eUserEzsignaccess;
            }

            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new InvalidDataException("sEmailAddress is a required property for UserListElement and cannot be null");
            }
            else
            {
                this.SEmailAddress = sEmailAddress;
            }

            this.DtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration;
        }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="pkiUserID", EmitDefaultValue=true)]
        public int PkiUserID { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        /// <value>The first name of the user</value>
        [DataMember(Name="sUserFirstname", EmitDefaultValue=true)]
        public string SUserFirstname { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        /// <value>The last name of the user</value>
        [DataMember(Name="sUserLastname", EmitDefaultValue=true)]
        public string SUserLastname { get; set; }

        /// <summary>
        /// The login name of the User.
        /// </summary>
        /// <value>The login name of the User.</value>
        [DataMember(Name="sUserLoginname", EmitDefaultValue=true)]
        public string SUserLoginname { get; set; }

        /// <summary>
        /// Whether the User is active or not
        /// </summary>
        /// <value>Whether the User is active or not</value>
        [DataMember(Name="bUserIsactive", EmitDefaultValue=true)]
        public bool BUserIsactive { get; set; }




        /// <summary>
        /// The eZsign prepaid expiration date
        /// </summary>
        /// <value>The eZsign prepaid expiration date</value>
        [DataMember(Name="dtUserEzsignprepaidexpiration", EmitDefaultValue=false)]
        public string DtUserEzsignprepaidexpiration { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=true)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserListElement {\n");
            sb.Append("  PkiUserID: ").Append(PkiUserID).Append("\n");
            sb.Append("  SUserFirstname: ").Append(SUserFirstname).Append("\n");
            sb.Append("  SUserLastname: ").Append(SUserLastname).Append("\n");
            sb.Append("  SUserLoginname: ").Append(SUserLoginname).Append("\n");
            sb.Append("  BUserIsactive: ").Append(BUserIsactive).Append("\n");
            sb.Append("  EUserType: ").Append(EUserType).Append("\n");
            sb.Append("  EUserOrigin: ").Append(EUserOrigin).Append("\n");
            sb.Append("  EUserEzsignaccess: ").Append(EUserEzsignaccess).Append("\n");
            sb.Append("  DtUserEzsignprepaidexpiration: ").Append(DtUserEzsignprepaidexpiration).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserListElement);
        }

        /// <summary>
        /// Returns true if UserListElement instances are equal
        /// </summary>
        /// <param name="input">Instance of UserListElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserListElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUserID == input.PkiUserID ||
                    (this.PkiUserID != null &&
                    this.PkiUserID.Equals(input.PkiUserID))
                ) && 
                (
                    this.SUserFirstname == input.SUserFirstname ||
                    (this.SUserFirstname != null &&
                    this.SUserFirstname.Equals(input.SUserFirstname))
                ) && 
                (
                    this.SUserLastname == input.SUserLastname ||
                    (this.SUserLastname != null &&
                    this.SUserLastname.Equals(input.SUserLastname))
                ) && 
                (
                    this.SUserLoginname == input.SUserLoginname ||
                    (this.SUserLoginname != null &&
                    this.SUserLoginname.Equals(input.SUserLoginname))
                ) && 
                (
                    this.BUserIsactive == input.BUserIsactive ||
                    (this.BUserIsactive != null &&
                    this.BUserIsactive.Equals(input.BUserIsactive))
                ) && 
                (
                    this.EUserType == input.EUserType ||
                    (this.EUserType != null &&
                    this.EUserType.Equals(input.EUserType))
                ) && 
                (
                    this.EUserOrigin == input.EUserOrigin ||
                    (this.EUserOrigin != null &&
                    this.EUserOrigin.Equals(input.EUserOrigin))
                ) && 
                (
                    this.EUserEzsignaccess == input.EUserEzsignaccess ||
                    (this.EUserEzsignaccess != null &&
                    this.EUserEzsignaccess.Equals(input.EUserEzsignaccess))
                ) && 
                (
                    this.DtUserEzsignprepaidexpiration == input.DtUserEzsignprepaidexpiration ||
                    (this.DtUserEzsignprepaidexpiration != null &&
                    this.DtUserEzsignprepaidexpiration.Equals(input.DtUserEzsignprepaidexpiration))
                ) && 
                (
                    this.SEmailAddress == input.SEmailAddress ||
                    (this.SEmailAddress != null &&
                    this.SEmailAddress.Equals(input.SEmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUserID != null)
                    hashCode = hashCode * 59 + this.PkiUserID.GetHashCode();
                if (this.SUserFirstname != null)
                    hashCode = hashCode * 59 + this.SUserFirstname.GetHashCode();
                if (this.SUserLastname != null)
                    hashCode = hashCode * 59 + this.SUserLastname.GetHashCode();
                if (this.SUserLoginname != null)
                    hashCode = hashCode * 59 + this.SUserLoginname.GetHashCode();
                if (this.BUserIsactive != null)
                    hashCode = hashCode * 59 + this.BUserIsactive.GetHashCode();
                if (this.EUserType != null)
                    hashCode = hashCode * 59 + this.EUserType.GetHashCode();
                if (this.EUserOrigin != null)
                    hashCode = hashCode * 59 + this.EUserOrigin.GetHashCode();
                if (this.EUserEzsignaccess != null)
                    hashCode = hashCode * 59 + this.EUserEzsignaccess.GetHashCode();
                if (this.DtUserEzsignprepaidexpiration != null)
                    hashCode = hashCode * 59 + this.DtUserEzsignprepaidexpiration.GetHashCode();
                if (this.SEmailAddress != null)
                    hashCode = hashCode * 59 + this.SEmailAddress.GetHashCode();
                return hashCode;
            }
        }
    }

}
