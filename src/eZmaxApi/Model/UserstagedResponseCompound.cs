/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Userstaged Object
    /// </summary>
    [DataContract(Name = "userstaged-ResponseCompound")]
    public partial class UserstagedResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserstagedResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserstagedResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserstagedResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiUserstagedID">The unique ID of the Userstaged (required).</param>
        /// <param name="fkiEmailID">The unique ID of the Email (required).</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        /// <param name="sUserstagedFirstname">The firstname of the Userstaged (required).</param>
        /// <param name="sUserstagedLastname">The lastname of the Userstaged (required).</param>
        /// <param name="sUserstagedExternalid">The externalid of the Userstaged (required).</param>
        public UserstagedResponseCompound(int pkiUserstagedID = default(int), int fkiEmailID = default(int), string sEmailAddress = default(string), string sUserstagedFirstname = default(string), string sUserstagedLastname = default(string), string sUserstagedExternalid = default(string))
        {
            this.PkiUserstagedID = pkiUserstagedID;
            this.FkiEmailID = fkiEmailID;
            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new ArgumentNullException("sEmailAddress is a required property for UserstagedResponseCompound and cannot be null");
            }
            this.SEmailAddress = sEmailAddress;
            // to ensure "sUserstagedFirstname" is required (not null)
            if (sUserstagedFirstname == null)
            {
                throw new ArgumentNullException("sUserstagedFirstname is a required property for UserstagedResponseCompound and cannot be null");
            }
            this.SUserstagedFirstname = sUserstagedFirstname;
            // to ensure "sUserstagedLastname" is required (not null)
            if (sUserstagedLastname == null)
            {
                throw new ArgumentNullException("sUserstagedLastname is a required property for UserstagedResponseCompound and cannot be null");
            }
            this.SUserstagedLastname = sUserstagedLastname;
            // to ensure "sUserstagedExternalid" is required (not null)
            if (sUserstagedExternalid == null)
            {
                throw new ArgumentNullException("sUserstagedExternalid is a required property for UserstagedResponseCompound and cannot be null");
            }
            this.SUserstagedExternalid = sUserstagedExternalid;
        }

        /// <summary>
        /// The unique ID of the Userstaged
        /// </summary>
        /// <value>The unique ID of the Userstaged</value>
        /* <example>90</example>*/
        [DataMember(Name = "pkiUserstagedID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiUserstagedID { get; set; }

        /// <summary>
        /// The unique ID of the Email
        /// </summary>
        /// <value>The unique ID of the Email</value>
        /* <example>22</example>*/
        [DataMember(Name = "fkiEmailID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEmailID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        /* <example>email@example.com</example>*/
        [DataMember(Name = "sEmailAddress", IsRequired = true, EmitDefaultValue = true)]
        public string SEmailAddress { get; set; }

        /// <summary>
        /// The firstname of the Userstaged
        /// </summary>
        /// <value>The firstname of the Userstaged</value>
        /* <example>Jane</example>*/
        [DataMember(Name = "sUserstagedFirstname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserstagedFirstname { get; set; }

        /// <summary>
        /// The lastname of the Userstaged
        /// </summary>
        /// <value>The lastname of the Userstaged</value>
        /* <example>Doe</example>*/
        [DataMember(Name = "sUserstagedLastname", IsRequired = true, EmitDefaultValue = true)]
        public string SUserstagedLastname { get; set; }

        /// <summary>
        /// The externalid of the Userstaged
        /// </summary>
        /// <value>The externalid of the Userstaged</value>
        /* <example>azuread_6b303ca8-9e34-4c21-9a53-0856342dec5e</example>*/
        [DataMember(Name = "sUserstagedExternalid", IsRequired = true, EmitDefaultValue = true)]
        public string SUserstagedExternalid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserstagedResponseCompound {\n");
            sb.Append("  PkiUserstagedID: ").Append(PkiUserstagedID).Append("\n");
            sb.Append("  FkiEmailID: ").Append(FkiEmailID).Append("\n");
            sb.Append("  SEmailAddress: ").Append(SEmailAddress).Append("\n");
            sb.Append("  SUserstagedFirstname: ").Append(SUserstagedFirstname).Append("\n");
            sb.Append("  SUserstagedLastname: ").Append(SUserstagedLastname).Append("\n");
            sb.Append("  SUserstagedExternalid: ").Append(SUserstagedExternalid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiUserstagedID (int) maximum
            if (this.PkiUserstagedID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for PkiUserstagedID, must be a value less than or equal to 65535.", new [] { "PkiUserstagedID" });
            }

            // PkiUserstagedID (int) minimum
            if (this.PkiUserstagedID < (int)1)
            {
                yield return new ValidationResult("Invalid value for PkiUserstagedID, must be a value greater than or equal to 1.", new [] { "PkiUserstagedID" });
            }

            // FkiEmailID (int) maximum
            if (this.FkiEmailID > (int)16777215)
            {
                yield return new ValidationResult("Invalid value for FkiEmailID, must be a value less than or equal to 16777215.", new [] { "FkiEmailID" });
            }

            // FkiEmailID (int) minimum
            if (this.FkiEmailID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiEmailID, must be a value greater than or equal to 1.", new [] { "FkiEmailID" });
            }

            if (this.SEmailAddress != null) {
                // SEmailAddress (string) pattern
                Regex regexSEmailAddress = new Regex(@"^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", RegexOptions.CultureInvariant);
                if (!regexSEmailAddress.Match(this.SEmailAddress).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEmailAddress, must match a pattern of " + regexSEmailAddress, new [] { "SEmailAddress" });
                }
            }

            if (this.SUserstagedFirstname != null) {
                // SUserstagedFirstname (string) pattern
                Regex regexSUserstagedFirstname = new Regex(@"^.{0,20}$", RegexOptions.CultureInvariant);
                if (!regexSUserstagedFirstname.Match(this.SUserstagedFirstname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserstagedFirstname, must match a pattern of " + regexSUserstagedFirstname, new [] { "SUserstagedFirstname" });
                }
            }

            if (this.SUserstagedLastname != null) {
                // SUserstagedLastname (string) pattern
                Regex regexSUserstagedLastname = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
                if (!regexSUserstagedLastname.Match(this.SUserstagedLastname).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserstagedLastname, must match a pattern of " + regexSUserstagedLastname, new [] { "SUserstagedLastname" });
                }
            }

            if (this.SUserstagedExternalid != null) {
                // SUserstagedExternalid (string) pattern
                Regex regexSUserstagedExternalid = new Regex(@"^.{1,60}$", RegexOptions.CultureInvariant);
                if (!regexSUserstagedExternalid.Match(this.SUserstagedExternalid).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserstagedExternalid, must match a pattern of " + regexSUserstagedExternalid, new [] { "SUserstagedExternalid" });
                }
            }

            yield break;
        }
    }

}
