/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Userstaged Object
    /// </summary>
    [DataContract]
    public partial class UserstagedResponseCompound :  IEquatable<UserstagedResponseCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserstagedResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserstagedResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserstagedResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiUserstagedID">The unique ID of the Userstaged (required).</param>
        /// <param name="fkiEmailID">The unique ID of the Email (required).</param>
        /// <param name="sUserstagedFirstname">The firstname of the Userstaged (required).</param>
        /// <param name="sUserstagedLastname">The lastname of the Userstaged (required).</param>
        /// <param name="sUserstagedExternalid">The externalid of the Userstaged (required).</param>
        public UserstagedResponseCompound(int pkiUserstagedID = default(int), int fkiEmailID = default(int), string sUserstagedFirstname = default(string), string sUserstagedLastname = default(string), string sUserstagedExternalid = default(string))
        {
            // to ensure "pkiUserstagedID" is required (not null)
            if (pkiUserstagedID == null)
            {
                throw new InvalidDataException("pkiUserstagedID is a required property for UserstagedResponseCompound and cannot be null");
            }
            else
            {
                this.PkiUserstagedID = pkiUserstagedID;
            }

            // to ensure "fkiEmailID" is required (not null)
            if (fkiEmailID == null)
            {
                throw new InvalidDataException("fkiEmailID is a required property for UserstagedResponseCompound and cannot be null");
            }
            else
            {
                this.FkiEmailID = fkiEmailID;
            }

            // to ensure "sUserstagedFirstname" is required (not null)
            if (sUserstagedFirstname == null)
            {
                throw new InvalidDataException("sUserstagedFirstname is a required property for UserstagedResponseCompound and cannot be null");
            }
            else
            {
                this.SUserstagedFirstname = sUserstagedFirstname;
            }

            // to ensure "sUserstagedLastname" is required (not null)
            if (sUserstagedLastname == null)
            {
                throw new InvalidDataException("sUserstagedLastname is a required property for UserstagedResponseCompound and cannot be null");
            }
            else
            {
                this.SUserstagedLastname = sUserstagedLastname;
            }

            // to ensure "sUserstagedExternalid" is required (not null)
            if (sUserstagedExternalid == null)
            {
                throw new InvalidDataException("sUserstagedExternalid is a required property for UserstagedResponseCompound and cannot be null");
            }
            else
            {
                this.SUserstagedExternalid = sUserstagedExternalid;
            }

        }

        /// <summary>
        /// The unique ID of the Userstaged
        /// </summary>
        /// <value>The unique ID of the Userstaged</value>
        [DataMember(Name="pkiUserstagedID", EmitDefaultValue=true)]
        public int PkiUserstagedID { get; set; }

        /// <summary>
        /// The unique ID of the Email
        /// </summary>
        /// <value>The unique ID of the Email</value>
        [DataMember(Name="fkiEmailID", EmitDefaultValue=true)]
        public int FkiEmailID { get; set; }

        /// <summary>
        /// The firstname of the Userstaged
        /// </summary>
        /// <value>The firstname of the Userstaged</value>
        [DataMember(Name="sUserstagedFirstname", EmitDefaultValue=true)]
        public string SUserstagedFirstname { get; set; }

        /// <summary>
        /// The lastname of the Userstaged
        /// </summary>
        /// <value>The lastname of the Userstaged</value>
        [DataMember(Name="sUserstagedLastname", EmitDefaultValue=true)]
        public string SUserstagedLastname { get; set; }

        /// <summary>
        /// The externalid of the Userstaged
        /// </summary>
        /// <value>The externalid of the Userstaged</value>
        [DataMember(Name="sUserstagedExternalid", EmitDefaultValue=true)]
        public string SUserstagedExternalid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserstagedResponseCompound {\n");
            sb.Append("  PkiUserstagedID: ").Append(PkiUserstagedID).Append("\n");
            sb.Append("  FkiEmailID: ").Append(FkiEmailID).Append("\n");
            sb.Append("  SUserstagedFirstname: ").Append(SUserstagedFirstname).Append("\n");
            sb.Append("  SUserstagedLastname: ").Append(SUserstagedLastname).Append("\n");
            sb.Append("  SUserstagedExternalid: ").Append(SUserstagedExternalid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserstagedResponseCompound);
        }

        /// <summary>
        /// Returns true if UserstagedResponseCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of UserstagedResponseCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserstagedResponseCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiUserstagedID == input.PkiUserstagedID ||
                    (this.PkiUserstagedID != null &&
                    this.PkiUserstagedID.Equals(input.PkiUserstagedID))
                ) && 
                (
                    this.FkiEmailID == input.FkiEmailID ||
                    (this.FkiEmailID != null &&
                    this.FkiEmailID.Equals(input.FkiEmailID))
                ) && 
                (
                    this.SUserstagedFirstname == input.SUserstagedFirstname ||
                    (this.SUserstagedFirstname != null &&
                    this.SUserstagedFirstname.Equals(input.SUserstagedFirstname))
                ) && 
                (
                    this.SUserstagedLastname == input.SUserstagedLastname ||
                    (this.SUserstagedLastname != null &&
                    this.SUserstagedLastname.Equals(input.SUserstagedLastname))
                ) && 
                (
                    this.SUserstagedExternalid == input.SUserstagedExternalid ||
                    (this.SUserstagedExternalid != null &&
                    this.SUserstagedExternalid.Equals(input.SUserstagedExternalid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiUserstagedID != null)
                    hashCode = hashCode * 59 + this.PkiUserstagedID.GetHashCode();
                if (this.FkiEmailID != null)
                    hashCode = hashCode * 59 + this.FkiEmailID.GetHashCode();
                if (this.SUserstagedFirstname != null)
                    hashCode = hashCode * 59 + this.SUserstagedFirstname.GetHashCode();
                if (this.SUserstagedLastname != null)
                    hashCode = hashCode * 59 + this.SUserstagedLastname.GetHashCode();
                if (this.SUserstagedExternalid != null)
                    hashCode = hashCode * 59 + this.SUserstagedExternalid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiUserstagedID (int) maximum
            if(this.PkiUserstagedID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserstagedID, must be a value less than or equal to 65535.", new [] { "PkiUserstagedID" });
            }

            // PkiUserstagedID (int) minimum
            if(this.PkiUserstagedID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiUserstagedID, must be a value greater than or equal to 1.", new [] { "PkiUserstagedID" });
            }



            // FkiEmailID (int) maximum
            if(this.FkiEmailID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEmailID, must be a value less than or equal to 16777215.", new [] { "FkiEmailID" });
            }

            // FkiEmailID (int) minimum
            if(this.FkiEmailID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEmailID, must be a value greater than or equal to 1.", new [] { "FkiEmailID" });
            }



            // SUserstagedFirstname (string) pattern
            Regex regexSUserstagedFirstname = new Regex(@"^.{0,20}$", RegexOptions.CultureInvariant);
            if (false == regexSUserstagedFirstname.Match(this.SUserstagedFirstname).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserstagedFirstname, must match a pattern of " + regexSUserstagedFirstname, new [] { "SUserstagedFirstname" });
            }



            // SUserstagedLastname (string) pattern
            Regex regexSUserstagedLastname = new Regex(@"^.{0,25}$", RegexOptions.CultureInvariant);
            if (false == regexSUserstagedLastname.Match(this.SUserstagedLastname).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserstagedLastname, must match a pattern of " + regexSUserstagedLastname, new [] { "SUserstagedLastname" });
            }



            // SUserstagedExternalid (string) pattern
            Regex regexSUserstagedExternalid = new Regex(@"^.{1,60}$", RegexOptions.CultureInvariant);
            if (false == regexSUserstagedExternalid.Match(this.SUserstagedExternalid).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SUserstagedExternalid, must match a pattern of " + regexSUserstagedExternalid, new [] { "SUserstagedExternalid" });
            }

            yield break;
        }
    }

}
