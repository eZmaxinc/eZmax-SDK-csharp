/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Colleague Object and children
    /// </summary>
    [DataContract(Name = "colleague-RequestCompoundV2")]
    public partial class ColleagueRequestCompoundV2 : ColleagueRequestV2, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ColleagueRequestCompoundV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ColleagueRequestCompoundV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColleagueRequestCompoundV2" /> class.
        /// </summary>
        /// <param name="pkiColleagueID">The unique ID of the Colleague.</param>
        /// <param name="fkiUserID">The unique ID of the User (required).</param>
        /// <param name="fkiUserIDColleague">The unique ID of the User (required).</param>
        /// <param name="bColleagueEzsignemail">Whether the email can be used by the cloning user in Ezsign (required).</param>
        /// <param name="bColleagueFinancial">Whether the cloning user has access to the financial (required).</param>
        /// <param name="bColleagueUsecloneemail">Whether the cloning user has access to the cloned user email to send communications (required).</param>
        /// <param name="bColleagueAttachment">Whether the cloning user has access to the attachment (required).</param>
        /// <param name="bColleagueCanafe">Whether the cloning user has access to canafe (required).</param>
        /// <param name="bColleaguePermission">Whether the cloning user copies the permission of the cloned user (required).</param>
        /// <param name="bColleagueRealestatecompleted">Whether if the cloning user has access to the completed folders in real estate (required).</param>
        /// <param name="dtColleagueFrom">The from of the Colleague.</param>
        /// <param name="dtColleagueTo">The to of the Colleague.</param>
        /// <param name="eColleagueEzsign">eColleagueEzsign (required).</param>
        /// <param name="eColleagueRealestateinprogress">eColleagueRealestateinprogress (required).</param>
        public ColleagueRequestCompoundV2(int pkiColleagueID = default(int), int fkiUserID = default(int), int fkiUserIDColleague = default(int), bool bColleagueEzsignemail = default(bool), bool bColleagueFinancial = default(bool), bool bColleagueUsecloneemail = default(bool), bool bColleagueAttachment = default(bool), bool bColleagueCanafe = default(bool), bool bColleaguePermission = default(bool), bool bColleagueRealestatecompleted = default(bool), string dtColleagueFrom = default(string), string dtColleagueTo = default(string), FieldEColleagueEzsign eColleagueEzsign = default(FieldEColleagueEzsign), FieldEColleagueRealestateinprogess eColleagueRealestateinprogress = default(FieldEColleagueRealestateinprogess)) : base()
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColleagueRequestCompoundV2 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
