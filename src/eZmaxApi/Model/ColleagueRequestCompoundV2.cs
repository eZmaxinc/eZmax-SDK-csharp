/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Colleague Object and children
    /// </summary>
    [DataContract(Name = "colleague-RequestCompoundV2")]
    public partial class ColleagueRequestCompoundV2 : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EColleagueEzsign
        /// </summary>
        [DataMember(Name = "eColleagueEzsign", IsRequired = true, EmitDefaultValue = true)]
        public FieldEColleagueEzsign EColleagueEzsign { get; set; }

        /// <summary>
        /// Gets or Sets EColleagueRealestateinprogress
        /// </summary>
        [DataMember(Name = "eColleagueRealestateinprogress", IsRequired = true, EmitDefaultValue = true)]
        public FieldEColleagueRealestateinprogess EColleagueRealestateinprogress { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColleagueRequestCompoundV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ColleagueRequestCompoundV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ColleagueRequestCompoundV2" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Colleague.</param>
        /// <param name="">The unique ID of the User (required).</param>
        /// <param name="">The unique ID of the User (required).</param>
        /// <param name="">Whether the email can be used by the cloning user in Ezsign (required).</param>
        /// <param name="">Whether the cloning user has access to the financial (required).</param>
        /// <param name="">Whether the cloning user has access to the cloned user email to send communications (required).</param>
        /// <param name="">Whether the cloning user has access to the attachment (required).</param>
        /// <param name="">Whether the cloning user has access to canafe (required).</param>
        /// <param name="">Whether the cloning user copies the permission of the cloned user (required).</param>
        /// <param name="">Whether if the cloning user has access to the completed folders in real estate (required).</param>
        /// <param name="">The from of the Colleague.</param>
        /// <param name="">The to of the Colleague.</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        public ColleagueRequestCompoundV2(int  = default(int), int  = default(int), int  = default(int), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), bool  = default(bool), string  = default(string), string  = default(string), FieldEColleagueEzsign  = default(FieldEColleagueEzsign), FieldEColleagueRealestateinprogess  = default(FieldEColleagueRealestateinprogess))
        {
            this.FkiUserID = ;
            this.FkiUserIDColleague = ;
            this.BColleagueEzsignemail = ;
            this.BColleagueFinancial = ;
            this.BColleagueUsecloneemail = ;
            this.BColleagueAttachment = ;
            this.BColleagueCanafe = ;
            this.BColleaguePermission = ;
            this.BColleagueRealestatecompleted = ;
            this.EColleagueEzsign = ;
            this.EColleagueRealestateinprogress = ;
            this.PkiColleagueID = ;
            this.DtColleagueFrom = ;
            this.DtColleagueTo = ;
        }

        /// <summary>
        /// The unique ID of the Colleague
        /// </summary>
        /// <value>The unique ID of the Colleague</value>
        /* <example>60</example>*/
        [DataMember(Name = "pkiColleagueID", EmitDefaultValue = false)]
        public int PkiColleagueID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        /* <example>70</example>*/
        [DataMember(Name = "fkiUserIDColleague", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserIDColleague { get; set; }

        /// <summary>
        /// Whether the email can be used by the cloning user in Ezsign
        /// </summary>
        /// <value>Whether the email can be used by the cloning user in Ezsign</value>
        /* <example>false</example>*/
        [DataMember(Name = "bColleagueEzsignemail", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleagueEzsignemail { get; set; }

        /// <summary>
        /// Whether the cloning user has access to the financial
        /// </summary>
        /// <value>Whether the cloning user has access to the financial</value>
        /* <example>true</example>*/
        [DataMember(Name = "bColleagueFinancial", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleagueFinancial { get; set; }

        /// <summary>
        /// Whether the cloning user has access to the cloned user email to send communications
        /// </summary>
        /// <value>Whether the cloning user has access to the cloned user email to send communications</value>
        /* <example>true</example>*/
        [DataMember(Name = "bColleagueUsecloneemail", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleagueUsecloneemail { get; set; }

        /// <summary>
        /// Whether the cloning user has access to the attachment
        /// </summary>
        /// <value>Whether the cloning user has access to the attachment</value>
        /* <example>true</example>*/
        [DataMember(Name = "bColleagueAttachment", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleagueAttachment { get; set; }

        /// <summary>
        /// Whether the cloning user has access to canafe
        /// </summary>
        /// <value>Whether the cloning user has access to canafe</value>
        /* <example>true</example>*/
        [DataMember(Name = "bColleagueCanafe", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleagueCanafe { get; set; }

        /// <summary>
        /// Whether the cloning user copies the permission of the cloned user
        /// </summary>
        /// <value>Whether the cloning user copies the permission of the cloned user</value>
        /* <example>true</example>*/
        [DataMember(Name = "bColleaguePermission", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleaguePermission { get; set; }

        /// <summary>
        /// Whether if the cloning user has access to the completed folders in real estate
        /// </summary>
        /// <value>Whether if the cloning user has access to the completed folders in real estate</value>
        /* <example>true</example>*/
        [DataMember(Name = "bColleagueRealestatecompleted", IsRequired = true, EmitDefaultValue = true)]
        public bool BColleagueRealestatecompleted { get; set; }

        /// <summary>
        /// The from of the Colleague
        /// </summary>
        /// <value>The from of the Colleague</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtColleagueFrom", EmitDefaultValue = false)]
        public string DtColleagueFrom { get; set; }

        /// <summary>
        /// The to of the Colleague
        /// </summary>
        /// <value>The to of the Colleague</value>
        /* <example>2020-12-31</example>*/
        [DataMember(Name = "dtColleagueTo", EmitDefaultValue = false)]
        public string DtColleagueTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColleagueRequestCompoundV2 {\n");
            sb.Append("  PkiColleagueID: ").Append(PkiColleagueID).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  FkiUserIDColleague: ").Append(FkiUserIDColleague).Append("\n");
            sb.Append("  BColleagueEzsignemail: ").Append(BColleagueEzsignemail).Append("\n");
            sb.Append("  BColleagueFinancial: ").Append(BColleagueFinancial).Append("\n");
            sb.Append("  BColleagueUsecloneemail: ").Append(BColleagueUsecloneemail).Append("\n");
            sb.Append("  BColleagueAttachment: ").Append(BColleagueAttachment).Append("\n");
            sb.Append("  BColleagueCanafe: ").Append(BColleagueCanafe).Append("\n");
            sb.Append("  BColleaguePermission: ").Append(BColleaguePermission).Append("\n");
            sb.Append("  BColleagueRealestatecompleted: ").Append(BColleagueRealestatecompleted).Append("\n");
            sb.Append("  DtColleagueFrom: ").Append(DtColleagueFrom).Append("\n");
            sb.Append("  DtColleagueTo: ").Append(DtColleagueTo).Append("\n");
            sb.Append("  EColleagueEzsign: ").Append(EColleagueEzsign).Append("\n");
            sb.Append("  EColleagueRealestateinprogress: ").Append(EColleagueRealestateinprogress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiColleagueID (int) maximum
            if (this.PkiColleagueID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiColleagueID, must be a value less than or equal to 65535.", new [] { "PkiColleagueID" });
            }

            // PkiColleagueID (int) minimum
            if (this.PkiColleagueID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiColleagueID, must be a value greater than or equal to 0.", new [] { "PkiColleagueID" });
            }

            // FkiUserID (int) minimum
            if (this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            // FkiUserIDColleague (int) minimum
            if (this.FkiUserIDColleague < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserIDColleague, must be a value greater than or equal to 0.", new [] { "FkiUserIDColleague" });
            }

            if (this.DtColleagueFrom != null) {
                // DtColleagueFrom (string) pattern
                Regex regexDtColleagueFrom = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtColleagueFrom.Match(this.DtColleagueFrom).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtColleagueFrom, must match a pattern of " + regexDtColleagueFrom, new [] { "DtColleagueFrom" });
                }
            }

            if (this.DtColleagueTo != null) {
                // DtColleagueTo (string) pattern
                Regex regexDtColleagueTo = new Regex(@"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", RegexOptions.CultureInvariant);
                if (!regexDtColleagueTo.Match(this.DtColleagueTo).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DtColleagueTo, must match a pattern of " + regexDtColleagueTo, new [] { "DtColleagueTo" });
                }
            }

            yield break;
        }
    }

}
