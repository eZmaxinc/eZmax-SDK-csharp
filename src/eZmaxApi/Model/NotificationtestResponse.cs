/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Notificationtest Object
    /// </summary>
    [DataContract(Name = "notificationtest-Response")]
    public partial class NotificationtestResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationtestResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationtestResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationtestResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Notificationtest (required).</param>
        /// <param name=""> (required).</param>
        /// <param name="">The unique ID of the Notificationsubsection (required).</param>
        /// <param name="">The function name of the Notificationtest (required).</param>
        /// <param name="">The name of the Notificationtest in the language of the requester (required).</param>
        public NotificationtestResponse(int  = default(int), MultilingualNotificationtestName  = default(MultilingualNotificationtestName), int  = default(int), string  = default(string), string  = default(string))
        {
            this.PkiNotificationtestID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for NotificationtestResponse and cannot be null");
            }
            this.ObjNotificationtestName = ;
            this.FkiNotificationsubsectionID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for NotificationtestResponse and cannot be null");
            }
            this.SNotificationtestFunction = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for NotificationtestResponse and cannot be null");
            }
            this.SNotificationtestNameX = ;
        }

        /// <summary>
        /// The unique ID of the Notificationtest
        /// </summary>
        /// <value>The unique ID of the Notificationtest</value>
        /* <example>14</example>*/
        [DataMember(Name = "pkiNotificationtestID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiNotificationtestID { get; set; }

        /// <summary>
        /// Gets or Sets ObjNotificationtestName
        /// </summary>
        [DataMember(Name = "objNotificationtestName", IsRequired = true, EmitDefaultValue = true)]
        public MultilingualNotificationtestName ObjNotificationtestName { get; set; }

        /// <summary>
        /// The unique ID of the Notificationsubsection
        /// </summary>
        /// <value>The unique ID of the Notificationsubsection</value>
        /* <example>3</example>*/
        [DataMember(Name = "fkiNotificationsubsectionID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiNotificationsubsectionID { get; set; }

        /// <summary>
        /// The function name of the Notificationtest
        /// </summary>
        /// <value>The function name of the Notificationtest</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sNotificationtestFunction", IsRequired = true, EmitDefaultValue = true)]
        public string SNotificationtestFunction { get; set; }

        /// <summary>
        /// The name of the Notificationtest in the language of the requester
        /// </summary>
        /// <value>The name of the Notificationtest in the language of the requester</value>
        /* <example>Default</example>*/
        [DataMember(Name = "sNotificationtestNameX", IsRequired = true, EmitDefaultValue = true)]
        public string SNotificationtestNameX { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationtestResponse {\n");
            sb.Append("  PkiNotificationtestID: ").Append(PkiNotificationtestID).Append("\n");
            sb.Append("  ObjNotificationtestName: ").Append(ObjNotificationtestName).Append("\n");
            sb.Append("  FkiNotificationsubsectionID: ").Append(FkiNotificationsubsectionID).Append("\n");
            sb.Append("  SNotificationtestFunction: ").Append(SNotificationtestFunction).Append("\n");
            sb.Append("  SNotificationtestNameX: ").Append(SNotificationtestNameX).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiNotificationtestID (int) minimum
            if (this.PkiNotificationtestID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiNotificationtestID, must be a value greater than or equal to 0.", new [] { "PkiNotificationtestID" });
            }

            // FkiNotificationsubsectionID (int) minimum
            if (this.FkiNotificationsubsectionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiNotificationsubsectionID, must be a value greater than or equal to 0.", new [] { "FkiNotificationsubsectionID" });
            }

            yield break;
        }
    }

}
