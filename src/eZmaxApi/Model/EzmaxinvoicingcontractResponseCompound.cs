/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezmaxinvoicingcontract Object
    /// </summary>
    [DataContract(Name = "ezmaxinvoicingcontract-ResponseCompound")]
    public partial class EzmaxinvoicingcontractResponseCompound : EzmaxinvoicingcontractResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingcontractResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzmaxinvoicingcontractResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzmaxinvoicingcontractResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzmaxinvoicingcontractID">The unique ID of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="eEzmaxinvoicingcontractPaymenttype">eEzmaxinvoicingcontractPaymenttype (required).</param>
        /// <param name="iEzmaxinvoicingcontractLength">The length in years of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="dtEzmaxinvoicingcontractStart">The start date of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="dtEzmaxinvoicingcontractEnd">The end date of the Ezmaxinvoicingcontract (required).</param>
        /// <param name="dEzmaxinvoicingcontractLicense">The price of the license (required).</param>
        /// <param name="dEzmaxinvoicingcontract121qa">The price for 121QA (required).</param>
        /// <param name="bEzmaxinvoicingcontractEzsignallagents">Whether eZsign is for all agents (required).</param>
        /// <param name="objAudit">objAudit (required).</param>
        public EzmaxinvoicingcontractResponseCompound(int pkiEzmaxinvoicingcontractID = default(int), FieldEEzmaxinvoicingcontractPaymenttype eEzmaxinvoicingcontractPaymenttype = default(FieldEEzmaxinvoicingcontractPaymenttype), int iEzmaxinvoicingcontractLength = default(int), string dtEzmaxinvoicingcontractStart = default(string), string dtEzmaxinvoicingcontractEnd = default(string), string dEzmaxinvoicingcontractLicense = default(string), string dEzmaxinvoicingcontract121qa = default(string), bool bEzmaxinvoicingcontractEzsignallagents = default(bool), CommonAudit objAudit = default(CommonAudit)) : base()
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzmaxinvoicingcontractResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
