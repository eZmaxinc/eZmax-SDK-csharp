/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// ActivesessionResponseCompoundAllOf
    /// </summary>
    [DataContract]
    public partial class ActivesessionResponseCompoundAllOf :  IEquatable<ActivesessionResponseCompoundAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivesessionResponseCompoundAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivesessionResponseCompoundAllOf" /> class.
        /// </summary>
        /// <param name="aPkiPermissionID">An array of permissions granted to the user or api key (required).</param>
        /// <param name="objUserReal">objUserReal (required).</param>
        /// <param name="objUserCloned">objUserCloned.</param>
        /// <param name="objApikey">objApikey.</param>
        /// <param name="aEModuleInternalname">An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. (required).</param>
        public ActivesessionResponseCompoundAllOf(List<int> aPkiPermissionID = default(List<int>), ActivesessionResponseCompoundUser objUserReal = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundUser objUserCloned = default(ActivesessionResponseCompoundUser), ActivesessionResponseCompoundApikey objApikey = default(ActivesessionResponseCompoundApikey), List<string> aEModuleInternalname = default(List<string>))
        {
            // to ensure "aPkiPermissionID" is required (not null)
            if (aPkiPermissionID == null)
            {
                throw new InvalidDataException("aPkiPermissionID is a required property for ActivesessionResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.APkiPermissionID = aPkiPermissionID;
            }

            // to ensure "objUserReal" is required (not null)
            if (objUserReal == null)
            {
                throw new InvalidDataException("objUserReal is a required property for ActivesessionResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.ObjUserReal = objUserReal;
            }

            // to ensure "aEModuleInternalname" is required (not null)
            if (aEModuleInternalname == null)
            {
                throw new InvalidDataException("aEModuleInternalname is a required property for ActivesessionResponseCompoundAllOf and cannot be null");
            }
            else
            {
                this.AEModuleInternalname = aEModuleInternalname;
            }

            this.ObjUserCloned = objUserCloned;
            this.ObjApikey = objApikey;
        }

        /// <summary>
        /// An array of permissions granted to the user or api key
        /// </summary>
        /// <value>An array of permissions granted to the user or api key</value>
        [DataMember(Name="a_pkiPermissionID", EmitDefaultValue=true)]
        public List<int> APkiPermissionID { get; set; }

        /// <summary>
        /// Gets or Sets ObjUserReal
        /// </summary>
        [DataMember(Name="objUserReal", EmitDefaultValue=true)]
        public ActivesessionResponseCompoundUser ObjUserReal { get; set; }

        /// <summary>
        /// Gets or Sets ObjUserCloned
        /// </summary>
        [DataMember(Name="objUserCloned", EmitDefaultValue=false)]
        public ActivesessionResponseCompoundUser ObjUserCloned { get; set; }

        /// <summary>
        /// Gets or Sets ObjApikey
        /// </summary>
        [DataMember(Name="objApikey", EmitDefaultValue=false)]
        public ActivesessionResponseCompoundApikey ObjApikey { get; set; }

        /// <summary>
        /// An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
        /// </summary>
        /// <value>An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.</value>
        [DataMember(Name="a_eModuleInternalname", EmitDefaultValue=true)]
        public List<string> AEModuleInternalname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivesessionResponseCompoundAllOf {\n");
            sb.Append("  APkiPermissionID: ").Append(APkiPermissionID).Append("\n");
            sb.Append("  ObjUserReal: ").Append(ObjUserReal).Append("\n");
            sb.Append("  ObjUserCloned: ").Append(ObjUserCloned).Append("\n");
            sb.Append("  ObjApikey: ").Append(ObjApikey).Append("\n");
            sb.Append("  AEModuleInternalname: ").Append(AEModuleInternalname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivesessionResponseCompoundAllOf);
        }

        /// <summary>
        /// Returns true if ActivesessionResponseCompoundAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivesessionResponseCompoundAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivesessionResponseCompoundAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.APkiPermissionID == input.APkiPermissionID ||
                    this.APkiPermissionID != null &&
                    input.APkiPermissionID != null &&
                    this.APkiPermissionID.SequenceEqual(input.APkiPermissionID)
                ) && 
                (
                    this.ObjUserReal == input.ObjUserReal ||
                    (this.ObjUserReal != null &&
                    this.ObjUserReal.Equals(input.ObjUserReal))
                ) && 
                (
                    this.ObjUserCloned == input.ObjUserCloned ||
                    (this.ObjUserCloned != null &&
                    this.ObjUserCloned.Equals(input.ObjUserCloned))
                ) && 
                (
                    this.ObjApikey == input.ObjApikey ||
                    (this.ObjApikey != null &&
                    this.ObjApikey.Equals(input.ObjApikey))
                ) && 
                (
                    this.AEModuleInternalname == input.AEModuleInternalname ||
                    this.AEModuleInternalname != null &&
                    input.AEModuleInternalname != null &&
                    this.AEModuleInternalname.SequenceEqual(input.AEModuleInternalname)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.APkiPermissionID != null)
                    hashCode = hashCode * 59 + this.APkiPermissionID.GetHashCode();
                if (this.ObjUserReal != null)
                    hashCode = hashCode * 59 + this.ObjUserReal.GetHashCode();
                if (this.ObjUserCloned != null)
                    hashCode = hashCode * 59 + this.ObjUserCloned.GetHashCode();
                if (this.ObjApikey != null)
                    hashCode = hashCode * 59 + this.ObjApikey.GetHashCode();
                if (this.AEModuleInternalname != null)
                    hashCode = hashCode * 59 + this.AEModuleInternalname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
