/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Pdfalevel AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "pdfalevel-AutocompleteElement-Response")]
    public partial class PdfalevelAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfalevelAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PdfalevelAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PdfalevelAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiPdfalevelID">The unique ID of the Pdfalevel (required).</param>
        /// <param name="sPdfalevelName">The name of the Pdfalevel (required).</param>
        /// <param name="bPdfalevelIsactive">Whether the Pdfalevel is active or not (required).</param>
        public PdfalevelAutocompleteElementResponse(int pkiPdfalevelID = default(int), string sPdfalevelName = default(string), bool bPdfalevelIsactive = default(bool))
        {
            this.PkiPdfalevelID = pkiPdfalevelID;
            // to ensure "sPdfalevelName" is required (not null)
            if (sPdfalevelName == null)
            {
                throw new ArgumentNullException("sPdfalevelName is a required property for PdfalevelAutocompleteElementResponse and cannot be null");
            }
            this.SPdfalevelName = sPdfalevelName;
            this.BPdfalevelIsactive = bPdfalevelIsactive;
        }

        /// <summary>
        /// The unique ID of the Pdfalevel
        /// </summary>
        /// <value>The unique ID of the Pdfalevel</value>
        /* <example>102</example>*/
        [DataMember(Name = "pkiPdfalevelID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiPdfalevelID { get; set; }

        /// <summary>
        /// The name of the Pdfalevel
        /// </summary>
        /// <value>The name of the Pdfalevel</value>
        /* <example>PDF/A-1a</example>*/
        [DataMember(Name = "sPdfalevelName", IsRequired = true, EmitDefaultValue = true)]
        public string SPdfalevelName { get; set; }

        /// <summary>
        /// Whether the Pdfalevel is active or not
        /// </summary>
        /// <value>Whether the Pdfalevel is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bPdfalevelIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BPdfalevelIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PdfalevelAutocompleteElementResponse {\n");
            sb.Append("  PkiPdfalevelID: ").Append(PkiPdfalevelID).Append("\n");
            sb.Append("  SPdfalevelName: ").Append(SPdfalevelName).Append("\n");
            sb.Append("  BPdfalevelIsactive: ").Append(BPdfalevelIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiPdfalevelID (int) maximum
            if (this.PkiPdfalevelID > (int)255)
            {
                yield return new ValidationResult("Invalid value for PkiPdfalevelID, must be a value less than or equal to 255.", new [] { "PkiPdfalevelID" });
            }

            // PkiPdfalevelID (int) minimum
            if (this.PkiPdfalevelID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiPdfalevelID, must be a value greater than or equal to 0.", new [] { "PkiPdfalevelID" });
            }

            if (this.SPdfalevelName != null) {
                // SPdfalevelName (string) pattern
                Regex regexSPdfalevelName = new Regex(@"^.{0,15}$", RegexOptions.CultureInvariant);
                if (!regexSPdfalevelName.Match(this.SPdfalevelName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SPdfalevelName, must match a pattern of " + regexSPdfalevelName, new [] { "SPdfalevelName" });
                }
            }

            yield break;
        }
    }

}
