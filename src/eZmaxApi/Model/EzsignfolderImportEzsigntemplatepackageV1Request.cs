/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage
    /// </summary>
    [DataContract]
    public partial class EzsignfolderImportEzsigntemplatepackageV1Request :  IEquatable<EzsignfolderImportEzsigntemplatepackageV1Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderImportEzsigntemplatepackageV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfolderImportEzsigntemplatepackageV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderImportEzsigntemplatepackageV1Request" /> class.
        /// </summary>
        /// <param name="fkiEzsigntemplatepackageID">The unique ID of the Ezsigntemplatepackage (required).</param>
        /// <param name="dtEzsigndocumentDuedate">The maximum date and time at which the Ezsigndocument can be signed. (required).</param>
        /// <param name="aObjImportEzsigntemplatepackageRelation">aObjImportEzsigntemplatepackageRelation (required).</param>
        public EzsignfolderImportEzsigntemplatepackageV1Request(int fkiEzsigntemplatepackageID = default(int), string dtEzsigndocumentDuedate = default(string), List<CustomImportEzsigntemplatepackageRelationRequest> aObjImportEzsigntemplatepackageRelation = default(List<CustomImportEzsigntemplatepackageRelationRequest>))
        {
            // to ensure "fkiEzsigntemplatepackageID" is required (not null)
            if (fkiEzsigntemplatepackageID == null)
            {
                throw new InvalidDataException("fkiEzsigntemplatepackageID is a required property for EzsignfolderImportEzsigntemplatepackageV1Request and cannot be null");
            }
            else
            {
                this.FkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID;
            }

            // to ensure "dtEzsigndocumentDuedate" is required (not null)
            if (dtEzsigndocumentDuedate == null)
            {
                throw new InvalidDataException("dtEzsigndocumentDuedate is a required property for EzsignfolderImportEzsigntemplatepackageV1Request and cannot be null");
            }
            else
            {
                this.DtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
            }

            // to ensure "aObjImportEzsigntemplatepackageRelation" is required (not null)
            if (aObjImportEzsigntemplatepackageRelation == null)
            {
                throw new InvalidDataException("aObjImportEzsigntemplatepackageRelation is a required property for EzsignfolderImportEzsigntemplatepackageV1Request and cannot be null");
            }
            else
            {
                this.AObjImportEzsigntemplatepackageRelation = aObjImportEzsigntemplatepackageRelation;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatepackage
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatepackage</value>
        [DataMember(Name="fkiEzsigntemplatepackageID", EmitDefaultValue=true)]
        public int FkiEzsigntemplatepackageID { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsigndocument can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsigndocument can be signed.</value>
        [DataMember(Name="dtEzsigndocumentDuedate", EmitDefaultValue=true)]
        public string DtEzsigndocumentDuedate { get; set; }

        /// <summary>
        /// Gets or Sets AObjImportEzsigntemplatepackageRelation
        /// </summary>
        [DataMember(Name="a_objImportEzsigntemplatepackageRelation", EmitDefaultValue=true)]
        public List<CustomImportEzsigntemplatepackageRelationRequest> AObjImportEzsigntemplatepackageRelation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfolderImportEzsigntemplatepackageV1Request {\n");
            sb.Append("  FkiEzsigntemplatepackageID: ").Append(FkiEzsigntemplatepackageID).Append("\n");
            sb.Append("  DtEzsigndocumentDuedate: ").Append(DtEzsigndocumentDuedate).Append("\n");
            sb.Append("  AObjImportEzsigntemplatepackageRelation: ").Append(AObjImportEzsigntemplatepackageRelation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfolderImportEzsigntemplatepackageV1Request);
        }

        /// <summary>
        /// Returns true if EzsignfolderImportEzsigntemplatepackageV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfolderImportEzsigntemplatepackageV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfolderImportEzsigntemplatepackageV1Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FkiEzsigntemplatepackageID == input.FkiEzsigntemplatepackageID ||
                    (this.FkiEzsigntemplatepackageID != null &&
                    this.FkiEzsigntemplatepackageID.Equals(input.FkiEzsigntemplatepackageID))
                ) && 
                (
                    this.DtEzsigndocumentDuedate == input.DtEzsigndocumentDuedate ||
                    (this.DtEzsigndocumentDuedate != null &&
                    this.DtEzsigndocumentDuedate.Equals(input.DtEzsigndocumentDuedate))
                ) && 
                (
                    this.AObjImportEzsigntemplatepackageRelation == input.AObjImportEzsigntemplatepackageRelation ||
                    this.AObjImportEzsigntemplatepackageRelation != null &&
                    input.AObjImportEzsigntemplatepackageRelation != null &&
                    this.AObjImportEzsigntemplatepackageRelation.SequenceEqual(input.AObjImportEzsigntemplatepackageRelation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FkiEzsigntemplatepackageID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigntemplatepackageID.GetHashCode();
                if (this.DtEzsigndocumentDuedate != null)
                    hashCode = hashCode * 59 + this.DtEzsigndocumentDuedate.GetHashCode();
                if (this.AObjImportEzsigntemplatepackageRelation != null)
                    hashCode = hashCode * 59 + this.AObjImportEzsigntemplatepackageRelation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // FkiEzsigntemplatepackageID (int) minimum
            if(this.FkiEzsigntemplatepackageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplatepackageID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplatepackageID" });
            }

            yield break;
        }
    }

}
