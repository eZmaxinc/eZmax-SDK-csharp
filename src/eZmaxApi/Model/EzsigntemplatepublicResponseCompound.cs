/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatepublic Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatepublic-ResponseCompound")]
    public partial class EzsigntemplatepublicResponseCompound : EzsigntemplatepublicResponse, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepublicResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatepublicResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatepublicResponseCompound" /> class.
        /// </summary>
        /// <param name="aObjEzsignfolderezsigntemplatepublic">aObjEzsignfolderezsigntemplatepublic (required).</param>
        /// <param name="pkiEzsigntemplatepublicID">The unique ID of the Ezsigntemplatepublic (required).</param>
        /// <param name="fkiEzsignfoldertypeID">The unique ID of the Ezsignfoldertype. (required).</param>
        /// <param name="sEzsignfoldertypeNameX">The name of the Ezsignfoldertype in the language of the requester (required).</param>
        /// <param name="fkiUserlogintypeID">The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|      (required).</param>
        /// <param name="sUserlogintypeDescriptionX">The description of the Userlogintype in the language of the requester (required).</param>
        /// <param name="fkiEzsigntemplateID">The unique ID of the Ezsigntemplate.</param>
        /// <param name="fkiEzsigntemplatepackageID">The unique ID of the Ezsigntemplatepackage.</param>
        /// <param name="sEzsigntemplatepublicDescription">The description of the Ezsigntemplatepublic (required).</param>
        /// <param name="sEzsigntemplatepublicReferenceid">The referenceid of the Ezsigntemplatepublic (required).</param>
        /// <param name="bEzsigntemplatepublicIsactive">Whether the ezsigntemplatepublic is active or not (required).</param>
        /// <param name="tEzsigntemplatepublicNote">The note of the Ezsigntemplatepublic (required).</param>
        /// <param name="eEzsigntemplatepublicLimittype">eEzsigntemplatepublicLimittype (required).</param>
        /// <param name="iEzsigntemplatepublicLimit">The limit of the Ezsigntemplatepublic (required).</param>
        /// <param name="iEzsigntemplatepublicLimitexceeded">The limitexceeded of the Ezsigntemplatepublic (required).</param>
        /// <param name="dtEzsigntemplatepublicLimitexceededsince">The limitexceededsince of the Ezsigntemplatepublic (required).</param>
        /// <param name="sEzsigntemplatepublicUrl">The url of the Ezsigntemplatepublic  You can add these value as query parameters to prefill the corresponding role  |Parameter|Description| |-|-| |sEzsigntemplatesignerDescription|The role to fill| |sContactFirstname|The contact firstname| |sContactLastname|The contact lastname| |sEmailAddress|The contact email| |sPhoneE164|The contact phone number| |sPhoneE164Cell|The contact cell phone number| (required).</param>
        /// <param name="sEzsigntemplatepublicEzsigntemplatedescription">The Ezsigntemplate/Ezsigntemplatepackage description (required).</param>
        /// <param name="objAudit">objAudit.</param>
        public EzsigntemplatepublicResponseCompound(List<CustomEzsignfolderezsigntemplatepublicResponse> aObjEzsignfolderezsigntemplatepublic = default(List<CustomEzsignfolderezsigntemplatepublicResponse>), int pkiEzsigntemplatepublicID = default(int), int fkiEzsignfoldertypeID = default(int), string sEzsignfoldertypeNameX = default(string), int fkiUserlogintypeID = default(int), string sUserlogintypeDescriptionX = default(string), int fkiEzsigntemplateID = default(int), int fkiEzsigntemplatepackageID = default(int), string sEzsigntemplatepublicDescription = default(string), string sEzsigntemplatepublicReferenceid = default(string), bool bEzsigntemplatepublicIsactive = default(bool), string tEzsigntemplatepublicNote = default(string), FieldEEzsigntemplatepublicLimittype eEzsigntemplatepublicLimittype = default(FieldEEzsigntemplatepublicLimittype), int iEzsigntemplatepublicLimit = default(int), int iEzsigntemplatepublicLimitexceeded = default(int), string dtEzsigntemplatepublicLimitexceededsince = default(string), string sEzsigntemplatepublicUrl = default(string), string sEzsigntemplatepublicEzsigntemplatedescription = default(string), CommonAudit objAudit = default(CommonAudit)) : base()
        {
            // to ensure "aObjEzsignfolderezsigntemplatepublic" is required (not null)
            if (aObjEzsignfolderezsigntemplatepublic == null)
            {
                throw new ArgumentNullException("aObjEzsignfolderezsigntemplatepublic is a required property for EzsigntemplatepublicResponseCompound and cannot be null");
            }
            this.AObjEzsignfolderezsigntemplatepublic = aObjEzsignfolderezsigntemplatepublic;
        }

        /// <summary>
        /// Gets or Sets AObjEzsignfolderezsigntemplatepublic
        /// </summary>
        [DataMember(Name = "a_objEzsignfolderezsigntemplatepublic", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomEzsignfolderezsigntemplatepublicResponse> AObjEzsignfolderezsigntemplatepublic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatepublicResponseCompound {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AObjEzsignfolderezsigntemplatepublic: ").Append(AObjEzsignfolderezsigntemplatepublic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
