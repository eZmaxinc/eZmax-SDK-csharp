/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// This is a debug object containing debugging information on the actual function
    /// </summary>
    [DataContract(Name = "Common-Response-objDebugPayload")]
    public partial class CommonResponseObjDebugPayload : IEquatable<CommonResponseObjDebugPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseObjDebugPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonResponseObjDebugPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseObjDebugPayload" /> class.
        /// </summary>
        /// <param name="iVersionMin">The minimum version of the function that can be called (required).</param>
        /// <param name="iVersionMax">The maximum version of the function that can be called (required).</param>
        /// <param name="aRequiredPermission">An array of permissions required to access this function.  If the value \&quot;0\&quot; is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don&#39;t need to have all of them. (required).</param>
        /// <param name="bVersionDeprecated">Wheter the current route is deprecated or not (required).</param>
        public CommonResponseObjDebugPayload(int iVersionMin = default(int), int iVersionMax = default(int), List<int> aRequiredPermission = default(List<int>), bool bVersionDeprecated = default(bool))
        {
            this.IVersionMin = iVersionMin;
            this.IVersionMax = iVersionMax;
            // to ensure "aRequiredPermission" is required (not null)
            if (aRequiredPermission == null)
            {
                throw new ArgumentNullException("aRequiredPermission is a required property for CommonResponseObjDebugPayload and cannot be null");
            }
            this.ARequiredPermission = aRequiredPermission;
            this.BVersionDeprecated = bVersionDeprecated;
        }

        /// <summary>
        /// The minimum version of the function that can be called
        /// </summary>
        /// <value>The minimum version of the function that can be called</value>
        </example> }}
		/* <example>1</example>*/
        [DataMember(Name = "iVersionMin", IsRequired = true, EmitDefaultValue = true)]
        public int IVersionMin { get; set; }

        /// <summary>
        /// The maximum version of the function that can be called
        /// </summary>
        /// <value>The maximum version of the function that can be called</value>
        </example> }}
		/* <example>2</example>*/
        [DataMember(Name = "iVersionMax", IsRequired = true, EmitDefaultValue = true)]
        public int IVersionMax { get; set; }

        /// <summary>
        /// An array of permissions required to access this function.  If the value \&quot;0\&quot; is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don&#39;t need to have all of them.
        /// </summary>
        /// <value>An array of permissions required to access this function.  If the value \&quot;0\&quot; is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don&#39;t need to have all of them.</value>
        [DataMember(Name = "a_RequiredPermission", IsRequired = true, EmitDefaultValue = true)]
        public List<int> ARequiredPermission { get; set; }

        /// <summary>
        /// Wheter the current route is deprecated or not
        /// </summary>
        /// <value>Wheter the current route is deprecated or not</value>
        </example> }}
		/* <example>false</example>*/
        [DataMember(Name = "bVersionDeprecated", IsRequired = true, EmitDefaultValue = true)]
        public bool BVersionDeprecated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonResponseObjDebugPayload {\n");
            sb.Append("  IVersionMin: ").Append(IVersionMin).Append("\n");
            sb.Append("  IVersionMax: ").Append(IVersionMax).Append("\n");
            sb.Append("  ARequiredPermission: ").Append(ARequiredPermission).Append("\n");
            sb.Append("  BVersionDeprecated: ").Append(BVersionDeprecated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonResponseObjDebugPayload);
        }

        /// <summary>
        /// Returns true if CommonResponseObjDebugPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonResponseObjDebugPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonResponseObjDebugPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IVersionMin == input.IVersionMin ||
                    this.IVersionMin.Equals(input.IVersionMin)
                ) && 
                (
                    this.IVersionMax == input.IVersionMax ||
                    this.IVersionMax.Equals(input.IVersionMax)
                ) && 
                (
                    this.ARequiredPermission == input.ARequiredPermission ||
                    this.ARequiredPermission != null &&
                    input.ARequiredPermission != null &&
                    this.ARequiredPermission.SequenceEqual(input.ARequiredPermission)
                ) && 
                (
                    this.BVersionDeprecated == input.BVersionDeprecated ||
                    this.BVersionDeprecated.Equals(input.BVersionDeprecated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IVersionMin.GetHashCode();
                hashCode = (hashCode * 59) + this.IVersionMax.GetHashCode();
                if (this.ARequiredPermission != null)
                {
                    hashCode = (hashCode * 59) + this.ARequiredPermission.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BVersionDeprecated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
