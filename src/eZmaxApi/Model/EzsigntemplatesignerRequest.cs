/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplatesigner Object
    /// </summary>
    [DataContract(Name = "ezsigntemplatesigner-Request")]
    public partial class EzsigntemplatesignerRequest : IEquatable<EzsigntemplatesignerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplatesignerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplatesignerRequest" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplatesignerID">The unique ID of the Ezsigntemplatesigner.</param>
        /// <param name="fkiEzsigntemplateID">The unique ID of the Ezsigntemplate (required).</param>
        /// <param name="sEzsigntemplatesignerDescription">The description of the Ezsigntemplatesigner (required).</param>
        public EzsigntemplatesignerRequest(int pkiEzsigntemplatesignerID = default(int), int fkiEzsigntemplateID = default(int), string sEzsigntemplatesignerDescription = default(string))
        {
            this.FkiEzsigntemplateID = fkiEzsigntemplateID;
            // to ensure "sEzsigntemplatesignerDescription" is required (not null)
            if (sEzsigntemplatesignerDescription == null)
            {
                throw new ArgumentNullException("sEzsigntemplatesignerDescription is a required property for EzsigntemplatesignerRequest and cannot be null");
            }
            this.SEzsigntemplatesignerDescription = sEzsigntemplatesignerDescription;
            this.PkiEzsigntemplatesignerID = pkiEzsigntemplatesignerID;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplatesigner
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplatesigner</value>
        </example> }}
		/* <example>9</example>*/
        [DataMember(Name = "pkiEzsigntemplatesignerID", EmitDefaultValue = false)]
        public int PkiEzsigntemplatesignerID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntemplate
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplate</value>
        </example> }}
		/* <example>36</example>*/
        [DataMember(Name = "fkiEzsigntemplateID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzsigntemplateID { get; set; }

        /// <summary>
        /// The description of the Ezsigntemplatesigner
        /// </summary>
        /// <value>The description of the Ezsigntemplatesigner</value>
        </example> }}
		/* <example>Customer</example>*/
        [DataMember(Name = "sEzsigntemplatesignerDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplatesignerDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplatesignerRequest {\n");
            sb.Append("  PkiEzsigntemplatesignerID: ").Append(PkiEzsigntemplatesignerID).Append("\n");
            sb.Append("  FkiEzsigntemplateID: ").Append(FkiEzsigntemplateID).Append("\n");
            sb.Append("  SEzsigntemplatesignerDescription: ").Append(SEzsigntemplatesignerDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsigntemplatesignerRequest);
        }

        /// <summary>
        /// Returns true if EzsigntemplatesignerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsigntemplatesignerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsigntemplatesignerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkiEzsigntemplatesignerID == input.PkiEzsigntemplatesignerID ||
                    this.PkiEzsigntemplatesignerID.Equals(input.PkiEzsigntemplatesignerID)
                ) && 
                (
                    this.FkiEzsigntemplateID == input.FkiEzsigntemplateID ||
                    this.FkiEzsigntemplateID.Equals(input.FkiEzsigntemplateID)
                ) && 
                (
                    this.SEzsigntemplatesignerDescription == input.SEzsigntemplatesignerDescription ||
                    (this.SEzsigntemplatesignerDescription != null &&
                    this.SEzsigntemplatesignerDescription.Equals(input.SEzsigntemplatesignerDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PkiEzsigntemplatesignerID.GetHashCode();
                hashCode = (hashCode * 59) + this.FkiEzsigntemplateID.GetHashCode();
                if (this.SEzsigntemplatesignerDescription != null)
                {
                    hashCode = (hashCode * 59) + this.SEzsigntemplatesignerDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplatesignerID (int) minimum
            if (this.PkiEzsigntemplatesignerID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsigntemplatesignerID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplatesignerID" });
            }

            // FkiEzsigntemplateID (int) minimum
            if (this.FkiEzsigntemplateID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigntemplateID, must be a value greater than or equal to 0.", new [] { "FkiEzsigntemplateID" });
            }

            yield break;
        }
    }

}
