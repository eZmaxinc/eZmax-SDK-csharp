/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Domain Object
    /// </summary>
    [DataContract(Name = "domain-ResponseCompound")]
    public partial class DomainResponseCompound : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DomainResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResponseCompound" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Domain (required).</param>
        /// <param name="">The name of the Domain (required).</param>
        /// <param name="">Whether the DKIM is valid or not (required).</param>
        /// <param name="">Whether the mail from is valid or not (required).</param>
        /// <param name="">Whether the customer has access to it or not (required).</param>
        /// <param name=""> (required).</param>
        /// <param name=""> (required).</param>
        public DomainResponseCompound(int  = default(int), string  = default(string), bool  = default(bool), bool  = default(bool), bool  = default(bool), CommonAudit  = default(CommonAudit), List<CustomDnsrecordResponse>  = default(List<CustomDnsrecordResponse>))
        {
            this.PkiDomainID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for DomainResponseCompound and cannot be null");
            }
            this.SDomainName = ;
            this.BDomainValiddkim = ;
            this.BDomainValidmailfrom = ;
            this.BDomainValidcustomer = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for DomainResponseCompound and cannot be null");
            }
            this.ObjAudit = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for DomainResponseCompound and cannot be null");
            }
            this.AObjDnsrecord = ;
        }

        /// <summary>
        /// The unique ID of the Domain
        /// </summary>
        /// <value>The unique ID of the Domain</value>
        /* <example>96</example>*/
        [DataMember(Name = "pkiDomainID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiDomainID { get; set; }

        /// <summary>
        /// The name of the Domain
        /// </summary>
        /// <value>The name of the Domain</value>
        /* <example>ezsign.ca</example>*/
        [DataMember(Name = "sDomainName", IsRequired = true, EmitDefaultValue = true)]
        public string SDomainName { get; set; }

        /// <summary>
        /// Whether the DKIM is valid or not
        /// </summary>
        /// <value>Whether the DKIM is valid or not</value>
        [DataMember(Name = "bDomainValiddkim", IsRequired = true, EmitDefaultValue = true)]
        public bool BDomainValiddkim { get; set; }

        /// <summary>
        /// Whether the mail from is valid or not
        /// </summary>
        /// <value>Whether the mail from is valid or not</value>
        [DataMember(Name = "bDomainValidmailfrom", IsRequired = true, EmitDefaultValue = true)]
        public bool BDomainValidmailfrom { get; set; }

        /// <summary>
        /// Whether the customer has access to it or not
        /// </summary>
        /// <value>Whether the customer has access to it or not</value>
        [DataMember(Name = "bDomainValidcustomer", IsRequired = true, EmitDefaultValue = true)]
        public bool BDomainValidcustomer { get; set; }

        /// <summary>
        /// Gets or Sets ObjAudit
        /// </summary>
        [DataMember(Name = "objAudit", IsRequired = true, EmitDefaultValue = true)]
        public CommonAudit ObjAudit { get; set; }

        /// <summary>
        /// Gets or Sets AObjDnsrecord
        /// </summary>
        [DataMember(Name = "a_objDnsrecord", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomDnsrecordResponse> AObjDnsrecord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainResponseCompound {\n");
            sb.Append("  PkiDomainID: ").Append(PkiDomainID).Append("\n");
            sb.Append("  SDomainName: ").Append(SDomainName).Append("\n");
            sb.Append("  BDomainValiddkim: ").Append(BDomainValiddkim).Append("\n");
            sb.Append("  BDomainValidmailfrom: ").Append(BDomainValidmailfrom).Append("\n");
            sb.Append("  BDomainValidcustomer: ").Append(BDomainValidcustomer).Append("\n");
            sb.Append("  ObjAudit: ").Append(ObjAudit).Append("\n");
            sb.Append("  AObjDnsrecord: ").Append(AObjDnsrecord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiDomainID (int) maximum
            if (this.PkiDomainID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiDomainID, must be a value less than or equal to 255.", new [] { "PkiDomainID" });
            }

            // PkiDomainID (int) minimum
            if (this.PkiDomainID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiDomainID, must be a value greater than or equal to 0.", new [] { "PkiDomainID" });
            }

            if (this.SDomainName != null) {
                // SDomainName (string) pattern
                Regex regexSDomainName = new Regex(@"^(?=.{4,75}$)([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,63}$", RegexOptions.CultureInvariant);
                if (!regexSDomainName.Match(this.SDomainName).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SDomainName, must match a pattern of " + regexSDomainName, new [] { "SDomainName" });
                }
            }

            yield break;
        }
    }

}
