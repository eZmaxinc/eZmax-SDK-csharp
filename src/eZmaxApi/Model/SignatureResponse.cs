/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Signature Object
    /// </summary>
    [DataContract]
    public partial class SignatureResponse :  IEquatable<SignatureResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignatureResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignatureResponse" /> class.
        /// </summary>
        /// <param name="pkiSignatureID">The unique ID of the Signature (required).</param>
        /// <param name="sSignatureUrl">The URL of the SVG file for the Signature (required).</param>
        public SignatureResponse(int pkiSignatureID = default(int), string sSignatureUrl = default(string))
        {
            // to ensure "pkiSignatureID" is required (not null)
            if (pkiSignatureID == null)
            {
                throw new InvalidDataException("pkiSignatureID is a required property for SignatureResponse and cannot be null");
            }
            else
            {
                this.PkiSignatureID = pkiSignatureID;
            }

            // to ensure "sSignatureUrl" is required (not null)
            if (sSignatureUrl == null)
            {
                throw new InvalidDataException("sSignatureUrl is a required property for SignatureResponse and cannot be null");
            }
            else
            {
                this.SSignatureUrl = sSignatureUrl;
            }

        }

        /// <summary>
        /// The unique ID of the Signature
        /// </summary>
        /// <value>The unique ID of the Signature</value>
        [DataMember(Name="pkiSignatureID", EmitDefaultValue=true)]
        public int PkiSignatureID { get; set; }

        /// <summary>
        /// The URL of the SVG file for the Signature
        /// </summary>
        /// <value>The URL of the SVG file for the Signature</value>
        [DataMember(Name="sSignatureUrl", EmitDefaultValue=true)]
        public string SSignatureUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignatureResponse {\n");
            sb.Append("  PkiSignatureID: ").Append(PkiSignatureID).Append("\n");
            sb.Append("  SSignatureUrl: ").Append(SSignatureUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignatureResponse);
        }

        /// <summary>
        /// Returns true if SignatureResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SignatureResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignatureResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiSignatureID == input.PkiSignatureID ||
                    (this.PkiSignatureID != null &&
                    this.PkiSignatureID.Equals(input.PkiSignatureID))
                ) && 
                (
                    this.SSignatureUrl == input.SSignatureUrl ||
                    (this.SSignatureUrl != null &&
                    this.SSignatureUrl.Equals(input.SSignatureUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiSignatureID != null)
                    hashCode = hashCode * 59 + this.PkiSignatureID.GetHashCode();
                if (this.SSignatureUrl != null)
                    hashCode = hashCode * 59 + this.SSignatureUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiSignatureID (int) maximum
            if(this.PkiSignatureID > (int)16777215)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSignatureID, must be a value less than or equal to 16777215.", new [] { "PkiSignatureID" });
            }

            // PkiSignatureID (int) minimum
            if(this.PkiSignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSignatureID, must be a value greater than or equal to 0.", new [] { "PkiSignatureID" });
            }



            // SSignatureUrl (string) pattern
            Regex regexSSignatureUrl = new Regex(@"^.{0,2048}$", RegexOptions.CultureInvariant);
            if (false == regexSSignatureUrl.Match(this.SSignatureUrl).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SSignatureUrl, must match a pattern of " + regexSSignatureUrl, new [] { "SSignatureUrl" });
            }

            yield break;
        }
    }

}
