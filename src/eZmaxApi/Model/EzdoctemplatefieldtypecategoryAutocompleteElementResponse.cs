/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezdoctemplatefieldtypecategory AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "ezdoctemplatefieldtypecategory-AutocompleteElement-Response")]
    public partial class EzdoctemplatefieldtypecategoryAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatefieldtypecategoryAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzdoctemplatefieldtypecategoryAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzdoctemplatefieldtypecategoryAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="">The unique ID of the Ezdoctemplatefieldtypecategory (required).</param>
        /// <param name="">The unique ID of the Ezdoctemplatetype (required).</param>
        /// <param name="">The description of the Ezdoctemplatefieldtypecategory in the language of the requester (required).</param>
        /// <param name="">Whether the Ezdoctemplatefieldtypecategory is active or not (required).</param>
        public EzdoctemplatefieldtypecategoryAutocompleteElementResponse(int  = default(int), int  = default(int), string  = default(string), bool  = default(bool))
        {
            this.PkiEzdoctemplatefieldtypecategoryID = ;
            this.FkiEzdoctemplatetypeID = ;
            // to ensure "" is required (not null)
            if ( == null)
            {
                throw new ArgumentNullException(" is a required property for EzdoctemplatefieldtypecategoryAutocompleteElementResponse and cannot be null");
            }
            this.SEzdoctemplatefieldtypecategoryDescriptionX = ;
            this.BEzdoctemplatefieldtypecategoryIsactive = ;
        }

        /// <summary>
        /// The unique ID of the Ezdoctemplatefieldtypecategory
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatefieldtypecategory</value>
        /* <example>4</example>*/
        [DataMember(Name = "pkiEzdoctemplatefieldtypecategoryID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzdoctemplatefieldtypecategoryID { get; set; }

        /// <summary>
        /// The unique ID of the Ezdoctemplatetype
        /// </summary>
        /// <value>The unique ID of the Ezdoctemplatetype</value>
        /* <example>7</example>*/
        [DataMember(Name = "fkiEzdoctemplatetypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiEzdoctemplatetypeID { get; set; }

        /// <summary>
        /// The description of the Ezdoctemplatefieldtypecategory in the language of the requester
        /// </summary>
        /// <value>The description of the Ezdoctemplatefieldtypecategory in the language of the requester</value>
        /* <example>Sale</example>*/
        [DataMember(Name = "sEzdoctemplatefieldtypecategoryDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SEzdoctemplatefieldtypecategoryDescriptionX { get; set; }

        /// <summary>
        /// Whether the Ezdoctemplatefieldtypecategory is active or not
        /// </summary>
        /// <value>Whether the Ezdoctemplatefieldtypecategory is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bEzdoctemplatefieldtypecategoryIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BEzdoctemplatefieldtypecategoryIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzdoctemplatefieldtypecategoryAutocompleteElementResponse {\n");
            sb.Append("  PkiEzdoctemplatefieldtypecategoryID: ").Append(PkiEzdoctemplatefieldtypecategoryID).Append("\n");
            sb.Append("  FkiEzdoctemplatetypeID: ").Append(FkiEzdoctemplatetypeID).Append("\n");
            sb.Append("  SEzdoctemplatefieldtypecategoryDescriptionX: ").Append(SEzdoctemplatefieldtypecategoryDescriptionX).Append("\n");
            sb.Append("  BEzdoctemplatefieldtypecategoryIsactive: ").Append(BEzdoctemplatefieldtypecategoryIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzdoctemplatefieldtypecategoryID (int) maximum
            if (this.PkiEzdoctemplatefieldtypecategoryID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzdoctemplatefieldtypecategoryID, must be a value less than or equal to 255.", new [] { "PkiEzdoctemplatefieldtypecategoryID" });
            }

            // PkiEzdoctemplatefieldtypecategoryID (int) minimum
            if (this.PkiEzdoctemplatefieldtypecategoryID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzdoctemplatefieldtypecategoryID, must be a value greater than or equal to 0.", new [] { "PkiEzdoctemplatefieldtypecategoryID" });
            }

            // FkiEzdoctemplatetypeID (int) maximum
            if (this.FkiEzdoctemplatetypeID > (int)255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatetypeID, must be a value less than or equal to 255.", new [] { "FkiEzdoctemplatetypeID" });
            }

            // FkiEzdoctemplatetypeID (int) minimum
            if (this.FkiEzdoctemplatetypeID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzdoctemplatetypeID, must be a value greater than or equal to 0.", new [] { "FkiEzdoctemplatetypeID" });
            }

            if (this.SEzdoctemplatefieldtypecategoryDescriptionX != null) {
                // SEzdoctemplatefieldtypecategoryDescriptionX (string) pattern
                Regex regexSEzdoctemplatefieldtypecategoryDescriptionX = new Regex(@"^.{0,55}$", RegexOptions.CultureInvariant);
                if (!regexSEzdoctemplatefieldtypecategoryDescriptionX.Match(this.SEzdoctemplatefieldtypecategoryDescriptionX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzdoctemplatefieldtypecategoryDescriptionX, must match a pattern of " + regexSEzdoctemplatefieldtypecategoryDescriptionX, new [] { "SEzdoctemplatefieldtypecategoryDescriptionX" });
                }
            }

            yield break;
        }
    }

}
