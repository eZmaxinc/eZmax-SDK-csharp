/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignpage Object
    /// </summary>
    [DataContract(Name = "ezsignpage-Response")]
    public partial class EzsignpageResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignpageResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignpageResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignpageResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignpageID">The unique ID of the Ezsignpage (required).</param>
        /// <param name="iEzsignpageWidthimage">The Width of the page&#39;s image in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsignpageHeightimage">The Height of the page&#39;s image in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsignpageWidthpdf">The Width of the page in points calculated at 72 DPI (required).</param>
        /// <param name="iEzsignpageHeightpdf">The Height of the page in points calculated at 72 DPI (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="sComputedImageurl">The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes. (required).</param>
        public EzsignpageResponse(int pkiEzsignpageID = default(int), int iEzsignpageWidthimage = default(int), int iEzsignpageHeightimage = default(int), int iEzsignpageWidthpdf = default(int), int iEzsignpageHeightpdf = default(int), int iEzsignpagePagenumber = default(int), string sComputedImageurl = default(string))
        {
            this.PkiEzsignpageID = pkiEzsignpageID;
            this.IEzsignpageWidthimage = iEzsignpageWidthimage;
            this.IEzsignpageHeightimage = iEzsignpageHeightimage;
            this.IEzsignpageWidthpdf = iEzsignpageWidthpdf;
            this.IEzsignpageHeightpdf = iEzsignpageHeightpdf;
            this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            // to ensure "sComputedImageurl" is required (not null)
            if (sComputedImageurl == null)
            {
                throw new ArgumentNullException("sComputedImageurl is a required property for EzsignpageResponse and cannot be null");
            }
            this.SComputedImageurl = sComputedImageurl;
        }

        /// <summary>
        /// The unique ID of the Ezsignpage
        /// </summary>
        /// <value>The unique ID of the Ezsignpage</value>
        /* <example>64</example>*/
        [DataMember(Name = "pkiEzsignpageID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignpageID { get; set; }

        /// <summary>
        /// The Width of the page&#39;s image in pixels calculated at 100 DPI
        /// </summary>
        /// <value>The Width of the page&#39;s image in pixels calculated at 100 DPI</value>
        /* <example>850</example>*/
        [DataMember(Name = "iEzsignpageWidthimage", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpageWidthimage { get; set; }

        /// <summary>
        /// The Height of the page&#39;s image in pixels calculated at 100 DPI
        /// </summary>
        /// <value>The Height of the page&#39;s image in pixels calculated at 100 DPI</value>
        /* <example>1100</example>*/
        [DataMember(Name = "iEzsignpageHeightimage", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpageHeightimage { get; set; }

        /// <summary>
        /// The Width of the page in points calculated at 72 DPI
        /// </summary>
        /// <value>The Width of the page in points calculated at 72 DPI</value>
        /* <example>612</example>*/
        [DataMember(Name = "iEzsignpageWidthpdf", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpageWidthpdf { get; set; }

        /// <summary>
        /// The Height of the page in points calculated at 72 DPI
        /// </summary>
        /// <value>The Height of the page in points calculated at 72 DPI</value>
        /* <example>792</example>*/
        [DataMember(Name = "iEzsignpageHeightpdf", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpageHeightpdf { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        /* <example>1</example>*/
        [DataMember(Name = "iEzsignpagePagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes.
        /// </summary>
        /// <value>The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes.</value>
        [DataMember(Name = "sComputedImageurl", IsRequired = true, EmitDefaultValue = true)]
        public string SComputedImageurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignpageResponse {\n");
            sb.Append("  PkiEzsignpageID: ").Append(PkiEzsignpageID).Append("\n");
            sb.Append("  IEzsignpageWidthimage: ").Append(IEzsignpageWidthimage).Append("\n");
            sb.Append("  IEzsignpageHeightimage: ").Append(IEzsignpageHeightimage).Append("\n");
            sb.Append("  IEzsignpageWidthpdf: ").Append(IEzsignpageWidthpdf).Append("\n");
            sb.Append("  IEzsignpageHeightpdf: ").Append(IEzsignpageHeightpdf).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  SComputedImageurl: ").Append(SComputedImageurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignpageID (int) minimum
            if (this.PkiEzsignpageID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsignpageID, must be a value greater than or equal to 0.", new [] { "PkiEzsignpageID" });
            }

            // IEzsignpageWidthimage (int) minimum
            if (this.IEzsignpageWidthimage < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsignpageWidthimage, must be a value greater than or equal to 0.", new [] { "IEzsignpageWidthimage" });
            }

            // IEzsignpageHeightimage (int) minimum
            if (this.IEzsignpageHeightimage < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsignpageHeightimage, must be a value greater than or equal to 0.", new [] { "IEzsignpageHeightimage" });
            }

            // IEzsignpageWidthpdf (int) minimum
            if (this.IEzsignpageWidthpdf < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsignpageWidthpdf, must be a value greater than or equal to 0.", new [] { "IEzsignpageWidthpdf" });
            }

            // IEzsignpageHeightpdf (int) minimum
            if (this.IEzsignpageHeightpdf < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsignpageHeightpdf, must be a value greater than or equal to 0.", new [] { "IEzsignpageHeightpdf" });
            }

            // IEzsignpagePagenumber (int) minimum
            if (this.IEzsignpagePagenumber < (int)1)
            {
                yield return new ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }

            yield break;
        }
    }

}
