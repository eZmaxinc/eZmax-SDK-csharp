/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.17
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignpage Object
    /// </summary>
    [DataContract]
    public partial class EzsignpageResponse :  IEquatable<EzsignpageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignpageResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignpageResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignpageResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsignpageID">The unique ID of the Ezsignpage (required).</param>
        /// <param name="iEzsignpageWidthimage">The Width of the page&#39;s image in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsignpageHeightimage">The Height of the page&#39;s image in pixels calculated at 100 DPI (required).</param>
        /// <param name="iEzsignpageWidthpdf">The Width of the page in points calculated at 72 DPI (required).</param>
        /// <param name="iEzsignpageHeightpdf">The Height of the page in points calculated at 72 DPI (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="sComputedImageurl">The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes. (required).</param>
        public EzsignpageResponse(int pkiEzsignpageID = default(int), int iEzsignpageWidthimage = default(int), int iEzsignpageHeightimage = default(int), int iEzsignpageWidthpdf = default(int), int iEzsignpageHeightpdf = default(int), int iEzsignpagePagenumber = default(int), string sComputedImageurl = default(string))
        {
            // to ensure "pkiEzsignpageID" is required (not null)
            if (pkiEzsignpageID == null)
            {
                throw new InvalidDataException("pkiEzsignpageID is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.PkiEzsignpageID = pkiEzsignpageID;
            }

            // to ensure "iEzsignpageWidthimage" is required (not null)
            if (iEzsignpageWidthimage == null)
            {
                throw new InvalidDataException("iEzsignpageWidthimage is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.IEzsignpageWidthimage = iEzsignpageWidthimage;
            }

            // to ensure "iEzsignpageHeightimage" is required (not null)
            if (iEzsignpageHeightimage == null)
            {
                throw new InvalidDataException("iEzsignpageHeightimage is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.IEzsignpageHeightimage = iEzsignpageHeightimage;
            }

            // to ensure "iEzsignpageWidthpdf" is required (not null)
            if (iEzsignpageWidthpdf == null)
            {
                throw new InvalidDataException("iEzsignpageWidthpdf is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.IEzsignpageWidthpdf = iEzsignpageWidthpdf;
            }

            // to ensure "iEzsignpageHeightpdf" is required (not null)
            if (iEzsignpageHeightpdf == null)
            {
                throw new InvalidDataException("iEzsignpageHeightpdf is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.IEzsignpageHeightpdf = iEzsignpageHeightpdf;
            }

            // to ensure "iEzsignpagePagenumber" is required (not null)
            if (iEzsignpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsignpagePagenumber is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            }

            // to ensure "sComputedImageurl" is required (not null)
            if (sComputedImageurl == null)
            {
                throw new InvalidDataException("sComputedImageurl is a required property for EzsignpageResponse and cannot be null");
            }
            else
            {
                this.SComputedImageurl = sComputedImageurl;
            }

        }

        /// <summary>
        /// The unique ID of the Ezsignpage
        /// </summary>
        /// <value>The unique ID of the Ezsignpage</value>
        [DataMember(Name="pkiEzsignpageID", EmitDefaultValue=true)]
        public int PkiEzsignpageID { get; set; }

        /// <summary>
        /// The Width of the page&#39;s image in pixels calculated at 100 DPI
        /// </summary>
        /// <value>The Width of the page&#39;s image in pixels calculated at 100 DPI</value>
        [DataMember(Name="iEzsignpageWidthimage", EmitDefaultValue=true)]
        public int IEzsignpageWidthimage { get; set; }

        /// <summary>
        /// The Height of the page&#39;s image in pixels calculated at 100 DPI
        /// </summary>
        /// <value>The Height of the page&#39;s image in pixels calculated at 100 DPI</value>
        [DataMember(Name="iEzsignpageHeightimage", EmitDefaultValue=true)]
        public int IEzsignpageHeightimage { get; set; }

        /// <summary>
        /// The Width of the page in points calculated at 72 DPI
        /// </summary>
        /// <value>The Width of the page in points calculated at 72 DPI</value>
        [DataMember(Name="iEzsignpageWidthpdf", EmitDefaultValue=true)]
        public int IEzsignpageWidthpdf { get; set; }

        /// <summary>
        /// The Height of the page in points calculated at 72 DPI
        /// </summary>
        /// <value>The Height of the page in points calculated at 72 DPI</value>
        [DataMember(Name="iEzsignpageHeightpdf", EmitDefaultValue=true)]
        public int IEzsignpageHeightpdf { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        [DataMember(Name="iEzsignpagePagenumber", EmitDefaultValue=true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes.
        /// </summary>
        /// <value>The Url to the Ezsignpage&#39;s rasterized image.  Url will expire after 5 minutes.</value>
        [DataMember(Name="sComputedImageurl", EmitDefaultValue=true)]
        public string SComputedImageurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignpageResponse {\n");
            sb.Append("  PkiEzsignpageID: ").Append(PkiEzsignpageID).Append("\n");
            sb.Append("  IEzsignpageWidthimage: ").Append(IEzsignpageWidthimage).Append("\n");
            sb.Append("  IEzsignpageHeightimage: ").Append(IEzsignpageHeightimage).Append("\n");
            sb.Append("  IEzsignpageWidthpdf: ").Append(IEzsignpageWidthpdf).Append("\n");
            sb.Append("  IEzsignpageHeightpdf: ").Append(IEzsignpageHeightpdf).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  SComputedImageurl: ").Append(SComputedImageurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignpageResponse);
        }

        /// <summary>
        /// Returns true if EzsignpageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignpageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignpageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignpageID == input.PkiEzsignpageID ||
                    (this.PkiEzsignpageID != null &&
                    this.PkiEzsignpageID.Equals(input.PkiEzsignpageID))
                ) && 
                (
                    this.IEzsignpageWidthimage == input.IEzsignpageWidthimage ||
                    (this.IEzsignpageWidthimage != null &&
                    this.IEzsignpageWidthimage.Equals(input.IEzsignpageWidthimage))
                ) && 
                (
                    this.IEzsignpageHeightimage == input.IEzsignpageHeightimage ||
                    (this.IEzsignpageHeightimage != null &&
                    this.IEzsignpageHeightimage.Equals(input.IEzsignpageHeightimage))
                ) && 
                (
                    this.IEzsignpageWidthpdf == input.IEzsignpageWidthpdf ||
                    (this.IEzsignpageWidthpdf != null &&
                    this.IEzsignpageWidthpdf.Equals(input.IEzsignpageWidthpdf))
                ) && 
                (
                    this.IEzsignpageHeightpdf == input.IEzsignpageHeightpdf ||
                    (this.IEzsignpageHeightpdf != null &&
                    this.IEzsignpageHeightpdf.Equals(input.IEzsignpageHeightpdf))
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    (this.IEzsignpagePagenumber != null &&
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber))
                ) && 
                (
                    this.SComputedImageurl == input.SComputedImageurl ||
                    (this.SComputedImageurl != null &&
                    this.SComputedImageurl.Equals(input.SComputedImageurl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignpageID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignpageID.GetHashCode();
                if (this.IEzsignpageWidthimage != null)
                    hashCode = hashCode * 59 + this.IEzsignpageWidthimage.GetHashCode();
                if (this.IEzsignpageHeightimage != null)
                    hashCode = hashCode * 59 + this.IEzsignpageHeightimage.GetHashCode();
                if (this.IEzsignpageWidthpdf != null)
                    hashCode = hashCode * 59 + this.IEzsignpageWidthpdf.GetHashCode();
                if (this.IEzsignpageHeightpdf != null)
                    hashCode = hashCode * 59 + this.IEzsignpageHeightpdf.GetHashCode();
                if (this.IEzsignpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsignpagePagenumber.GetHashCode();
                if (this.SComputedImageurl != null)
                    hashCode = hashCode * 59 + this.SComputedImageurl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsignpageID (int) minimum
            if(this.PkiEzsignpageID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignpageID, must be a value greater than or equal to 0.", new [] { "PkiEzsignpageID" });
            }



            // IEzsignpageWidthimage (int) minimum
            if(this.IEzsignpageWidthimage < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpageWidthimage, must be a value greater than or equal to 0.", new [] { "IEzsignpageWidthimage" });
            }



            // IEzsignpageHeightimage (int) minimum
            if(this.IEzsignpageHeightimage < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpageHeightimage, must be a value greater than or equal to 0.", new [] { "IEzsignpageHeightimage" });
            }



            // IEzsignpageWidthpdf (int) minimum
            if(this.IEzsignpageWidthpdf < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpageWidthpdf, must be a value greater than or equal to 0.", new [] { "IEzsignpageWidthpdf" });
            }



            // IEzsignpageHeightpdf (int) minimum
            if(this.IEzsignpageHeightpdf < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpageHeightpdf, must be a value greater than or equal to 0.", new [] { "IEzsignpageHeightpdf" });
            }



            // IEzsignpagePagenumber (int) minimum
            if(this.IEzsignpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }

            yield break;
        }
    }

}
