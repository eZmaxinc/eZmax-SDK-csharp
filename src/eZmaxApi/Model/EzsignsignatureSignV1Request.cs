/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.13
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignsignature/{pkiEzsignsignatureID}/sign
    /// </summary>
    [DataContract]
    public partial class EzsignsignatureSignV1Request :  IEquatable<EzsignsignatureSignV1Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureSignV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureSignV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureSignV1Request" /> class.
        /// </summary>
        /// <param name="sValue">The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**.</param>
        /// <param name="bIsAutomatic">Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**.  (required).</param>
        public EzsignsignatureSignV1Request(string sValue = default(string), bool bIsAutomatic = default(bool))
        {
            // to ensure "bIsAutomatic" is required (not null)
            if (bIsAutomatic == null)
            {
                throw new InvalidDataException("bIsAutomatic is a required property for EzsignsignatureSignV1Request and cannot be null");
            }
            else
            {
                this.BIsAutomatic = bIsAutomatic;
            }

            this.SValue = sValue;
        }

        /// <summary>
        /// The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
        /// </summary>
        /// <value>The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**</value>
        [DataMember(Name="sValue", EmitDefaultValue=false)]
        public string SValue { get; set; }

        /// <summary>
        /// Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
        /// </summary>
        /// <value>Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. </value>
        [DataMember(Name="bIsAutomatic", EmitDefaultValue=true)]
        public bool BIsAutomatic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignatureSignV1Request {\n");
            sb.Append("  SValue: ").Append(SValue).Append("\n");
            sb.Append("  BIsAutomatic: ").Append(BIsAutomatic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignatureSignV1Request);
        }

        /// <summary>
        /// Returns true if EzsignsignatureSignV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignatureSignV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignatureSignV1Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SValue == input.SValue ||
                    (this.SValue != null &&
                    this.SValue.Equals(input.SValue))
                ) && 
                (
                    this.BIsAutomatic == input.BIsAutomatic ||
                    (this.BIsAutomatic != null &&
                    this.BIsAutomatic.Equals(input.BIsAutomatic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SValue != null)
                    hashCode = hashCode * 59 + this.SValue.GetHashCode();
                if (this.BIsAutomatic != null)
                    hashCode = hashCode * 59 + this.BIsAutomatic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
