/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignsignature/{pkiEzsignsignatureID}/sign
    /// </summary>
    [DataContract(Name = "ezsignsignature-sign-v1-Request")]
    public partial class EzsignsignatureSignV1Request : IEquatable<EzsignsignatureSignV1Request>, IValidatableObject
    {
        /// <summary>
        /// Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
        /// </summary>
        /// <value>Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EAttachmentsConfirmationDecisionEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,

            /// <summary>
            /// Enum Refused for value: Refused
            /// </summary>
            [EnumMember(Value = "Refused")]
            Refused = 2
        }


        /// <summary>
        /// Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
        /// </summary>
        /// <value>Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**</value>
        [DataMember(Name = "eAttachmentsConfirmationDecision", EmitDefaultValue = false)]
        public EAttachmentsConfirmationDecisionEnum? EAttachmentsConfirmationDecision { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureSignV1Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureSignV1Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureSignV1Request" /> class.
        /// </summary>
        /// <param name="sValue">The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**.</param>
        /// <param name="eAttachmentsConfirmationDecision">Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**.</param>
        /// <param name="sAttachmentsRefusalReason">The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**.</param>
        /// <param name="sSvg">The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false.</param>
        /// <param name="aObjFile">aObjFile.</param>
        /// <param name="bIsAutomatic">Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**.  (required).</param>
        public EzsignsignatureSignV1Request(string sValue = default(string), EAttachmentsConfirmationDecisionEnum? eAttachmentsConfirmationDecision = default(EAttachmentsConfirmationDecisionEnum?), string sAttachmentsRefusalReason = default(string), string sSvg = default(string), List<CommonFile> aObjFile = default(List<CommonFile>), bool bIsAutomatic = default(bool))
        {
            this.BIsAutomatic = bIsAutomatic;
            this.SValue = sValue;
            this.EAttachmentsConfirmationDecision = eAttachmentsConfirmationDecision;
            this.SAttachmentsRefusalReason = sAttachmentsRefusalReason;
            this.SSvg = sSvg;
            this.AObjFile = aObjFile;
        }

        /// <summary>
        /// The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
        /// </summary>
        /// <value>The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**</value>
        [DataMember(Name = "sValue", EmitDefaultValue = false)]
        public string SValue { get; set; }

        /// <summary>
        /// The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
        /// </summary>
        /// <value>The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**</value>
        [DataMember(Name = "sAttachmentsRefusalReason", EmitDefaultValue = false)]
        public string SAttachmentsRefusalReason { get; set; }

        /// <summary>
        /// The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
        /// </summary>
        /// <value>The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false</value>
        /* <example>{&quot;$ref&quot;:&quot;#/components/examples/Svg/value&quot;}</example>*/
        [DataMember(Name = "sSvg", EmitDefaultValue = false)]
        public string SSvg { get; set; }

        /// <summary>
        /// Gets or Sets AObjFile
        /// </summary>
        [DataMember(Name = "a_objFile", EmitDefaultValue = false)]
        public List<CommonFile> AObjFile { get; set; }

        /// <summary>
        /// Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
        /// </summary>
        /// <value>Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. </value>
        [DataMember(Name = "bIsAutomatic", IsRequired = true, EmitDefaultValue = true)]
        public bool BIsAutomatic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignsignatureSignV1Request {\n");
            sb.Append("  SValue: ").Append(SValue).Append("\n");
            sb.Append("  EAttachmentsConfirmationDecision: ").Append(EAttachmentsConfirmationDecision).Append("\n");
            sb.Append("  SAttachmentsRefusalReason: ").Append(SAttachmentsRefusalReason).Append("\n");
            sb.Append("  SSvg: ").Append(SSvg).Append("\n");
            sb.Append("  AObjFile: ").Append(AObjFile).Append("\n");
            sb.Append("  BIsAutomatic: ").Append(BIsAutomatic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignatureSignV1Request);
        }

        /// <summary>
        /// Returns true if EzsignsignatureSignV1Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignatureSignV1Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignatureSignV1Request input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SValue == input.SValue ||
                    (this.SValue != null &&
                    this.SValue.Equals(input.SValue))
                ) && 
                (
                    this.EAttachmentsConfirmationDecision == input.EAttachmentsConfirmationDecision ||
                    this.EAttachmentsConfirmationDecision.Equals(input.EAttachmentsConfirmationDecision)
                ) && 
                (
                    this.SAttachmentsRefusalReason == input.SAttachmentsRefusalReason ||
                    (this.SAttachmentsRefusalReason != null &&
                    this.SAttachmentsRefusalReason.Equals(input.SAttachmentsRefusalReason))
                ) && 
                (
                    this.SSvg == input.SSvg ||
                    (this.SSvg != null &&
                    this.SSvg.Equals(input.SSvg))
                ) && 
                (
                    this.AObjFile == input.AObjFile ||
                    this.AObjFile != null &&
                    input.AObjFile != null &&
                    this.AObjFile.SequenceEqual(input.AObjFile)
                ) && 
                (
                    this.BIsAutomatic == input.BIsAutomatic ||
                    this.BIsAutomatic.Equals(input.BIsAutomatic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SValue != null)
                {
                    hashCode = (hashCode * 59) + this.SValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EAttachmentsConfirmationDecision.GetHashCode();
                if (this.SAttachmentsRefusalReason != null)
                {
                    hashCode = (hashCode * 59) + this.SAttachmentsRefusalReason.GetHashCode();
                }
                if (this.SSvg != null)
                {
                    hashCode = (hashCode * 59) + this.SSvg.GetHashCode();
                }
                if (this.AObjFile != null)
                {
                    hashCode = (hashCode * 59) + this.AObjFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BIsAutomatic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.SSvg != null) {
                // SSvg (string) pattern
                Regex regexSSvg = new Regex(@"^.{0,32767}$", RegexOptions.CultureInvariant);
                if (!regexSSvg.Match(this.SSvg).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SSvg, must match a pattern of " + regexSSvg, new [] { "SSvg" });
                }
            }

            yield break;
        }
    }

}
