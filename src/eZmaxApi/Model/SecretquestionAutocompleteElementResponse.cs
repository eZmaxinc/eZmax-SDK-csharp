/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Secretquestion AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "secretquestion-AutocompleteElement-Response")]
    public partial class SecretquestionAutocompleteElementResponse : IEquatable<SecretquestionAutocompleteElementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecretquestionAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecretquestionAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecretquestionAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="sSecretquestionTextX">The text of the Secretquestion in the language of the requester (required).</param>
        /// <param name="pkiSecretquestionID">The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)| (required).</param>
        /// <param name="bSecretquestionIsactive">Whether the Secretquestion is active or not (required).</param>
        public SecretquestionAutocompleteElementResponse(string sSecretquestionTextX = default(string), int pkiSecretquestionID = default(int), bool bSecretquestionIsactive = default(bool))
        {
            // to ensure "sSecretquestionTextX" is required (not null)
            if (sSecretquestionTextX == null)
            {
                throw new ArgumentNullException("sSecretquestionTextX is a required property for SecretquestionAutocompleteElementResponse and cannot be null");
            }
            this.SSecretquestionTextX = sSecretquestionTextX;
            this.PkiSecretquestionID = pkiSecretquestionID;
            this.BSecretquestionIsactive = bSecretquestionIsactive;
        }

        /// <summary>
        /// The text of the Secretquestion in the language of the requester
        /// </summary>
        /// <value>The text of the Secretquestion in the language of the requester</value>
        /* <example>The name of the hospital in which you were born</example>*/
        [DataMember(Name = "sSecretquestionTextX", IsRequired = true, EmitDefaultValue = true)]
        public string SSecretquestionTextX { get; set; }

        /// <summary>
        /// The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)|
        /// </summary>
        /// <value>The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father&#39;s middle name| |15|Your mother&#39;s maiden name| |16|Name of your eldest child| |17|Your spouse&#39;s middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat&#39;s name| |22|Date of Birth (YYYY-MM-DD)|</value>
        /* <example>7</example>*/
        [DataMember(Name = "pkiSecretquestionID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiSecretquestionID { get; set; }

        /// <summary>
        /// Whether the Secretquestion is active or not
        /// </summary>
        /// <value>Whether the Secretquestion is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bSecretquestionIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BSecretquestionIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SecretquestionAutocompleteElementResponse {\n");
            sb.Append("  SSecretquestionTextX: ").Append(SSecretquestionTextX).Append("\n");
            sb.Append("  PkiSecretquestionID: ").Append(PkiSecretquestionID).Append("\n");
            sb.Append("  BSecretquestionIsactive: ").Append(BSecretquestionIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecretquestionAutocompleteElementResponse);
        }

        /// <summary>
        /// Returns true if SecretquestionAutocompleteElementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SecretquestionAutocompleteElementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecretquestionAutocompleteElementResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SSecretquestionTextX == input.SSecretquestionTextX ||
                    (this.SSecretquestionTextX != null &&
                    this.SSecretquestionTextX.Equals(input.SSecretquestionTextX))
                ) && 
                (
                    this.PkiSecretquestionID == input.PkiSecretquestionID ||
                    this.PkiSecretquestionID.Equals(input.PkiSecretquestionID)
                ) && 
                (
                    this.BSecretquestionIsactive == input.BSecretquestionIsactive ||
                    this.BSecretquestionIsactive.Equals(input.BSecretquestionIsactive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SSecretquestionTextX != null)
                {
                    hashCode = (hashCode * 59) + this.SSecretquestionTextX.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PkiSecretquestionID.GetHashCode();
                hashCode = (hashCode * 59) + this.BSecretquestionIsactive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSecretquestionID (int) minimum
            if (this.PkiSecretquestionID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiSecretquestionID, must be a value greater than or equal to 0.", new [] { "PkiSecretquestionID" });
            }

            yield break;
        }
    }

}
