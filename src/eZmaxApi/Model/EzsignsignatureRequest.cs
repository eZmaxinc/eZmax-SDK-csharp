/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.11
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignsignature Object
    /// </summary>
    [DataContract]
    public partial class EzsignsignatureRequest :  IEquatable<EzsignsignatureRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignsignatureRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignsignatureRequest" /> class.
        /// </summary>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature.</param>
        /// <param name="fkiEzsignfoldersignerassociationID">The unique ID of the Ezsignfoldersignerassociation (required).</param>
        /// <param name="iEzsignpagePagenumber">The page number in the Ezsigndocument (required).</param>
        /// <param name="iEzsignsignatureX">The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate. (required).</param>
        /// <param name="iEzsignsignatureY">The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate. (required).</param>
        /// <param name="iEzsignsignatureStep">The step when the Ezsignsigner will be invited to sign (required).</param>
        /// <param name="eEzsignsignatureType">eEzsignsignatureType (required).</param>
        /// <param name="fkiEzsigndocumentID">The unique ID of the Ezsigndocument (required).</param>
        /// <param name="tEzsignsignatureTooltip">A tooltip that will be presented to Ezsignsigner about the Ezsignsignature.</param>
        /// <param name="eEzsignsignatureTooltipposition">eEzsignsignatureTooltipposition.</param>
        /// <param name="eEzsignsignatureFont">eEzsignsignatureFont.</param>
        /// <param name="fkiUserID">The unique ID of the User.</param>
        /// <param name="bEzsignsignatureRequired">Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments..</param>
        /// <param name="eEzsignsignatureAttachmentnamesource">eEzsignsignatureAttachmentnamesource.</param>
        /// <param name="sEzsignsignatureAttachmentdescription">The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments.</param>
        /// <param name="iEzsignsignatureValidationstep">The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments.</param>
        public EzsignsignatureRequest(int pkiEzsignsignatureID = default(int), int fkiEzsignfoldersignerassociationID = default(int), int iEzsignpagePagenumber = default(int), int iEzsignsignatureX = default(int), int iEzsignsignatureY = default(int), int iEzsignsignatureStep = default(int), FieldEEzsignsignatureType eEzsignsignatureType = default(FieldEEzsignsignatureType), int fkiEzsigndocumentID = default(int), string tEzsignsignatureTooltip = default(string), FieldEEzsignsignatureTooltipposition eEzsignsignatureTooltipposition = default(FieldEEzsignsignatureTooltipposition), FieldEEzsignsignatureFont eEzsignsignatureFont = default(FieldEEzsignsignatureFont), int fkiUserID = default(int), bool bEzsignsignatureRequired = default(bool), FieldEEzsignsignatureAttachmentnamesource eEzsignsignatureAttachmentnamesource = default(FieldEEzsignsignatureAttachmentnamesource), string sEzsignsignatureAttachmentdescription = default(string), int iEzsignsignatureValidationstep = default(int))
        {
            // to ensure "fkiEzsignfoldersignerassociationID" is required (not null)
            if (fkiEzsignfoldersignerassociationID == null)
            {
                throw new InvalidDataException("fkiEzsignfoldersignerassociationID is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID;
            }

            // to ensure "iEzsignpagePagenumber" is required (not null)
            if (iEzsignpagePagenumber == null)
            {
                throw new InvalidDataException("iEzsignpagePagenumber is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.IEzsignpagePagenumber = iEzsignpagePagenumber;
            }

            // to ensure "iEzsignsignatureX" is required (not null)
            if (iEzsignsignatureX == null)
            {
                throw new InvalidDataException("iEzsignsignatureX is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.IEzsignsignatureX = iEzsignsignatureX;
            }

            // to ensure "iEzsignsignatureY" is required (not null)
            if (iEzsignsignatureY == null)
            {
                throw new InvalidDataException("iEzsignsignatureY is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.IEzsignsignatureY = iEzsignsignatureY;
            }

            // to ensure "iEzsignsignatureStep" is required (not null)
            if (iEzsignsignatureStep == null)
            {
                throw new InvalidDataException("iEzsignsignatureStep is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.IEzsignsignatureStep = iEzsignsignatureStep;
            }

            // to ensure "eEzsignsignatureType" is required (not null)
            if (eEzsignsignatureType == null)
            {
                throw new InvalidDataException("eEzsignsignatureType is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.EEzsignsignatureType = eEzsignsignatureType;
            }

            // to ensure "fkiEzsigndocumentID" is required (not null)
            if (fkiEzsigndocumentID == null)
            {
                throw new InvalidDataException("fkiEzsigndocumentID is a required property for EzsignsignatureRequest and cannot be null");
            }
            else
            {
                this.FkiEzsigndocumentID = fkiEzsigndocumentID;
            }

            this.PkiEzsignsignatureID = pkiEzsignsignatureID;
            this.TEzsignsignatureTooltip = tEzsignsignatureTooltip;
            this.EEzsignsignatureTooltipposition = eEzsignsignatureTooltipposition;
            this.EEzsignsignatureFont = eEzsignsignatureFont;
            this.FkiUserID = fkiUserID;
            this.BEzsignsignatureRequired = bEzsignsignatureRequired;
            this.EEzsignsignatureAttachmentnamesource = eEzsignsignatureAttachmentnamesource;
            this.SEzsignsignatureAttachmentdescription = sEzsignsignatureAttachmentdescription;
            this.IEzsignsignatureValidationstep = iEzsignsignatureValidationstep;
        }

        /// <summary>
        /// The unique ID of the Ezsignsignature
        /// </summary>
        /// <value>The unique ID of the Ezsignsignature</value>
        [DataMember(Name="pkiEzsignsignatureID", EmitDefaultValue=false)]
        public int PkiEzsignsignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignfoldersignerassociation
        /// </summary>
        /// <value>The unique ID of the Ezsignfoldersignerassociation</value>
        [DataMember(Name="fkiEzsignfoldersignerassociationID", EmitDefaultValue=true)]
        public int FkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// The page number in the Ezsigndocument
        /// </summary>
        /// <value>The page number in the Ezsigndocument</value>
        [DataMember(Name="iEzsignpagePagenumber", EmitDefaultValue=true)]
        public int IEzsignpagePagenumber { get; set; }

        /// <summary>
        /// The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.
        /// </summary>
        /// <value>The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \&quot;200\&quot; for the X coordinate.</value>
        [DataMember(Name="iEzsignsignatureX", EmitDefaultValue=true)]
        public int IEzsignsignatureX { get; set; }

        /// <summary>
        /// The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.
        /// </summary>
        /// <value>The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \&quot;300\&quot; for the Y coordinate.</value>
        [DataMember(Name="iEzsignsignatureY", EmitDefaultValue=true)]
        public int IEzsignsignatureY { get; set; }

        /// <summary>
        /// The step when the Ezsignsigner will be invited to sign
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to sign</value>
        [DataMember(Name="iEzsignsignatureStep", EmitDefaultValue=true)]
        public int IEzsignsignatureStep { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignsignatureType
        /// </summary>
        [DataMember(Name="eEzsignsignatureType", EmitDefaultValue=true)]
        public FieldEEzsignsignatureType EEzsignsignatureType { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigndocument
        /// </summary>
        /// <value>The unique ID of the Ezsigndocument</value>
        [DataMember(Name="fkiEzsigndocumentID", EmitDefaultValue=true)]
        public int FkiEzsigndocumentID { get; set; }

        /// <summary>
        /// A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
        /// </summary>
        /// <value>A tooltip that will be presented to Ezsignsigner about the Ezsignsignature</value>
        [DataMember(Name="tEzsignsignatureTooltip", EmitDefaultValue=false)]
        public string TEzsignsignatureTooltip { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignsignatureTooltipposition
        /// </summary>
        [DataMember(Name="eEzsignsignatureTooltipposition", EmitDefaultValue=false)]
        public FieldEEzsignsignatureTooltipposition EEzsignsignatureTooltipposition { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignsignatureFont
        /// </summary>
        [DataMember(Name="eEzsignsignatureFont", EmitDefaultValue=false)]
        public FieldEEzsignsignatureFont EEzsignsignatureFont { get; set; }

        /// <summary>
        /// The unique ID of the User
        /// </summary>
        /// <value>The unique ID of the User</value>
        [DataMember(Name="fkiUserID", EmitDefaultValue=false)]
        public int FkiUserID { get; set; }

        /// <summary>
        /// Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.
        /// </summary>
        /// <value>Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType &#x3D; Attachments.</value>
        [DataMember(Name="bEzsignsignatureRequired", EmitDefaultValue=false)]
        public bool BEzsignsignatureRequired { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignsignatureAttachmentnamesource
        /// </summary>
        [DataMember(Name="eEzsignsignatureAttachmentnamesource", EmitDefaultValue=false)]
        public FieldEEzsignsignatureAttachmentnamesource EEzsignsignatureAttachmentnamesource { get; set; }

        /// <summary>
        /// The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
        /// </summary>
        /// <value>The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments</value>
        [DataMember(Name="sEzsignsignatureAttachmentdescription", EmitDefaultValue=false)]
        public string SEzsignsignatureAttachmentdescription { get; set; }

        /// <summary>
        /// The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
        /// </summary>
        /// <value>The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments</value>
        [DataMember(Name="iEzsignsignatureValidationstep", EmitDefaultValue=false)]
        public int IEzsignsignatureValidationstep { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignsignatureRequest {\n");
            sb.Append("  PkiEzsignsignatureID: ").Append(PkiEzsignsignatureID).Append("\n");
            sb.Append("  FkiEzsignfoldersignerassociationID: ").Append(FkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("  IEzsignpagePagenumber: ").Append(IEzsignpagePagenumber).Append("\n");
            sb.Append("  IEzsignsignatureX: ").Append(IEzsignsignatureX).Append("\n");
            sb.Append("  IEzsignsignatureY: ").Append(IEzsignsignatureY).Append("\n");
            sb.Append("  IEzsignsignatureStep: ").Append(IEzsignsignatureStep).Append("\n");
            sb.Append("  EEzsignsignatureType: ").Append(EEzsignsignatureType).Append("\n");
            sb.Append("  FkiEzsigndocumentID: ").Append(FkiEzsigndocumentID).Append("\n");
            sb.Append("  TEzsignsignatureTooltip: ").Append(TEzsignsignatureTooltip).Append("\n");
            sb.Append("  EEzsignsignatureTooltipposition: ").Append(EEzsignsignatureTooltipposition).Append("\n");
            sb.Append("  EEzsignsignatureFont: ").Append(EEzsignsignatureFont).Append("\n");
            sb.Append("  FkiUserID: ").Append(FkiUserID).Append("\n");
            sb.Append("  BEzsignsignatureRequired: ").Append(BEzsignsignatureRequired).Append("\n");
            sb.Append("  EEzsignsignatureAttachmentnamesource: ").Append(EEzsignsignatureAttachmentnamesource).Append("\n");
            sb.Append("  SEzsignsignatureAttachmentdescription: ").Append(SEzsignsignatureAttachmentdescription).Append("\n");
            sb.Append("  IEzsignsignatureValidationstep: ").Append(IEzsignsignatureValidationstep).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignsignatureRequest);
        }

        /// <summary>
        /// Returns true if EzsignsignatureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignsignatureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignsignatureRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiEzsignsignatureID == input.PkiEzsignsignatureID ||
                    (this.PkiEzsignsignatureID != null &&
                    this.PkiEzsignsignatureID.Equals(input.PkiEzsignsignatureID))
                ) && 
                (
                    this.FkiEzsignfoldersignerassociationID == input.FkiEzsignfoldersignerassociationID ||
                    (this.FkiEzsignfoldersignerassociationID != null &&
                    this.FkiEzsignfoldersignerassociationID.Equals(input.FkiEzsignfoldersignerassociationID))
                ) && 
                (
                    this.IEzsignpagePagenumber == input.IEzsignpagePagenumber ||
                    (this.IEzsignpagePagenumber != null &&
                    this.IEzsignpagePagenumber.Equals(input.IEzsignpagePagenumber))
                ) && 
                (
                    this.IEzsignsignatureX == input.IEzsignsignatureX ||
                    (this.IEzsignsignatureX != null &&
                    this.IEzsignsignatureX.Equals(input.IEzsignsignatureX))
                ) && 
                (
                    this.IEzsignsignatureY == input.IEzsignsignatureY ||
                    (this.IEzsignsignatureY != null &&
                    this.IEzsignsignatureY.Equals(input.IEzsignsignatureY))
                ) && 
                (
                    this.IEzsignsignatureStep == input.IEzsignsignatureStep ||
                    (this.IEzsignsignatureStep != null &&
                    this.IEzsignsignatureStep.Equals(input.IEzsignsignatureStep))
                ) && 
                (
                    this.EEzsignsignatureType == input.EEzsignsignatureType ||
                    (this.EEzsignsignatureType != null &&
                    this.EEzsignsignatureType.Equals(input.EEzsignsignatureType))
                ) && 
                (
                    this.FkiEzsigndocumentID == input.FkiEzsigndocumentID ||
                    (this.FkiEzsigndocumentID != null &&
                    this.FkiEzsigndocumentID.Equals(input.FkiEzsigndocumentID))
                ) && 
                (
                    this.TEzsignsignatureTooltip == input.TEzsignsignatureTooltip ||
                    (this.TEzsignsignatureTooltip != null &&
                    this.TEzsignsignatureTooltip.Equals(input.TEzsignsignatureTooltip))
                ) && 
                (
                    this.EEzsignsignatureTooltipposition == input.EEzsignsignatureTooltipposition ||
                    (this.EEzsignsignatureTooltipposition != null &&
                    this.EEzsignsignatureTooltipposition.Equals(input.EEzsignsignatureTooltipposition))
                ) && 
                (
                    this.EEzsignsignatureFont == input.EEzsignsignatureFont ||
                    (this.EEzsignsignatureFont != null &&
                    this.EEzsignsignatureFont.Equals(input.EEzsignsignatureFont))
                ) && 
                (
                    this.FkiUserID == input.FkiUserID ||
                    (this.FkiUserID != null &&
                    this.FkiUserID.Equals(input.FkiUserID))
                ) && 
                (
                    this.BEzsignsignatureRequired == input.BEzsignsignatureRequired ||
                    (this.BEzsignsignatureRequired != null &&
                    this.BEzsignsignatureRequired.Equals(input.BEzsignsignatureRequired))
                ) && 
                (
                    this.EEzsignsignatureAttachmentnamesource == input.EEzsignsignatureAttachmentnamesource ||
                    (this.EEzsignsignatureAttachmentnamesource != null &&
                    this.EEzsignsignatureAttachmentnamesource.Equals(input.EEzsignsignatureAttachmentnamesource))
                ) && 
                (
                    this.SEzsignsignatureAttachmentdescription == input.SEzsignsignatureAttachmentdescription ||
                    (this.SEzsignsignatureAttachmentdescription != null &&
                    this.SEzsignsignatureAttachmentdescription.Equals(input.SEzsignsignatureAttachmentdescription))
                ) && 
                (
                    this.IEzsignsignatureValidationstep == input.IEzsignsignatureValidationstep ||
                    (this.IEzsignsignatureValidationstep != null &&
                    this.IEzsignsignatureValidationstep.Equals(input.IEzsignsignatureValidationstep))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiEzsignsignatureID != null)
                    hashCode = hashCode * 59 + this.PkiEzsignsignatureID.GetHashCode();
                if (this.FkiEzsignfoldersignerassociationID != null)
                    hashCode = hashCode * 59 + this.FkiEzsignfoldersignerassociationID.GetHashCode();
                if (this.IEzsignpagePagenumber != null)
                    hashCode = hashCode * 59 + this.IEzsignpagePagenumber.GetHashCode();
                if (this.IEzsignsignatureX != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureX.GetHashCode();
                if (this.IEzsignsignatureY != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureY.GetHashCode();
                if (this.IEzsignsignatureStep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureStep.GetHashCode();
                if (this.EEzsignsignatureType != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureType.GetHashCode();
                if (this.FkiEzsigndocumentID != null)
                    hashCode = hashCode * 59 + this.FkiEzsigndocumentID.GetHashCode();
                if (this.TEzsignsignatureTooltip != null)
                    hashCode = hashCode * 59 + this.TEzsignsignatureTooltip.GetHashCode();
                if (this.EEzsignsignatureTooltipposition != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureTooltipposition.GetHashCode();
                if (this.EEzsignsignatureFont != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureFont.GetHashCode();
                if (this.FkiUserID != null)
                    hashCode = hashCode * 59 + this.FkiUserID.GetHashCode();
                if (this.BEzsignsignatureRequired != null)
                    hashCode = hashCode * 59 + this.BEzsignsignatureRequired.GetHashCode();
                if (this.EEzsignsignatureAttachmentnamesource != null)
                    hashCode = hashCode * 59 + this.EEzsignsignatureAttachmentnamesource.GetHashCode();
                if (this.SEzsignsignatureAttachmentdescription != null)
                    hashCode = hashCode * 59 + this.SEzsignsignatureAttachmentdescription.GetHashCode();
                if (this.IEzsignsignatureValidationstep != null)
                    hashCode = hashCode * 59 + this.IEzsignsignatureValidationstep.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // PkiEzsignsignatureID (int) minimum
            if(this.PkiEzsignsignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignsignatureID, must be a value greater than or equal to 0.", new [] { "PkiEzsignsignatureID" });
            }



            // FkiEzsignfoldersignerassociationID (int) minimum
            if(this.FkiEzsignfoldersignerassociationID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignfoldersignerassociationID, must be a value greater than or equal to 0.", new [] { "FkiEzsignfoldersignerassociationID" });
            }



            // IEzsignpagePagenumber (int) minimum
            if(this.IEzsignpagePagenumber < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignpagePagenumber, must be a value greater than or equal to 1.", new [] { "IEzsignpagePagenumber" });
            }



            // IEzsignsignatureX (int) minimum
            if(this.IEzsignsignatureX < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignsignatureX, must be a value greater than or equal to 0.", new [] { "IEzsignsignatureX" });
            }



            // IEzsignsignatureY (int) minimum
            if(this.IEzsignsignatureY < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IEzsignsignatureY, must be a value greater than or equal to 0.", new [] { "IEzsignsignatureY" });
            }



            // FkiEzsigndocumentID (int) minimum
            if(this.FkiEzsigndocumentID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsigndocumentID, must be a value greater than or equal to 0.", new [] { "FkiEzsigndocumentID" });
            }



            // FkiUserID (int) minimum
            if(this.FkiUserID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiUserID, must be a value greater than or equal to 0.", new [] { "FkiUserID" });
            }

            yield break;
        }
    }

}
