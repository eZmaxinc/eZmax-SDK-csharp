/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Supply AutocompleteElement Response
    /// </summary>
    [DataContract(Name = "supply-AutocompleteElement-Response")]
    public partial class SupplyAutocompleteElementResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplyAutocompleteElementResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupplyAutocompleteElementResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupplyAutocompleteElementResponse" /> class.
        /// </summary>
        /// <param name="pkiSupplyID">The unique ID of the Supply (required).</param>
        /// <param name="sSupplyDescriptionX">The description of the Supply in the language of the requester (required).</param>
        /// <param name="bSupplyIsactive">Whether the supply is active or not (required).</param>
        public SupplyAutocompleteElementResponse(int pkiSupplyID = default(int), string sSupplyDescriptionX = default(string), bool bSupplyIsactive = default(bool))
        {
            this.PkiSupplyID = pkiSupplyID;
            // to ensure "sSupplyDescriptionX" is required (not null)
            if (sSupplyDescriptionX == null)
            {
                throw new ArgumentNullException("sSupplyDescriptionX is a required property for SupplyAutocompleteElementResponse and cannot be null");
            }
            this.SSupplyDescriptionX = sSupplyDescriptionX;
            this.BSupplyIsactive = bSupplyIsactive;
        }

        /// <summary>
        /// The unique ID of the Supply
        /// </summary>
        /// <value>The unique ID of the Supply</value>
        /* <example>85</example>*/
        [DataMember(Name = "pkiSupplyID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiSupplyID { get; set; }

        /// <summary>
        /// The description of the Supply in the language of the requester
        /// </summary>
        /// <value>The description of the Supply in the language of the requester</value>
        /* <example>Letter paper package</example>*/
        [DataMember(Name = "sSupplyDescriptionX", IsRequired = true, EmitDefaultValue = true)]
        public string SSupplyDescriptionX { get; set; }

        /// <summary>
        /// Whether the supply is active or not
        /// </summary>
        /// <value>Whether the supply is active or not</value>
        /* <example>true</example>*/
        [DataMember(Name = "bSupplyIsactive", IsRequired = true, EmitDefaultValue = true)]
        public bool BSupplyIsactive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SupplyAutocompleteElementResponse {\n");
            sb.Append("  PkiSupplyID: ").Append(PkiSupplyID).Append("\n");
            sb.Append("  SSupplyDescriptionX: ").Append(SSupplyDescriptionX).Append("\n");
            sb.Append("  BSupplyIsactive: ").Append(BSupplyIsactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiSupplyID (int) maximum
            if (this.PkiSupplyID > (int)65535)
            {
                yield return new ValidationResult("Invalid value for PkiSupplyID, must be a value less than or equal to 65535.", new [] { "PkiSupplyID" });
            }

            // PkiSupplyID (int) minimum
            if (this.PkiSupplyID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiSupplyID, must be a value greater than or equal to 0.", new [] { "PkiSupplyID" });
            }

            if (this.SSupplyDescriptionX != null) {
                // SSupplyDescriptionX (string) pattern
                Regex regexSSupplyDescriptionX = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSSupplyDescriptionX.Match(this.SSupplyDescriptionX).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SSupplyDescriptionX, must match a pattern of " + regexSSupplyDescriptionX, new [] { "SSupplyDescriptionX" });
                }
            }

            yield break;
        }
    }

}
