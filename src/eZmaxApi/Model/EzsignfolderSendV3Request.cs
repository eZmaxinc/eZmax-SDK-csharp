/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /3/object/ezsignfolder/{pkiEzsignfolderID}/send
    /// </summary>
    [DataContract]
    public partial class EzsignfolderSendV3Request :  IEquatable<EzsignfolderSendV3Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderSendV3Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignfolderSendV3Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignfolderSendV3Request" /> class.
        /// </summary>
        /// <param name="tEzsignfolderMessage">A custom text message that will be added to the email sent. (required).</param>
        /// <param name="dtEzsignfolderDelayedsenddate">The date and time at which the Ezsignfolder will be sent in the future..</param>
        /// <param name="aFkiEzsignfoldersignerassociationID">aFkiEzsignfoldersignerassociationID (required).</param>
        public EzsignfolderSendV3Request(string tEzsignfolderMessage = default(string), string dtEzsignfolderDelayedsenddate = default(string), List<int> aFkiEzsignfoldersignerassociationID = default(List<int>))
        {
            // to ensure "tEzsignfolderMessage" is required (not null)
            if (tEzsignfolderMessage == null)
            {
                throw new InvalidDataException("tEzsignfolderMessage is a required property for EzsignfolderSendV3Request and cannot be null");
            }
            else
            {
                this.TEzsignfolderMessage = tEzsignfolderMessage;
            }

            // to ensure "aFkiEzsignfoldersignerassociationID" is required (not null)
            if (aFkiEzsignfoldersignerassociationID == null)
            {
                throw new InvalidDataException("aFkiEzsignfoldersignerassociationID is a required property for EzsignfolderSendV3Request and cannot be null");
            }
            else
            {
                this.AFkiEzsignfoldersignerassociationID = aFkiEzsignfoldersignerassociationID;
            }

            this.DtEzsignfolderDelayedsenddate = dtEzsignfolderDelayedsenddate;
        }

        /// <summary>
        /// A custom text message that will be added to the email sent.
        /// </summary>
        /// <value>A custom text message that will be added to the email sent.</value>
        [DataMember(Name="tEzsignfolderMessage", EmitDefaultValue=true)]
        public string TEzsignfolderMessage { get; set; }

        /// <summary>
        /// The date and time at which the Ezsignfolder will be sent in the future.
        /// </summary>
        /// <value>The date and time at which the Ezsignfolder will be sent in the future.</value>
        [DataMember(Name="dtEzsignfolderDelayedsenddate", EmitDefaultValue=false)]
        public string DtEzsignfolderDelayedsenddate { get; set; }

        /// <summary>
        /// Gets or Sets AFkiEzsignfoldersignerassociationID
        /// </summary>
        [DataMember(Name="a_fkiEzsignfoldersignerassociationID", EmitDefaultValue=true)]
        public List<int> AFkiEzsignfoldersignerassociationID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EzsignfolderSendV3Request {\n");
            sb.Append("  TEzsignfolderMessage: ").Append(TEzsignfolderMessage).Append("\n");
            sb.Append("  DtEzsignfolderDelayedsenddate: ").Append(DtEzsignfolderDelayedsenddate).Append("\n");
            sb.Append("  AFkiEzsignfoldersignerassociationID: ").Append(AFkiEzsignfoldersignerassociationID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EzsignfolderSendV3Request);
        }

        /// <summary>
        /// Returns true if EzsignfolderSendV3Request instances are equal
        /// </summary>
        /// <param name="input">Instance of EzsignfolderSendV3Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EzsignfolderSendV3Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TEzsignfolderMessage == input.TEzsignfolderMessage ||
                    (this.TEzsignfolderMessage != null &&
                    this.TEzsignfolderMessage.Equals(input.TEzsignfolderMessage))
                ) && 
                (
                    this.DtEzsignfolderDelayedsenddate == input.DtEzsignfolderDelayedsenddate ||
                    (this.DtEzsignfolderDelayedsenddate != null &&
                    this.DtEzsignfolderDelayedsenddate.Equals(input.DtEzsignfolderDelayedsenddate))
                ) && 
                (
                    this.AFkiEzsignfoldersignerassociationID == input.AFkiEzsignfoldersignerassociationID ||
                    this.AFkiEzsignfoldersignerassociationID != null &&
                    input.AFkiEzsignfoldersignerassociationID != null &&
                    this.AFkiEzsignfoldersignerassociationID.SequenceEqual(input.AFkiEzsignfoldersignerassociationID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TEzsignfolderMessage != null)
                    hashCode = hashCode * 59 + this.TEzsignfolderMessage.GetHashCode();
                if (this.DtEzsignfolderDelayedsenddate != null)
                    hashCode = hashCode * 59 + this.DtEzsignfolderDelayedsenddate.GetHashCode();
                if (this.AFkiEzsignfoldersignerassociationID != null)
                    hashCode = hashCode * 59 + this.AFkiEzsignfoldersignerassociationID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
