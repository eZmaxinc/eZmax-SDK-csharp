/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// An Ezsignelementdependency Object and children to create a complete structure
    /// </summary>
    [DataContract(Name = "ezsignelementdependency-ResponseCompound")]
    public partial class EzsignelementdependencyResponseCompound : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EEzsignelementdependencyValidation
        /// </summary>
        [DataMember(Name = "eEzsignelementdependencyValidation", IsRequired = true, EmitDefaultValue = true)]
        public FieldEEzsignelementdependencyValidation EEzsignelementdependencyValidation { get; set; }

        /// <summary>
        /// Gets or Sets EEzsignelementdependencyOperator
        /// </summary>
        [DataMember(Name = "eEzsignelementdependencyOperator", EmitDefaultValue = false)]
        public FieldEEzsignelementdependencyOperator? EEzsignelementdependencyOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignelementdependencyResponseCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignelementdependencyResponseCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignelementdependencyResponseCompound" /> class.
        /// </summary>
        /// <param name="pkiEzsignelementdependencyID">The unique ID of the Ezsignelementdependency (required).</param>
        /// <param name="fkiEzsignformfieldID">The unique ID of the Ezsignformfield.</param>
        /// <param name="fkiEzsignsignatureID">The unique ID of the Ezsignsignature.</param>
        /// <param name="fkiEzsignformfieldIDValidation">The unique ID of the Ezsignformfield.</param>
        /// <param name="fkiEzsignformfieldgroupIDValidation">The unique ID of the Ezsignformfieldgroup.</param>
        /// <param name="eEzsignelementdependencyValidation">eEzsignelementdependencyValidation (required).</param>
        /// <param name="bEzsignelementdependencySelected">Whether if it&#39;s selected or not when using eEzsignelementdependencyValidation &#x3D; Selected.</param>
        /// <param name="eEzsignelementdependencyOperator">eEzsignelementdependencyOperator.</param>
        /// <param name="sEzsignelementdependencyValue">The value of the Ezsignelementdependency.</param>
        public EzsignelementdependencyResponseCompound(int pkiEzsignelementdependencyID = default(int), int fkiEzsignformfieldID = default(int), int fkiEzsignsignatureID = default(int), int fkiEzsignformfieldIDValidation = default(int), int fkiEzsignformfieldgroupIDValidation = default(int), FieldEEzsignelementdependencyValidation eEzsignelementdependencyValidation = default(FieldEEzsignelementdependencyValidation), bool bEzsignelementdependencySelected = default(bool), FieldEEzsignelementdependencyOperator? eEzsignelementdependencyOperator = default(FieldEEzsignelementdependencyOperator?), string sEzsignelementdependencyValue = default(string))
        {
            this.PkiEzsignelementdependencyID = pkiEzsignelementdependencyID;
            this.EEzsignelementdependencyValidation = eEzsignelementdependencyValidation;
            this.FkiEzsignformfieldID = fkiEzsignformfieldID;
            this.FkiEzsignsignatureID = fkiEzsignsignatureID;
            this.FkiEzsignformfieldIDValidation = fkiEzsignformfieldIDValidation;
            this.FkiEzsignformfieldgroupIDValidation = fkiEzsignformfieldgroupIDValidation;
            this.BEzsignelementdependencySelected = bEzsignelementdependencySelected;
            this.EEzsignelementdependencyOperator = eEzsignelementdependencyOperator;
            this.SEzsignelementdependencyValue = sEzsignelementdependencyValue;
        }

        /// <summary>
        /// The unique ID of the Ezsignelementdependency
        /// </summary>
        /// <value>The unique ID of the Ezsignelementdependency</value>
        /* <example>89</example>*/
        [DataMember(Name = "pkiEzsignelementdependencyID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsignelementdependencyID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignformfield
        /// </summary>
        /// <value>The unique ID of the Ezsignformfield</value>
        /* <example>32</example>*/
        [DataMember(Name = "fkiEzsignformfieldID", EmitDefaultValue = false)]
        public int FkiEzsignformfieldID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignsignature
        /// </summary>
        /// <value>The unique ID of the Ezsignsignature</value>
        /* <example>49</example>*/
        [DataMember(Name = "fkiEzsignsignatureID", EmitDefaultValue = false)]
        public int FkiEzsignsignatureID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignformfield
        /// </summary>
        /// <value>The unique ID of the Ezsignformfield</value>
        /* <example>32</example>*/
        [DataMember(Name = "fkiEzsignformfieldIDValidation", EmitDefaultValue = false)]
        public int FkiEzsignformfieldIDValidation { get; set; }

        /// <summary>
        /// The unique ID of the Ezsignformfieldgroup
        /// </summary>
        /// <value>The unique ID of the Ezsignformfieldgroup</value>
        /* <example>26</example>*/
        [DataMember(Name = "fkiEzsignformfieldgroupIDValidation", EmitDefaultValue = false)]
        public int FkiEzsignformfieldgroupIDValidation { get; set; }

        /// <summary>
        /// Whether if it&#39;s selected or not when using eEzsignelementdependencyValidation &#x3D; Selected
        /// </summary>
        /// <value>Whether if it&#39;s selected or not when using eEzsignelementdependencyValidation &#x3D; Selected</value>
        /* <example>false</example>*/
        [DataMember(Name = "bEzsignelementdependencySelected", EmitDefaultValue = true)]
        public bool BEzsignelementdependencySelected { get; set; }

        /// <summary>
        /// The value of the Ezsignelementdependency
        /// </summary>
        /// <value>The value of the Ezsignelementdependency</value>
        /* <example>Montreal</example>*/
        [DataMember(Name = "sEzsignelementdependencyValue", EmitDefaultValue = false)]
        public string SEzsignelementdependencyValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignelementdependencyResponseCompound {\n");
            sb.Append("  PkiEzsignelementdependencyID: ").Append(PkiEzsignelementdependencyID).Append("\n");
            sb.Append("  FkiEzsignformfieldID: ").Append(FkiEzsignformfieldID).Append("\n");
            sb.Append("  FkiEzsignsignatureID: ").Append(FkiEzsignsignatureID).Append("\n");
            sb.Append("  FkiEzsignformfieldIDValidation: ").Append(FkiEzsignformfieldIDValidation).Append("\n");
            sb.Append("  FkiEzsignformfieldgroupIDValidation: ").Append(FkiEzsignformfieldgroupIDValidation).Append("\n");
            sb.Append("  EEzsignelementdependencyValidation: ").Append(EEzsignelementdependencyValidation).Append("\n");
            sb.Append("  BEzsignelementdependencySelected: ").Append(BEzsignelementdependencySelected).Append("\n");
            sb.Append("  EEzsignelementdependencyOperator: ").Append(EEzsignelementdependencyOperator).Append("\n");
            sb.Append("  SEzsignelementdependencyValue: ").Append(SEzsignelementdependencyValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsignelementdependencyID (int) maximum
            if (this.PkiEzsignelementdependencyID > (int)65535)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignelementdependencyID, must be a value less than or equal to 65535.", new [] { "PkiEzsignelementdependencyID" });
            }

            // PkiEzsignelementdependencyID (int) minimum
            if (this.PkiEzsignelementdependencyID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PkiEzsignelementdependencyID, must be a value greater than or equal to 0.", new [] { "PkiEzsignelementdependencyID" });
            }

            // FkiEzsignformfieldID (int) minimum
            if (this.FkiEzsignformfieldID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignformfieldID, must be a value greater than or equal to 0.", new [] { "FkiEzsignformfieldID" });
            }

            // FkiEzsignsignatureID (int) minimum
            if (this.FkiEzsignsignatureID < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignsignatureID, must be a value greater than or equal to 0.", new [] { "FkiEzsignsignatureID" });
            }

            // FkiEzsignformfieldIDValidation (int) minimum
            if (this.FkiEzsignformfieldIDValidation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignformfieldIDValidation, must be a value greater than or equal to 0.", new [] { "FkiEzsignformfieldIDValidation" });
            }

            // FkiEzsignformfieldgroupIDValidation (int) minimum
            if (this.FkiEzsignformfieldgroupIDValidation < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FkiEzsignformfieldgroupIDValidation, must be a value greater than or equal to 0.", new [] { "FkiEzsignformfieldgroupIDValidation" });
            }

            if (this.SEzsignelementdependencyValue != null) {
                // SEzsignelementdependencyValue (string) pattern
                Regex regexSEzsignelementdependencyValue = new Regex(@"^.{0,50}$", RegexOptions.CultureInvariant);
                if (!regexSEzsignelementdependencyValue.Match(this.SEzsignelementdependencyValue).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SEzsignelementdependencyValue, must match a pattern of " + regexSEzsignelementdependencyValue, new [] { "SEzsignelementdependencyValue" });
                }
            }

            yield break;
        }
    }

}
