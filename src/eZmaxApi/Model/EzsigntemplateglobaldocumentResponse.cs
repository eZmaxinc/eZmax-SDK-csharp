/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Ezsigntemplateglobaldocument Object
    /// </summary>
    [DataContract(Name = "ezsigntemplateglobaldocument-Response")]
    public partial class EzsigntemplateglobaldocumentResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateglobaldocumentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsigntemplateglobaldocumentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsigntemplateglobaldocumentResponse" /> class.
        /// </summary>
        /// <param name="pkiEzsigntemplateglobaldocumentID">The unique ID of the Ezsigntemplateglobaldocument (required).</param>
        /// <param name="sEzsigntemplateglobaldocumentName">The name of the Ezsigntemplateglobaldocument. (required).</param>
        /// <param name="iEzsigntemplateglobaldocumentPagetotal">The number of pages in the Ezsigntemplateglobaldocument. (required).</param>
        /// <param name="iEzsigntemplateglobaldocumentSignaturetotal">The number of total signatures in the Ezsigntemplateglobal. (required).</param>
        public EzsigntemplateglobaldocumentResponse(int pkiEzsigntemplateglobaldocumentID = default(int), string sEzsigntemplateglobaldocumentName = default(string), int iEzsigntemplateglobaldocumentPagetotal = default(int), int iEzsigntemplateglobaldocumentSignaturetotal = default(int))
        {
            this.PkiEzsigntemplateglobaldocumentID = pkiEzsigntemplateglobaldocumentID;
            // to ensure "sEzsigntemplateglobaldocumentName" is required (not null)
            if (sEzsigntemplateglobaldocumentName == null)
            {
                throw new ArgumentNullException("sEzsigntemplateglobaldocumentName is a required property for EzsigntemplateglobaldocumentResponse and cannot be null");
            }
            this.SEzsigntemplateglobaldocumentName = sEzsigntemplateglobaldocumentName;
            this.IEzsigntemplateglobaldocumentPagetotal = iEzsigntemplateglobaldocumentPagetotal;
            this.IEzsigntemplateglobaldocumentSignaturetotal = iEzsigntemplateglobaldocumentSignaturetotal;
        }

        /// <summary>
        /// The unique ID of the Ezsigntemplateglobaldocument
        /// </summary>
        /// <value>The unique ID of the Ezsigntemplateglobaldocument</value>
        /* <example>133</example>*/
        [DataMember(Name = "pkiEzsigntemplateglobaldocumentID", IsRequired = true, EmitDefaultValue = true)]
        public int PkiEzsigntemplateglobaldocumentID { get; set; }

        /// <summary>
        /// The name of the Ezsigntemplateglobaldocument.
        /// </summary>
        /// <value>The name of the Ezsigntemplateglobaldocument.</value>
        /* <example>Standard Contract</example>*/
        [DataMember(Name = "sEzsigntemplateglobaldocumentName", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsigntemplateglobaldocumentName { get; set; }

        /// <summary>
        /// The number of pages in the Ezsigntemplateglobaldocument.
        /// </summary>
        /// <value>The number of pages in the Ezsigntemplateglobaldocument.</value>
        /* <example>5</example>*/
        [DataMember(Name = "iEzsigntemplateglobaldocumentPagetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplateglobaldocumentPagetotal { get; set; }

        /// <summary>
        /// The number of total signatures in the Ezsigntemplateglobal.
        /// </summary>
        /// <value>The number of total signatures in the Ezsigntemplateglobal.</value>
        /* <example>8</example>*/
        [DataMember(Name = "iEzsigntemplateglobaldocumentSignaturetotal", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsigntemplateglobaldocumentSignaturetotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsigntemplateglobaldocumentResponse {\n");
            sb.Append("  PkiEzsigntemplateglobaldocumentID: ").Append(PkiEzsigntemplateglobaldocumentID).Append("\n");
            sb.Append("  SEzsigntemplateglobaldocumentName: ").Append(SEzsigntemplateglobaldocumentName).Append("\n");
            sb.Append("  IEzsigntemplateglobaldocumentPagetotal: ").Append(IEzsigntemplateglobaldocumentPagetotal).Append("\n");
            sb.Append("  IEzsigntemplateglobaldocumentSignaturetotal: ").Append(IEzsigntemplateglobaldocumentSignaturetotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PkiEzsigntemplateglobaldocumentID (int) minimum
            if (this.PkiEzsigntemplateglobaldocumentID < (int)0)
            {
                yield return new ValidationResult("Invalid value for PkiEzsigntemplateglobaldocumentID, must be a value greater than or equal to 0.", new [] { "PkiEzsigntemplateglobaldocumentID" });
            }

            // IEzsigntemplateglobaldocumentPagetotal (int) minimum
            if (this.IEzsigntemplateglobaldocumentPagetotal < (int)1)
            {
                yield return new ValidationResult("Invalid value for IEzsigntemplateglobaldocumentPagetotal, must be a value greater than or equal to 1.", new [] { "IEzsigntemplateglobaldocumentPagetotal" });
            }

            yield break;
        }
    }

}
