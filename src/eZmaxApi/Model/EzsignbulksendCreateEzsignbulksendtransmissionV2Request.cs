/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Request for POST /1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission
    /// </summary>
    [DataContract(Name = "ezsignbulksend-createEzsignbulksendtransmission-v2-Request")]
    public partial class EzsignbulksendCreateEzsignbulksendtransmissionV2Request : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendCreateEzsignbulksendtransmissionV2Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EzsignbulksendCreateEzsignbulksendtransmissionV2Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EzsignbulksendCreateEzsignbulksendtransmissionV2Request" /> class.
        /// </summary>
        /// <param name="fkiUserlogintypeID">The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|      (required).</param>
        /// <param name="fkiEzsigntsarequirementID">The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|.</param>
        /// <param name="sEzsignbulksendtransmissionDescription">The description of the Ezsignbulksendtransmission (required).</param>
        /// <param name="dtEzsigndocumentDuedate">The maximum date and time at which the Ezsigndocument can be signed. (required).</param>
        /// <param name="iEzsignfolderSendreminderfirstdays">The number of days before the the first reminder sending (required).</param>
        /// <param name="iEzsignfolderSendreminderotherdays">The number of days after the first reminder sending (required).</param>
        /// <param name="tExtraMessage">A custom text message that will be added to the email sent. (required).</param>
        /// <param name="sCsvBase64">The Base64 encoded binary content of the CSV file. (required).</param>
        public EzsignbulksendCreateEzsignbulksendtransmissionV2Request(int fkiUserlogintypeID = default(int), int fkiEzsigntsarequirementID = default(int), string sEzsignbulksendtransmissionDescription = default(string), string dtEzsigndocumentDuedate = default(string), int iEzsignfolderSendreminderfirstdays = default(int), int iEzsignfolderSendreminderotherdays = default(int), string tExtraMessage = default(string), byte[] sCsvBase64 = default(byte[]))
        {
            this.FkiUserlogintypeID = fkiUserlogintypeID;
            // to ensure "sEzsignbulksendtransmissionDescription" is required (not null)
            if (sEzsignbulksendtransmissionDescription == null)
            {
                throw new ArgumentNullException("sEzsignbulksendtransmissionDescription is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV2Request and cannot be null");
            }
            this.SEzsignbulksendtransmissionDescription = sEzsignbulksendtransmissionDescription;
            // to ensure "dtEzsigndocumentDuedate" is required (not null)
            if (dtEzsigndocumentDuedate == null)
            {
                throw new ArgumentNullException("dtEzsigndocumentDuedate is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV2Request and cannot be null");
            }
            this.DtEzsigndocumentDuedate = dtEzsigndocumentDuedate;
            this.IEzsignfolderSendreminderfirstdays = iEzsignfolderSendreminderfirstdays;
            this.IEzsignfolderSendreminderotherdays = iEzsignfolderSendreminderotherdays;
            // to ensure "tExtraMessage" is required (not null)
            if (tExtraMessage == null)
            {
                throw new ArgumentNullException("tExtraMessage is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV2Request and cannot be null");
            }
            this.TExtraMessage = tExtraMessage;
            // to ensure "sCsvBase64" is required (not null)
            if (sCsvBase64 == null)
            {
                throw new ArgumentNullException("sCsvBase64 is a required property for EzsignbulksendCreateEzsignbulksendtransmissionV2Request and cannot be null");
            }
            this.SCsvBase64 = sCsvBase64;
            this.FkiEzsigntsarequirementID = fkiEzsigntsarequirementID;
        }

        /// <summary>
        /// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
        /// </summary>
        /// <value>The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and there won&#39;t be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \&quot;In-Person\&quot; and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won&#39;t have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     </value>
        /* <example>2</example>*/
        [DataMember(Name = "fkiUserlogintypeID", IsRequired = true, EmitDefaultValue = true)]
        public int FkiUserlogintypeID { get; set; }

        /// <summary>
        /// The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
        /// </summary>
        /// <value>The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server&#39;s time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server&#39;s time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|</value>
        /* <example>1</example>*/
        [DataMember(Name = "fkiEzsigntsarequirementID", EmitDefaultValue = false)]
        public int FkiEzsigntsarequirementID { get; set; }

        /// <summary>
        /// The description of the Ezsignbulksendtransmission
        /// </summary>
        /// <value>The description of the Ezsignbulksendtransmission</value>
        /* <example>Test eZsign Bulk Send Transmission #1</example>*/
        [DataMember(Name = "sEzsignbulksendtransmissionDescription", IsRequired = true, EmitDefaultValue = true)]
        public string SEzsignbulksendtransmissionDescription { get; set; }

        /// <summary>
        /// The maximum date and time at which the Ezsigndocument can be signed.
        /// </summary>
        /// <value>The maximum date and time at which the Ezsigndocument can be signed.</value>
        /* <example>2020-12-31 23:59:59</example>*/
        [DataMember(Name = "dtEzsigndocumentDuedate", IsRequired = true, EmitDefaultValue = true)]
        public string DtEzsigndocumentDuedate { get; set; }

        /// <summary>
        /// The number of days before the the first reminder sending
        /// </summary>
        /// <value>The number of days before the the first reminder sending</value>
        /* <example>30</example>*/
        [DataMember(Name = "iEzsignfolderSendreminderfirstdays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfolderSendreminderfirstdays { get; set; }

        /// <summary>
        /// The number of days after the first reminder sending
        /// </summary>
        /// <value>The number of days after the first reminder sending</value>
        /* <example>30</example>*/
        [DataMember(Name = "iEzsignfolderSendreminderotherdays", IsRequired = true, EmitDefaultValue = true)]
        public int IEzsignfolderSendreminderotherdays { get; set; }

        /// <summary>
        /// A custom text message that will be added to the email sent.
        /// </summary>
        /// <value>A custom text message that will be added to the email sent.</value>
        /* <example>Hi John,

This is the document I need you to review.

Could you sign it before Monday please.

Best Regards.

Mary</example>*/
        [DataMember(Name = "tExtraMessage", IsRequired = true, EmitDefaultValue = true)]
        public string TExtraMessage { get; set; }

        /// <summary>
        /// The Base64 encoded binary content of the CSV file.
        /// </summary>
        /// <value>The Base64 encoded binary content of the CSV file.</value>
        [DataMember(Name = "sCsvBase64", IsRequired = true, EmitDefaultValue = true)]
        public byte[] SCsvBase64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EzsignbulksendCreateEzsignbulksendtransmissionV2Request {\n");
            sb.Append("  FkiUserlogintypeID: ").Append(FkiUserlogintypeID).Append("\n");
            sb.Append("  FkiEzsigntsarequirementID: ").Append(FkiEzsigntsarequirementID).Append("\n");
            sb.Append("  SEzsignbulksendtransmissionDescription: ").Append(SEzsignbulksendtransmissionDescription).Append("\n");
            sb.Append("  DtEzsigndocumentDuedate: ").Append(DtEzsigndocumentDuedate).Append("\n");
            sb.Append("  IEzsignfolderSendreminderfirstdays: ").Append(IEzsignfolderSendreminderfirstdays).Append("\n");
            sb.Append("  IEzsignfolderSendreminderotherdays: ").Append(IEzsignfolderSendreminderotherdays).Append("\n");
            sb.Append("  TExtraMessage: ").Append(TExtraMessage).Append("\n");
            sb.Append("  SCsvBase64: ").Append(SCsvBase64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FkiUserlogintypeID (int) minimum
            if (this.FkiUserlogintypeID < (int)0)
            {
                yield return new ValidationResult("Invalid value for FkiUserlogintypeID, must be a value greater than or equal to 0.", new [] { "FkiUserlogintypeID" });
            }

            // FkiEzsigntsarequirementID (int) maximum
            if (this.FkiEzsigntsarequirementID > (int)3)
            {
                yield return new ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value less than or equal to 3.", new [] { "FkiEzsigntsarequirementID" });
            }

            // FkiEzsigntsarequirementID (int) minimum
            if (this.FkiEzsigntsarequirementID < (int)1)
            {
                yield return new ValidationResult("Invalid value for FkiEzsigntsarequirementID, must be a value greater than or equal to 1.", new [] { "FkiEzsigntsarequirementID" });
            }

            // IEzsignfolderSendreminderfirstdays (int) maximum
            if (this.IEzsignfolderSendreminderfirstdays > (int)255)
            {
                yield return new ValidationResult("Invalid value for IEzsignfolderSendreminderfirstdays, must be a value less than or equal to 255.", new [] { "IEzsignfolderSendreminderfirstdays" });
            }

            // IEzsignfolderSendreminderfirstdays (int) minimum
            if (this.IEzsignfolderSendreminderfirstdays < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsignfolderSendreminderfirstdays, must be a value greater than or equal to 0.", new [] { "IEzsignfolderSendreminderfirstdays" });
            }

            // IEzsignfolderSendreminderotherdays (int) maximum
            if (this.IEzsignfolderSendreminderotherdays > (int)255)
            {
                yield return new ValidationResult("Invalid value for IEzsignfolderSendreminderotherdays, must be a value less than or equal to 255.", new [] { "IEzsignfolderSendreminderotherdays" });
            }

            // IEzsignfolderSendreminderotherdays (int) minimum
            if (this.IEzsignfolderSendreminderotherdays < (int)0)
            {
                yield return new ValidationResult("Invalid value for IEzsignfolderSendreminderotherdays, must be a value greater than or equal to 0.", new [] { "IEzsignfolderSendreminderotherdays" });
            }

            yield break;
        }
    }

}
