/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.1.18
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// A Cors Object and children
    /// </summary>
    [DataContract]
    public partial class CorsRequestCompound :  IEquatable<CorsRequestCompound>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorsRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CorsRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CorsRequestCompound" /> class.
        /// </summary>
        /// <param name="pkiCorsID">The unique ID of the Cors.</param>
        /// <param name="fkiApikeyID">The unique ID of the Apikey (required).</param>
        /// <param name="sCorsEntryurl">The entryurl of the Cors (required).</param>
        public CorsRequestCompound(int pkiCorsID = default(int), int fkiApikeyID = default(int), string sCorsEntryurl = default(string))
        {
            // to ensure "fkiApikeyID" is required (not null)
            if (fkiApikeyID == null)
            {
                throw new InvalidDataException("fkiApikeyID is a required property for CorsRequestCompound and cannot be null");
            }
            else
            {
                this.FkiApikeyID = fkiApikeyID;
            }

            // to ensure "sCorsEntryurl" is required (not null)
            if (sCorsEntryurl == null)
            {
                throw new InvalidDataException("sCorsEntryurl is a required property for CorsRequestCompound and cannot be null");
            }
            else
            {
                this.SCorsEntryurl = sCorsEntryurl;
            }

            this.PkiCorsID = pkiCorsID;
        }

        /// <summary>
        /// The unique ID of the Cors
        /// </summary>
        /// <value>The unique ID of the Cors</value>
        [DataMember(Name="pkiCorsID", EmitDefaultValue=false)]
        public int PkiCorsID { get; set; }

        /// <summary>
        /// The unique ID of the Apikey
        /// </summary>
        /// <value>The unique ID of the Apikey</value>
        [DataMember(Name="fkiApikeyID", EmitDefaultValue=true)]
        public int FkiApikeyID { get; set; }

        /// <summary>
        /// The entryurl of the Cors
        /// </summary>
        /// <value>The entryurl of the Cors</value>
        [DataMember(Name="sCorsEntryurl", EmitDefaultValue=true)]
        public string SCorsEntryurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorsRequestCompound {\n");
            sb.Append("  PkiCorsID: ").Append(PkiCorsID).Append("\n");
            sb.Append("  FkiApikeyID: ").Append(FkiApikeyID).Append("\n");
            sb.Append("  SCorsEntryurl: ").Append(SCorsEntryurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CorsRequestCompound);
        }

        /// <summary>
        /// Returns true if CorsRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of CorsRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorsRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PkiCorsID == input.PkiCorsID ||
                    (this.PkiCorsID != null &&
                    this.PkiCorsID.Equals(input.PkiCorsID))
                ) && 
                (
                    this.FkiApikeyID == input.FkiApikeyID ||
                    (this.FkiApikeyID != null &&
                    this.FkiApikeyID.Equals(input.FkiApikeyID))
                ) && 
                (
                    this.SCorsEntryurl == input.SCorsEntryurl ||
                    (this.SCorsEntryurl != null &&
                    this.SCorsEntryurl.Equals(input.SCorsEntryurl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkiCorsID != null)
                    hashCode = hashCode * 59 + this.PkiCorsID.GetHashCode();
                if (this.FkiApikeyID != null)
                    hashCode = hashCode * 59 + this.FkiApikeyID.GetHashCode();
                if (this.SCorsEntryurl != null)
                    hashCode = hashCode * 59 + this.SCorsEntryurl.GetHashCode();
                return hashCode;
            }
        }
    }

}
