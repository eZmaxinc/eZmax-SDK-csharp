/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Definition of Filters for getList
    /// </summary>
    [DataContract]
    public partial class CommonResponseFilter :  IEquatable<CommonResponseFilter>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseFilter" /> class.
        /// </summary>
        /// <param name="aAutoType">List of filters that can be used in *sFilter* (Automatic types).</param>
        /// <param name="aAutoTypeHaving">List of computed filters that can be used in *sFilter* (Automatic types).</param>
        /// <param name="aEnum">List of filters that can be used in *sFilter* (Enum types).</param>
        public CommonResponseFilter(Dictionary<string, string> aAutoType = default(Dictionary<string, string>), Dictionary<string, string> aAutoTypeHaving = default(Dictionary<string, string>), Dictionary<string, Dictionary<string, string>> aEnum = default(Dictionary<string, Dictionary<string, string>>))
        {
            this.AAutoType = aAutoType;
            this.AAutoTypeHaving = aAutoTypeHaving;
            this.AEnum = aEnum;
        }

        /// <summary>
        /// List of filters that can be used in *sFilter* (Automatic types)
        /// </summary>
        /// <value>List of filters that can be used in *sFilter* (Automatic types)</value>
        [DataMember(Name="a_AutoType", EmitDefaultValue=false)]
        public Dictionary<string, string> AAutoType { get; set; }

        /// <summary>
        /// List of computed filters that can be used in *sFilter* (Automatic types)
        /// </summary>
        /// <value>List of computed filters that can be used in *sFilter* (Automatic types)</value>
        [DataMember(Name="a_AutoTypeHaving", EmitDefaultValue=false)]
        public Dictionary<string, string> AAutoTypeHaving { get; set; }

        /// <summary>
        /// List of filters that can be used in *sFilter* (Enum types)
        /// </summary>
        /// <value>List of filters that can be used in *sFilter* (Enum types)</value>
        [DataMember(Name="a_Enum", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, string>> AEnum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonResponseFilter {\n");
            sb.Append("  AAutoType: ").Append(AAutoType).Append("\n");
            sb.Append("  AAutoTypeHaving: ").Append(AAutoTypeHaving).Append("\n");
            sb.Append("  AEnum: ").Append(AEnum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonResponseFilter);
        }

        /// <summary>
        /// Returns true if CommonResponseFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonResponseFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonResponseFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AAutoType == input.AAutoType ||
                    this.AAutoType != null &&
                    input.AAutoType != null &&
                    this.AAutoType.SequenceEqual(input.AAutoType)
                ) && 
                (
                    this.AAutoTypeHaving == input.AAutoTypeHaving ||
                    this.AAutoTypeHaving != null &&
                    input.AAutoTypeHaving != null &&
                    this.AAutoTypeHaving.SequenceEqual(input.AAutoTypeHaving)
                ) && 
                (
                    this.AEnum == input.AEnum ||
                    this.AEnum != null &&
                    input.AEnum != null &&
                    this.AEnum.SequenceEqual(input.AEnum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AAutoType != null)
                    hashCode = hashCode * 59 + this.AAutoType.GetHashCode();
                if (this.AAutoTypeHaving != null)
                    hashCode = hashCode * 59 + this.AAutoTypeHaving.GetHashCode();
                if (this.AEnum != null)
                    hashCode = hashCode * 59 + this.AEnum.GetHashCode();
                return hashCode;
            }
        }
    }

}
