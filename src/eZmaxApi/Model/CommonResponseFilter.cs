/*
 * eZmax API Definition (Full)
 *
 * This API expose all the functionnalities for the eZmax and eZsign applications.
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxApi.Client.OpenAPIDateConverter;

namespace eZmaxApi.Model
{
    /// <summary>
    /// Definition of Filters for getList
    /// </summary>
    [DataContract(Name = "Common-Response-Filter")]
    public partial class CommonResponseFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonResponseFilter" /> class.
        /// </summary>
        /// <param name="aAutoType">List of filters that can be used in *sFilter* (Automatic types).</param>
        /// <param name="aAutoTypeHaving">List of computed filters that can be used in *sFilter* (Automatic types).</param>
        /// <param name="aEnum">List of filters that can be used in *sFilter* (Enum types).</param>
        public CommonResponseFilter(Dictionary<string, string> aAutoType = default(Dictionary<string, string>), Dictionary<string, string> aAutoTypeHaving = default(Dictionary<string, string>), Dictionary<string, Dictionary<string, string>> aEnum = default(Dictionary<string, Dictionary<string, string>>))
        {
            this.AAutoType = aAutoType;
            this.AAutoTypeHaving = aAutoTypeHaving;
            this.AEnum = aEnum;
        }

        /// <summary>
        /// List of filters that can be used in *sFilter* (Automatic types)
        /// </summary>
        /// <value>List of filters that can be used in *sFilter* (Automatic types)</value>
        [DataMember(Name = "a_AutoType", EmitDefaultValue = false)]
        public Dictionary<string, string> AAutoType { get; set; }

        /// <summary>
        /// List of computed filters that can be used in *sFilter* (Automatic types)
        /// </summary>
        /// <value>List of computed filters that can be used in *sFilter* (Automatic types)</value>
        [DataMember(Name = "a_AutoTypeHaving", EmitDefaultValue = false)]
        public Dictionary<string, string> AAutoTypeHaving { get; set; }

        /// <summary>
        /// List of filters that can be used in *sFilter* (Enum types)
        /// </summary>
        /// <value>List of filters that can be used in *sFilter* (Enum types)</value>
        [DataMember(Name = "a_Enum", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, string>> AEnum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonResponseFilter {\n");
            sb.Append("  AAutoType: ").Append(AAutoType).Append("\n");
            sb.Append("  AAutoTypeHaving: ").Append(AAutoTypeHaving).Append("\n");
            sb.Append("  AEnum: ").Append(AEnum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
