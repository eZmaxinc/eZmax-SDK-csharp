/* 
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign application.
 *
 * The version of the OpenAPI document: 1.0.30
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxinc/eZmax-SDK-csharp.Client.OpenAPIDateConverter;

namespace eZmaxinc/eZmax-SDK-csharp.Model
{
    /// <summary>
    /// A Contact Object
    /// </summary>
    [DataContract]
    public partial class EmailRequest :  IEquatable<EmailRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailRequest" /> class.
        /// </summary>
        /// <param name="fkiEmailtypeID">The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| (required).</param>
        /// <param name="sEmailAddress">The email address. (required).</param>
        public EmailRequest(int fkiEmailtypeID = default(int), string sEmailAddress = default(string))
        {
            // to ensure "fkiEmailtypeID" is required (not null)
            if (fkiEmailtypeID == null)
            {
                throw new InvalidDataException("fkiEmailtypeID is a required property for EmailRequest and cannot be null");
            }
            else
            {
                this.fkiEmailtypeID = fkiEmailtypeID;
            }
            
            // to ensure "sEmailAddress" is required (not null)
            if (sEmailAddress == null)
            {
                throw new InvalidDataException("sEmailAddress is a required property for EmailRequest and cannot be null");
            }
            else
            {
                this.sEmailAddress = sEmailAddress;
            }
            
        }
        
        /// <summary>
        /// The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
        /// </summary>
        /// <value>The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|</value>
        [DataMember(Name="fkiEmailtypeID", EmitDefaultValue=true)]
        public int fkiEmailtypeID { get; set; }

        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="sEmailAddress", EmitDefaultValue=true)]
        public string sEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailRequest {\n");
            sb.Append("  fkiEmailtypeID: ").Append(fkiEmailtypeID).Append("\n");
            sb.Append("  sEmailAddress: ").Append(sEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailRequest);
        }

        /// <summary>
        /// Returns true if EmailRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.fkiEmailtypeID == input.fkiEmailtypeID ||
                    (this.fkiEmailtypeID != null &&
                    this.fkiEmailtypeID.Equals(input.fkiEmailtypeID))
                ) && 
                (
                    this.sEmailAddress == input.sEmailAddress ||
                    (this.sEmailAddress != null &&
                    this.sEmailAddress.Equals(input.sEmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.fkiEmailtypeID != null)
                    hashCode = hashCode * 59 + this.fkiEmailtypeID.GetHashCode();
                if (this.sEmailAddress != null)
                    hashCode = hashCode * 59 + this.sEmailAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
