/* 
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.15
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = eZmaxinc/eZmax-SDK-csharp.Client.OpenAPIDateConverter;

namespace eZmaxinc/eZmax-SDK-csharp.Model
{
    /// <summary>
    /// A Contact Object and children to create a complete structure
    /// </summary>
    [DataContract]
    public partial class ContactRequestCompound :  IEquatable<ContactRequestCompound>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRequestCompound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactRequestCompound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactRequestCompound" /> class.
        /// </summary>
        /// <param name="objContactinformations">objContactinformations (required).</param>
        /// <param name="fkiContacttitleID">The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)| (required).</param>
        /// <param name="fkiLanguageID">The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| (required).</param>
        /// <param name="sContactFirstname">The First name of the contact (required).</param>
        /// <param name="sContactLastname">The Last name of the contact (required).</param>
        /// <param name="sContactCompany">The Company name of the contact (required).</param>
        /// <param name="dtContactBirthdate">The Birth Date of the contact.</param>
        public ContactRequestCompound(ContactinformationsRequestCompound objContactinformations = default(ContactinformationsRequestCompound), int fkiContacttitleID = default(int), int fkiLanguageID = default(int), string sContactFirstname = default(string), string sContactLastname = default(string), string sContactCompany = default(string), string dtContactBirthdate = default(string))
        {
            // to ensure "objContactinformations" is required (not null)
            if (objContactinformations == null)
            {
                throw new InvalidDataException("objContactinformations is a required property for ContactRequestCompound and cannot be null");
            }
            else
            {
                this.objContactinformations = objContactinformations;
            }
            
            // to ensure "fkiContacttitleID" is required (not null)
            if (fkiContacttitleID == null)
            {
                throw new InvalidDataException("fkiContacttitleID is a required property for ContactRequestCompound and cannot be null");
            }
            else
            {
                this.fkiContacttitleID = fkiContacttitleID;
            }
            
            // to ensure "fkiLanguageID" is required (not null)
            if (fkiLanguageID == null)
            {
                throw new InvalidDataException("fkiLanguageID is a required property for ContactRequestCompound and cannot be null");
            }
            else
            {
                this.fkiLanguageID = fkiLanguageID;
            }
            
            // to ensure "sContactFirstname" is required (not null)
            if (sContactFirstname == null)
            {
                throw new InvalidDataException("sContactFirstname is a required property for ContactRequestCompound and cannot be null");
            }
            else
            {
                this.sContactFirstname = sContactFirstname;
            }
            
            // to ensure "sContactLastname" is required (not null)
            if (sContactLastname == null)
            {
                throw new InvalidDataException("sContactLastname is a required property for ContactRequestCompound and cannot be null");
            }
            else
            {
                this.sContactLastname = sContactLastname;
            }
            
            // to ensure "sContactCompany" is required (not null)
            if (sContactCompany == null)
            {
                throw new InvalidDataException("sContactCompany is a required property for ContactRequestCompound and cannot be null");
            }
            else
            {
                this.sContactCompany = sContactCompany;
            }
            
            this.dtContactBirthdate = dtContactBirthdate;
        }
        
        /// <summary>
        /// Gets or Sets objContactinformations
        /// </summary>
        [DataMember(Name="objContactinformations", EmitDefaultValue=true)]
        public ContactinformationsRequestCompound objContactinformations { get; set; }

        /// <summary>
        /// The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
        /// </summary>
        /// <value>The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|</value>
        [DataMember(Name="fkiContacttitleID", EmitDefaultValue=true)]
        public int fkiContacttitleID { get; set; }

        /// <summary>
        /// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
        /// </summary>
        /// <value>The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|</value>
        [DataMember(Name="fkiLanguageID", EmitDefaultValue=true)]
        public int fkiLanguageID { get; set; }

        /// <summary>
        /// The First name of the contact
        /// </summary>
        /// <value>The First name of the contact</value>
        [DataMember(Name="sContactFirstname", EmitDefaultValue=true)]
        public string sContactFirstname { get; set; }

        /// <summary>
        /// The Last name of the contact
        /// </summary>
        /// <value>The Last name of the contact</value>
        [DataMember(Name="sContactLastname", EmitDefaultValue=true)]
        public string sContactLastname { get; set; }

        /// <summary>
        /// The Company name of the contact
        /// </summary>
        /// <value>The Company name of the contact</value>
        [DataMember(Name="sContactCompany", EmitDefaultValue=true)]
        public string sContactCompany { get; set; }

        /// <summary>
        /// The Birth Date of the contact
        /// </summary>
        /// <value>The Birth Date of the contact</value>
        [DataMember(Name="dtContactBirthdate", EmitDefaultValue=false)]
        public string dtContactBirthdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactRequestCompound {\n");
            sb.Append("  objContactinformations: ").Append(objContactinformations).Append("\n");
            sb.Append("  fkiContacttitleID: ").Append(fkiContacttitleID).Append("\n");
            sb.Append("  fkiLanguageID: ").Append(fkiLanguageID).Append("\n");
            sb.Append("  sContactFirstname: ").Append(sContactFirstname).Append("\n");
            sb.Append("  sContactLastname: ").Append(sContactLastname).Append("\n");
            sb.Append("  sContactCompany: ").Append(sContactCompany).Append("\n");
            sb.Append("  dtContactBirthdate: ").Append(dtContactBirthdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactRequestCompound);
        }

        /// <summary>
        /// Returns true if ContactRequestCompound instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactRequestCompound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactRequestCompound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.objContactinformations == input.objContactinformations ||
                    (this.objContactinformations != null &&
                    this.objContactinformations.Equals(input.objContactinformations))
                ) && 
                (
                    this.fkiContacttitleID == input.fkiContacttitleID ||
                    (this.fkiContacttitleID != null &&
                    this.fkiContacttitleID.Equals(input.fkiContacttitleID))
                ) && 
                (
                    this.fkiLanguageID == input.fkiLanguageID ||
                    (this.fkiLanguageID != null &&
                    this.fkiLanguageID.Equals(input.fkiLanguageID))
                ) && 
                (
                    this.sContactFirstname == input.sContactFirstname ||
                    (this.sContactFirstname != null &&
                    this.sContactFirstname.Equals(input.sContactFirstname))
                ) && 
                (
                    this.sContactLastname == input.sContactLastname ||
                    (this.sContactLastname != null &&
                    this.sContactLastname.Equals(input.sContactLastname))
                ) && 
                (
                    this.sContactCompany == input.sContactCompany ||
                    (this.sContactCompany != null &&
                    this.sContactCompany.Equals(input.sContactCompany))
                ) && 
                (
                    this.dtContactBirthdate == input.dtContactBirthdate ||
                    (this.dtContactBirthdate != null &&
                    this.dtContactBirthdate.Equals(input.dtContactBirthdate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.objContactinformations != null)
                    hashCode = hashCode * 59 + this.objContactinformations.GetHashCode();
                if (this.fkiContacttitleID != null)
                    hashCode = hashCode * 59 + this.fkiContacttitleID.GetHashCode();
                if (this.fkiLanguageID != null)
                    hashCode = hashCode * 59 + this.fkiLanguageID.GetHashCode();
                if (this.sContactFirstname != null)
                    hashCode = hashCode * 59 + this.sContactFirstname.GetHashCode();
                if (this.sContactLastname != null)
                    hashCode = hashCode * 59 + this.sContactLastname.GetHashCode();
                if (this.sContactCompany != null)
                    hashCode = hashCode * 59 + this.sContactCompany.GetHashCode();
                if (this.dtContactBirthdate != null)
                    hashCode = hashCode * 59 + this.dtContactBirthdate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // fkiLanguageID (int) maximum
            if(this.fkiLanguageID > (int)2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for fkiLanguageID, must be a value less than or equal to 2.", new [] { "fkiLanguageID" });
            }

            // fkiLanguageID (int) minimum
            if(this.fkiLanguageID < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for fkiLanguageID, must be a value greater than or equal to 1.", new [] { "fkiLanguageID" });
            }

            yield break;
        }
    }

}
