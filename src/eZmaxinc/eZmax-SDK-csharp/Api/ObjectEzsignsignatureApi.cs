/* 
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.29
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxinc/eZmax-SDK-csharp.Client;
using eZmaxinc/eZmax-SDK-csharp.Model;

namespace eZmaxinc/eZmax-SDK-csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsignsignatureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <returns>EzsignsignatureCreateObjectV1Response</returns>
        EzsignsignatureCreateObjectV1Response EzsignsignatureCreateObjectV1 (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV1Response</returns>
        ApiResponse<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1WithHttpInfo (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>EzsignsignatureDeleteObjectV1Response</returns>
        EzsignsignatureDeleteObjectV1Response EzsignsignatureDeleteObjectV1 (int pkiEzsignsignatureID);

        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>ApiResponse of EzsignsignatureDeleteObjectV1Response</returns>
        ApiResponse<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1WithHttpInfo (int pkiEzsignsignatureID);
        /// <summary>
        /// Modify an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <returns>EzsignsignatureEditObjectV1Response</returns>
        EzsignsignatureEditObjectV1Response EzsignsignatureEditObjectV1 (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request);

        /// <summary>
        /// Modify an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignatureEditObjectV1Response</returns>
        ApiResponse<EzsignsignatureEditObjectV1Response> EzsignsignatureEditObjectV1WithHttpInfo (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request);
        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns></returns>
        void EzsignsignatureGetChildrenV1 (int pkiEzsignsignatureID);

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EzsignsignatureGetChildrenV1WithHttpInfo (int pkiEzsignsignatureID);
        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>EzsignsignatureGetObjectV1Response</returns>
        EzsignsignatureGetObjectV1Response EzsignsignatureGetObjectV1 (int pkiEzsignsignatureID);

        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>ApiResponse of EzsignsignatureGetObjectV1Response</returns>
        ApiResponse<EzsignsignatureGetObjectV1Response> EzsignsignatureGetObjectV1WithHttpInfo (int pkiEzsignsignatureID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1Async (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsignsignature
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureCreateObjectV1Response>> EzsignsignatureCreateObjectV1WithHttpInfoAsync (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1Async (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureDeleteObjectV1Response>> EzsignsignatureDeleteObjectV1WithHttpInfoAsync (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Modify an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureEditObjectV1Response> EzsignsignatureEditObjectV1Async (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Modify an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureEditObjectV1Response>> EzsignsignatureEditObjectV1WithHttpInfoAsync (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EzsignsignatureGetChildrenV1Async (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EzsignsignatureGetChildrenV1WithHttpInfoAsync (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsignsignatureGetObjectV1Response> EzsignsignatureGetObjectV1Async (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsignsignature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsignsignatureGetObjectV1Response>> EzsignsignatureGetObjectV1WithHttpInfoAsync (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsignsignatureApi : IObjectEzsignsignatureApi
    {
        private eZmaxinc/eZmax-SDK-csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignatureApi(String basePath)
        {
            this.Configuration = new eZmaxinc/eZmax-SDK-csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsignsignatureApi()
        {
            this.Configuration = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.Default;

            ExceptionFactory = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsignsignatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsignsignatureApi(eZmaxinc/eZmax-SDK-csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxinc/eZmax-SDK-csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxinc/eZmax-SDK-csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <returns>EzsignsignatureCreateObjectV1Response</returns>
        public EzsignsignatureCreateObjectV1Response EzsignsignatureCreateObjectV1 (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request)
        {
             ApiResponse<EzsignsignatureCreateObjectV1Response> localVarResponse = EzsignsignatureCreateObjectV1WithHttpInfo(ezsignsignatureCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignatureCreateObjectV1Response</returns>
        public ApiResponse<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1WithHttpInfo (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request)
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV1Request' is set
            if (ezsignsignatureCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV1");

            var localVarPath = "/1/object/ezsignsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignsignatureCreateObjectV1Request != null && ezsignsignatureCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignatureCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignatureCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureCreateObjectV1Response> EzsignsignatureCreateObjectV1Async (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignatureCreateObjectV1Response> localVarResponse = await EzsignsignatureCreateObjectV1WithHttpInfoAsync(ezsignsignatureCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsignsignature The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsignsignatureCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignatureCreateObjectV1Response>> EzsignsignatureCreateObjectV1WithHttpInfoAsync (List<EzsignsignatureCreateObjectV1Request> ezsignsignatureCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsignsignatureCreateObjectV1Request' is set
            if (ezsignsignatureCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignatureCreateObjectV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureCreateObjectV1");

            var localVarPath = "/1/object/ezsignsignature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsignsignatureCreateObjectV1Request != null && ezsignsignatureCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignatureCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignatureCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>EzsignsignatureDeleteObjectV1Response</returns>
        public EzsignsignatureDeleteObjectV1Response EzsignsignatureDeleteObjectV1 (int pkiEzsignsignatureID)
        {
             ApiResponse<EzsignsignatureDeleteObjectV1Response> localVarResponse = EzsignsignatureDeleteObjectV1WithHttpInfo(pkiEzsignsignatureID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>ApiResponse of EzsignsignatureDeleteObjectV1Response</returns>
        public ApiResponse<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1WithHttpInfo (int pkiEzsignsignatureID)
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureDeleteObjectV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureDeleteObjectV1Response> EzsignsignatureDeleteObjectV1Async (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignatureDeleteObjectV1Response> localVarResponse = await EzsignsignatureDeleteObjectV1WithHttpInfoAsync(pkiEzsignsignatureID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignatureDeleteObjectV1Response>> EzsignsignatureDeleteObjectV1WithHttpInfoAsync (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureDeleteObjectV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureDeleteObjectV1Response)));
        }

        /// <summary>
        /// Modify an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <returns>EzsignsignatureEditObjectV1Response</returns>
        public EzsignsignatureEditObjectV1Response EzsignsignatureEditObjectV1 (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request)
        {
             ApiResponse<EzsignsignatureEditObjectV1Response> localVarResponse = EzsignsignatureEditObjectV1WithHttpInfo(pkiEzsignsignatureID, ezsignsignatureEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsignsignatureEditObjectV1Response</returns>
        public ApiResponse<EzsignsignatureEditObjectV1Response> EzsignsignatureEditObjectV1WithHttpInfo (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureEditObjectV1");
            // verify the required parameter 'ezsignsignatureEditObjectV1Request' is set
            if (ezsignsignatureEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignatureEditObjectV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureEditObjectV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter
            if (ezsignsignatureEditObjectV1Request != null && ezsignsignatureEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignatureEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignatureEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureEditObjectV1Response)));
        }

        /// <summary>
        /// Modify an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureEditObjectV1Response> EzsignsignatureEditObjectV1Async (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignatureEditObjectV1Response> localVarResponse = await EzsignsignatureEditObjectV1WithHttpInfoAsync(pkiEzsignsignatureID, ezsignsignatureEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="ezsignsignatureEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignatureEditObjectV1Response>> EzsignsignatureEditObjectV1WithHttpInfoAsync (int pkiEzsignsignatureID, EzsignsignatureEditObjectV1Request ezsignsignatureEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureEditObjectV1");
            // verify the required parameter 'ezsignsignatureEditObjectV1Request' is set
            if (ezsignsignatureEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsignsignatureEditObjectV1Request' when calling ObjectEzsignsignatureApi->EzsignsignatureEditObjectV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter
            if (ezsignsignatureEditObjectV1Request != null && ezsignsignatureEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsignsignatureEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsignsignatureEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns></returns>
        public void EzsignsignatureGetChildrenV1 (int pkiEzsignsignatureID)
        {
             EzsignsignatureGetChildrenV1WithHttpInfo(pkiEzsignsignatureID);
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EzsignsignatureGetChildrenV1WithHttpInfo (int pkiEzsignsignatureID)
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureGetChildrenV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}/getChildren";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureGetChildrenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EzsignsignatureGetChildrenV1Async (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             await EzsignsignatureGetChildrenV1WithHttpInfoAsync(pkiEzsignsignatureID, cancellationToken);

        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EzsignsignatureGetChildrenV1WithHttpInfoAsync (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureGetChildrenV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}/getChildren";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureGetChildrenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>EzsignsignatureGetObjectV1Response</returns>
        public EzsignsignatureGetObjectV1Response EzsignsignatureGetObjectV1 (int pkiEzsignsignatureID)
        {
             ApiResponse<EzsignsignatureGetObjectV1Response> localVarResponse = EzsignsignatureGetObjectV1WithHttpInfo(pkiEzsignsignatureID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <returns>ApiResponse of EzsignsignatureGetObjectV1Response</returns>
        public ApiResponse<EzsignsignatureGetObjectV1Response> EzsignsignatureGetObjectV1WithHttpInfo (int pkiEzsignsignatureID)
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureGetObjectV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsignsignatureGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsignsignatureGetObjectV1Response> EzsignsignatureGetObjectV1Async (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsignsignatureGetObjectV1Response> localVarResponse = await EzsignsignatureGetObjectV1WithHttpInfoAsync(pkiEzsignsignatureID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsignsignature 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsignsignatureID">The unique ID of the Ezsignsignature</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsignsignatureGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsignsignatureGetObjectV1Response>> EzsignsignatureGetObjectV1WithHttpInfoAsync (int pkiEzsignsignatureID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsignsignatureID' is set
            if (pkiEzsignsignatureID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsignsignatureID' when calling ObjectEzsignsignatureApi->EzsignsignatureGetObjectV1");

            var localVarPath = "/1/object/ezsignsignature/{pkiEzsignsignatureID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsignsignatureID != null) localVarPathParams.Add("pkiEzsignsignatureID", this.Configuration.ApiClient.ParameterToString(pkiEzsignsignatureID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsignsignatureGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsignsignatureGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsignsignatureGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsignsignatureGetObjectV1Response)));
        }

    }
}
