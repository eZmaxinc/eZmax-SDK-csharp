/* 
 * eZmax API Definition
 *
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.22
 * Contact: support-api@ezmax.ca
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using eZmaxinc/eZmax-SDK-csharp.Client;
using eZmaxinc/eZmax-SDK-csharp.Model;

namespace eZmaxinc/eZmax-SDK-csharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IObjectEzsigndocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <returns>EzsigndocumentApplyEzsigntemplateV1Response</returns>
        EzsigndocumentApplyEzsigntemplateV1Response EzsigndocumentApplyEzsigntemplateV1 (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request);

        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <returns>ApiResponse of EzsigndocumentApplyEzsigntemplateV1Response</returns>
        ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> EzsigndocumentApplyEzsigntemplateV1WithHttpInfo (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request);
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <returns>EzsigndocumentCreateObjectV1Response</returns>
        EzsigndocumentCreateObjectV1Response EzsigndocumentCreateObjectV1 (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request);

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV1Response</returns>
        ApiResponse<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1WithHttpInfo (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request);
        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>EzsigndocumentDeleteObjectV1Response</returns>
        EzsigndocumentDeleteObjectV1Response EzsigndocumentDeleteObjectV1 (int pkiEzsigndocumentID);

        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>ApiResponse of EzsigndocumentDeleteObjectV1Response</returns>
        ApiResponse<EzsigndocumentDeleteObjectV1Response> EzsigndocumentDeleteObjectV1WithHttpInfo (int pkiEzsigndocumentID);
        /// <summary>
        /// Modify an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <returns>EzsigndocumentEditObjectV1Response</returns>
        EzsigndocumentEditObjectV1Response EzsigndocumentEditObjectV1 (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request);

        /// <summary>
        /// Modify an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigndocumentEditObjectV1Response</returns>
        ApiResponse<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1WithHttpInfo (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request);
        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <returns>EzsigndocumentGetDownloadUrlV1Response</returns>
        EzsigndocumentGetDownloadUrlV1Response EzsigndocumentGetDownloadUrlV1 (int pkiEzsigndocumentID, string eDocumentType);

        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <returns>ApiResponse of EzsigndocumentGetDownloadUrlV1Response</returns>
        ApiResponse<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1WithHttpInfo (int pkiEzsigndocumentID, string eDocumentType);
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns></returns>
        void EzsigndocumentGetObjectGetChildrenV1 (int pkiEzsigndocumentID);

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EzsigndocumentGetObjectGetChildrenV1WithHttpInfo (int pkiEzsigndocumentID);
        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>EzsigndocumentGetObjectV1Response</returns>
        EzsigndocumentGetObjectV1Response EzsigndocumentGetObjectV1 (int pkiEzsigndocumentID);

        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>ApiResponse of EzsigndocumentGetObjectV1Response</returns>
        ApiResponse<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1WithHttpInfo (int pkiEzsigndocumentID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentApplyEzsigntemplateV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentApplyEzsigntemplateV1Response> EzsigndocumentApplyEzsigntemplateV1Async (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument.
        /// </summary>
        /// <remarks>
        /// This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentApplyEzsigntemplateV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response>> EzsigndocumentApplyEzsigntemplateV1WithHttpInfoAsync (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentCreateObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1Async (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Ezsigndocument
        /// </summary>
        /// <remarks>
        /// The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentCreateObjectV1Response>> EzsigndocumentCreateObjectV1WithHttpInfoAsync (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentDeleteObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentDeleteObjectV1Response> EzsigndocumentDeleteObjectV1Async (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentDeleteObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentDeleteObjectV1Response>> EzsigndocumentDeleteObjectV1WithHttpInfoAsync (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Modify an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentEditObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1Async (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Modify an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentEditObjectV1Response>> EzsigndocumentEditObjectV1WithHttpInfoAsync (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentGetDownloadUrlV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1Async (int pkiEzsigndocumentID, string eDocumentType, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a URL to download documents.
        /// </summary>
        /// <remarks>
        /// This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetDownloadUrlV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetDownloadUrlV1Response>> EzsigndocumentGetDownloadUrlV1WithHttpInfoAsync (int pkiEzsigndocumentID, string eDocumentType, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EzsigndocumentGetObjectGetChildrenV1Async (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EzsigndocumentGetObjectGetChildrenV1WithHttpInfoAsync (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentGetObjectV1Response</returns>
        System.Threading.Tasks.Task<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1Async (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve an existing Ezsigndocument
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetObjectV1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetObjectV1Response>> EzsigndocumentGetObjectV1WithHttpInfoAsync (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ObjectEzsigndocumentApi : IObjectEzsigndocumentApi
    {
        private eZmaxinc/eZmax-SDK-csharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigndocumentApi(String basePath)
        {
            this.Configuration = new eZmaxinc/eZmax-SDK-csharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class
        /// </summary>
        /// <returns></returns>
        public ObjectEzsigndocumentApi()
        {
            this.Configuration = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.Default;

            ExceptionFactory = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectEzsigndocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ObjectEzsigndocumentApi(eZmaxinc/eZmax-SDK-csharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = eZmaxinc/eZmax-SDK-csharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public eZmaxinc/eZmax-SDK-csharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public eZmaxinc/eZmax-SDK-csharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <returns>EzsigndocumentApplyEzsigntemplateV1Response</returns>
        public EzsigndocumentApplyEzsigntemplateV1Response EzsigndocumentApplyEzsigntemplateV1 (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request)
        {
             ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> localVarResponse = EzsigndocumentApplyEzsigntemplateV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <returns>ApiResponse of EzsigndocumentApplyEzsigntemplateV1Response</returns>
        public ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> EzsigndocumentApplyEzsigntemplateV1WithHttpInfo (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request)
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV1");
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
            if (ezsigndocumentApplyEzsigntemplateV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter
            if (ezsigndocumentApplyEzsigntemplateV1Request != null && ezsigndocumentApplyEzsigntemplateV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigndocumentApplyEzsigntemplateV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigndocumentApplyEzsigntemplateV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentApplyEzsigntemplateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentApplyEzsigntemplateV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentApplyEzsigntemplateV1Response)));
        }

        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentApplyEzsigntemplateV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentApplyEzsigntemplateV1Response> EzsigndocumentApplyEzsigntemplateV1Async (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response> localVarResponse = await EzsigndocumentApplyEzsigntemplateV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentApplyEzsigntemplateV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply an Ezsign Template to the Ezsigndocument. This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentApplyEzsigntemplateV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentApplyEzsigntemplateV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response>> EzsigndocumentApplyEzsigntemplateV1WithHttpInfoAsync (int pkiEzsigndocumentID, EzsigndocumentApplyEzsigntemplateV1Request ezsigndocumentApplyEzsigntemplateV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV1");
            // verify the required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' is set
            if (ezsigndocumentApplyEzsigntemplateV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigndocumentApplyEzsigntemplateV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentApplyEzsigntemplateV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter
            if (ezsigndocumentApplyEzsigntemplateV1Request != null && ezsigndocumentApplyEzsigntemplateV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigndocumentApplyEzsigntemplateV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigndocumentApplyEzsigntemplateV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentApplyEzsigntemplateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentApplyEzsigntemplateV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentApplyEzsigntemplateV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentApplyEzsigntemplateV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <returns>EzsigndocumentCreateObjectV1Response</returns>
        public EzsigndocumentCreateObjectV1Response EzsigndocumentCreateObjectV1 (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request)
        {
             ApiResponse<EzsigndocumentCreateObjectV1Response> localVarResponse = EzsigndocumentCreateObjectV1WithHttpInfo(ezsigndocumentCreateObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigndocumentCreateObjectV1Response</returns>
        public ApiResponse<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1WithHttpInfo (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request)
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
            if (ezsigndocumentCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV1");

            var localVarPath = "/1/object/ezsigndocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigndocumentCreateObjectV1Request != null && ezsigndocumentCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigndocumentCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigndocumentCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentCreateObjectV1Response)));
        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentCreateObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentCreateObjectV1Response> EzsigndocumentCreateObjectV1Async (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigndocumentCreateObjectV1Response> localVarResponse = await EzsigndocumentCreateObjectV1WithHttpInfoAsync(ezsigndocumentCreateObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Ezsigndocument The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ezsigndocumentCreateObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentCreateObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigndocumentCreateObjectV1Response>> EzsigndocumentCreateObjectV1WithHttpInfoAsync (List<EzsigndocumentCreateObjectV1Request> ezsigndocumentCreateObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ezsigndocumentCreateObjectV1Request' is set
            if (ezsigndocumentCreateObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigndocumentCreateObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentCreateObjectV1");

            var localVarPath = "/1/object/ezsigndocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ezsigndocumentCreateObjectV1Request != null && ezsigndocumentCreateObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigndocumentCreateObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigndocumentCreateObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentCreateObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentCreateObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentCreateObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentCreateObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>EzsigndocumentDeleteObjectV1Response</returns>
        public EzsigndocumentDeleteObjectV1Response EzsigndocumentDeleteObjectV1 (int pkiEzsigndocumentID)
        {
             ApiResponse<EzsigndocumentDeleteObjectV1Response> localVarResponse = EzsigndocumentDeleteObjectV1WithHttpInfo(pkiEzsigndocumentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>ApiResponse of EzsigndocumentDeleteObjectV1Response</returns>
        public ApiResponse<EzsigndocumentDeleteObjectV1Response> EzsigndocumentDeleteObjectV1WithHttpInfo (int pkiEzsigndocumentID)
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentDeleteObjectV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentDeleteObjectV1Response)));
        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentDeleteObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentDeleteObjectV1Response> EzsigndocumentDeleteObjectV1Async (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigndocumentDeleteObjectV1Response> localVarResponse = await EzsigndocumentDeleteObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentDeleteObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigndocumentDeleteObjectV1Response>> EzsigndocumentDeleteObjectV1WithHttpInfoAsync (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentDeleteObjectV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentDeleteObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentDeleteObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentDeleteObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentDeleteObjectV1Response)));
        }

        /// <summary>
        /// Modify an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <returns>EzsigndocumentEditObjectV1Response</returns>
        public EzsigndocumentEditObjectV1Response EzsigndocumentEditObjectV1 (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request)
        {
             ApiResponse<EzsigndocumentEditObjectV1Response> localVarResponse = EzsigndocumentEditObjectV1WithHttpInfo(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <returns>ApiResponse of EzsigndocumentEditObjectV1Response</returns>
        public ApiResponse<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1WithHttpInfo (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request)
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentEditObjectV1");
            // verify the required parameter 'ezsigndocumentEditObjectV1Request' is set
            if (ezsigndocumentEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigndocumentEditObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditObjectV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter
            if (ezsigndocumentEditObjectV1Request != null && ezsigndocumentEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigndocumentEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigndocumentEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentEditObjectV1Response)));
        }

        /// <summary>
        /// Modify an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentEditObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentEditObjectV1Response> EzsigndocumentEditObjectV1Async (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigndocumentEditObjectV1Response> localVarResponse = await EzsigndocumentEditObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, ezsigndocumentEditObjectV1Request, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="ezsigndocumentEditObjectV1Request"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentEditObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigndocumentEditObjectV1Response>> EzsigndocumentEditObjectV1WithHttpInfoAsync (int pkiEzsigndocumentID, EzsigndocumentEditObjectV1Request ezsigndocumentEditObjectV1Request, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentEditObjectV1");
            // verify the required parameter 'ezsigndocumentEditObjectV1Request' is set
            if (ezsigndocumentEditObjectV1Request == null)
                throw new ApiException(400, "Missing required parameter 'ezsigndocumentEditObjectV1Request' when calling ObjectEzsigndocumentApi->EzsigndocumentEditObjectV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter
            if (ezsigndocumentEditObjectV1Request != null && ezsigndocumentEditObjectV1Request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ezsigndocumentEditObjectV1Request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ezsigndocumentEditObjectV1Request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentEditObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentEditObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentEditObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentEditObjectV1Response)));
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <returns>EzsigndocumentGetDownloadUrlV1Response</returns>
        public EzsigndocumentGetDownloadUrlV1Response EzsigndocumentGetDownloadUrlV1 (int pkiEzsigndocumentID, string eDocumentType)
        {
             ApiResponse<EzsigndocumentGetDownloadUrlV1Response> localVarResponse = EzsigndocumentGetDownloadUrlV1WithHttpInfo(pkiEzsigndocumentID, eDocumentType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <returns>ApiResponse of EzsigndocumentGetDownloadUrlV1Response</returns>
        public ApiResponse<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1WithHttpInfo (int pkiEzsigndocumentID, string eDocumentType)
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentGetDownloadUrlV1");
            // verify the required parameter 'eDocumentType' is set
            if (eDocumentType == null)
                throw new ApiException(400, "Missing required parameter 'eDocumentType' when calling ObjectEzsigndocumentApi->EzsigndocumentGetDownloadUrlV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter
            if (eDocumentType != null) localVarPathParams.Add("eDocumentType", this.Configuration.ApiClient.ParameterToString(eDocumentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentGetDownloadUrlV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentGetDownloadUrlV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentGetDownloadUrlV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentGetDownloadUrlV1Response)));
        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentGetDownloadUrlV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetDownloadUrlV1Response> EzsigndocumentGetDownloadUrlV1Async (int pkiEzsigndocumentID, string eDocumentType, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigndocumentGetDownloadUrlV1Response> localVarResponse = await EzsigndocumentGetDownloadUrlV1WithHttpInfoAsync(pkiEzsigndocumentID, eDocumentType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a URL to download documents. This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="eDocumentType">The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetDownloadUrlV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetDownloadUrlV1Response>> EzsigndocumentGetDownloadUrlV1WithHttpInfoAsync (int pkiEzsigndocumentID, string eDocumentType, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentGetDownloadUrlV1");
            // verify the required parameter 'eDocumentType' is set
            if (eDocumentType == null)
                throw new ApiException(400, "Missing required parameter 'eDocumentType' when calling ObjectEzsigndocumentApi->EzsigndocumentGetDownloadUrlV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter
            if (eDocumentType != null) localVarPathParams.Add("eDocumentType", this.Configuration.ApiClient.ParameterToString(eDocumentType)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentGetDownloadUrlV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentGetDownloadUrlV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentGetDownloadUrlV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentGetDownloadUrlV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns></returns>
        public void EzsigndocumentGetObjectGetChildrenV1 (int pkiEzsigndocumentID)
        {
             EzsigndocumentGetObjectGetChildrenV1WithHttpInfo(pkiEzsigndocumentID);
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EzsigndocumentGetObjectGetChildrenV1WithHttpInfo (int pkiEzsigndocumentID)
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentGetObjectGetChildrenV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getChildren";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentGetObjectGetChildrenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EzsigndocumentGetObjectGetChildrenV1Async (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             await EzsigndocumentGetObjectGetChildrenV1WithHttpInfoAsync(pkiEzsigndocumentID, cancellationToken);

        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument&#39;s children IDs 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EzsigndocumentGetObjectGetChildrenV1WithHttpInfoAsync (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentGetObjectGetChildrenV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}/getChildren";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentGetObjectGetChildrenV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>EzsigndocumentGetObjectV1Response</returns>
        public EzsigndocumentGetObjectV1Response EzsigndocumentGetObjectV1 (int pkiEzsigndocumentID)
        {
             ApiResponse<EzsigndocumentGetObjectV1Response> localVarResponse = EzsigndocumentGetObjectV1WithHttpInfo(pkiEzsigndocumentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <returns>ApiResponse of EzsigndocumentGetObjectV1Response</returns>
        public ApiResponse<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1WithHttpInfo (int pkiEzsigndocumentID)
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentGetObjectV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentGetObjectV1Response)));
        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EzsigndocumentGetObjectV1Response</returns>
        public async System.Threading.Tasks.Task<EzsigndocumentGetObjectV1Response> EzsigndocumentGetObjectV1Async (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EzsigndocumentGetObjectV1Response> localVarResponse = await EzsigndocumentGetObjectV1WithHttpInfoAsync(pkiEzsigndocumentID, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an existing Ezsigndocument 
        /// </summary>
        /// <exception cref="eZmaxinc/eZmax-SDK-csharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pkiEzsigndocumentID">The unique ID of the Ezsigndocument</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EzsigndocumentGetObjectV1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EzsigndocumentGetObjectV1Response>> EzsigndocumentGetObjectV1WithHttpInfoAsync (int pkiEzsigndocumentID, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pkiEzsigndocumentID' is set
            if (pkiEzsigndocumentID == null)
                throw new ApiException(400, "Missing required parameter 'pkiEzsigndocumentID' when calling ObjectEzsigndocumentApi->EzsigndocumentGetObjectV1");

            var localVarPath = "/1/object/ezsigndocument/{pkiEzsigndocumentID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pkiEzsigndocumentID != null) localVarPathParams.Add("pkiEzsigndocumentID", this.Configuration.ApiClient.ParameterToString(pkiEzsigndocumentID)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EzsigndocumentGetObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EzsigndocumentGetObjectV1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EzsigndocumentGetObjectV1Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EzsigndocumentGetObjectV1Response)));
        }

    }
}
